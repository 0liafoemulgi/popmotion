/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var popmotion = __webpack_require__(1),
	    UIref = window.ui;
	
	popmotion.noConflict = function () {
	    window.ui = UIref;
	};
	
	window.ui = window.popmotion = popmotion;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdsb2JhbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7SUFDbEMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7O0FBRXRCLFNBQVMsQ0FBQyxVQUFVLEdBQUcsWUFBWTtBQUMvQixVQUFNLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQztDQUNyQixDQUFDOztBQUVGLE1BQU0sQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMiLCJmaWxlIjoiZ2xvYmFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHBvcG1vdGlvbiA9IHJlcXVpcmUoJy4vbW9kdWxlLmpzJyksXG4gICAgVUlyZWYgPSB3aW5kb3cudWk7XG5cbnBvcG1vdGlvbi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHdpbmRvdy51aSA9IFVJcmVmO1xufTtcblxud2luZG93LnVpID0gd2luZG93LnBvcG1vdGlvbiA9IHBvcG1vdGlvbjsiXX0=

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var popmotion = __webpack_require__(2);
	
	/*
	    Add optional custom value type support
	*/
	popmotion.addValueType({
	    alpha: __webpack_require__(3),
	    angle: __webpack_require__(4),
	    px: __webpack_require__(5),
	    hsl: __webpack_require__(6),
	    rgb: __webpack_require__(7),
	    hex: __webpack_require__(8),
	    color: __webpack_require__(9),
	    positions: __webpack_require__(10),
	    dimensions: __webpack_require__(11),
	    scale: __webpack_require__(12),
	    shadow: __webpack_require__(13),
	    complex: __webpack_require__(14)
	});
	
	/*
	    Predefined roles
	*/
	popmotion.attr = __webpack_require__(15);
	popmotion.css = __webpack_require__(16);
	popmotion.svg = __webpack_require__(17);
	popmotion.drawPath = __webpack_require__(18);
	
	module.exports = popmotion;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBRWIsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQzs7Ozs7QUFBQyxBQUt4QyxTQUFTLENBQUMsWUFBWSxDQUFDO0FBQ25CLFNBQUssRUFBRSxPQUFPLENBQUMsc0JBQXNCLENBQUM7QUFDdEMsU0FBSyxFQUFFLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztBQUN0QyxNQUFFLEVBQUUsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQ2hDLE9BQUcsRUFBRSxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDbEMsT0FBRyxFQUFFLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUNsQyxPQUFHLEVBQUUsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBQ2xDLFNBQUssRUFBRSxPQUFPLENBQUMsc0JBQXNCLENBQUM7QUFDdEMsYUFBUyxFQUFFLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztBQUM5QyxjQUFVLEVBQUUsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQ2hELFNBQUssRUFBRSxPQUFPLENBQUMsc0JBQXNCLENBQUM7QUFDdEMsVUFBTSxFQUFFLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUN4QyxXQUFPLEVBQUUsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0NBQzdDLENBQUM7Ozs7O0FBQUMsQUFLSCxTQUFTLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ25ELFNBQVMsQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDaEQsU0FBUyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUNoRCxTQUFTLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDOztBQUUzRCxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyIsImZpbGUiOiJtb2R1bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHBvcG1vdGlvbiA9IHJlcXVpcmUoJy4uL3BvcG1vdGlvbicpO1xuXG4vKlxuICAgIEFkZCBvcHRpb25hbCBjdXN0b20gdmFsdWUgdHlwZSBzdXBwb3J0XG4qL1xucG9wbW90aW9uLmFkZFZhbHVlVHlwZSh7XG4gICAgYWxwaGE6IHJlcXVpcmUoJy4uL3ZhbHVlLXR5cGVzL2FscGhhJyksXG4gICAgYW5nbGU6IHJlcXVpcmUoJy4uL3ZhbHVlLXR5cGVzL2FuZ2xlJyksXG4gICAgcHg6IHJlcXVpcmUoJy4uL3ZhbHVlLXR5cGVzL3B4JyksXG4gICAgaHNsOiByZXF1aXJlKCcuLi92YWx1ZS10eXBlcy9oc2wnKSxcbiAgICByZ2I6IHJlcXVpcmUoJy4uL3ZhbHVlLXR5cGVzL3JnYicpLFxuICAgIGhleDogcmVxdWlyZSgnLi4vdmFsdWUtdHlwZXMvaGV4JyksXG4gICAgY29sb3I6IHJlcXVpcmUoJy4uL3ZhbHVlLXR5cGVzL2NvbG9yJyksXG4gICAgcG9zaXRpb25zOiByZXF1aXJlKCcuLi92YWx1ZS10eXBlcy9wb3NpdGlvbnMnKSxcbiAgICBkaW1lbnNpb25zOiByZXF1aXJlKCcuLi92YWx1ZS10eXBlcy9kaW1lbnNpb25zJyksXG4gICAgc2NhbGU6IHJlcXVpcmUoJy4uL3ZhbHVlLXR5cGVzL3NjYWxlJyksXG4gICAgc2hhZG93OiByZXF1aXJlKCcuLi92YWx1ZS10eXBlcy9zaGFkb3cnKSxcbiAgICBjb21wbGV4OiByZXF1aXJlKCcuLi92YWx1ZS10eXBlcy9jb21wbGV4Jylcbn0pO1xuXG4vKlxuICAgIFByZWRlZmluZWQgcm9sZXNcbiovXG5wb3Btb3Rpb24uYXR0ciA9IHJlcXVpcmUoJy4uL3JvbGVzL2F0dHIvYXR0clJvbGUnKTtcbnBvcG1vdGlvbi5jc3MgPSByZXF1aXJlKCcuLi9yb2xlcy9jc3MvY3NzUm9sZScpO1xucG9wbW90aW9uLnN2ZyA9IHJlcXVpcmUoJy4uL3JvbGVzL3N2Zy9zdmdSb2xlJyk7XG5wb3Btb3Rpb24uZHJhd1BhdGggPSByZXF1aXJlKCcuLi9yb2xlcy9wYXRoL2RyYXdQYXRoUm9sZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvcG1vdGlvbjsiXX0=

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var valueTypes = __webpack_require__(25),
	    Popmotion = {
	
	    Actor: __webpack_require__(26),
	
	    Sequence: __webpack_require__(27),
	
	    Input: __webpack_require__(28),
	
	    Iterator: __webpack_require__(29),
	
	    Process: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./process/Process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	
	    Easing: __webpack_require__(31),
	
	    Role: __webpack_require__(30),
	
	    Action: __webpack_require__(32),
	    Tween: __webpack_require__(33),
	    Simulate: __webpack_require__(34),
	    Track: __webpack_require__(35),
	
	    /*
	        Create an Iterator of Actors with selected dom elements
	    */
	    select: __webpack_require__(36),
	
	    ease: __webpack_require__(37),
	
	    /*
	        Modify properties of inbuilt easing function
	    */
	    modifyEase: __webpack_require__(38),
	
	    addValueType: function (types) {
	        valueTypes.extend(types);
	        return Popmotion;
	    },
	
	    calc: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./inc/calc\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    utils: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	};
	
	module.exports = Popmotion;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvcG1vdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztJQUU3QyxTQUFTLEdBQUc7O0FBRVIsU0FBSyxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUM7O0FBRS9CLFlBQVEsRUFBRSxPQUFPLENBQUMscUJBQXFCLENBQUM7O0FBRXhDLFNBQUssRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDOztBQUUvQixZQUFRLEVBQUUsT0FBTyxDQUFDLHFCQUFxQixDQUFDOztBQUV4QyxXQUFPLEVBQUUsT0FBTyxDQUFDLG1CQUFtQixDQUFDOztBQUVyQyxVQUFNLEVBQUUsT0FBTyxDQUFDLHdCQUF3QixDQUFDOztBQUV6QyxRQUFJLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQzs7QUFFN0IsVUFBTSxFQUFFLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztBQUNuQyxTQUFLLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQ2pDLFlBQVEsRUFBRSxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDdkMsU0FBSyxFQUFFLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQzs7Ozs7QUFLakMsVUFBTSxFQUFFLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQzs7QUFFckMsUUFBSSxFQUFFLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQzs7Ozs7QUFLOUMsY0FBVSxFQUFFLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQzs7QUFFbEQsZ0JBQVksRUFBRSxVQUFBLEtBQUssRUFBSTtBQUNuQixrQkFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixlQUFPLFNBQVMsQ0FBQztLQUNwQjs7QUFFRCxRQUFJLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUMzQixTQUFLLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQztDQUNoQyxDQUFDOztBQUVOLE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDIiwiZmlsZSI6InBvcG1vdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB2YWx1ZVR5cGVzID0gcmVxdWlyZSgnLi92YWx1ZS10eXBlcy9tYW5hZ2VyJyksXG5cbiAgICBQb3Btb3Rpb24gPSB7XG5cbiAgICAgICAgQWN0b3I6IHJlcXVpcmUoJy4vYWN0b3IvQWN0b3InKSxcblxuICAgICAgICBTZXF1ZW5jZTogcmVxdWlyZSgnLi9zZXF1ZW5jZS9TZXF1ZW5jZScpLFxuXG4gICAgICAgIElucHV0OiByZXF1aXJlKCcuL2lucHV0L0lucHV0JyksXG5cbiAgICAgICAgSXRlcmF0b3I6IHJlcXVpcmUoJy4vaXRlcmF0b3IvSXRlcmF0b3InKSxcblxuICAgICAgICBQcm9jZXNzOiByZXF1aXJlKCcuL3Byb2Nlc3MvUHJvY2VzcycpLFxuXG4gICAgICAgIEVhc2luZzogcmVxdWlyZSgnLi9hY3Rpb25zL3R3ZWVuL0Vhc2luZycpLFxuXG4gICAgICAgIFJvbGU6IHJlcXVpcmUoJy4vcm9sZXMvUm9sZScpLFxuXG4gICAgICAgIEFjdGlvbjogcmVxdWlyZSgnLi9hY3Rpb25zL0FjdGlvbicpLFxuICAgICAgICBUd2VlbjogcmVxdWlyZSgnLi9hY3Rpb25zL1R3ZWVuJyksXG4gICAgICAgIFNpbXVsYXRlOiByZXF1aXJlKCcuL2FjdGlvbnMvU2ltdWxhdGUnKSxcbiAgICAgICAgVHJhY2s6IHJlcXVpcmUoJy4vYWN0aW9ucy9UcmFjaycpLFxuXG4gICAgICAgIC8qXG4gICAgICAgICAgICBDcmVhdGUgYW4gSXRlcmF0b3Igb2YgQWN0b3JzIHdpdGggc2VsZWN0ZWQgZG9tIGVsZW1lbnRzXG4gICAgICAgICovXG4gICAgICAgIHNlbGVjdDogcmVxdWlyZSgnLi9pbmMvc2VsZWN0LWFjdG9yJyksXG5cbiAgICAgICAgZWFzZTogcmVxdWlyZSgnLi9hY3Rpb25zL3R3ZWVuL3ByZXNldC1lYXNpbmcnKSxcblxuICAgICAgICAvKlxuICAgICAgICAgICAgTW9kaWZ5IHByb3BlcnRpZXMgb2YgaW5idWlsdCBlYXNpbmcgZnVuY3Rpb25cbiAgICAgICAgKi9cbiAgICAgICAgbW9kaWZ5RWFzZTogcmVxdWlyZSgnLi9hY3Rpb25zL3R3ZWVuL21vZGlmeS1lYXNlJyksXG5cbiAgICAgICAgYWRkVmFsdWVUeXBlOiB0eXBlcyA9PiB7XG4gICAgICAgICAgICB2YWx1ZVR5cGVzLmV4dGVuZCh0eXBlcyk7XG4gICAgICAgICAgICByZXR1cm4gUG9wbW90aW9uO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhbGM6IHJlcXVpcmUoJy4vaW5jL2NhbGMnKSxcbiAgICAgICAgdXRpbHM6IHJlcXVpcmUoJy4vaW5jL3V0aWxzJylcbiAgICB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvcG1vdGlvbjsiXX0=

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = {
	    defaultProps: {
	        min: 0,
	        max: 1
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFscGhhLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNiLGdCQUFZLEVBQUU7QUFDVixXQUFHLEVBQUUsQ0FBQztBQUNOLFdBQUcsRUFBRSxDQUFDO0tBQ1Q7Q0FDSixDQUFDIiwiZmlsZSI6ImFscGhhLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgbWF4OiAxXG4gICAgfVxufTsiXX0=

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    defaultProps: {
	        unit: 'deg'
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ2xlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNiLGdCQUFZLEVBQUU7QUFDVixZQUFJLEVBQUUsS0FBSztLQUNkO0NBQ0osQ0FBQyIsImZpbGUiOiJhbmdsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICB1bml0OiAnZGVnJ1xuICAgIH1cbn07Il19

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    defaultProps: {
	        unit: 'px'
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNiLGdCQUFZLEVBQUU7QUFDVixZQUFJLEVBQUUsSUFBSTtLQUNiO0NBQ0osQ0FBQyIsImZpbGUiOiJweC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICB1bml0OiAncHgnXG4gICAgfVxufTsiXX0=

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var createDelimited = __webpack_require__(19),
	    getColorValues = __webpack_require__(20),
	    functionCreate = __webpack_require__(21),
	    defaultProps = __webpack_require__(22),
	    terms = __webpack_require__(23).hsl;
	
	module.exports = {
	
	    defaultProps: {
	        Hue: {
	            min: 0,
	            max: 360
	        },
	        Saturation: defaultProps.percent,
	        Lightness: defaultProps.percent,
	        Alpha: defaultProps.opacity
	    },
	
	    test: function (value) {
	        return value && value.indexOf('hsl') > -1;
	    },
	
	    split: function (value) {
	        return getColorValues(value, terms);
	    },
	
	    combine: function (values) {
	        return functionCreate(createDelimited(values, terms, ', ', 2), 'hsla');
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhzbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksZUFBZSxHQUFHLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQztJQUM1RCxjQUFjLEdBQUcsT0FBTyxDQUFDLGlDQUFpQyxDQUFDO0lBQzNELGNBQWMsR0FBRyxPQUFPLENBQUMsZ0NBQWdDLENBQUM7SUFDMUQsWUFBWSxHQUFHLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztJQUNsRCxLQUFLLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUMsR0FBRyxDQUFDOztBQUVqRCxNQUFNLENBQUMsT0FBTyxHQUFHOztBQUViLGdCQUFZLEVBQUU7QUFDVixXQUFHLEVBQUU7QUFDRCxlQUFHLEVBQUUsQ0FBQztBQUNOLGVBQUcsRUFBRSxHQUFHO1NBQ1g7QUFDRCxrQkFBVSxFQUFFLFlBQVksQ0FBQyxPQUFPO0FBQ2hDLGlCQUFTLEVBQUUsWUFBWSxDQUFDLE9BQU87QUFDL0IsYUFBSyxFQUFFLFlBQVksQ0FBQyxPQUFPO0tBQzlCOztBQUVELFFBQUksRUFBRSxVQUFBLEtBQUs7ZUFBSyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7S0FBQzs7QUFFbkQsU0FBSyxFQUFFLFVBQUEsS0FBSztlQUFJLGNBQWMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO0tBQUE7O0FBRTVDLFdBQU8sRUFBRSxVQUFBLE1BQU07ZUFBSSxjQUFjLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQztLQUFBO0NBQ3JGLENBQUMiLCJmaWxlIjoiaHNsLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyZWF0ZURlbGltaXRlZCA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2NyZWF0ZS1kZWxpbWl0ZWQnKSxcbiAgICBnZXRDb2xvclZhbHVlcyA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2dldC1jb2xvci12YWx1ZXMnKSxcbiAgICBmdW5jdGlvbkNyZWF0ZSA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2Z1bmN0aW9uLWNyZWF0ZScpLFxuICAgIGRlZmF1bHRQcm9wcyA9IHJlcXVpcmUoJy4vc2V0dGluZ3MvZGVmYXVsdC1wcm9wcycpLFxuICAgIHRlcm1zID0gcmVxdWlyZSgnLi9zZXR0aW5ncy9kaWN0aW9uYXJ5JykuaHNsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICBIdWU6IHtcbiAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgIG1heDogMzYwXG4gICAgICAgIH0sXG4gICAgICAgIFNhdHVyYXRpb246IGRlZmF1bHRQcm9wcy5wZXJjZW50LFxuICAgICAgICBMaWdodG5lc3M6IGRlZmF1bHRQcm9wcy5wZXJjZW50LFxuICAgICAgICBBbHBoYTogZGVmYXVsdFByb3BzLm9wYWNpdHlcbiAgICB9LFxuXG4gICAgdGVzdDogdmFsdWUgPT4gKHZhbHVlICYmIHZhbHVlLmluZGV4T2YoJ2hzbCcpID4gLTEpLFxuICAgIFxuICAgIHNwbGl0OiB2YWx1ZSA9PiBnZXRDb2xvclZhbHVlcyh2YWx1ZSwgdGVybXMpLFxuXG4gICAgY29tYmluZTogdmFsdWVzID0+IGZ1bmN0aW9uQ3JlYXRlKGNyZWF0ZURlbGltaXRlZCh2YWx1ZXMsIHRlcm1zLCAnLCAnLCAyKSwgJ2hzbGEnKVxufTsiXX0=

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var createDelimited = __webpack_require__(19),
	    getColorValues = __webpack_require__(20),
	    functionCreate = __webpack_require__(21),
	    defaultProps = __webpack_require__(22),
	    colorDefaults = defaultProps.color,
	    terms = __webpack_require__(23).colors;
	
	module.exports = {
	
	    defaultProps: {
	        Red: colorDefaults,
	        Green: colorDefaults,
	        Blue: colorDefaults,
	        Alpha: defaultProps.opacity
	    },
	
	    test: function (value) {
	        return value && value.indexOf('rgb') > -1;
	    },
	
	    split: function (value) {
	        return getColorValues(value, terms);
	    },
	
	    combine: function (values) {
	        return functionCreate(createDelimited(values, terms, ', ', 2), 'rgba');
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJnYi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksZUFBZSxHQUFHLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQztJQUM1RCxjQUFjLEdBQUcsT0FBTyxDQUFDLGlDQUFpQyxDQUFDO0lBQzNELGNBQWMsR0FBRyxPQUFPLENBQUMsZ0NBQWdDLENBQUM7SUFDMUQsWUFBWSxHQUFHLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztJQUNsRCxhQUFhLEdBQUcsWUFBWSxDQUFDLEtBQUs7SUFDbEMsS0FBSyxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQzs7QUFFcEQsTUFBTSxDQUFDLE9BQU8sR0FBRzs7QUFFYixnQkFBWSxFQUFFO0FBQ1YsV0FBRyxFQUFFLGFBQWE7QUFDbEIsYUFBSyxFQUFFLGFBQWE7QUFDcEIsWUFBSSxFQUFFLGFBQWE7QUFDbkIsYUFBSyxFQUFFLFlBQVksQ0FBQyxPQUFPO0tBQzlCOztBQUVELFFBQUksRUFBRSxVQUFBLEtBQUs7ZUFBSyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7S0FBQzs7QUFFbkQsU0FBSyxFQUFFLFVBQUEsS0FBSztlQUFJLGNBQWMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO0tBQUE7O0FBRTVDLFdBQU8sRUFBRSxVQUFBLE1BQU07ZUFBSSxjQUFjLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQztLQUFBO0NBQ3JGLENBQUMiLCJmaWxlIjoicmdiLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyZWF0ZURlbGltaXRlZCA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2NyZWF0ZS1kZWxpbWl0ZWQnKSxcbiAgICBnZXRDb2xvclZhbHVlcyA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2dldC1jb2xvci12YWx1ZXMnKSxcbiAgICBmdW5jdGlvbkNyZWF0ZSA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2Z1bmN0aW9uLWNyZWF0ZScpLFxuICAgIGRlZmF1bHRQcm9wcyA9IHJlcXVpcmUoJy4vc2V0dGluZ3MvZGVmYXVsdC1wcm9wcycpLFxuICAgIGNvbG9yRGVmYXVsdHMgPSBkZWZhdWx0UHJvcHMuY29sb3IsXG4gICAgdGVybXMgPSByZXF1aXJlKCcuL3NldHRpbmdzL2RpY3Rpb25hcnknKS5jb2xvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICAgIFJlZDogY29sb3JEZWZhdWx0cyxcbiAgICAgICAgR3JlZW46IGNvbG9yRGVmYXVsdHMsXG4gICAgICAgIEJsdWU6IGNvbG9yRGVmYXVsdHMsXG4gICAgICAgIEFscGhhOiBkZWZhdWx0UHJvcHMub3BhY2l0eVxuICAgIH0sXG5cbiAgICB0ZXN0OiB2YWx1ZSA9PiAodmFsdWUgJiYgdmFsdWUuaW5kZXhPZigncmdiJykgPiAtMSksXG4gICAgXG4gICAgc3BsaXQ6IHZhbHVlID0+IGdldENvbG9yVmFsdWVzKHZhbHVlLCB0ZXJtcyksXG5cbiAgICBjb21iaW5lOiB2YWx1ZXMgPT4gZnVuY3Rpb25DcmVhdGUoY3JlYXRlRGVsaW1pdGVkKHZhbHVlcywgdGVybXMsICcsICcsIDIpLCAncmdiYScpXG59OyJdfQ==

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var rgb = __webpack_require__(7);
	
	module.exports = {
	
	    defaultProps: rgb.defaultProps,
	
	    test: function (value) {
	        return value && value.indexOf('#') > -1;
	    },
	
	    split: function (value) {
	        var r, g, b;
	
	        // If we have 6 characters, ie #FF0000
	        if (value.length > 4) {
	            r = value.substr(1, 2);
	            g = value.substr(3, 2);
	            b = value.substr(5, 2);
	
	            // Or we have 3 characters, ie #F00
	        } else {
	                r = value.substr(1, 1);
	                g = value.substr(2, 1);
	                b = value.substr(3, 1);
	                r += r;
	                g += g;
	                b += b;
	            }
	
	        return {
	            Red: parseInt(r, 16),
	            Green: parseInt(g, 16),
	            Blue: parseInt(b, 16),
	            Alpha: 1
	        };
	    },
	
	    combine: function (values) {
	        return rgb.combine(values);
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQzs7QUFFM0IsTUFBTSxDQUFDLE9BQU8sR0FBRzs7QUFFYixnQkFBWSxFQUFFLEdBQUcsQ0FBQyxZQUFZOztBQUU5QixRQUFJLEVBQUUsVUFBQSxLQUFLO2VBQUssS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQUM7O0FBRWpELFNBQUssRUFBRSxVQUFBLEtBQUssRUFBSTtBQUNaLFlBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDOzs7QUFBQyxBQUdaLFlBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDbEIsYUFBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLGFBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN2QixhQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDOzs7QUFBQyxTQUcxQixNQUFNO0FBQ0gsaUJBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN2QixpQkFBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLGlCQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdkIsaUJBQUMsSUFBSSxDQUFDLENBQUM7QUFDUCxpQkFBQyxJQUFJLENBQUMsQ0FBQztBQUNQLGlCQUFDLElBQUksQ0FBQyxDQUFDO2FBQ1Y7O0FBRUQsZUFBTztBQUNILGVBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUNwQixpQkFBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ3RCLGdCQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDckIsaUJBQUssRUFBRSxDQUFDO1NBQ1gsQ0FBQztLQUNMOztBQUVELFdBQU8sRUFBRSxVQUFBLE1BQU07ZUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztLQUFBO0NBQ3pDLENBQUMiLCJmaWxlIjoiaGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJnYiA9IHJlcXVpcmUoJy4vcmdiJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgZGVmYXVsdFByb3BzOiByZ2IuZGVmYXVsdFByb3BzLFxuXG4gICAgdGVzdDogdmFsdWUgPT4gKHZhbHVlICYmIHZhbHVlLmluZGV4T2YoJyMnKSA+IC0xKSxcbiAgICBcbiAgICBzcGxpdDogdmFsdWUgPT4ge1xuICAgICAgICB2YXIgciwgZywgYjtcblxuICAgICAgICAvLyBJZiB3ZSBoYXZlIDYgY2hhcmFjdGVycywgaWUgI0ZGMDAwMFxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgciA9IHZhbHVlLnN1YnN0cigxLCAyKTtcbiAgICAgICAgICAgIGcgPSB2YWx1ZS5zdWJzdHIoMywgMik7XG4gICAgICAgICAgICBiID0gdmFsdWUuc3Vic3RyKDUsIDIpO1xuXG4gICAgICAgIC8vIE9yIHdlIGhhdmUgMyBjaGFyYWN0ZXJzLCBpZSAjRjAwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByID0gdmFsdWUuc3Vic3RyKDEsIDEpO1xuICAgICAgICAgICAgZyA9IHZhbHVlLnN1YnN0cigyLCAxKTtcbiAgICAgICAgICAgIGIgPSB2YWx1ZS5zdWJzdHIoMywgMSk7XG4gICAgICAgICAgICByICs9IHI7XG4gICAgICAgICAgICBnICs9IGc7XG4gICAgICAgICAgICBiICs9IGI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgUmVkOiBwYXJzZUludChyLCAxNiksXG4gICAgICAgICAgICBHcmVlbjogcGFyc2VJbnQoZywgMTYpLFxuICAgICAgICAgICAgQmx1ZTogcGFyc2VJbnQoYiwgMTYpLFxuICAgICAgICAgICAgQWxwaGE6IDFcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgY29tYmluZTogdmFsdWVzID0+IHJnYi5jb21iaW5lKHZhbHVlcylcbn07Il19

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    rgb = __webpack_require__(7),
	    hsl = __webpack_require__(6),
	    hex = __webpack_require__(8),
	    supported = [rgb, hsl, hex],
	    numSupported = 3,
	    runSupported = function (method, value) {
	    for (var i = 0; i < numSupported; i++) {
	        if (supported[i].test(value)) {
	            return supported[i][method](value);
	        }
	    }
	};
	
	module.exports = {
	    defaultProps: utils.merge(rgb.defaultProps, hsl.defaultProps),
	
	    test: function (value) {
	        return rgb.test(value) || hex.test(value) || hsl.test(value);
	    },
	
	    split: function (value) {
	        return runSupported('split', value);
	    },
	
	    combine: function (values) {
	        return values.Red !== undefined ? rgb.combine(values) : hsl.combine(values);
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUMvQixHQUFHLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUN0QixHQUFHLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUN0QixHQUFHLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUN0QixTQUFTLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUMzQixZQUFZLEdBQUcsQ0FBQztJQUVoQixZQUFZLEdBQUcsVUFBVSxNQUFNLEVBQUUsS0FBSyxFQUFFO0FBQ3BDLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDbkMsWUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzFCLG1CQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QztLQUNKO0NBQ0osQ0FBQzs7QUFFTixNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2IsZ0JBQVksRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQzs7QUFFN0QsUUFBSSxFQUFFLFVBQUEsS0FBSztlQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUFBOztBQUVwRSxTQUFLLEVBQUUsVUFBQSxLQUFLO2VBQUksWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7S0FBQTs7QUFFNUMsV0FBTyxFQUFFLFVBQUEsTUFBTTtlQUFJLEFBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxTQUFTLEdBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztLQUFBO0NBQzVGLENBQUMiLCJmaWxlIjoiY29sb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi9pbmMvdXRpbHMnKSxcbiAgICByZ2IgPSByZXF1aXJlKCcuL3JnYicpLFxuICAgIGhzbCA9IHJlcXVpcmUoJy4vaHNsJyksXG4gICAgaGV4ID0gcmVxdWlyZSgnLi9oZXgnKSxcbiAgICBzdXBwb3J0ZWQgPSBbcmdiLCBoc2wsIGhleF0sXG4gICAgbnVtU3VwcG9ydGVkID0gMyxcblxuICAgIHJ1blN1cHBvcnRlZCA9IGZ1bmN0aW9uIChtZXRob2QsIHZhbHVlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtU3VwcG9ydGVkOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChzdXBwb3J0ZWRbaV0udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwcG9ydGVkW2ldW21ldGhvZF0odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZGVmYXVsdFByb3BzOiB1dGlscy5tZXJnZShyZ2IuZGVmYXVsdFByb3BzLCBoc2wuZGVmYXVsdFByb3BzKSxcblxuICAgIHRlc3Q6IHZhbHVlID0+IHJnYi50ZXN0KHZhbHVlKSB8fCBoZXgudGVzdCh2YWx1ZSkgfHwgaHNsLnRlc3QodmFsdWUpLFxuXG4gICAgc3BsaXQ6IHZhbHVlID0+IHJ1blN1cHBvcnRlZCgnc3BsaXQnLCB2YWx1ZSksXG5cbiAgICBjb21iaW5lOiB2YWx1ZXMgPT4gKHZhbHVlcy5SZWQgIT09IHVuZGVmaW5lZCkgPyByZ2IuY29tYmluZSh2YWx1ZXMpIDogaHNsLmNvbWJpbmUodmFsdWVzKVxufTsiXX0=

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var createDelimited = __webpack_require__(19),
	    pxDefaults = __webpack_require__(5).defaultProps,
	    splitSpaceDelimited = __webpack_require__(24),
	    terms = __webpack_require__(23).positions;
	
	module.exports = {
	
	    defaultProps: pxDefaults,
	
	    /*
	        Split positions in format "X Y Z"
	        
	        @param [string]: Position values
	            "20% 30% 0" -> {20%, 30%, 0}
	            "20% 30%" -> {20%, 30%}
	            "20%" -> {20%, 20%}
	    */
	    split: function (value) {
	        var positions = splitSpaceDelimited(value),
	            numPositions = positions.length,
	            splitValue = {
	            X: positions[0],
	            Y: numPositions > 1 ? positions[1] : positions[0]
	        };
	
	        if (numPositions > 2) {
	            splitValue.Z = positions[2];
	        }
	
	        return splitValue;
	    },
	
	    combine: function (values) {
	        return createDelimited(values, terms, ' ');
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc2l0aW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksZUFBZSxHQUFHLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQztJQUM1RCxVQUFVLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVk7SUFDekMsbUJBQW1CLEdBQUcsT0FBTyxDQUFDLHNDQUFzQyxDQUFDO0lBQ3JFLEtBQUssR0FBRyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxTQUFTLENBQUM7O0FBRXZELE1BQU0sQ0FBQyxPQUFPLEdBQUc7O0FBRWIsZ0JBQVksRUFBRSxVQUFVOzs7Ozs7Ozs7O0FBVXhCLFNBQUssRUFBRSxVQUFBLEtBQUssRUFBSTtBQUNaLFlBQUksU0FBUyxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQztZQUN0QyxZQUFZLEdBQUcsU0FBUyxDQUFDLE1BQU07WUFDL0IsVUFBVSxHQUFHO0FBQ1QsYUFBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDZixhQUFDLEVBQUUsQUFBQyxZQUFZLEdBQUcsQ0FBQyxHQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQ3RELENBQUM7O0FBRU4sWUFBSSxZQUFZLEdBQUcsQ0FBQyxFQUFFO0FBQ2xCLHNCQUFVLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMvQjs7QUFFRCxlQUFPLFVBQVUsQ0FBQztLQUNyQjs7QUFFRCxXQUFPLEVBQUUsVUFBQSxNQUFNO2VBQUksZUFBZSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDO0tBQUE7Q0FDekQsQ0FBQyIsImZpbGUiOiJwb3NpdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3JlYXRlRGVsaW1pdGVkID0gcmVxdWlyZSgnLi9tYW5pcHVsYXRvcnMvY3JlYXRlLWRlbGltaXRlZCcpLFxuICAgIHB4RGVmYXVsdHMgPSByZXF1aXJlKCcuL3B4JykuZGVmYXVsdFByb3BzLFxuICAgIHNwbGl0U3BhY2VEZWxpbWl0ZWQgPSByZXF1aXJlKCcuL21hbmlwdWxhdG9ycy9zcGxpdC1zcGFjZS1kZWxpbWl0ZWQnKSxcbiAgICB0ZXJtcyA9IHJlcXVpcmUoJy4vc2V0dGluZ3MvZGljdGlvbmFyeScpLnBvc2l0aW9ucztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBkZWZhdWx0UHJvcHM6IHB4RGVmYXVsdHMsXG4gICAgICAgIFxuICAgIC8qXG4gICAgICAgIFNwbGl0IHBvc2l0aW9ucyBpbiBmb3JtYXQgXCJYIFkgWlwiXG4gICAgICAgIFxuICAgICAgICBAcGFyYW0gW3N0cmluZ106IFBvc2l0aW9uIHZhbHVlc1xuICAgICAgICAgICAgXCIyMCUgMzAlIDBcIiAtPiB7MjAlLCAzMCUsIDB9XG4gICAgICAgICAgICBcIjIwJSAzMCVcIiAtPiB7MjAlLCAzMCV9XG4gICAgICAgICAgICBcIjIwJVwiIC0+IHsyMCUsIDIwJX1cbiAgICAqL1xuICAgIHNwbGl0OiB2YWx1ZSA9PiB7XG4gICAgICAgIHZhciBwb3NpdGlvbnMgPSBzcGxpdFNwYWNlRGVsaW1pdGVkKHZhbHVlKSxcbiAgICAgICAgICAgIG51bVBvc2l0aW9ucyA9IHBvc2l0aW9ucy5sZW5ndGgsXG4gICAgICAgICAgICBzcGxpdFZhbHVlID0ge1xuICAgICAgICAgICAgICAgIFg6IHBvc2l0aW9uc1swXSxcbiAgICAgICAgICAgICAgICBZOiAobnVtUG9zaXRpb25zID4gMSkgPyBwb3NpdGlvbnNbMV0gOiBwb3NpdGlvbnNbMF1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgaWYgKG51bVBvc2l0aW9ucyA+IDIpIHtcbiAgICAgICAgICAgIHNwbGl0VmFsdWUuWiA9IHBvc2l0aW9uc1syXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzcGxpdFZhbHVlO1xuICAgIH0sXG5cbiAgICBjb21iaW5lOiB2YWx1ZXMgPT4gY3JlYXRlRGVsaW1pdGVkKHZhbHVlcywgdGVybXMsICcgJylcbn07Il19

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var terms = __webpack_require__(23).dimensions,
	    pxDefaults = __webpack_require__(5).defaultProps,
	    createDelimited = __webpack_require__(19),
	    splitSpaceDelimited = __webpack_require__(24);
	
	module.exports = {
	
	    defaultProps: pxDefaults,
	
	    /*
	        Split dimensions in format "Top Right Bottom Left"
	        
	        @param [string]: Dimension values
	            "20px 0 30px 40px" -> {20px, 0, 30px, 40px}
	            "20px 0 30px" -> {20px, 0, 30px, 0}
	            "20px 0" -> {20px, 0, 20px, 0}
	            "20px" -> {20px, 20px, 20px, 20px}
	        
	        @return [object]: Object with T/R/B/L metrics
	    */
	    split: function (value) {
	        var dimensions = splitSpaceDelimited(value),
	            numDimensions = dimensions.length,
	            jumpBack = numDimensions !== 1 ? 2 : 1,
	            i = 0,
	            j = 0,
	            splitValue = {};
	
	        for (; i < 4; i++) {
	            splitValue[terms[i]] = dimensions[j];
	
	            // Jump back (to start) counter if we've reached the end of our values
	            j++;
	            j = j === numDimensions ? j - jumpBack : j;
	        }
	
	        return splitValue;
	    },
	
	    combine: function (values) {
	        return createDelimited(values, terms, ' ');
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpbWVuc2lvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxVQUFVO0lBQ25ELFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWTtJQUN6QyxlQUFlLEdBQUcsT0FBTyxDQUFDLGlDQUFpQyxDQUFDO0lBQzVELG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDOztBQUUxRSxNQUFNLENBQUMsT0FBTyxHQUFHOztBQUViLGdCQUFZLEVBQUUsVUFBVTs7Ozs7Ozs7Ozs7OztBQWF4QixTQUFLLEVBQUUsVUFBQSxLQUFLLEVBQUk7QUFDWixZQUFJLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUM7WUFDdkMsYUFBYSxHQUFHLFVBQVUsQ0FBQyxNQUFNO1lBQ2pDLFFBQVEsR0FBRyxBQUFDLGFBQWEsS0FBSyxDQUFDLEdBQUksQ0FBQyxHQUFHLENBQUM7WUFDeEMsQ0FBQyxHQUFHLENBQUM7WUFDTCxDQUFDLEdBQUcsQ0FBQztZQUNMLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRXBCLGVBQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNmLHNCQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQzs7O0FBQUMsQUFHckMsYUFBQyxFQUFFLENBQUM7QUFDSixhQUFDLEdBQUcsQUFBQyxDQUFDLEtBQUssYUFBYSxHQUFJLENBQUMsR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1NBQ2hEOztBQUVELGVBQU8sVUFBVSxDQUFDO0tBQ3JCOztBQUVELFdBQU8sRUFBRSxVQUFBLE1BQU07ZUFBSSxlQUFlLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUM7S0FBQTtDQUN6RCxDQUFDIiwiZmlsZSI6ImRpbWVuc2lvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdGVybXMgPSByZXF1aXJlKCcuL3NldHRpbmdzL2RpY3Rpb25hcnknKS5kaW1lbnNpb25zLFxuICAgIHB4RGVmYXVsdHMgPSByZXF1aXJlKCcuL3B4JykuZGVmYXVsdFByb3BzLFxuICAgIGNyZWF0ZURlbGltaXRlZCA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2NyZWF0ZS1kZWxpbWl0ZWQnKSxcbiAgICBzcGxpdFNwYWNlRGVsaW1pdGVkID0gcmVxdWlyZSgnLi9tYW5pcHVsYXRvcnMvc3BsaXQtc3BhY2UtZGVsaW1pdGVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgZGVmYXVsdFByb3BzOiBweERlZmF1bHRzLFxuICAgIFxuICAgIC8qXG4gICAgICAgIFNwbGl0IGRpbWVuc2lvbnMgaW4gZm9ybWF0IFwiVG9wIFJpZ2h0IEJvdHRvbSBMZWZ0XCJcbiAgICAgICAgXG4gICAgICAgIEBwYXJhbSBbc3RyaW5nXTogRGltZW5zaW9uIHZhbHVlc1xuICAgICAgICAgICAgXCIyMHB4IDAgMzBweCA0MHB4XCIgLT4gezIwcHgsIDAsIDMwcHgsIDQwcHh9XG4gICAgICAgICAgICBcIjIwcHggMCAzMHB4XCIgLT4gezIwcHgsIDAsIDMwcHgsIDB9XG4gICAgICAgICAgICBcIjIwcHggMFwiIC0+IHsyMHB4LCAwLCAyMHB4LCAwfVxuICAgICAgICAgICAgXCIyMHB4XCIgLT4gezIwcHgsIDIwcHgsIDIwcHgsIDIwcHh9XG4gICAgICAgIFxuICAgICAgICBAcmV0dXJuIFtvYmplY3RdOiBPYmplY3Qgd2l0aCBUL1IvQi9MIG1ldHJpY3NcbiAgICAqL1xuICAgIHNwbGl0OiB2YWx1ZSA9PiB7XG4gICAgICAgIHZhciBkaW1lbnNpb25zID0gc3BsaXRTcGFjZURlbGltaXRlZCh2YWx1ZSksXG4gICAgICAgICAgICBudW1EaW1lbnNpb25zID0gZGltZW5zaW9ucy5sZW5ndGgsXG4gICAgICAgICAgICBqdW1wQmFjayA9IChudW1EaW1lbnNpb25zICE9PSAxKSA/IDIgOiAxLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBqID0gMCxcbiAgICAgICAgICAgIHNwbGl0VmFsdWUgPSB7fTtcblxuICAgICAgICBmb3IgKDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgc3BsaXRWYWx1ZVt0ZXJtc1tpXV0gPSBkaW1lbnNpb25zW2pdO1xuXG4gICAgICAgICAgICAvLyBKdW1wIGJhY2sgKHRvIHN0YXJ0KSBjb3VudGVyIGlmIHdlJ3ZlIHJlYWNoZWQgdGhlIGVuZCBvZiBvdXIgdmFsdWVzXG4gICAgICAgICAgICBqKys7XG4gICAgICAgICAgICBqID0gKGogPT09IG51bURpbWVuc2lvbnMpID8gaiAtIGp1bXBCYWNrIDogajtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzcGxpdFZhbHVlO1xuICAgIH0sXG5cbiAgICBjb21iaW5lOiB2YWx1ZXMgPT4gY3JlYXRlRGVsaW1pdGVkKHZhbHVlcywgdGVybXMsICcgJylcbn07Il19

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = {
	    defaultProps: {
	        init: 1
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjYWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNiLGdCQUFZLEVBQUU7QUFDVixZQUFJLEVBQUUsQ0FBQztLQUNWO0NBQ0osQ0FBQyIsImZpbGUiOiJzY2FsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICBpbml0OiAxXG4gICAgfVxufTsiXX0=

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var color = __webpack_require__(9),
	    utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    pxDefaults = __webpack_require__(5).defaultProps,
	    terms = __webpack_require__(23).shadow,
	    splitSpaceDelimited = __webpack_require__(24),
	    createDelimited = __webpack_require__(19),
	    shadowTerms = terms.slice(0, 4);
	
	module.exports = {
	
	    defaultProps: utils.merge(color.defaultProps, {
	        X: pxDefaults,
	        Y: pxDefaults,
	        Radius: pxDefaults,
	        Spread: pxDefaults
	    }),
	
	    /*
	        Split shadow properties "X Y Radius Spread Color"
	        
	        @param [string]: Shadow property
	        @return [object]
	    */
	    split: function (value) {
	        var bits = splitSpaceDelimited(value),
	            numBits = bits.length,
	            hasReachedColor = false,
	            colorProp = '',
	            thisBit,
	            i = 0,
	            splitValue = {};
	
	        for (; i < numBits; i++) {
	            thisBit = bits[i];
	
	            // If we've reached the color property, append to color string
	            if (hasReachedColor || color.test(thisBit)) {
	                hasReachedColor = true;
	                colorProp += thisBit;
	            } else {
	                splitValue[terms[i]] = thisBit;
	            }
	        }
	
	        return utils.merge(splitValue, color.split(colorProp));
	    },
	
	    combine: function (values) {
	        return createDelimited(values, shadowTerms, ' ') + color.combine(values);
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYWRvdy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7SUFDMUIsS0FBSyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFDL0IsVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZO0lBQ3pDLEtBQUssR0FBRyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxNQUFNO0lBQy9DLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQztJQUNyRSxlQUFlLEdBQUcsT0FBTyxDQUFDLGlDQUFpQyxDQUFDO0lBQzVELFdBQVcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQzs7QUFFbkMsTUFBTSxDQUFDLE9BQU8sR0FBRzs7QUFFYixnQkFBWSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRTtBQUMxQyxTQUFDLEVBQUUsVUFBVTtBQUNiLFNBQUMsRUFBRSxVQUFVO0FBQ2IsY0FBTSxFQUFFLFVBQVU7QUFDbEIsY0FBTSxFQUFFLFVBQVU7S0FDckIsQ0FBQzs7Ozs7Ozs7QUFRRixTQUFLLEVBQUUsVUFBQSxLQUFLLEVBQUk7QUFDWixZQUFJLElBQUksR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUM7WUFDakMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNO1lBQ3JCLGVBQWUsR0FBRyxLQUFLO1lBQ3ZCLFNBQVMsR0FBRyxFQUFFO1lBQ2QsT0FBTztZQUNQLENBQUMsR0FBRyxDQUFDO1lBQ0wsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFcEIsZUFBTyxDQUFDLEdBQUcsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3JCLG1CQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQzs7O0FBQUMsQUFHbEIsZ0JBQUksZUFBZSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDeEMsK0JBQWUsR0FBRyxJQUFJLENBQUM7QUFDdkIseUJBQVMsSUFBSSxPQUFPLENBQUM7YUFFeEIsTUFBTTtBQUNILDBCQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO2FBQ2xDO1NBQ0o7O0FBRUQsZUFBTyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDMUQ7O0FBRUQsV0FBTyxFQUFFLFVBQUEsTUFBTTtlQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0tBQUE7Q0FDdkYsQ0FBQyIsImZpbGUiOiJzaGFkb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29sb3IgPSByZXF1aXJlKCcuL2NvbG9yJyksXG4gICAgdXRpbHMgPSByZXF1aXJlKCcuLi9pbmMvdXRpbHMnKSxcbiAgICBweERlZmF1bHRzID0gcmVxdWlyZSgnLi9weCcpLmRlZmF1bHRQcm9wcyxcbiAgICB0ZXJtcyA9IHJlcXVpcmUoJy4vc2V0dGluZ3MvZGljdGlvbmFyeScpLnNoYWRvdyxcbiAgICBzcGxpdFNwYWNlRGVsaW1pdGVkID0gcmVxdWlyZSgnLi9tYW5pcHVsYXRvcnMvc3BsaXQtc3BhY2UtZGVsaW1pdGVkJyksXG4gICAgY3JlYXRlRGVsaW1pdGVkID0gcmVxdWlyZSgnLi9tYW5pcHVsYXRvcnMvY3JlYXRlLWRlbGltaXRlZCcpLFxuICAgIHNoYWRvd1Rlcm1zID0gdGVybXMuc2xpY2UoMCw0KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBkZWZhdWx0UHJvcHM6IHV0aWxzLm1lcmdlKGNvbG9yLmRlZmF1bHRQcm9wcywge1xuICAgICAgICBYOiBweERlZmF1bHRzLFxuICAgICAgICBZOiBweERlZmF1bHRzLFxuICAgICAgICBSYWRpdXM6IHB4RGVmYXVsdHMsXG4gICAgICAgIFNwcmVhZDogcHhEZWZhdWx0c1xuICAgIH0pLFxuXG4gICAgLypcbiAgICAgICAgU3BsaXQgc2hhZG93IHByb3BlcnRpZXMgXCJYIFkgUmFkaXVzIFNwcmVhZCBDb2xvclwiXG4gICAgICAgIFxuICAgICAgICBAcGFyYW0gW3N0cmluZ106IFNoYWRvdyBwcm9wZXJ0eVxuICAgICAgICBAcmV0dXJuIFtvYmplY3RdXG4gICAgKi9cbiAgICBzcGxpdDogdmFsdWUgPT4ge1xuICAgICAgICB2YXIgYml0cyA9IHNwbGl0U3BhY2VEZWxpbWl0ZWQodmFsdWUpLFxuICAgICAgICAgICAgbnVtQml0cyA9IGJpdHMubGVuZ3RoLFxuICAgICAgICAgICAgaGFzUmVhY2hlZENvbG9yID0gZmFsc2UsXG4gICAgICAgICAgICBjb2xvclByb3AgPSAnJyxcbiAgICAgICAgICAgIHRoaXNCaXQsXG4gICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgIHNwbGl0VmFsdWUgPSB7fTtcblxuICAgICAgICBmb3IgKDsgaSA8IG51bUJpdHM7IGkrKykge1xuICAgICAgICAgICAgdGhpc0JpdCA9IGJpdHNbaV07XG5cbiAgICAgICAgICAgIC8vIElmIHdlJ3ZlIHJlYWNoZWQgdGhlIGNvbG9yIHByb3BlcnR5LCBhcHBlbmQgdG8gY29sb3Igc3RyaW5nXG4gICAgICAgICAgICBpZiAoaGFzUmVhY2hlZENvbG9yIHx8IGNvbG9yLnRlc3QodGhpc0JpdCkpIHtcbiAgICAgICAgICAgICAgICBoYXNSZWFjaGVkQ29sb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbG9yUHJvcCArPSB0aGlzQml0O1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNwbGl0VmFsdWVbdGVybXNbaV1dID0gdGhpc0JpdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHNwbGl0VmFsdWUsIGNvbG9yLnNwbGl0KGNvbG9yUHJvcCkpO1xuICAgIH0sXG5cbiAgICBjb21iaW5lOiB2YWx1ZXMgPT4gY3JlYXRlRGVsaW1pdGVkKHZhbHVlcywgc2hhZG93VGVybXMsICcgJykgKyBjb2xvci5jb21iaW5lKHZhbHVlcylcbn07Il19

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    each = utils.each,
	    floatRegex = /(-)?(\d[\d\.]*)/g,
	    generateToken = function (key) {
	    return '${' + key + '}';
	};
	
	module.exports = {
	    test: function (value) {
	        var matches = value.match(floatRegex);
	        return utils.isArray(matches) && matches.length > 1;
	    },
	
	    template: function (value) {
	        var counter = 0;
	        return value.replace(floatRegex, function () {
	            return generateToken(counter++);
	        });
	    },
	
	    split: function (value) {
	        var splitValue = {},
	            matches = value.match(floatRegex),
	            numMatches = matches.length;
	
	        for (var i = 0; i < numMatches; i++) {
	            splitValue[i] = matches[i];
	        }
	
	        return splitValue;
	    },
	
	    combine: function (values, template) {
	        var combinedValue = template;
	
	        each(values, function (key, value) {
	            combinedValue = combinedValue.replace(generateToken(key), value);
	        });
	
	        return combinedValue;
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBsZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDO0lBQy9CLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSTtJQUNqQixVQUFVLEdBQUcsa0JBQWtCO0lBRS9CLGFBQWEsR0FBRyxVQUFVLEdBQUcsRUFBRTtBQUMzQixXQUFPLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0NBQzNCLENBQUM7O0FBRU4sTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNiLFFBQUksRUFBRSxVQUFVLEtBQUssRUFBRTtBQUNuQixZQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3RDLGVBQVEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBRTtLQUN6RDs7QUFFRCxZQUFRLEVBQUUsVUFBVSxLQUFLLEVBQUU7QUFDdkIsWUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLGVBQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUU7bUJBQU0sYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQUEsQ0FBQyxDQUFDO0tBQ3BFOztBQUVELFNBQUssRUFBRSxVQUFVLEtBQUssRUFBRTtBQUNwQixZQUFJLFVBQVUsR0FBRyxFQUFFO1lBQ2YsT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO1lBQ2pDLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDOztBQUVoQyxhQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ2pDLHNCQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzlCOztBQUVELGVBQU8sVUFBVSxDQUFDO0tBQ3JCOztBQUVELFdBQU8sRUFBRSxVQUFVLE1BQU0sRUFBRSxRQUFRLEVBQUU7QUFDakMsWUFBSSxhQUFhLEdBQUcsUUFBUSxDQUFDOztBQUU3QixZQUFJLENBQUMsTUFBTSxFQUFFLFVBQUMsR0FBRyxFQUFFLEtBQUssRUFBSztBQUN6Qix5QkFBYSxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3BFLENBQUMsQ0FBQzs7QUFFSCxlQUFPLGFBQWEsQ0FBQztLQUN4QjtDQUNKLENBQUMiLCJmaWxlIjoiY29tcGxleC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB1dGlscyA9IHJlcXVpcmUoJy4uL2luYy91dGlscycpLFxuICAgIGVhY2ggPSB1dGlscy5lYWNoLFxuICAgIGZsb2F0UmVnZXggPSAvKC0pPyhcXGRbXFxkXFwuXSopL2csXG5cbiAgICBnZW5lcmF0ZVRva2VuID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gJyR7JyArIGtleSArICd9JztcbiAgICB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICB0ZXN0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSB2YWx1ZS5tYXRjaChmbG9hdFJlZ2V4KTtcbiAgICAgICAgcmV0dXJuICh1dGlscy5pc0FycmF5KG1hdGNoZXMpICYmIG1hdGNoZXMubGVuZ3RoID4gMSk7XG4gICAgfSxcblxuICAgIHRlbXBsYXRlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShmbG9hdFJlZ2V4LCAoKSA9PiBnZW5lcmF0ZVRva2VuKGNvdW50ZXIrKykpO1xuICAgIH0sXG5cbiAgICBzcGxpdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBzcGxpdFZhbHVlID0ge30sXG4gICAgICAgICAgICBtYXRjaGVzID0gdmFsdWUubWF0Y2goZmxvYXRSZWdleCksXG4gICAgICAgICAgICBudW1NYXRjaGVzID0gbWF0Y2hlcy5sZW5ndGg7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bU1hdGNoZXM7IGkrKykge1xuICAgICAgICAgICAgc3BsaXRWYWx1ZVtpXSA9IG1hdGNoZXNbaV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3BsaXRWYWx1ZTtcbiAgICB9LFxuXG4gICAgY29tYmluZTogZnVuY3Rpb24gKHZhbHVlcywgdGVtcGxhdGUpIHtcbiAgICAgICAgdmFyIGNvbWJpbmVkVmFsdWUgPSB0ZW1wbGF0ZTtcblxuICAgICAgICBlYWNoKHZhbHVlcywgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgIGNvbWJpbmVkVmFsdWUgPSBjb21iaW5lZFZhbHVlLnJlcGxhY2UoZ2VuZXJhdGVUb2tlbihrZXkpLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjb21iaW5lZFZhbHVlO1xuICAgIH1cbn07Il19

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var Role = __webpack_require__(30);
	var each = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).each;
	
	var attrRole = new Role({
	    update: function (state) {
	        var actor = this;
	
	        each(state, function (key, value) {
	            attrRole.set(actor.element, key, value);
	        });
	    },
	
	    get: function (element, key) {
	        return element.getAttribute(key);
	    },
	
	    set: function (element, key, value) {
	        element.setAttribute(key, value);
	    }
	});
	
	module.exports = attrRole;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF0dHJSb2xlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFFYixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDOUIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDOztBQUUzQyxJQUFJLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQztBQUNwQixVQUFNLEVBQUUsVUFBVSxLQUFLLEVBQUU7QUFDckIsWUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDOztBQUVqQixZQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUM5QixvQkFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMzQyxDQUFDLENBQUM7S0FDTjs7QUFFRCxPQUFHLEVBQUUsVUFBVSxPQUFPLEVBQUUsR0FBRyxFQUFFO0FBQ3pCLGVBQU8sT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNwQzs7QUFFRCxPQUFHLEVBQUUsVUFBVSxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUNoQyxlQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNwQztDQUNKLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyIsImZpbGUiOiJhdHRyUm9sZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgUm9sZSA9IHJlcXVpcmUoJy4uL1JvbGUnKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi4vLi4vaW5jL3V0aWxzJykuZWFjaDtcblxudmFyIGF0dHJSb2xlID0gbmV3IFJvbGUoe1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgZWFjaChzdGF0ZSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGF0dHJSb2xlLnNldChhY3Rvci5lbGVtZW50LCBrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIGdldDogZnVuY3Rpb24gKGVsZW1lbnQsIGtleSkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICB9LFxuXG4gICAgc2V0OiBmdW5jdGlvbiAoZWxlbWVudCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBhdHRyUm9sZTtcblxuIl19

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var Role = __webpack_require__(30);
	var build = __webpack_require__(39);
	
	var prefixes = ['Webkit', 'Moz', 'O', 'ms', ''];
	var numPrefixes = prefixes.length;
	var propertyNameCache = {};
	var testElement;
	
	/*
	    Test style property for prefixed version
	    
	    @param [string]: Style property
	    @return [string]: Cached property name
	*/
	var testPrefix = function (key) {
	    testElement = testElement || document.createElement('div');
	
	    if (propertyNameCache[key] === false) {
	        return false;
	    } else {
	        propertyNameCache[key] = false;
	    }
	
	    for (var i = 0; i < numPrefixes; i++) {
	        var prefix = prefixes[i],
	            prefixed = prefix === '' ? key : prefix + key.charAt(0).toUpperCase() + key.slice(1);
	
	        if (prefixed in testElement.style) {
	            propertyNameCache[key] = prefixed;
	        }
	    }
	
	    return propertyNameCache[key];
	};
	
	var cssRole = new Role({
	    _map: __webpack_require__(40),
	    _typeMap: __webpack_require__(41),
	
	    init: function (actor) {
	        actor._cssCache = {};
	    },
	
	    update: function (state, actor) {
	        cssRole(actor.element, build(state, actor._cssCache));
	    },
	
	    get: function (element, key) {
	        key = propertyNameCache[key] || testPrefix(key);
	
	        if (key) {
	            return window.getComputedStyle(element, null)[key];
	        }
	    },
	
	    set: function (element, key, value) {
	        key = propertyNameCache[key] || testPrefix(key);
	
	        if (key) {
	            element.style[key] = value;
	        }
	    }
	
	});
	
	module.exports = cssRole;
	//# sourceMappingURL=data:application/json;base64,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bnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSb2xlID0gcmVxdWlyZSgnLi4vUm9sZScpO1xudmFyIGJ1aWxkID0gcmVxdWlyZSgnLi9idWlsZCcpO1xuXG52YXIgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsJ01veicsJ08nLCdtcycsICcnXTtcbnZhciBudW1QcmVmaXhlcyA9IHByZWZpeGVzLmxlbmd0aDtcbnZhciBwcm9wZXJ0eU5hbWVDYWNoZSA9IHt9O1xudmFyIHRlc3RFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBcbi8qXG4gICAgVGVzdCBzdHlsZSBwcm9wZXJ0eSBmb3IgcHJlZml4ZWQgdmVyc2lvblxuICAgIFxuICAgIEBwYXJhbSBbc3RyaW5nXTogU3R5bGUgcHJvcGVydHlcbiAgICBAcmV0dXJuIFtzdHJpbmddOiBDYWNoZWQgcHJvcGVydHkgbmFtZVxuKi9cbnZhciB0ZXN0UHJlZml4ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHRlc3RFbGVtZW50ID0gdGVzdEVsZW1lbnQgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBpZiAocHJvcGVydHlOYW1lQ2FjaGVba2V5XSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3BlcnR5TmFtZUNhY2hlW2tleV0gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVByZWZpeGVzOyBpKyspIHtcbiAgICAgICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldLFxuICAgICAgICAgICAgcHJlZml4ZWQgPSAocHJlZml4ID09PSAnJykgPyBrZXkgOiBwcmVmaXggKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7XG5cbiAgICAgICAgaWYgKHByZWZpeGVkIGluIHRlc3RFbGVtZW50LnN0eWxlKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eU5hbWVDYWNoZVtrZXldID0gcHJlZml4ZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHByb3BlcnR5TmFtZUNhY2hlW2tleV07XG59O1xuXG52YXIgY3NzUm9sZSA9IG5ldyBSb2xlKHtcbiAgICBfbWFwOiByZXF1aXJlKCcuL21hcCcpLFxuICAgIF90eXBlTWFwOiByZXF1aXJlKCcuL3R5cGUtbWFwJyksXG5cbiAgICBpbml0OiBmdW5jdGlvbiAoYWN0b3IpIHtcbiAgICAgICAgYWN0b3IuX2Nzc0NhY2hlID0ge307XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKHN0YXRlLCBhY3Rvcikge1xuICAgICAgICBjc3NSb2xlKGFjdG9yLmVsZW1lbnQsIGJ1aWxkKHN0YXRlLCBhY3Rvci5fY3NzQ2FjaGUpKTtcbiAgICB9LFxuXG4gICAgZ2V0OiBmdW5jdGlvbiAoZWxlbWVudCwga2V5KSB7XG4gICAgICAgIGtleSA9IHByb3BlcnR5TmFtZUNhY2hlW2tleV0gfHwgdGVzdFByZWZpeChrZXkpO1xuXG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKVtrZXldO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNldDogZnVuY3Rpb24gKGVsZW1lbnQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAga2V5ID0gcHJvcGVydHlOYW1lQ2FjaGVba2V5XSB8fCB0ZXN0UHJlZml4KGtleSk7XG5cbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNzc1JvbGU7Il19

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var Role = __webpack_require__(30),
	    attrRole = __webpack_require__(15),
	    build = __webpack_require__(42),
	    each = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).each;
	
	module.exports = new Role({
	    _map: __webpack_require__(40),
	    _typeMap: __webpack_require__(43),
	
	    start: function () {
	        var boundingBox = this.element.getBBox(),
	            values = this.values,
	
	        // TODO: Support px
	        transformOriginX = values.transformOriginX ? values.transformOriginX.current : 50,
	            transformOriginY = values.transformOriginY ? values.transformOriginY.current : 50,
	            origin = {
	            x: boundingBox.width * (transformOriginX / 100) + boundingBox.x,
	            y: boundingBox.height * (transformOriginY / 100) + boundingBox.y
	        };
	
	        this.svgOrigin = origin;
	    },
	
	    update: function (state) {
	        var actor = this;
	        each(build(state, this.svgOrigin), function (key, value) {
	            attrRole.set(actor.element, key, value);
	        });
	    }
	
	});
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN2Z1JvbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUViLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7SUFDekIsUUFBUSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztJQUN0QyxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUMxQixJQUFJLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDOztBQUUzQyxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDO0FBQ3RCLFFBQUksRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQzNCLFlBQVEsRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDOztBQUUvQixTQUFLLEVBQUUsWUFBWTtBQUNmLFlBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ3BDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTTs7O0FBRXBCLHdCQUFnQixHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxHQUFHLEVBQUU7WUFDakYsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEdBQUcsRUFBRTtZQUNqRixNQUFNLEdBQUc7QUFDTCxhQUFDLEVBQUUsV0FBVyxDQUFDLEtBQUssSUFBSSxnQkFBZ0IsR0FBRyxHQUFHLENBQUEsQUFBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDO0FBQy9ELGFBQUMsRUFBRSxXQUFXLENBQUMsTUFBTSxJQUFJLGdCQUFnQixHQUFHLEdBQUcsQ0FBQSxBQUFDLEdBQUcsV0FBVyxDQUFDLENBQUM7U0FDbkUsQ0FBQzs7QUFFTixZQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztLQUMzQjs7QUFFRCxVQUFNLEVBQUUsVUFBVSxLQUFLLEVBQUU7QUFDckIsWUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLFlBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxVQUFVLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDckQsb0JBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0MsQ0FBQyxDQUFDO0tBQ047O0NBRUosQ0FBQyxDQUFDIiwiZmlsZSI6InN2Z1JvbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIFJvbGUgPSByZXF1aXJlKCcuLi9Sb2xlJyksXG4gICAgYXR0clJvbGUgPSByZXF1aXJlKCcuLi9hdHRyL2F0dHJSb2xlJyksXG4gICAgYnVpbGQgPSByZXF1aXJlKCcuL2J1aWxkJyksXG4gICAgZWFjaCA9IHJlcXVpcmUoJy4uLy4uL2luYy91dGlscycpLmVhY2g7XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFJvbGUoe1xuICAgIF9tYXA6IHJlcXVpcmUoJy4uL2Nzcy9tYXAnKSxcbiAgICBfdHlwZU1hcDogcmVxdWlyZSgnLi90eXBlLW1hcCcpLFxuXG4gICAgc3RhcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJvdW5kaW5nQm94ID0gdGhpcy5lbGVtZW50LmdldEJCb3goKSxcbiAgICAgICAgICAgIHZhbHVlcyA9IHRoaXMudmFsdWVzLFxuICAgICAgICAgICAgLy8gVE9ETzogU3VwcG9ydCBweFxuICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luWCA9IHZhbHVlcy50cmFuc2Zvcm1PcmlnaW5YID8gdmFsdWVzLnRyYW5zZm9ybU9yaWdpblguY3VycmVudCA6IDUwLFxuICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luWSA9IHZhbHVlcy50cmFuc2Zvcm1PcmlnaW5ZID8gdmFsdWVzLnRyYW5zZm9ybU9yaWdpblkuY3VycmVudCA6IDUwLFxuICAgICAgICAgICAgb3JpZ2luID0ge1xuICAgICAgICAgICAgICAgIHg6IGJvdW5kaW5nQm94LndpZHRoICogKHRyYW5zZm9ybU9yaWdpblggLyAxMDApICsgYm91bmRpbmdCb3gueCxcbiAgICAgICAgICAgICAgICB5OiBib3VuZGluZ0JveC5oZWlnaHQgKiAodHJhbnNmb3JtT3JpZ2luWSAvIDEwMCkgKyBib3VuZGluZ0JveC55XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc3ZnT3JpZ2luID0gb3JpZ2luO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgYWN0b3IgPSB0aGlzO1xuICAgICAgICBlYWNoKGJ1aWxkKHN0YXRlLCB0aGlzLnN2Z09yaWdpbiksIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBhdHRyUm9sZS5zZXQoYWN0b3IuZWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxufSk7Il19

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var Role = __webpack_require__(30);
	var attrRole = __webpack_require__(15);
	var each = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).each;
	
	/*
	    Convert percentage to pixels
	    
	    @param [number]: Percentage of total length
	    @param [number]: Total length
	*/
	var percentToPixels = function (percentage, length) {
	    return parseFloat(percentage) / 100 * length + 'px';
	};
	
	/*
	    Create styles
	    
	    @param [object]: SVG Path properties
	    @param [object]: Length of path
	    @returns [object]: Key/value pairs of valid CSS properties
	*/
	var createStyles = function (props, length) {
	    var hasDashArray = false,
	        dashArrayStyles = {
	        length: 0,
	        spacing: length + 'px'
	    },
	        styles = {};
	
	    each(props, function (key, value) {
	        key = SVGDrawPath._map[key] || key;
	
	        switch (key) {
	            case 'length':
	            case 'spacing':
	                hasDashArray = true;
	                dashArrayStyles[key] = percentToPixels(value, length);
	                break;
	            case 'offset':
	                styles['stroke-dashoffset'] = percentToPixels(-value, length);
	                break;
	            default:
	                styles[key] = value;
	        }
	    });
	
	    if (hasDashArray) {
	        styles['stroke-dasharray'] = dashArrayStyles.length + ' ' + dashArrayStyles.spacing;
	    }
	
	    return styles;
	};
	
	/*
	    Draw Path role
	*/
	var SVGDrawPath = new Role({
	    _map: __webpack_require__(44),
	
	    _typeMap: {
	        stroke: 'color',
	        d: 'complex'
	    },
	
	    init: function () {
	        this.pathLength = this.element.getTotalLength();
	    },
	
	    /*
	        Update `path` styles and if `element` is present, set
	        x, y and rotation
	    */
	    update: function (state) {
	        attrRole.update.call(this, createStyles(state, this.pathLength));
	    }
	});
	
	module.exports = SVGDrawPath;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRyYXdQYXRoUm9sZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBRWIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzlCLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzNDLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUk7Ozs7Ozs7O0FBQUMsQUFRM0MsSUFBSSxlQUFlLEdBQUcsVUFBVSxVQUFVLEVBQUUsTUFBTSxFQUFFO0FBQ2hELFdBQU8sQUFBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxHQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7Q0FDekQ7Ozs7Ozs7OztBQUFDLEFBU0YsSUFBSSxZQUFZLEdBQUcsVUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFO0FBQ3hDLFFBQUksWUFBWSxHQUFHLEtBQUs7UUFDcEIsZUFBZSxHQUFHO0FBQ2QsY0FBTSxFQUFFLENBQUM7QUFDVCxlQUFPLEVBQUUsTUFBTSxHQUFHLElBQUk7S0FDekI7UUFDRCxNQUFNLEdBQUcsRUFBRSxDQUFDOztBQUVoQixRQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUM5QixXQUFHLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUM7O0FBRW5DLGdCQUFRLEdBQUc7QUFDUCxpQkFBSyxRQUFRLENBQUM7QUFDZCxpQkFBSyxTQUFTO0FBQ1YsNEJBQVksR0FBRyxJQUFJLENBQUM7QUFDcEIsK0JBQWUsQ0FBQyxHQUFHLENBQUMsR0FBRyxlQUFlLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RELHNCQUFNO0FBQUEsQUFDVixpQkFBSyxRQUFRO0FBQ1Qsc0JBQU0sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM5RCxzQkFBTTtBQUFBLEFBQ1Y7QUFDSSxzQkFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUFBLFNBQzNCO0tBQ0osQ0FBQyxDQUFDOztBQUVILFFBQUksWUFBWSxFQUFFO0FBQ2QsY0FBTSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsZUFBZSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQztLQUN2Rjs7QUFFRCxXQUFPLE1BQU0sQ0FBQztDQUNqQjs7Ozs7QUFBQyxBQUtGLElBQUksV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDO0FBQ3ZCLFFBQUksRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDOztBQUV0QixZQUFRLEVBQUU7QUFDTixjQUFNLEVBQUUsT0FBTztBQUNmLFNBQUMsRUFBRSxTQUFTO0tBQ2Y7O0FBRUQsUUFBSSxFQUFFLFlBQVk7QUFDZCxZQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7S0FDbkQ7Ozs7OztBQU1ELFVBQU0sRUFBRSxVQUFVLEtBQUssRUFBRTtBQUNyQixnQkFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7S0FDcEU7Q0FDSixDQUFDLENBQUM7O0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMiLCJmaWxlIjoiZHJhd1BhdGhSb2xlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSb2xlID0gcmVxdWlyZSgnLi4vUm9sZScpO1xudmFyIGF0dHJSb2xlID0gcmVxdWlyZSgnLi4vYXR0ci9hdHRyUm9sZScpO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuLi8uLi9pbmMvdXRpbHMnKS5lYWNoO1xuXG4vKlxuICAgIENvbnZlcnQgcGVyY2VudGFnZSB0byBwaXhlbHNcbiAgICBcbiAgICBAcGFyYW0gW251bWJlcl06IFBlcmNlbnRhZ2Ugb2YgdG90YWwgbGVuZ3RoXG4gICAgQHBhcmFtIFtudW1iZXJdOiBUb3RhbCBsZW5ndGhcbiovXG52YXIgcGVyY2VudFRvUGl4ZWxzID0gZnVuY3Rpb24gKHBlcmNlbnRhZ2UsIGxlbmd0aCkge1xuICAgIHJldHVybiAocGFyc2VGbG9hdChwZXJjZW50YWdlKSAvIDEwMCkgKiBsZW5ndGggKyAncHgnO1xufTtcblxuLypcbiAgICBDcmVhdGUgc3R5bGVzXG4gICAgXG4gICAgQHBhcmFtIFtvYmplY3RdOiBTVkcgUGF0aCBwcm9wZXJ0aWVzXG4gICAgQHBhcmFtIFtvYmplY3RdOiBMZW5ndGggb2YgcGF0aFxuICAgIEByZXR1cm5zIFtvYmplY3RdOiBLZXkvdmFsdWUgcGFpcnMgb2YgdmFsaWQgQ1NTIHByb3BlcnRpZXNcbiovXG52YXIgY3JlYXRlU3R5bGVzID0gZnVuY3Rpb24gKHByb3BzLCBsZW5ndGgpIHtcbiAgICB2YXIgaGFzRGFzaEFycmF5ID0gZmFsc2UsXG4gICAgICAgIGRhc2hBcnJheVN0eWxlcyA9IHtcbiAgICAgICAgICAgIGxlbmd0aDogMCxcbiAgICAgICAgICAgIHNwYWNpbmc6IGxlbmd0aCArICdweCdcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGVzID0ge307XG5cbiAgICBlYWNoKHByb3BzLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBrZXkgPSBTVkdEcmF3UGF0aC5fbWFwW2tleV0gfHwga2V5O1xuXG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdsZW5ndGgnOlxuICAgICAgICAgICAgY2FzZSAnc3BhY2luZyc6XG4gICAgICAgICAgICAgICAgaGFzRGFzaEFycmF5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBkYXNoQXJyYXlTdHlsZXNba2V5XSA9IHBlcmNlbnRUb1BpeGVscyh2YWx1ZSwgbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ29mZnNldCc6XG4gICAgICAgICAgICAgICAgc3R5bGVzWydzdHJva2UtZGFzaG9mZnNldCddID0gcGVyY2VudFRvUGl4ZWxzKC12YWx1ZSwgbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgc3R5bGVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGhhc0Rhc2hBcnJheSkge1xuICAgICAgICBzdHlsZXNbJ3N0cm9rZS1kYXNoYXJyYXknXSA9IGRhc2hBcnJheVN0eWxlcy5sZW5ndGggKyAnICcgKyBkYXNoQXJyYXlTdHlsZXMuc3BhY2luZztcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGVzO1xufTtcblxuLypcbiAgICBEcmF3IFBhdGggcm9sZVxuKi9cbnZhciBTVkdEcmF3UGF0aCA9IG5ldyBSb2xlKHtcbiAgICBfbWFwOiByZXF1aXJlKCcuL21hcCcpLFxuXG4gICAgX3R5cGVNYXA6IHtcbiAgICAgICAgc3Ryb2tlOiAnY29sb3InLFxuICAgICAgICBkOiAnY29tcGxleCdcbiAgICB9LFxuXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBhdGhMZW5ndGggPSB0aGlzLmVsZW1lbnQuZ2V0VG90YWxMZW5ndGgoKTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgICAgVXBkYXRlIGBwYXRoYCBzdHlsZXMgYW5kIGlmIGBlbGVtZW50YCBpcyBwcmVzZW50LCBzZXRcbiAgICAgICAgeCwgeSBhbmQgcm90YXRpb25cbiAgICAqL1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIGF0dHJSb2xlLnVwZGF0ZS5jYWxsKHRoaXMsIGNyZWF0ZVN0eWxlcyhzdGF0ZSwgdGhpcy5wYXRoTGVuZ3RoKSk7XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU1ZHRHJhd1BhdGg7Il19

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = function (values, terms, delimiter, chop) {
	    var combined = '',
	        key = '',
	        i = 0,
	        numTerms = terms.length;
	
	    for (; i < numTerms; i++) {
	        key = terms[i];
	
	        if (values.hasOwnProperty(key)) {
	            combined += values[key] + delimiter;
	        }
	    }
	
	    if (chop) {
	        combined = combined.slice(0, -chop);
	    }
	
	    return combined;
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZS1kZWxpbWl0ZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFLO0FBQ2pELFFBQUksUUFBUSxHQUFHLEVBQUU7UUFDYixHQUFHLEdBQUcsRUFBRTtRQUNSLENBQUMsR0FBRyxDQUFDO1FBQ0wsUUFBUSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7O0FBRTVCLFdBQU8sQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN0QixXQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUVmLFlBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUM1QixvQkFBUSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUM7U0FDdkM7S0FDSjs7QUFFRCxRQUFJLElBQUksRUFBRTtBQUNOLGdCQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN2Qzs7QUFFRCxXQUFPLFFBQVEsQ0FBQztDQUNuQixDQUFDIiwiZmlsZSI6ImNyZWF0ZS1kZWxpbWl0ZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9ICh2YWx1ZXMsIHRlcm1zLCBkZWxpbWl0ZXIsIGNob3ApID0+IHtcbiAgICB2YXIgY29tYmluZWQgPSAnJyxcbiAgICAgICAga2V5ID0gJycsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBudW1UZXJtcyA9IHRlcm1zLmxlbmd0aDtcblxuICAgIGZvciAoOyBpIDwgbnVtVGVybXM7IGkrKykge1xuICAgICAgICBrZXkgPSB0ZXJtc1tpXTtcblxuICAgICAgICBpZiAodmFsdWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGNvbWJpbmVkICs9IHZhbHVlc1trZXldICsgZGVsaW1pdGVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNob3ApIHtcbiAgICAgICAgY29tYmluZWQgPSBjb21iaW5lZC5zbGljZSgwLCAtY2hvcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbWJpbmVkO1xufTsiXX0=

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var splitCommaDelimited = __webpack_require__(57),
	    functionBreak = __webpack_require__(58);
	
	module.exports = function (value, terms) {
	    var splitValue = {},
	        numTerms = terms.length,
	        colors = splitCommaDelimited(functionBreak(value)),
	        i = 0;
	
	    for (; i < numTerms; i++) {
	        splitValue[terms[i]] = colors[i] !== undefined ? colors[i] : 1;
	    }
	
	    return splitValue;
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldC1jb2xvci12YWx1ZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztJQUN4RCxhQUFhLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7O0FBRWhELE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFLO0FBQy9CLFFBQUksVUFBVSxHQUFHLEVBQUU7UUFDZixRQUFRLEdBQUcsS0FBSyxDQUFDLE1BQU07UUFDdkIsTUFBTSxHQUFHLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsRCxDQUFDLEdBQUcsQ0FBQyxDQUFDOztBQUVWLFdBQU8sQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN0QixrQkFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEFBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsR0FBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3BFOztBQUVELFdBQU8sVUFBVSxDQUFDO0NBQ3JCLENBQUMiLCJmaWxlIjoiZ2V0LWNvbG9yLXZhbHVlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBzcGxpdENvbW1hRGVsaW1pdGVkID0gcmVxdWlyZSgnLi9zcGxpdC1jb21tYS1kZWxpbWl0ZWQnKSxcbiAgICBmdW5jdGlvbkJyZWFrID0gcmVxdWlyZSgnLi9mdW5jdGlvbi1icmVhaycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICh2YWx1ZSwgdGVybXMpID0+IHtcbiAgICB2YXIgc3BsaXRWYWx1ZSA9IHt9LFxuICAgICAgICBudW1UZXJtcyA9IHRlcm1zLmxlbmd0aCxcbiAgICAgICAgY29sb3JzID0gc3BsaXRDb21tYURlbGltaXRlZChmdW5jdGlvbkJyZWFrKHZhbHVlKSksXG4gICAgICAgIGkgPSAwO1xuXG4gICAgZm9yICg7IGkgPCBudW1UZXJtczsgaSsrKSB7XG4gICAgICAgIHNwbGl0VmFsdWVbdGVybXNbaV1dID0gKGNvbG9yc1tpXSAhPT0gdW5kZWZpbmVkKSA/IGNvbG9yc1tpXSA6IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwbGl0VmFsdWU7XG59OyJdfQ==

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (value, prefix) {
	  return prefix + "(" + value + ")";
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZ1bmN0aW9uLWNyZWF0ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBQyxLQUFLLEVBQUUsTUFBTTtTQUFRLE1BQU0sU0FBSSxLQUFLO0NBQUcsQ0FBQyIsImZpbGUiOiJmdW5jdGlvbi1jcmVhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9ICh2YWx1ZSwgcHJlZml4KSA9PiBgJHtwcmVmaXh9KCR7dmFsdWV9KWA7Il19

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    color: {
	        min: 0,
	        max: 255,
	        round: true
	    },
	    opacity: {
	        min: 0,
	        max: 1
	    },
	    percent: {
	        min: 0,
	        max: 100,
	        unit: '%'
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmF1bHQtcHJvcHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2IsU0FBSyxFQUFFO0FBQ0gsV0FBRyxFQUFFLENBQUM7QUFDTixXQUFHLEVBQUUsR0FBRztBQUNSLGFBQUssRUFBRSxJQUFJO0tBQ2Q7QUFDRCxXQUFPLEVBQUU7QUFDTCxXQUFHLEVBQUUsQ0FBQztBQUNOLFdBQUcsRUFBRSxDQUFDO0tBQ1Q7QUFDRCxXQUFPLEVBQUU7QUFDTCxXQUFHLEVBQUUsQ0FBQztBQUNOLFdBQUcsRUFBRSxHQUFHO0FBQ1IsWUFBSSxFQUFFLEdBQUc7S0FDWjtDQUNKLENBQUMiLCJmaWxlIjoiZGVmYXVsdC1wcm9wcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNvbG9yOiB7XG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgbWF4OiAyNTUsXG4gICAgICAgIHJvdW5kOiB0cnVlXG4gICAgfSxcbiAgICBvcGFjaXR5OiB7XG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgbWF4OiAxXG4gICAgfSxcbiAgICBwZXJjZW50OiB7XG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgbWF4OiAxMDAsXG4gICAgICAgIHVuaXQ6ICclJ1xuICAgIH1cbn07XG4iXX0=

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var X = 'X',
	    Y = 'Y',
	    ALPHA = 'Alpha',
	    terms = {
	    colors: ['Red', 'Green', 'Blue', ALPHA],
	    positions: [X, Y, 'Z'],
	    dimensions: ['Top', 'Right', 'Bottom', 'Left'],
	    shadow: [X, Y, 'Radius', 'Spread', 'Color'],
	    hsl: ['Hue', 'Saturation', 'Lightness', ALPHA]
	};
	
	module.exports = terms;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpY3Rpb25hcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLENBQUMsR0FBRyxHQUFHO0lBQ1AsQ0FBQyxHQUFHLEdBQUc7SUFDUCxLQUFLLEdBQUcsT0FBTztJQUVmLEtBQUssR0FBRztBQUNKLFVBQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQztBQUN2QyxhQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztBQUN0QixjQUFVLEVBQUUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUM7QUFDOUMsVUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQztBQUMzQyxPQUFHLEVBQUUsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUM7Q0FDakQsQ0FBQzs7QUFFTixNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyIsImZpbGUiOiJkaWN0aW9uYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFggPSAnWCcsXG4gICAgWSA9ICdZJyxcbiAgICBBTFBIQSA9ICdBbHBoYScsXG5cbiAgICB0ZXJtcyA9IHtcbiAgICAgICAgY29sb3JzOiBbJ1JlZCcsICdHcmVlbicsICdCbHVlJywgQUxQSEFdLFxuICAgICAgICBwb3NpdGlvbnM6IFtYLCBZLCAnWiddLFxuICAgICAgICBkaW1lbnNpb25zOiBbJ1RvcCcsICdSaWdodCcsICdCb3R0b20nLCAnTGVmdCddLFxuICAgICAgICBzaGFkb3c6IFtYLCBZLCAnUmFkaXVzJywgJ1NwcmVhZCcsICdDb2xvciddLFxuICAgICAgICBoc2w6IFsnSHVlJywgJ1NhdHVyYXRpb24nLCAnTGlnaHRuZXNzJywgQUxQSEFdXG4gICAgfTtcblxubW9kdWxlLmV4cG9ydHMgPSB0ZXJtczsiXX0=

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isString = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).isString;
	
	module.exports = function (value) {
	  return isString(value) ? value.split(' ') : [value];
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwbGl0LXNwYWNlLWRlbGltaXRlZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQzs7QUFFckQsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFBLEtBQUs7U0FBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztDQUFBLENBQUMiLCJmaWxlIjoic3BsaXQtc3BhY2UtZGVsaW1pdGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaXNTdHJpbmcgPSByZXF1aXJlKCcuLi8uLi9pbmMvdXRpbHMnKS5pc1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSB2YWx1ZSA9PiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS5zcGxpdCgnICcpIDogW3ZhbHVlXTsiXX0=

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var each = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).each;
	
	module.exports = {
	    extend: function (types) {
	        var _this = this;
	
	        each(types, function (name, type) {
	            _this[name] = type;
	        });
	    },
	
	    defaultProps: function (typeName, key) {
	        var valueType = this[typeName],
	            defaultProps = valueType.defaultProps ? valueType.defaultProps[key] || valueType.defaultProps : {};
	
	        return defaultProps;
	    },
	
	    test: function (value) {
	        var type = false;
	
	        each(this, function (key, valueType) {
	            if (valueType.test && valueType.test(value)) {
	                type = key;
	                return false;
	            }
	        });
	
	        return type;
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDOztBQUUxQyxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2IsVUFBTSxFQUFFLFVBQVUsS0FBSyxFQUFFOzs7QUFDckIsWUFBSSxDQUFDLEtBQUssRUFBRSxVQUFDLElBQUksRUFBRSxJQUFJLEVBQUs7QUFDeEIsa0JBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ3JCLENBQUMsQ0FBQztLQUNOOztBQUVELGdCQUFZLEVBQUUsVUFBVSxRQUFRLEVBQUUsR0FBRyxFQUFFO0FBQ25DLFlBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDMUIsWUFBWSxHQUFHLEFBQUMsU0FBUyxDQUFDLFlBQVksR0FBSSxTQUFTLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDOztBQUV6RyxlQUFPLFlBQVksQ0FBQztLQUN2Qjs7QUFFRCxRQUFJLEVBQUUsVUFBVSxLQUFLLEVBQUU7QUFDbkIsWUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDOztBQUVqQixZQUFJLENBQUMsSUFBSSxFQUFFLFVBQUMsR0FBRyxFQUFFLFNBQVMsRUFBSztBQUMzQixnQkFBSSxTQUFTLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDekMsb0JBQUksR0FBRyxHQUFHLENBQUM7QUFDWCx1QkFBTyxLQUFLLENBQUM7YUFDaEI7U0FDSixDQUFDLENBQUM7O0FBRUgsZUFBTyxJQUFJLENBQUM7S0FDZjtDQUNKLENBQUMiLCJmaWxlIjoibWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGVhY2ggPSByZXF1aXJlKCcuLi9pbmMvdXRpbHMnKS5lYWNoO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBleHRlbmQ6IGZ1bmN0aW9uICh0eXBlcykge1xuICAgICAgICBlYWNoKHR5cGVzLCAobmFtZSwgdHlwZSkgPT4ge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHR5cGU7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBkZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICh0eXBlTmFtZSwga2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZVR5cGUgPSB0aGlzW3R5cGVOYW1lXSxcbiAgICAgICAgICAgIGRlZmF1bHRQcm9wcyA9ICh2YWx1ZVR5cGUuZGVmYXVsdFByb3BzKSA/IHZhbHVlVHlwZS5kZWZhdWx0UHJvcHNba2V5XSB8fCB2YWx1ZVR5cGUuZGVmYXVsdFByb3BzIDoge307XG5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRQcm9wcztcbiAgICB9LFxuXG4gICAgdGVzdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciB0eXBlID0gZmFsc2U7XG5cbiAgICAgICAgZWFjaCh0aGlzLCAoa2V5LCB2YWx1ZVR5cGUpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZVR5cGUudGVzdCAmJiB2YWx1ZVR5cGUudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0eXBlID0ga2V5O1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxufTtcbiJdfQ==

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Process = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../process/Process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    Queue = __webpack_require__(45),
	    utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    select = __webpack_require__(46),
	    valueOps = __webpack_require__(47),
	
	/*
	    Process methods
	*/
	update = __webpack_require__(48),
	    render = __webpack_require__(49),
	    postRender = __webpack_require__(50),
	
	/*
	    Role imports
	*/
	defaultRole = __webpack_require__(51),
	    cssRole = __webpack_require__(16),
	    svgRole = __webpack_require__(17),
	    drawPathRole = __webpack_require__(18),
	    Action = __webpack_require__(32),
	    each = utils.each;
	
	var Actor = (function () {
	
	    /*
	        @param [object]
	    */
	
	    function Actor() {
	        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	        _classCallCheck(this, Actor);
	
	        var props = utils.isString(opts) ? { element: opts } : opts;
	
	        this.values = {};
	        this.state = { values: {} };
	        this.queue = new Queue();
	        this.process = new Process({ update: update, render: render, postRender: postRender }, this);
	        this.activeActions = {};
	        this.numActive = 0;
	        this.actionCounter = 0;
	        this.activeValues = [];
	        this.activeParents = [];
	        this.isActive = false;
	
	        // Get actual elements if this is a selector
	        if (utils.isString(props.element)) {
	            props.element = select(props.element)[0];
	        }
	
	        this.assignRoles(props.element, props.as, true);
	        this.set(props);
	        this.initRoles();
	        this.sync();
	    }
	
	    /*
	        Set Actor properties and values
	         @param [object]
	        @returns [Actor]
	    */
	
	    Actor.prototype.set = function set(opts) {
	        var _this = this;
	
	        each(opts, function (key, value) {
	            if (key !== 'values' && key !== 'action') {
	                _this[key] = value;
	            }
	        });
	
	        if (opts && opts.values) {
	            this.values = valueOps.process(this.values, opts.values, opts, 'current', this);
	        }
	
	        // Check all active actions for any that can be removed
	        each(this.activeActions, function (id, action) {
	            var actionIsActive = false;
	
	            each(_this.values, function (key, value) {
	                actionIsActive = value.action === action ? true : actionIsActive;
	            });
	
	            if (!actionIsActive) {
	                _this.unbindAction(id);
	            }
	        });
	
	        return this;
	    };
	
	    /*
	        Bind Action-specific controls to Actor
	         @returns [Controls]
	    */
	
	    Actor.prototype.controls = function controls(action) {
	        var Controls = action.getControls();
	        return new Controls(this, action.getPlayable());
	    };
	
	    /*
	        Start a new Action
	         @param [Action || number]
	        @param [Input || event] (optional)
	        @param [boolean] (optional): defined `true` if we surpress making new queue
	        @returns [Controls]
	    */
	
	    Actor.prototype.start = function start(toSet, input) {
	        var actionExists = utils.isNum(toSet);
	        var action = actionExists ? this.getAction(toSet) : toSet.getPlayable();
	        var opts = action.getSet();
	        var surpressQueueClear = arguments[arguments.length - 1] === false;
	
	        opts.action = action;
	
	        this.set(opts);
	
	        if (input) {
	            action.bindInput(input);
	        }
	
	        if (!surpressQueueClear) {
	            this.queue.clear();
	        }
	
	        // Fire all Role onStarts if not already active
	        if (!this.isActive) {
	            var numRoles = this.roles.length;
	            for (var i = 0; i < numRoles; i++) {
	                var role = this.roles[i];
	                if (role.start) {
	                    role.start.call(this, this);
	                }
	            }
	        }
	
	        // Fire new action onStart
	        if (!action.isActive && action.onStart) {
	            action.onStart(this, action);
	        }
	
	        this.activate();
	
	        if (!actionExists) {
	            var Controls = action.getControls();
	            return new Controls(this, action, true);
	        }
	    };
	
	    /*
	        Pause all active Actions
	         @param [int] (optional)
	        @returns [Actor]
	    */
	
	    Actor.prototype.pause = function pause() {
	        this.isActive = false;
	        each(this.activeActions, function (id, action) {
	            return action.deactivate();
	        });
	        this.process.stop();
	        return this;
	    };
	
	    /*
	        Resume all active Actions
	         @param [int] (optional)
	        @returns [Actor];
	    */
	
	    Actor.prototype.resume = function resume() {
	        this.isActive = true;
	        each(this.activeActions, function (id, action) {
	            return action.activate();
	        });
	        this.process.start();
	        return this;
	    };
	
	    /*
	        Stop all active Actions
	         @param [int] (optional)
	        @returns [Actor]
	    */
	
	    Actor.prototype.stop = function stop() {
	        var _this2 = this;
	
	        this.pause();
	        each(this.activeActions, function (id) {
	            return _this2.unbindAction(id);
	        });
	        return this;
	    };
	
	    /*
	        Toggle all active Actions
	         @param [int] (optional)
	        @returns [Actor]
	    */
	
	    Actor.prototype.toggle = function toggle() {
	        return this.isActive ? this.pause() : this.resume();
	    };
	
	    /*
	        Syncs `element` with current properties
	         @returns [Actor]
	    */
	
	    Actor.prototype.sync = function sync() {
	        var currentValues = {};
	
	        utils.each(this.values, function (key, value) {
	            currentValues[key] = value.current;
	        });
	
	        this.start(new Action({ values: currentValues }));
	        return this;
	    };
	
	    /*
	        Add a new Action to the queue
	    */
	
	    Actor.prototype.then = function then() {
	        this.queue.add.apply(this.queue, arguments);
	        return this;
	    };
	
	    /*
	        Execute next in queue
	    */
	
	    Actor.prototype.next = function next() {
	        var next = this.queue.next();
	
	        if (next) {
	            if (utils.isFunc(next[0])) {
	                next[0]();
	                this.next();
	                // Or this is an action
	            } else {
	                    next.push(false);
	                    this.start.apply(this, next);
	                }
	        } else {
	            this.stop();
	        }
	
	        return this;
	    };
	
	    /*
	        Assign Roles based on element and manually provided props
	         @param [object]: Element
	        @param [Role || array]
	        @param [boolean] (optional)
	    */
	
	    Actor.prototype.assignRoles = function assignRoles(element, manualRoles, surpressInit) {
	        // All Actors get a default Role that handles user callbacks
	        this.roles = [defaultRole];
	
	        // Auto-assign if no manually-set Roles
	        if (!manualRoles && element) {
	            this.autoAssignRoles(element);
	
	            // Or manually set if provided
	        } else if (manualRoles) {
	                if (utils.isArray(manualRoles)) {
	                    this.roles.push.apply(this.roles, manualRoles);
	                } else {
	                    this.roles.push(manualRoles);
	                }
	            }
	
	        if (!surpressInit) {
	            this.initRoles();
	        }
	    };
	
	    /*
	        Automatically assign Roles based on element, designed
	        to be extended
	         @param [object]: Element
	    */
	
	    Actor.prototype.autoAssignRoles = function autoAssignRoles(element) {
	        // Add CSS role if HTMLElement
	        if (element instanceof HTMLElement || element.tagName === 'svg') {
	            this.roles.push(cssRole);
	
	            // Add SVG role if SVG element
	        } else if (element instanceof SVGElement) {
	                this.roles.push(svgRole);
	
	                // Add Draw Path role if path element
	                if (element.tagName === 'path') {
	                    this.roles.push(drawPathRole);
	                }
	            }
	    };
	
	    /*
	        Fire init callbacks
	    */
	
	    Actor.prototype.initRoles = function initRoles() {
	        var _this3 = this;
	
	        // Fire init callback
	        this.roles.forEach(function (role) {
	            if (role.init) {
	                role.init.call(_this3, _this3);
	            }
	        });
	    };
	
	    Actor.prototype.activate = function activate() {
	        if (!this.isActive) {
	            this.isActive = true;
	            this.firstFrame = true;
	            this.process.start();
	        }
	    };
	
	    /*
	        Bind Action and return its table id
	         @param [Action]
	        @returns [int]
	    */
	
	    Actor.prototype.bindAction = function bindAction(action, id) {
	        if (id === undefined) {
	            id = this.actionCounter++;
	        }
	
	        if (!this.hasAction(id)) {
	            this.activeActions[id] = action;
	            this.numActive++;
	        }
	
	        return id;
	    };
	
	    Actor.prototype.unbindAction = function unbindAction(id) {
	        if (this.activeActions.hasOwnProperty(id)) {
	            var action = this.activeActions[id];
	            if (action.input && action.input.autoStop === true) {
	                action.input.stop();
	            }
	            action.deactivate();
	            this.numActive--;
	            delete this.activeActions[id];
	        }
	
	        if (!this.numActive) {
	            this.pause();
	        }
	    };
	
	    Actor.prototype.getAction = function getAction(id) {
	        return this.activeActions[id];
	    };
	
	    Actor.prototype.hasAction = function hasAction(id) {
	        return this.getAction(id) !== undefined;
	    };
	
	    /*
	        Update processing order
	        
	        @param [string]
	        @param [boolean]
	        @param [boolean]
	    */
	
	    Actor.prototype.updateOrder = function updateOrder(key, moveToBack, hasChildren) {
	        var order = !hasChildren ? this.activeValues : this.activeParents,
	            position = order.indexOf(key);
	
	        // If key isn't list or moveToBack is set to true, add key
	        if (position === -1 || moveToBack) {
	            order.push(key);
	
	            // If key already exists, remove
	            if (position > -1) {
	                order.splice(position, 1);
	            }
	        }
	    };
	
	    // [boolean]: Is this Actor active?
	
	    _createClass(Actor, [{
	        key: 'isActive',
	        get: function () {
	            return this._isActive;
	        }
	
	        // Set hasChanged to true is this is now active
	        ,
	        set: function (status) {
	            if (status === true) {
	                this.hasChanged = status;
	            }
	
	            this._isActive = status;
	        }
	    }]);
	
	    return Actor;
	})();
	
	module.exports = Actor;
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Actor = __webpack_require__(26);
	var Tween = __webpack_require__(33);
	var utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var calcRelative = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/calc\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).relativeValue;
	
	var timeline = new Tween({
	    ease: 'linear',
	    values: {
	        playhead: 0
	    }
	});
	
	var checkActions = function (_ref, sequence) {
	    var playhead = _ref.playhead;
	
	    var i = sequence.check.length;
	
	    while (i--) {
	        var toCheck = sequence.check[i];
	
	        if (playhead >= toCheck.timestamp) {
	            toCheck.callback();
	            sequence.check.splice(i, 1);
	        }
	    }
	};
	
	var generateCallback = function (actor, action) {
	    var callback = undefined;
	
	    if (actor.each) {
	        callback = function () {
	            actor.each(action);
	        };
	    } else {
	        callback = function () {
	            actor.start(action);
	        };
	    }
	
	    return callback;
	};
	
	var Sequence = (function (_Actor) {
	    _inherits(Sequence, _Actor);
	
	    function Sequence() {
	        _classCallCheck(this, Sequence);
	
	        return _possibleConstructorReturn(this, _Actor.call(this, {
	            check: [],
	            sequence: [],
	            duration: 0,
	            currentTimestamp: 0,
	            prevActionEnd: 0,
	            onUpdate: checkActions
	        }));
	    }
	
	    Sequence.prototype.do = function _do(actor, action) {
	        var isCallback = utils.isFunc(actor);
	
	        this.sequence.push({
	            timestamp: this.currentTimestamp,
	            callback: isCallback ? actor : generateCallback(actor, action)
	        });
	
	        if (action && action.duration) {
	            this.prevActionEnd = this.currentTimestamp + action.duration;
	        }
	
	        return this;
	    };
	
	    Sequence.prototype.stagger = function stagger(iterator, action, staggerProps) {
	        var numItems = iterator.members.length;
	        var interval = utils.isNum(staggerProps) ? staggerProps : staggerProps.interval || 100;
	        var duration = action.duration ? action.duration : 0;
	
	        this.do(iterator, function () {
	            iterator.stagger(action, staggerProps);
	        });
	
	        this.prevActionEnd = this.currentTimestamp + duration + interval * numItems;
	
	        return this;
	    };
	
	    Sequence.prototype.at = function at(timestamp) {
	        if (utils.isString(timestamp)) {
	            timestamp = calcRelative(this.currentTimestamp, timestamp);
	        }
	
	        this.currentTimestamp = timestamp;
	        this.duration = Math.max(this.currentTimestamp, this.duration);
	        return this;
	    };
	
	    Sequence.prototype.then = function then() {
	        var offset = arguments.length <= 0 || arguments[0] === undefined ? "+=0" : arguments[0];
	
	        this.at(calcRelative(this.prevActionEnd, offset));
	        return this;
	    };
	
	    Sequence.prototype.start = function start() {
	        _Actor.prototype.start.call(this, timeline.extend({
	            duration: this.duration,
	            values: {
	                playhead: {
	                    current: 0,
	                    to: this.duration
	                }
	            }
	        }));
	
	        return this;
	    };
	
	    Sequence.prototype.onStart = function onStart() {
	        this.check = this.sequence.slice();
	    };
	
	    Sequence.prototype.clear = function clear() {
	        this.sequence = [];
	        this.duration = this.currentTimestamp = this.prevActionEnd = 0;
	        return this;
	    };
	
	    return Sequence;
	})(Actor);
	
	module.exports = Sequence;
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    Input controller
	*/
	"use strict";
	
	var calc = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/calc.js\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils.js\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    History = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/History.js\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	
	/*
	    Input constructor
	    
	        Syntax
	            newInput(name, value[, poll])
	                @param [string]: Name of to track
	                @param [number]: Initial value
	                @param [function] (optional): Function to poll Input data
	                
	            newInput(props[, poll])
	                @param [object]: Object of values
	                @param [function] (optional): Function to poll Input data
	     @return [Input]
	*/
	Input = function () {
	    var pollPos = arguments.length - 1;
	
	    this.current = {};
	    this.offset = {};
	    this.velocity = {};
	    this.history = new History();
	    this.update(arguments[0], arguments[1]);
	
	    if (utils.isFunc(arguments[pollPos])) {
	        this.poll = arguments[pollPos];
	    }
	};
	
	Input.prototype = {
	
	    // [number]: Number of frames of inactivity before velocity is turned to 0
	    maxInactiveFrames: 2,
	
	    // [number]: Number of frames input hasn't been updated
	    inactiveFrames: 0,
	
	    /*
	        Get latest input values
	        
	        @param [string] (optional): Name of specific property to return
	        @return [object || number]: Latest input values or, if specified, single value
	    */
	    get: function (prop) {
	        var latest = this.history.get(),
	            val = prop !== undefined ? latest[prop] : latest;
	        return val;
	    },
	
	    /*
	        Update the input values
	        
	        Syntax
	            input.update(name, value)
	                @param [string]: Name of to track
	                @param [number]: Initial value
	                
	            input.update(props)
	                @param [object]: Object of values
	                
	        @return [Input]
	    */
	    update: function (arg0, arg1) {
	        var values = {};
	
	        if (utils.isNum(arg1)) {
	            values[arg0] = arg1;
	        } else {
	            values = arg0;
	        }
	
	        this.history.add(utils.merge(this.current, values));
	
	        return this;
	    },
	
	    /*
	        Check for input movement and update pointer object's properties
	        
	        @param [number]: Timestamp of frame
	        @return [Input]
	    */
	    onFrame: function (timestamp) {
	        var latest, hasChanged;
	
	        // Check provided timestamp against lastFrame timestamp and return input has already been updated
	        if (timestamp === this.lastFrame) {
	            return;
	        }
	
	        latest = this.poll ? this.poll() : this.history.get();
	        hasChanged = utils.hasChanged(this.current, latest);
	
	        // If input has changed between frames 
	        if (hasChanged) {
	            this.velocity = calc.offset(this.current, latest);
	            this.current = latest;
	            this.inactiveFrames = 0;
	
	            // Or it hasn't moved and our frame limit has been reached
	        } else if (this.inactiveFrames >= this.maxInactiveFrames) {
	                this.velocity = calc.offset(this.current, this.current);
	
	                // Or input hasn't changed
	            } else {
	                    this.inactiveFrames++;
	                }
	
	        this.lastFrame = timestamp;
	
	        return this;
	    }
	};
	
	module.exports = Input;
	//# sourceMappingURL=data:application/json;base64,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QkFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQzs7O0FBQUMsYUFHM0QsTUFBTTtBQUNILHdCQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7aUJBQ3pCOztBQUVELFlBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDOztBQUUzQixlQUFPLElBQUksQ0FBQztLQUNmO0NBQ0osQ0FBQzs7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyIsImZpbGUiOiJJbnB1dC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gICAgSW5wdXQgY29udHJvbGxlclxuKi9cblwidXNlIHN0cmljdFwiO1xuXG52YXIgY2FsYyA9IHJlcXVpcmUoJy4uL2luYy9jYWxjLmpzJyksXG4gICAgdXRpbHMgPSByZXF1aXJlKCcuLi9pbmMvdXRpbHMuanMnKSxcbiAgICBIaXN0b3J5ID0gcmVxdWlyZSgnLi4vaW5jL0hpc3RvcnkuanMnKSxcblxuICAgIC8qXG4gICAgICAgIElucHV0IGNvbnN0cnVjdG9yXG4gICAgICAgIFxuICAgICAgICAgICAgU3ludGF4XG4gICAgICAgICAgICAgICAgbmV3SW5wdXQobmFtZSwgdmFsdWVbLCBwb2xsXSlcbiAgICAgICAgICAgICAgICAgICAgQHBhcmFtIFtzdHJpbmddOiBOYW1lIG9mIHRvIHRyYWNrXG4gICAgICAgICAgICAgICAgICAgIEBwYXJhbSBbbnVtYmVyXTogSW5pdGlhbCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBAcGFyYW0gW2Z1bmN0aW9uXSAob3B0aW9uYWwpOiBGdW5jdGlvbiB0byBwb2xsIElucHV0IGRhdGFcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbmV3SW5wdXQocHJvcHNbLCBwb2xsXSlcbiAgICAgICAgICAgICAgICAgICAgQHBhcmFtIFtvYmplY3RdOiBPYmplY3Qgb2YgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIEBwYXJhbSBbZnVuY3Rpb25dIChvcHRpb25hbCk6IEZ1bmN0aW9uIHRvIHBvbGwgSW5wdXQgZGF0YVxuXG4gICAgICAgIEByZXR1cm4gW0lucHV0XVxuICAgICovXG4gICAgSW5wdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwb2xsUG9zID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50ID0ge307XG4gICAgICAgIHRoaXMub2Zmc2V0ID0ge307XG4gICAgICAgIHRoaXMudmVsb2NpdHkgPSB7fTtcbiAgICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhpc3RvcnkoKTtcbiAgICAgICAgdGhpcy51cGRhdGUoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICBcbiAgICAgICAgaWYgKHV0aWxzLmlzRnVuYyhhcmd1bWVudHNbcG9sbFBvc10pKSB7XG4gICAgICAgICAgICB0aGlzLnBvbGwgPSBhcmd1bWVudHNbcG9sbFBvc107XG4gICAgICAgIH1cbiAgICB9O1xuXG5JbnB1dC5wcm90b3R5cGUgPSB7XG4gICAgXG4gICAgLy8gW251bWJlcl06IE51bWJlciBvZiBmcmFtZXMgb2YgaW5hY3Rpdml0eSBiZWZvcmUgdmVsb2NpdHkgaXMgdHVybmVkIHRvIDBcbiAgICBtYXhJbmFjdGl2ZUZyYW1lczogMixcbiAgICBcbiAgICAvLyBbbnVtYmVyXTogTnVtYmVyIG9mIGZyYW1lcyBpbnB1dCBoYXNuJ3QgYmVlbiB1cGRhdGVkXG4gICAgaW5hY3RpdmVGcmFtZXM6IDAsXG4gICAgXG4gICAgLypcbiAgICAgICAgR2V0IGxhdGVzdCBpbnB1dCB2YWx1ZXNcbiAgICAgICAgXG4gICAgICAgIEBwYXJhbSBbc3RyaW5nXSAob3B0aW9uYWwpOiBOYW1lIG9mIHNwZWNpZmljIHByb3BlcnR5IHRvIHJldHVyblxuICAgICAgICBAcmV0dXJuIFtvYmplY3QgfHwgbnVtYmVyXTogTGF0ZXN0IGlucHV0IHZhbHVlcyBvciwgaWYgc3BlY2lmaWVkLCBzaW5nbGUgdmFsdWVcbiAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgdmFyIGxhdGVzdCA9IHRoaXMuaGlzdG9yeS5nZXQoKSxcbiAgICAgICAgICAgIHZhbCA9IChwcm9wICE9PSB1bmRlZmluZWQpID8gbGF0ZXN0W3Byb3BdIDogbGF0ZXN0O1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAgICBVcGRhdGUgdGhlIGlucHV0IHZhbHVlc1xuICAgICAgICBcbiAgICAgICAgU3ludGF4XG4gICAgICAgICAgICBpbnB1dC51cGRhdGUobmFtZSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgQHBhcmFtIFtzdHJpbmddOiBOYW1lIG9mIHRvIHRyYWNrXG4gICAgICAgICAgICAgICAgQHBhcmFtIFtudW1iZXJdOiBJbml0aWFsIHZhbHVlXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBpbnB1dC51cGRhdGUocHJvcHMpXG4gICAgICAgICAgICAgICAgQHBhcmFtIFtvYmplY3RdOiBPYmplY3Qgb2YgdmFsdWVzXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIEByZXR1cm4gW0lucHV0XVxuICAgICovXG4gICAgdXBkYXRlOiBmdW5jdGlvbiAoYXJnMCwgYXJnMSkge1xuICAgICAgICB2YXIgdmFsdWVzID0ge307XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtKGFyZzEpKSB7XG4gICAgICAgICAgICB2YWx1ZXNbYXJnMF0gPSBhcmcxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWVzID0gYXJnMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaGlzdG9yeS5hZGQodXRpbHMubWVyZ2UodGhpcy5jdXJyZW50LCB2YWx1ZXMpKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgXG4gICAgLypcbiAgICAgICAgQ2hlY2sgZm9yIGlucHV0IG1vdmVtZW50IGFuZCB1cGRhdGUgcG9pbnRlciBvYmplY3QncyBwcm9wZXJ0aWVzXG4gICAgICAgIFxuICAgICAgICBAcGFyYW0gW251bWJlcl06IFRpbWVzdGFtcCBvZiBmcmFtZVxuICAgICAgICBAcmV0dXJuIFtJbnB1dF1cbiAgICAqL1xuICAgIG9uRnJhbWU6IGZ1bmN0aW9uICh0aW1lc3RhbXApIHtcbiAgICAgICAgdmFyIGxhdGVzdCwgaGFzQ2hhbmdlZDtcbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrIHByb3ZpZGVkIHRpbWVzdGFtcCBhZ2FpbnN0IGxhc3RGcmFtZSB0aW1lc3RhbXAgYW5kIHJldHVybiBpbnB1dCBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWRcbiAgICAgICAgaWYgKHRpbWVzdGFtcCA9PT0gdGhpcy5sYXN0RnJhbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGF0ZXN0ID0gKHRoaXMucG9sbCkgPyB0aGlzLnBvbGwoKSA6IHRoaXMuaGlzdG9yeS5nZXQoKTtcbiAgICAgICAgaGFzQ2hhbmdlZCA9IHV0aWxzLmhhc0NoYW5nZWQodGhpcy5jdXJyZW50LCBsYXRlc3QpO1xuXG4gICAgICAgIC8vIElmIGlucHV0IGhhcyBjaGFuZ2VkIGJldHdlZW4gZnJhbWVzICBcbiAgICAgICAgaWYgKGhhc0NoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMudmVsb2NpdHkgPSBjYWxjLm9mZnNldCh0aGlzLmN1cnJlbnQsIGxhdGVzdCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSBsYXRlc3Q7XG4gICAgICAgICAgICB0aGlzLmluYWN0aXZlRnJhbWVzID0gMDtcblxuICAgICAgICAvLyBPciBpdCBoYXNuJ3QgbW92ZWQgYW5kIG91ciBmcmFtZSBsaW1pdCBoYXMgYmVlbiByZWFjaGVkXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pbmFjdGl2ZUZyYW1lcyA+PSB0aGlzLm1heEluYWN0aXZlRnJhbWVzKSB7XG4gICAgICAgICAgICB0aGlzLnZlbG9jaXR5ID0gY2FsYy5vZmZzZXQodGhpcy5jdXJyZW50LCB0aGlzLmN1cnJlbnQpO1xuICAgICAgICBcbiAgICAgICAgLy8gT3IgaW5wdXQgaGFzbid0IGNoYW5nZWRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW5hY3RpdmVGcmFtZXMrKztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5sYXN0RnJhbWUgPSB0aW1lc3RhbXA7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IElucHV0OyJdfQ==

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Actor = __webpack_require__(26);
	var Tween = __webpack_require__(33);
	var utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	var DEFAULT_STAGGER_EASE = 'linear';
	
	function generateCallback(method) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	    }
	
	    var callback = method;
	
	    if (utils.isString(method)) {
	        callback = function (member) {
	            return member[method].apply(member, args);
	        };
	    } else if (!utils.isFunc(method)) {
	        callback = function (member) {
	            member.start.apply(member, [method].concat(args));
	        };
	    }
	
	    return callback;
	}
	
	var Iterator = (function () {
	    function Iterator(members) {
	        _classCallCheck(this, Iterator);
	
	        this.clear();
	
	        if (members) {
	            this.add(members);
	        }
	
	        this._stagger = new Actor();
	    }
	
	    Iterator.prototype.add = function add(members) {
	        this.members = this.members.concat(members);
	        return this;
	    };
	
	    Iterator.prototype.clear = function clear() {
	        this.members = [];
	        return this;
	    };
	
	    Iterator.prototype.each = function each(method) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	            args[_key2 - 1] = arguments[_key2];
	        }
	
	        var callback = generateCallback.apply(undefined, [method].concat(args));
	        this.members.forEach(callback);
	        return this;
	    };
	
	    Iterator.prototype.eachIntoNew = function eachIntoNew(method) {
	        for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	            args[_key3 - 1] = arguments[_key3];
	        }
	
	        var callback = generateCallback.apply(undefined, [method].concat(args));
	        var newIterator = new Iterator();
	
	        this.members.forEach(function (member) {
	            return newIterator.add(callback(member));
	        });
	
	        return newIterator;
	    };
	
	    Iterator.prototype.stagger = function stagger(method, props) {
	        var tempMembers = utils.copyArray(this.members);
	        var numMembers = tempMembers.length;
	        var propsIsInterval = utils.isNum(props);
	        var interval = propsIsInterval ? props : props.interval || 100;
	
	        for (var _len4 = arguments.length, args = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
	            args[_key4 - 2] = arguments[_key4];
	        }
	
	        var callback = generateCallback.apply(undefined, [method].concat(args));
	
	        var i = -1;
	        var staggerProps = {};
	
	        staggerProps.values = {
	            i: {
	                current: -0.6,
	                duration: interval * numMembers,
	                ease: propsIsInterval ? DEFAULT_STAGGER_EASE : props.ease || DEFAULT_STAGGER_EASE,
	                round: true,
	                to: numMembers - 0.6
	            }
	        };
	
	        staggerProps.onComplete = propsIsInterval ? undefined : props.onComplete;
	
	        staggerProps.onUpdate = function (output) {
	            var newIndex = output.i;
	            var gapIndex = i + 1;
	
	            // If our new index is only one more than the previous index, fire immedietly
	            if (newIndex === i + 1) {
	                callback(tempMembers[gapIndex], gapIndex);
	
	                // Or loop through the distance to fire all indecies. Increase delay.
	            } else {
	                    for (; gapIndex <= newIndex; gapIndex++) {
	                        callback(tempMembers[gapIndex], gapIndex);
	                    }
	                }
	
	            i = newIndex;
	        };
	
	        this._stagger.start(new Tween(staggerProps));
	
	        return this;
	    };
	
	    /*
	        Array manipulation
	    */
	
	    Iterator.prototype.reverse = function reverse() {
	        this.members.reverse();
	        return this;
	    };
	
	    return Iterator;
	})();
	
	module.exports = Iterator;
	//# sourceMappingURL=data:application/json;base64,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RyxRQUFRLENBQUM7U0FDaEIsQ0FBQzs7QUFFRixZQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDOztBQUU3QyxlQUFPLElBQUksQ0FBQztLQUNmOzs7Ozs7QUEvRUMsWUFBUSxXQW9GVixPQUFPLHNCQUFHO0FBQ04sWUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN2QixlQUFPLElBQUksQ0FBQztLQUNmOztXQXZGQyxRQUFROzs7QUEwRmQsTUFBTSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMiLCJmaWxlIjoiSXRlcmF0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBY3RvciA9IHJlcXVpcmUoJy4uL2FjdG9yL0FjdG9yJyk7XG5jb25zdCBUd2VlbiA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvVHdlZW4nKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi4vaW5jL3V0aWxzJyk7XG5cbmNvbnN0IERFRkFVTFRfU1RBR0dFUl9FQVNFID0gJ2xpbmVhcic7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ2FsbGJhY2sobWV0aG9kLCAuLi5hcmdzKSB7XG4gICAgbGV0IGNhbGxiYWNrID0gbWV0aG9kO1xuXG4gICAgaWYgKHV0aWxzLmlzU3RyaW5nKG1ldGhvZCkpIHtcbiAgICAgICAgY2FsbGJhY2sgPSAobWVtYmVyKSA9PiBtZW1iZXJbbWV0aG9kXSguLi5hcmdzKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc0Z1bmMobWV0aG9kKSkge1xuICAgICAgICBjYWxsYmFjayA9IChtZW1iZXIpID0+IHtcbiAgICAgICAgICAgIG1lbWJlci5zdGFydChtZXRob2QsIC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGxiYWNrO1xufVxuXG5jbGFzcyBJdGVyYXRvciB7XG4gICAgY29uc3RydWN0b3IobWVtYmVycykge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICAgICAgaWYgKG1lbWJlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKG1lbWJlcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3RhZ2dlciA9IG5ldyBBY3RvcigpO1xuICAgIH1cblxuICAgIGFkZChtZW1iZXJzKSB7XG4gICAgICAgIHRoaXMubWVtYmVycyA9IHRoaXMubWVtYmVycy5jb25jYXQobWVtYmVycyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLm1lbWJlcnMgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZWFjaChtZXRob2QsIC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBnZW5lcmF0ZUNhbGxiYWNrKG1ldGhvZCwgLi4uYXJncyk7XG4gICAgICAgIHRoaXMubWVtYmVycy5mb3JFYWNoKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZWFjaEludG9OZXcobWV0aG9kLCAuLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gZ2VuZXJhdGVDYWxsYmFjayhtZXRob2QsIC4uLmFyZ3MpO1xuICAgICAgICBjb25zdCBuZXdJdGVyYXRvciA9IG5ldyBJdGVyYXRvcigpO1xuXG4gICAgICAgIHRoaXMubWVtYmVycy5mb3JFYWNoKChtZW1iZXIpID0+IG5ld0l0ZXJhdG9yLmFkZChjYWxsYmFjayhtZW1iZXIpKSk7XG5cbiAgICAgICAgcmV0dXJuIG5ld0l0ZXJhdG9yO1xuICAgIH1cblxuICAgIHN0YWdnZXIobWV0aG9kLCBwcm9wcywgLi4uYXJncykge1xuICAgICAgICBjb25zdCB0ZW1wTWVtYmVycyA9IHV0aWxzLmNvcHlBcnJheSh0aGlzLm1lbWJlcnMpO1xuICAgICAgICBjb25zdCBudW1NZW1iZXJzID0gdGVtcE1lbWJlcnMubGVuZ3RoO1xuICAgICAgICBjb25zdCBwcm9wc0lzSW50ZXJ2YWwgPSB1dGlscy5pc051bShwcm9wcyk7XG4gICAgICAgIGNvbnN0IGludGVydmFsID0gcHJvcHNJc0ludGVydmFsID8gcHJvcHMgOiBwcm9wcy5pbnRlcnZhbCB8fCAxMDA7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gZ2VuZXJhdGVDYWxsYmFjayhtZXRob2QsIC4uLmFyZ3MpO1xuXG4gICAgICAgIGxldCBpID0gLTE7XG4gICAgICAgIGxldCBzdGFnZ2VyUHJvcHMgPSB7fTtcblxuICAgICAgICBzdGFnZ2VyUHJvcHMudmFsdWVzID0ge1xuICAgICAgICAgICAgaToge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQ6IC0wLjYsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGludGVydmFsICogbnVtTWVtYmVycyxcbiAgICAgICAgICAgICAgICBlYXNlOiBwcm9wc0lzSW50ZXJ2YWwgPyBERUZBVUxUX1NUQUdHRVJfRUFTRSA6IHByb3BzLmVhc2UgfHwgREVGQVVMVF9TVEFHR0VSX0VBU0UsXG4gICAgICAgICAgICAgICAgcm91bmQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdG86IG51bU1lbWJlcnMgLSAwLjZcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzdGFnZ2VyUHJvcHMub25Db21wbGV0ZSA9IHByb3BzSXNJbnRlcnZhbCA/IHVuZGVmaW5lZCA6IHByb3BzLm9uQ29tcGxldGU7XG5cbiAgICAgICAgc3RhZ2dlclByb3BzLm9uVXBkYXRlID0gKG91dHB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3SW5kZXggPSBvdXRwdXQuaTtcbiAgICAgICAgICAgIGxldCBnYXBJbmRleCA9IGkgKyAxO1xuXG4gICAgICAgICAgICAvLyBJZiBvdXIgbmV3IGluZGV4IGlzIG9ubHkgb25lIG1vcmUgdGhhbiB0aGUgcHJldmlvdXMgaW5kZXgsIGZpcmUgaW1tZWRpZXRseVxuICAgICAgICAgICAgaWYgKG5ld0luZGV4ID09PSBpICsgMSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRlbXBNZW1iZXJzW2dhcEluZGV4XSwgZ2FwSW5kZXgpO1xuXG4gICAgICAgICAgICAvLyBPciBsb29wIHRocm91Z2ggdGhlIGRpc3RhbmNlIHRvIGZpcmUgYWxsIGluZGVjaWVzLiBJbmNyZWFzZSBkZWxheS5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICg7IGdhcEluZGV4IDw9IG5ld0luZGV4OyBnYXBJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRlbXBNZW1iZXJzW2dhcEluZGV4XSwgZ2FwSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaSA9IG5ld0luZGV4O1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX3N0YWdnZXIuc3RhcnQobmV3IFR3ZWVuKHN0YWdnZXJQcm9wcykpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgIEFycmF5IG1hbmlwdWxhdGlvblxuICAgICovXG4gICAgcmV2ZXJzZSgpIHtcbiAgICAgICAgdGhpcy5tZW1iZXJzLnJldmVyc2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEl0ZXJhdG9yOyJdfQ==

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var each = utils.each;
	
	/*
	    Role class constructor
	
	    @param [object]: Optional methods and props to add:
	        name [string]:      Name of generated getter/setter method on Actor
	        _map [object]:      Map Actor values to these values for this Role
	        _typeMap [object]:  Map values to value types
	        init [function]:    Callback to run when this Role is added to an Actor
	        start [function]:   Callback to run when host Actor starts an action
	        complete [function]: Callback to run when action completes
	        frame [function]:   Callback to fire once per frame
	        update [function]:  Callback to fire when values change
	        get [function]:     Read value from actual element
	        set [function]:     Set value on actual element
	*/
	var Role = function (methods) {
	    var role = function (element, opts, prop) {
	        var typeOfOpts = typeof opts;
	
	        // Set single, if this is a string and we have a property
	        if (typeOfOpts === 'string' && prop) {
	            role.set(element, opts, prop);
	
	            // Set multi, if this is an object
	        } else if (typeOfOpts === 'object') {
	                each(opts, function (key, value) {
	                    role.set(element, key, value);
	                });
	
	                // Or this is a get if we have a string and no props
	            } else {
	                    return role.get(element, opts);
	                }
	
	        return role;
	    };
	
	    role._map = {};
	
	    each(methods, function (name, method) {
	        role[name] = !utils.isObj(method) ? method : utils.copy(method);
	    });
	
	    /*
	        Map value keys or generate new Role with updated map
	         Getter:
	            @param [string]: Key to map
	            @return [string]: Mapped key, or key if no mapped key found
	         Setter: 
	            @param [object]: Map of Actor keys -> Role keys
	            @return [Role]: New Role with unique map
	    */
	    role.map = function (values) {
	        // If this is a string, get mapped value
	        // Otherwise this is a map, duplicated role with updated map
	        return utils.isString(values) ? this._map[values] || values : createRole(this, values);
	    };
	
	    return role;
	};
	
	/*
	    Create a new role
	
	    @param [object]: Optional methods and props to add
	    @param [valuesToMap]: Override existing map with these values
	    @return [Role]: New Role
	*/
	var createRole = function (methods, values) {
	    var newRole = new Role(methods);
	
	    each(values, function (key, value) {
	        newRole._map[key] = value;
	    });
	
	    return newRole;
	};
	
	module.exports = Role;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJvbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDcEMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUMsQUFpQnRCLElBQUksSUFBSSxHQUFHLFVBQVUsT0FBTyxFQUFFO0FBQzFCLFFBQUksSUFBSSxHQUFHLFVBQVUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7QUFDdEMsWUFBSSxVQUFVLEdBQUcsT0FBTyxJQUFJOzs7QUFBQyxBQUc3QixZQUFJLFVBQVUsS0FBSyxRQUFRLElBQUksSUFBSSxFQUFFO0FBQ2pDLGdCQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDOzs7QUFBQyxTQUdqQyxNQUFNLElBQUksVUFBVSxLQUFLLFFBQVEsRUFBRTtBQUNoQyxvQkFBSSxDQUFDLElBQUksRUFBRSxVQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUs7QUFDdkIsd0JBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDakMsQ0FBQzs7O0FBQUMsYUFHTixNQUFNO0FBQ0gsMkJBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7aUJBQ2xDOztBQUVELGVBQU8sSUFBSSxDQUFDO0tBQ2YsQ0FBQzs7QUFFRixRQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQzs7QUFFZixRQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsSUFBSSxFQUFFLE1BQU0sRUFBRTtBQUNsQyxZQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQUFBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDckUsQ0FBQzs7Ozs7Ozs7Ozs7QUFBQyxBQWNILFFBQUksQ0FBQyxHQUFHLEdBQUcsVUFBVSxNQUFNLEVBQUU7OztBQUd6QixlQUFPLEFBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzVGLENBQUM7O0FBRUYsV0FBTyxJQUFJLENBQUM7Q0FDZjs7Ozs7Ozs7O0FBQUMsQUFTRixJQUFJLFVBQVUsR0FBRyxVQUFVLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDeEMsUUFBSSxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRWhDLFFBQUksQ0FBQyxNQUFNLEVBQUUsVUFBVSxHQUFHLEVBQUUsS0FBSyxFQUFFO0FBQy9CLGVBQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0tBQzdCLENBQUMsQ0FBQzs7QUFFSCxXQUFPLE9BQU8sQ0FBQztDQUNsQixDQUFDOztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDIiwiZmlsZSI6IlJvbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdXRpbHMgPSByZXF1aXJlKCcuLi9pbmMvdXRpbHMnKTtcbnZhciBlYWNoID0gdXRpbHMuZWFjaDtcblxuLypcbiAgICBSb2xlIGNsYXNzIGNvbnN0cnVjdG9yXG5cbiAgICBAcGFyYW0gW29iamVjdF06IE9wdGlvbmFsIG1ldGhvZHMgYW5kIHByb3BzIHRvIGFkZDpcbiAgICAgICAgbmFtZSBbc3RyaW5nXTogICAgICBOYW1lIG9mIGdlbmVyYXRlZCBnZXR0ZXIvc2V0dGVyIG1ldGhvZCBvbiBBY3RvclxuICAgICAgICBfbWFwIFtvYmplY3RdOiAgICAgIE1hcCBBY3RvciB2YWx1ZXMgdG8gdGhlc2UgdmFsdWVzIGZvciB0aGlzIFJvbGVcbiAgICAgICAgX3R5cGVNYXAgW29iamVjdF06ICBNYXAgdmFsdWVzIHRvIHZhbHVlIHR5cGVzXG4gICAgICAgIGluaXQgW2Z1bmN0aW9uXTogICAgQ2FsbGJhY2sgdG8gcnVuIHdoZW4gdGhpcyBSb2xlIGlzIGFkZGVkIHRvIGFuIEFjdG9yXG4gICAgICAgIHN0YXJ0IFtmdW5jdGlvbl06ICAgQ2FsbGJhY2sgdG8gcnVuIHdoZW4gaG9zdCBBY3RvciBzdGFydHMgYW4gYWN0aW9uXG4gICAgICAgIGNvbXBsZXRlIFtmdW5jdGlvbl06IENhbGxiYWNrIHRvIHJ1biB3aGVuIGFjdGlvbiBjb21wbGV0ZXNcbiAgICAgICAgZnJhbWUgW2Z1bmN0aW9uXTogICBDYWxsYmFjayB0byBmaXJlIG9uY2UgcGVyIGZyYW1lXG4gICAgICAgIHVwZGF0ZSBbZnVuY3Rpb25dOiAgQ2FsbGJhY2sgdG8gZmlyZSB3aGVuIHZhbHVlcyBjaGFuZ2VcbiAgICAgICAgZ2V0IFtmdW5jdGlvbl06ICAgICBSZWFkIHZhbHVlIGZyb20gYWN0dWFsIGVsZW1lbnRcbiAgICAgICAgc2V0IFtmdW5jdGlvbl06ICAgICBTZXQgdmFsdWUgb24gYWN0dWFsIGVsZW1lbnRcbiovXG52YXIgUm9sZSA9IGZ1bmN0aW9uIChtZXRob2RzKSB7XG4gICAgdmFyIHJvbGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0cywgcHJvcCkge1xuICAgICAgICB2YXIgdHlwZU9mT3B0cyA9IHR5cGVvZiBvcHRzO1xuXG4gICAgICAgIC8vIFNldCBzaW5nbGUsIGlmIHRoaXMgaXMgYSBzdHJpbmcgYW5kIHdlIGhhdmUgYSBwcm9wZXJ0eVxuICAgICAgICBpZiAodHlwZU9mT3B0cyA9PT0gJ3N0cmluZycgJiYgcHJvcCkge1xuICAgICAgICAgICAgcm9sZS5zZXQoZWxlbWVudCwgb3B0cywgcHJvcCk7XG4gICAgICAgIFxuICAgICAgICAvLyBTZXQgbXVsdGksIGlmIHRoaXMgaXMgYW4gb2JqZWN0XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZU9mT3B0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGVhY2gob3B0cywgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICByb2xlLnNldChlbGVtZW50LCBrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gT3IgdGhpcyBpcyBhIGdldCBpZiB3ZSBoYXZlIGEgc3RyaW5nIGFuZCBubyBwcm9wc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJvbGUuZ2V0KGVsZW1lbnQsIG9wdHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJvbGU7XG4gICAgfTtcblxuICAgIHJvbGUuX21hcCA9IHt9O1xuXG4gICAgZWFjaChtZXRob2RzLCBmdW5jdGlvbiAobmFtZSwgbWV0aG9kKSB7XG4gICAgICAgIHJvbGVbbmFtZV0gPSAoIXV0aWxzLmlzT2JqKG1ldGhvZCkpID8gbWV0aG9kIDogdXRpbHMuY29weShtZXRob2QpO1xuICAgIH0pO1xuXG5cbiAgICAvKlxuICAgICAgICBNYXAgdmFsdWUga2V5cyBvciBnZW5lcmF0ZSBuZXcgUm9sZSB3aXRoIHVwZGF0ZWQgbWFwXG5cbiAgICAgICAgR2V0dGVyOlxuICAgICAgICAgICAgQHBhcmFtIFtzdHJpbmddOiBLZXkgdG8gbWFwXG4gICAgICAgICAgICBAcmV0dXJuIFtzdHJpbmddOiBNYXBwZWQga2V5LCBvciBrZXkgaWYgbm8gbWFwcGVkIGtleSBmb3VuZFxuXG4gICAgICAgIFNldHRlcjogXG4gICAgICAgICAgICBAcGFyYW0gW29iamVjdF06IE1hcCBvZiBBY3RvciBrZXlzIC0+IFJvbGUga2V5c1xuICAgICAgICAgICAgQHJldHVybiBbUm9sZV06IE5ldyBSb2xlIHdpdGggdW5pcXVlIG1hcFxuICAgICovXG4gICAgcm9sZS5tYXAgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSBzdHJpbmcsIGdldCBtYXBwZWQgdmFsdWVcbiAgICAgICAgLy8gT3RoZXJ3aXNlIHRoaXMgaXMgYSBtYXAsIGR1cGxpY2F0ZWQgcm9sZSB3aXRoIHVwZGF0ZWQgbWFwXG4gICAgICAgIHJldHVybiAodXRpbHMuaXNTdHJpbmcodmFsdWVzKSkgPyB0aGlzLl9tYXBbdmFsdWVzXSB8fCB2YWx1ZXMgOiBjcmVhdGVSb2xlKHRoaXMsIHZhbHVlcyk7XG4gICAgfTtcblxuICAgIHJldHVybiByb2xlO1xufTtcblxuLypcbiAgICBDcmVhdGUgYSBuZXcgcm9sZVxuXG4gICAgQHBhcmFtIFtvYmplY3RdOiBPcHRpb25hbCBtZXRob2RzIGFuZCBwcm9wcyB0byBhZGRcbiAgICBAcGFyYW0gW3ZhbHVlc1RvTWFwXTogT3ZlcnJpZGUgZXhpc3RpbmcgbWFwIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgQHJldHVybiBbUm9sZV06IE5ldyBSb2xlXG4qL1xudmFyIGNyZWF0ZVJvbGUgPSBmdW5jdGlvbiAobWV0aG9kcywgdmFsdWVzKSB7XG4gICAgdmFyIG5ld1JvbGUgPSBuZXcgUm9sZShtZXRob2RzKTtcblxuICAgIGVhY2godmFsdWVzLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBuZXdSb2xlLl9tYXBba2V5XSA9IHZhbHVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ld1JvbGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJvbGU7Il19

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Bezier = __webpack_require__(54),
	
	/*
	    Mirror easing
	    
	    Mirrors the provided easing function, used here for mirroring an
	    easeIn into an easeInOut
	    
	    @param [number]: Progress, from 0 - 1, of current shift
	    @param [function]: The easing function to mirror
	    @returns [number]: The easing-adjusted delta
	*/
	mirrorEasing = function (method) {
	    return function (progress, strength) {
	        return progress <= 0.5 ? method(2 * progress, strength) / 2 : (2 - method(2 * (1 - progress), strength)) / 2;
	    };
	},
	
	/*
	    Reverse easing
	    
	    Reverses the output of the provided easing function, used for flipping easeIn
	    curve to an easeOut.
	    
	    @param [number]: Progress, from 0 - 1, of current shift
	    @param [function]: The easing function to reverse
	    @returns [number]: The easing-adjusted delta
	*/
	reverseEasing = function (method) {
	    return function (progress, strength) {
	        return 1 - method(1 - progress, strength);
	    };
	};
	
	/*
	    Easing class
	
	    If provided easing function, returns easing function with 
	    in/out/inOut variations
	
	    If provided four arguments, returns new Bezier class instead.
	*/
	var Easing = function (x1, y1, x2, y2) {
	    var method = x1,
	        easingFunction;
	
	    // If this is a bezier curve, return a bezier function
	    if (arguments.length > 1) {
	        easingFunction = new Bezier(x1, y1, x2, y2);
	    } else {
	        easingFunction = function (progress, strength) {
	            return method(progress, strength);
	        };
	        easingFunction.in = function (progress, strength) {
	            return method(progress, strength);
	        };
	        easingFunction.out = reverseEasing(method);
	        easingFunction.inOut = mirrorEasing(method);
	    }
	
	    return easingFunction;
	};
	
	module.exports = Easing;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkVhc2luZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7Ozs7Ozs7Ozs7OztBQVk1QixZQUFZLEdBQUcsVUFBQSxNQUFNO1dBQUksVUFBQyxRQUFRLEVBQUUsUUFBUTtlQUFLLEFBQUMsUUFBUSxJQUFJLEdBQUcsR0FBSSxNQUFNLENBQUMsQ0FBQyxHQUFHLFFBQVEsRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFBLEFBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQSxHQUFJLENBQUM7S0FBQTtDQUFBOzs7Ozs7Ozs7Ozs7QUFZeEosYUFBYSxHQUFHLFVBQUEsTUFBTTtXQUFJLFVBQUMsUUFBUSxFQUFFLFFBQVE7ZUFBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxRQUFRLEVBQUUsUUFBUSxDQUFDO0tBQUE7Q0FBQTs7Ozs7Ozs7OztBQUFDLEFBVXpGLElBQUksTUFBTSxHQUFHLFVBQVUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO0FBQ25DLFFBQUksTUFBTSxHQUFHLEVBQUU7UUFDWCxjQUFjOzs7QUFBQyxBQUduQixRQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCLHNCQUFjLEdBQUcsSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FFL0MsTUFBTTtBQUNILHNCQUFjLEdBQUcsVUFBQyxRQUFRLEVBQUUsUUFBUTttQkFBSyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztTQUFBLENBQUM7QUFDcEUsc0JBQWMsQ0FBQyxFQUFFLEdBQUcsVUFBQyxRQUFRLEVBQUUsUUFBUTttQkFBSyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztTQUFBLENBQUM7QUFDdkUsc0JBQWMsQ0FBQyxHQUFHLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNDLHNCQUFjLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUMvQzs7QUFFRCxXQUFPLGNBQWMsQ0FBQztDQUN6QixDQUFDOztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDIiwiZmlsZSI6IkVhc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBCZXppZXIgPSByZXF1aXJlKCcuL0JlemllcicpLFxuXG4gICAgLypcbiAgICAgICAgTWlycm9yIGVhc2luZ1xuICAgICAgICBcbiAgICAgICAgTWlycm9ycyB0aGUgcHJvdmlkZWQgZWFzaW5nIGZ1bmN0aW9uLCB1c2VkIGhlcmUgZm9yIG1pcnJvcmluZyBhblxuICAgICAgICBlYXNlSW4gaW50byBhbiBlYXNlSW5PdXRcbiAgICAgICAgXG4gICAgICAgIEBwYXJhbSBbbnVtYmVyXTogUHJvZ3Jlc3MsIGZyb20gMCAtIDEsIG9mIGN1cnJlbnQgc2hpZnRcbiAgICAgICAgQHBhcmFtIFtmdW5jdGlvbl06IFRoZSBlYXNpbmcgZnVuY3Rpb24gdG8gbWlycm9yXG4gICAgICAgIEByZXR1cm5zIFtudW1iZXJdOiBUaGUgZWFzaW5nLWFkanVzdGVkIGRlbHRhXG4gICAgKi9cbiAgICBtaXJyb3JFYXNpbmcgPSBtZXRob2QgPT4gKHByb2dyZXNzLCBzdHJlbmd0aCkgPT4gKHByb2dyZXNzIDw9IDAuNSkgPyBtZXRob2QoMiAqIHByb2dyZXNzLCBzdHJlbmd0aCkgLyAyIDogKDIgLSBtZXRob2QoMiAqICgxIC0gcHJvZ3Jlc3MpLCBzdHJlbmd0aCkpIC8gMixcbiAgICAgICAgICAgIFxuICAgIC8qXG4gICAgICAgIFJldmVyc2UgZWFzaW5nXG4gICAgICAgIFxuICAgICAgICBSZXZlcnNlcyB0aGUgb3V0cHV0IG9mIHRoZSBwcm92aWRlZCBlYXNpbmcgZnVuY3Rpb24sIHVzZWQgZm9yIGZsaXBwaW5nIGVhc2VJblxuICAgICAgICBjdXJ2ZSB0byBhbiBlYXNlT3V0LlxuICAgICAgICBcbiAgICAgICAgQHBhcmFtIFtudW1iZXJdOiBQcm9ncmVzcywgZnJvbSAwIC0gMSwgb2YgY3VycmVudCBzaGlmdFxuICAgICAgICBAcGFyYW0gW2Z1bmN0aW9uXTogVGhlIGVhc2luZyBmdW5jdGlvbiB0byByZXZlcnNlXG4gICAgICAgIEByZXR1cm5zIFtudW1iZXJdOiBUaGUgZWFzaW5nLWFkanVzdGVkIGRlbHRhXG4gICAgKi9cbiAgICByZXZlcnNlRWFzaW5nID0gbWV0aG9kID0+IChwcm9ncmVzcywgc3RyZW5ndGgpID0+IDEgLSBtZXRob2QoMSAtIHByb2dyZXNzLCBzdHJlbmd0aCk7XG5cbi8qXG4gICAgRWFzaW5nIGNsYXNzXG5cbiAgICBJZiBwcm92aWRlZCBlYXNpbmcgZnVuY3Rpb24sIHJldHVybnMgZWFzaW5nIGZ1bmN0aW9uIHdpdGggXG4gICAgaW4vb3V0L2luT3V0IHZhcmlhdGlvbnNcblxuICAgIElmIHByb3ZpZGVkIGZvdXIgYXJndW1lbnRzLCByZXR1cm5zIG5ldyBCZXppZXIgY2xhc3MgaW5zdGVhZC5cbiovXG52YXIgRWFzaW5nID0gZnVuY3Rpb24gKHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgdmFyIG1ldGhvZCA9IHgxLFxuICAgICAgICBlYXNpbmdGdW5jdGlvbjtcblxuICAgIC8vIElmIHRoaXMgaXMgYSBiZXppZXIgY3VydmUsIHJldHVybiBhIGJlemllciBmdW5jdGlvblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBlYXNpbmdGdW5jdGlvbiA9IG5ldyBCZXppZXIoeDEsIHkxLCB4MiwgeTIpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWFzaW5nRnVuY3Rpb24gPSAocHJvZ3Jlc3MsIHN0cmVuZ3RoKSA9PiBtZXRob2QocHJvZ3Jlc3MsIHN0cmVuZ3RoKTtcbiAgICAgICAgZWFzaW5nRnVuY3Rpb24uaW4gPSAocHJvZ3Jlc3MsIHN0cmVuZ3RoKSA9PiBtZXRob2QocHJvZ3Jlc3MsIHN0cmVuZ3RoKTtcbiAgICAgICAgZWFzaW5nRnVuY3Rpb24ub3V0ID0gcmV2ZXJzZUVhc2luZyhtZXRob2QpO1xuICAgICAgICBlYXNpbmdGdW5jdGlvbi5pbk91dCA9IG1pcnJvckVhc2luZyhtZXRob2QpO1xuICAgIH1cblxuICAgIHJldHVybiBlYXNpbmdGdW5jdGlvbjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRWFzaW5nOyJdfQ==

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// Imports
	var calc = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/calc\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var Controls = __webpack_require__(52);
	var each = utils.each;
	
	// Values
	var DEFAULT_PROP = 'current';
	var PRIVATE = ['onStart', 'onFrame', 'onUpdate', 'onComplete'];
	
	var Action = (function () {
	
	    /*
	        # Action class constructor
	        ## Assign default properties of Action or extended class and set user-defined props
	         @param [object]
	    */
	
	    function Action(props) {
	        var _this = this;
	
	        _classCallCheck(this, Action);
	
	        each(this.getDefaultProps(), function (key, value) {
	            _this[key] = value;
	        });
	
	        this.values = {};
	        this.set(props, this.getDefaultValueProp());
	    }
	
	    /*
	        # Set Action properties
	        ## Set user-defined Action properties
	         @param [object]
	        @param [string]: Name of default value property (set when `value` is **not** provided as object)
	        @return [Action]
	    */
	
	    Action.prototype.set = function set() {
	        var _this2 = this;
	
	        var props = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	        var defaultProp = arguments.length <= 1 || arguments[1] === undefined ? DEFAULT_PROP : arguments[1];
	
	        // Loop through non-`value` properties and set
	        each(props, function (key, value) {
	            if (key !== 'values') {
	                _this2[key] = value;
	            }
	        });
	
	        // Merge `value` properties with existing
	        if (props.values) {
	            (function () {
	                var currentValues = _this2.values;
	
	                each(props.values, function (key, value) {
	                    var existingValue = currentValues[key];
	                    var newValue = {};
	
	                    if (utils.isObj(value)) {
	                        newValue = value;
	                    } else {
	                        newValue[defaultProp] = value;
	                    }
	
	                    currentValues[key] = existingValue ? utils.merge(existingValue, newValue) : newValue;
	                });
	            })();
	        }
	
	        return this;
	    };
	
	    /*
	        # Process latest `current` value
	        ## Actions performs existing `current` value
	         @param [Actor]
	        @param [object]
	        @return [number]
	    */
	
	    Action.prototype.process = function process(actor, value) {
	        return value.current;
	    };
	
	    /*
	        # Has Action ended?
	        ## Returns `true` to end Action (Action only fires once).
	        
	        @return [boolean]
	    */
	
	    Action.prototype.hasEnded = function hasEnded() {
	        return true;
	    };
	
	    /*
	        # Limit value to within set parameters
	        ## Return value within min/max, with outlying values multiplied by `escapeAmp`
	         @param [number]
	        @param [object] { min: number, max: number, escapeAmp: factor }
	        @return [number]
	    */
	
	    Action.prototype.limit = function limit(output, value) {
	        var restricted = calc.restricted(output, value.min, value.max);
	        var escapeAmp = value.escapeAmp !== undefined ? value.escapeAmp : 0;
	
	        return restricted + (output - restricted) * escapeAmp;
	    };
	
	    /*
	        # Get Controls class for this Action
	        ## Inherited Actions may return different Controls class
	         @return [Controls]
	    */
	
	    Action.prototype.getControls = function getControls() {
	        return Controls;
	    };
	
	    /*
	        # Get default Action properties
	         @return [object]
	    */
	
	    Action.prototype.getDefaultProps = function getDefaultProps() {
	        return {};
	    };
	
	    /*
	        # Get default Action value properties
	         @return [object]
	    */
	
	    Action.prototype.getDefaultValue = function getDefaultValue() {
	        return {};
	    };
	
	    /*
	        # Get default Action value property name
	        ## Set this `value` property when set as value instead of object
	         @return [string]
	    */
	
	    Action.prototype.getDefaultValueProp = function getDefaultValueProp() {
	        return DEFAULT_PROP;
	    };
	
	    /*
	        # Get set properties
	        ## Get user-set properties for this Action
	         @return [object]
	    */
	
	    Action.prototype.getSet = function getSet() {
	        var _this3 = this;
	
	        var set = { values: this.values };
	
	        each(this, function (key, prop) {
	            if (_this3.hasOwnProperty(key) && PRIVATE.indexOf(key) === -1) {
	                set[key] = prop;
	            }
	        });
	
	        return set;
	    };
	
	    /*
	        # Extend this Action with new properties
	        ## Returns new instance of this Action's `prototype` with existing and new properties
	         @param [object] (optional)
	        @return [Action]
	    */
	
	    Action.prototype.extend = function extend(props) {
	        return new this.constructor(utils.merge(this, props), this.getDefaultValueProp());
	    };
	
	    /*
	        # Get a new playable version of this Action
	         @return [Action]
	    */
	
	    Action.prototype.getPlayable = function getPlayable() {
	        return this.extend();
	    };
	
	    /*
	        # Activate this Action
	         @return [Action]
	    */
	
	    Action.prototype.activate = function activate() {
	        this.isActive = true;
	        return this;
	    };
	
	    /*
	        # Deactivate this Action
	         @return [Action]
	    */
	
	    Action.prototype.deactivate = function deactivate() {
	        this.isActive = false;
	        return this;
	    };
	
	    return Action;
	})();
	
	module.exports = Action;
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Action = __webpack_require__(32);
	var calc = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/calc\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var presetEasing = __webpack_require__(37);
	var valueOps = __webpack_require__(47);
	var TweenControls = __webpack_require__(55);
	var each = utils.each;
	
	var COUNT = 'count';
	var NEXT_STEPS = {
	    loop: 'restart',
	    yoyo: 'reverse',
	    flip: 'flipValues'
	};
	
	/*
	    Ease value within ranged parameters
	    
	    @param [number]: Progress between 0 and 1
	    @param [number]: Value of 0 progress
	    @param [number]: Value of 1 progress
	    @param [string || function]: Name of preset easing
	        to use or generated easing function
	    @return [number]: Value of eased progress in range
	*/
	function ease(progress, from, to, ease) {
	    var progressLimited = calc.restricted(progress, 0, 1);
	    var easingFunction = utils.isString(ease) ? presetEasing[ease] : ease;
	
	    return calc.valueEased(progressLimited, from, to, easingFunction);
	};
	
	var Tween = (function (_Action) {
	    _inherits(Tween, _Action);
	
	    function Tween() {
	        _classCallCheck(this, Tween);
	
	        return _possibleConstructorReturn(this, _Action.apply(this, arguments));
	    }
	
	    Tween.prototype.getControls = function getControls() {
	        return TweenControls;
	    };
	
	    Tween.prototype.getDefaultProps = function getDefaultProps() {
	        return {
	            delay: 0,
	            dilate: 1,
	            duration: 300,
	            loop: false,
	            yoyo: false,
	            flip: false,
	            playDirection: 1,
	            ended: false,
	            elapsed: 0
	        };
	    };
	
	    Tween.prototype.getDefaultValue = function getDefaultValue() {
	        return {
	            delay: 0,
	            duration: 300,
	            ease: 'easeOut',
	            stagger: 0,
	            steps: 0,
	            to: 0,
	            round: false
	        };
	    };
	
	    Tween.prototype.getDefaultValueProp = function getDefaultValueProp() {
	        return 'to';
	    };
	
	    /*
	        Update Action elapsed time
	        
	        @param [object]: Action properties
	        @param [number]: Timestamp of current frame
	    */
	
	    Tween.prototype.onFrameStart = function onFrameStart(actor, frameDuration) {
	        this.elapsed = this.elapsed || 0;
	
	        if (frameDuration) {
	            this.elapsed += frameDuration * actor.dilate * this.playDirection;
	            this.ended = true;
	        }
	    };
	
	    /*
	        Calculate progress of value based on time elapsed,
	        value delay/duration/stagger properties
	         @param [Actor]
	        @param [object]: Value state and properties
	        @return [number]: Calculated value
	    */
	
	    Tween.prototype.process = function process(actor, value) {
	        var target = value.to;
	        var progressTarget = this.playDirection === 1 ? 1 : 0;
	        var newValue = value.current;
	
	        // If this value has a to property, otherwise we just return current value
	        if (target !== undefined) {
	            var progress = calc.restricted(calc.progress(this.elapsed - value.delay, 0, value.duration) - value.stagger, 0, 1);
	
	            // Mark Action as NOT ended if still in progress
	            if (progress !== progressTarget) {
	                this.ended = false;
	            }
	
	            // Step progress if we're stepping
	            if (value.steps) {
	                progress = utils.stepProgress(progress, value.steps);
	            }
	
	            // Ease value
	            newValue = ease(progress, value.origin, target, value.ease);
	        }
	
	        return newValue;
	    };
	
	    /*
	        If this tween has ended, check if we loop/yoyo/flip
	        
	        @return [boolean]: Has this tween really really ended?
	    */
	
	    Tween.prototype.hasEnded = function hasEnded(actor) {
	        var _this2 = this;
	
	        var ended = this.ended;
	
	        if (ended) {
	            each(NEXT_STEPS, function (name, methodName) {
	                if (_this2.checkNextStep(actor, name, _this2[methodName])) {
	                    ended = false;
	                    actor.hasChanged = true;
	                    return false;
	                }
	            });
	        }
	
	        // Reset `ended`
	        this.ended = false;
	
	        return ended;
	    };
	
	    Tween.prototype.checkNextStep = function checkNextStep(actor, name, method) {
	        var step = this[name];
	        var forever = step === true;
	        var count = this[name + COUNT] || 0;
	        var stepTaken = false;
	
	        if (forever || utils.isNum(step)) {
	            ++count;
	            this[name + COUNT] = count;
	
	            if (forever || count <= step) {
	                method.call(this, actor);
	                stepTaken = true;
	            }
	        }
	
	        return stepTaken;
	    };
	
	    Tween.prototype.flipValues = function flipValues(actor) {
	        var actorValues = actor.values;
	        this.elapsed = this.duration - this.elapsed;
	
	        each(this.values, function (key) {
	            var value = actorValues[key];
	
	            if (value.children) {
	                each(value.children, function (childKey) {
	                    valueOps.flip(actorValues[key + childKey]);
	                });
	            }
	
	            valueOps.flip(value);
	        });
	    };
	
	    Tween.prototype.reverse = function reverse() {
	        this.playDirection *= -1;
	    };
	
	    Tween.prototype.restart = function restart() {
	        this.elapsed = this.playDirection === 1 ? 0 : this.duration;
	        this.started = utils.currentTime();
	    };
	
	    return Tween;
	})(Action);
	
	module.exports = Tween;
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// Imports
	var Action = __webpack_require__(32);
	var calc = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/calc\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var simulations = __webpack_require__(53);
	
	// Values
	var DEFAULT_PROP = 'velocity';
	
	var Simulate = (function (_Action) {
	    _inherits(Simulate, _Action);
	
	    /*
	        # Simulate class constructor
	        ## Sets parent Action class and then default Simulate properties
	         @param [object]
	    */
	
	    function Simulate() {
	        _classCallCheck(this, Simulate);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        var _this = _possibleConstructorReturn(this, _Action.call.apply(_Action, [this].concat(args)));
	
	        _this.calculatesVelocity = true;
	        _this.inactiveFrames = 0;
	        return _this;
	    }
	
	    /*
	        # Get default Simulate props
	         @return [object]
	    */
	
	    Simulate.prototype.getDefaultProps = function getDefaultProps() {
	        return {
	            autoEnd: true,
	            maxInactiveFrames: 3
	        };
	    };
	
	    /*
	        # Get default Simulate value props
	         @return [object]
	    */
	
	    Simulate.prototype.getDefaultValue = function getDefaultValue() {
	        return {
	            // [string]: Simulation to .run
	            simulate: DEFAULT_PROP,
	
	            // [number]: Acceleration to apply to value, in units per second
	            acceleration: 0,
	
	            // [number]: Factor to multiply velocity by on bounce
	            bounce: 0,
	
	            // [number]: Spring strength during 'string'
	            spring: 80,
	
	            // [number]: Timeconstant of glide
	            timeConstant: 395,
	
	            // [number]: Stop simulation under this speed
	            stopSpeed: 0.0001,
	
	            // [boolean]: Capture with spring physics on limit breach
	            capture: false,
	
	            // [number]: Friction to apply per frame
	            friction: 0,
	
	            to: 0,
	            round: false
	        };
	    };
	
	    /*
	        # Get default Simulate value property name
	        ## Set values to this when a `value` is not provided as an object
	         @return [string]
	    */
	
	    Simulate.prototype.getDefaultValueProp = function getDefaultValueProp() {
	        return DEFAULT_PROP;
	    };
	
	    /*
	        # Method to fire when Action starts
	        ## Set `started` to current time.
	    */
	
	    Simulate.prototype.onStart = function onStart() {
	        this.started = utils.currentTime();
	    };
	
	    /*
	        # Fire at start of every frame
	        ## Set `hasChanged` to false
	    */
	
	    Simulate.prototype.onFrameStart = function onFrameStart() {
	        this.hasChanged = false;
	    };
	
	    /*
	        # Simulate the `value`s per-frame movement
	        
	        @param [Actor]
	        @param [Value]: Current value
	        @param [string]: Key of current value
	        @param [number]: Duration of frame in ms
	        @return [number]: Calculated value
	    */
	
	    Simulate.prototype.process = function process(actor, value, key, timeSinceLastFrame) {
	        var current = value.current;
	        var simulate = value.simulate;
	        var newValue = current;
	
	        // If string, use in-built simulation otherwise treat as function
	        var simulation = utils.isString(simulate) ? simulations[simulate] : simulate;
	
	        var newVelocity = simulation ? simulation(value, timeSinceLastFrame, this.started) : 0;
	
	        value.velocity = Math.abs(newVelocity) >= value.stopSpeed ? newVelocity : 0;
	
	        newValue = value.current + calc.speedPerFrame(value.velocity, timeSinceLastFrame);
	
	        if (newValue !== current) {
	            this.hasChanged = true;
	        }
	
	        return newValue;
	    };
	
	    /*
	        # Has this action ended?
	        ## Use a framecounter to see if Action has changed in the last x frames
	        and declare ended if not
	        
	        @param [Actor]
	        @return [boolean]: Has Action ended?
	    */
	
	    Simulate.prototype.hasEnded = function hasEnded(actor) {
	        var ended = false;
	
	        if (this.autoEnd) {
	            this.inactiveFrames = this.hasChanged ? 0 : this.inactiveFrames + 1;
	            ended = this.inactiveFrames > actor.maxInactiveFrames;
	        }
	
	        return ended;
	    };
	
	    /*
	        # Limit output to value range, if any
	        ## If velocity is at or more than range, and value has a bounce property,
	        run the bounce simulation
	        
	        @param [number]: Calculated output
	        @param [Value]: Current Value
	        @return [number]: Limit-adjusted output
	    */
	
	    Simulate.prototype.limit = function limit(output, value) {
	        var isOutsideMax = output >= value.max;
	        var isOutsideMin = output <= value.min;
	        var isOutsideRange = isOutsideMax || isOutsideMin;
	
	        if (isOutsideRange) {
	            output = calc.restricted(output, value.min, value.max);
	
	            if (value.bounce) {
	                value.velocity = simulations.bounce(value);
	            } else if (value.capture) {
	                simulations.capture(value, isOutsideMax ? value.max : value.min);
	            }
	        }
	
	        return output;
	    };
	
	    return Simulate;
	})(Action);
	
	module.exports = Simulate;
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Action = __webpack_require__(32),
	    Pointer = __webpack_require__(56),
	    calc = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/calc\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	var Track = (function (_Action) {
	    _inherits(Track, _Action);
	
	    function Track() {
	        _classCallCheck(this, Track);
	
	        return _possibleConstructorReturn(this, _Action.apply(this, arguments));
	    }
	
	    /*
	        Update input offset
	    */
	
	    Track.prototype.onFrameStart = function onFrameStart(actor, frameDuration, framestamp) {
	        actor.state.input = this.input.onFrame(framestamp);
	        this.inputOffset = calc.offset(this.inputOrigin, this.input.current);
	        this.frameDuration = frameDuration;
	    };
	
	    /*
	        Move Value relative to Input movement
	        
	        @param [Value]: Current value
	        @param [string]: Key of current value
	        @return [number]: Calculated value
	    */
	
	    Track.prototype.process = function process(actor, value, key) {
	        var newValue = value.current;
	
	        if (this.inputOffset.hasOwnProperty(key)) {
	            newValue = value.direct ? this.input.current[key] : value.origin + this.inputOffset[key] * value.amp;
	        }
	
	        return newValue;
	    };
	
	    /*
	        Has this Action ended? 
	        
	        @return [boolean]: False to make user manually finish .track()
	    */
	
	    Track.prototype.hasEnded = function hasEnded() {
	        return false;
	    };
	
	    Track.prototype.deactivate = function deactivate() {
	        _Action.prototype.deactivate.call(this);
	
	        if (this.input && this.input.stop) {
	            this.input.stop();
	        }
	
	        return this;
	    };
	
	    Track.prototype.bindInput = function bindInput(input) {
	        this.input = !input.current ? new Pointer(input) : input;
	        this.inputOrigin = this.input.get();
	    };
	
	    Track.prototype.getDefaultValue = function getDefaultValue() {
	        return {
	            amp: 1,
	            escapeAmp: 0,
	            direct: false,
	            smooth: 0
	        };
	    };
	
	    return Track;
	})(Action);
	
	module.exports = Track;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRyYWNrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUM1QixPQUFPLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0lBQ3JDLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7O0lBRTVCLEtBQUs7Y0FBTCxLQUFLOzthQUFMLEtBQUs7OEJBQUwsS0FBSzs7Ozs7Ozs7O0FBQUwsU0FBSyxXQUlQLFlBQVkseUJBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUU7QUFDM0MsYUFBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbkQsWUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyRSxZQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztLQUN0Qzs7Ozs7Ozs7OztBQVJDLFNBQUssV0FpQlAsT0FBTyxvQkFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtBQUN2QixZQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDOztBQUU3QixZQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ3RDLG9CQUFRLEdBQUcsQUFBQyxLQUFLLENBQUMsTUFBTSxHQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxBQUFDLENBQUM7U0FDNUc7O0FBRUQsZUFBTyxRQUFRLENBQUM7S0FDbkI7Ozs7Ozs7O0FBekJDLFNBQUssV0FnQ1AsUUFBUSx1QkFBRztBQUNQLGVBQU8sS0FBSyxDQUFDO0tBQ2hCOztBQWxDQyxTQUFLLFdBb0NQLFVBQVUseUJBQUc7QUFDVCwwQkFBTSxVQUFVLEtBQUEsTUFBRSxDQUFDOztBQUVuQixZQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7QUFDL0IsZ0JBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDckI7O0FBRUQsZUFBTyxJQUFJLENBQUM7S0FDZjs7QUE1Q0MsU0FBSyxXQThDUCxTQUFTLHNCQUFDLEtBQUssRUFBRTtBQUNiLFlBQUksQ0FBQyxLQUFLLEdBQUcsQUFBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUksSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQzNELFlBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUN2Qzs7QUFqREMsU0FBSyxXQW1EUCxlQUFlLDhCQUFHO0FBQ2QsZUFBTztBQUNILGVBQUcsRUFBRSxDQUFDO0FBQ04scUJBQVMsRUFBRSxDQUFDO0FBQ1osa0JBQU0sRUFBRSxLQUFLO0FBQ2Isa0JBQU0sRUFBRSxDQUFDO1NBQ1osQ0FBQztLQUNMOztXQTFEQyxLQUFLO0dBQVMsTUFBTTs7QUE2RDFCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDIiwiZmlsZSI6IlRyYWNrLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IEFjdGlvbiA9IHJlcXVpcmUoJy4vQWN0aW9uJyksXG4gICAgUG9pbnRlciA9IHJlcXVpcmUoJy4uL2lucHV0L1BvaW50ZXInKSxcbiAgICBjYWxjID0gcmVxdWlyZSgnLi4vaW5jL2NhbGMnKTtcblxuY2xhc3MgVHJhY2sgZXh0ZW5kcyBBY3Rpb24ge1xuICAgIC8qXG4gICAgICAgIFVwZGF0ZSBpbnB1dCBvZmZzZXRcbiAgICAqL1xuICAgIG9uRnJhbWVTdGFydChhY3RvciwgZnJhbWVEdXJhdGlvbiwgZnJhbWVzdGFtcCkge1xuICAgICAgICBhY3Rvci5zdGF0ZS5pbnB1dCA9IHRoaXMuaW5wdXQub25GcmFtZShmcmFtZXN0YW1wKTtcbiAgICAgICAgdGhpcy5pbnB1dE9mZnNldCA9IGNhbGMub2Zmc2V0KHRoaXMuaW5wdXRPcmlnaW4sIHRoaXMuaW5wdXQuY3VycmVudCk7XG4gICAgICAgIHRoaXMuZnJhbWVEdXJhdGlvbiA9IGZyYW1lRHVyYXRpb247XG4gICAgfVxuXG4gICAgLypcbiAgICAgICAgTW92ZSBWYWx1ZSByZWxhdGl2ZSB0byBJbnB1dCBtb3ZlbWVudFxuICAgICAgICBcbiAgICAgICAgQHBhcmFtIFtWYWx1ZV06IEN1cnJlbnQgdmFsdWVcbiAgICAgICAgQHBhcmFtIFtzdHJpbmddOiBLZXkgb2YgY3VycmVudCB2YWx1ZVxuICAgICAgICBAcmV0dXJuIFtudW1iZXJdOiBDYWxjdWxhdGVkIHZhbHVlXG4gICAgKi9cbiAgICBwcm9jZXNzKGFjdG9yLCB2YWx1ZSwga2V5KSB7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlLmN1cnJlbnQ7XG5cbiAgICAgICAgaWYgKHRoaXMuaW5wdXRPZmZzZXQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSAodmFsdWUuZGlyZWN0KSA/IHRoaXMuaW5wdXQuY3VycmVudFtrZXldIDogdmFsdWUub3JpZ2luICsgKHRoaXMuaW5wdXRPZmZzZXRba2V5XSAqIHZhbHVlLmFtcCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICAgSGFzIHRoaXMgQWN0aW9uIGVuZGVkPyBcbiAgICAgICAgXG4gICAgICAgIEByZXR1cm4gW2Jvb2xlYW5dOiBGYWxzZSB0byBtYWtlIHVzZXIgbWFudWFsbHkgZmluaXNoIC50cmFjaygpXG4gICAgKi9cbiAgICBoYXNFbmRlZCgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGRlYWN0aXZhdGUoKSB7XG4gICAgICAgIHN1cGVyLmRlYWN0aXZhdGUoKTtcblxuICAgICAgICBpZiAodGhpcy5pbnB1dCAmJiB0aGlzLmlucHV0LnN0b3ApIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuc3RvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYmluZElucHV0KGlucHV0KSB7XG4gICAgICAgIHRoaXMuaW5wdXQgPSAoIWlucHV0LmN1cnJlbnQpID8gbmV3IFBvaW50ZXIoaW5wdXQpIDogaW5wdXQ7XG4gICAgICAgIHRoaXMuaW5wdXRPcmlnaW4gPSB0aGlzLmlucHV0LmdldCgpO1xuICAgIH1cblxuICAgIGdldERlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFtcDogMSxcbiAgICAgICAgICAgIGVzY2FwZUFtcDogMCxcbiAgICAgICAgICAgIGRpcmVjdDogZmFsc2UsXG4gICAgICAgICAgICBzbW9vdGg6IDBcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhY2s7Il19

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Actor = __webpack_require__(26),
	    Iterator = __webpack_require__(29),
	    selectDom = __webpack_require__(46);
	
	var SAVE_PROP = '__pm_actor_';
	
	module.exports = function (selector) {
	    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    var dom = selectDom(selector),
	        actors = [];
	
	    dom.forEach(function (element) {
	        var actor = element[SAVE_PROP];
	
	        if (!actor) {
	            opts.element = element;
	            actor = element[SAVE_PROP] = new Actor(opts);
	        }
	
	        actors.push(actor);
	    });
	
	    return actors.length > 1 ? new Iterator(actors) : actors[0];
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdC1hY3Rvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqQyxRQUFRLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0lBQzFDLFNBQVMsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7O0FBRXhDLElBQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQzs7QUFFaEMsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLFFBQVEsRUFBYTtRQUFYLElBQUkseURBQUcsRUFBRTs7QUFDMUMsUUFBSSxHQUFHLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUN6QixNQUFNLEdBQUcsRUFBRSxDQUFDOztBQUVoQixPQUFHLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFLO0FBQ3JCLFlBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFL0IsWUFBSSxDQUFDLEtBQUssRUFBRTtBQUNSLGdCQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUN2QixpQkFBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoRDs7QUFFRCxjQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RCLENBQUMsQ0FBQzs7QUFFSCxXQUFPLEFBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUksSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2pFLENBQUMiLCJmaWxlIjoic2VsZWN0LWFjdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIEFjdG9yID0gcmVxdWlyZSgnLi4vYWN0b3IvQWN0b3InKSxcbiAgICBJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2l0ZXJhdG9yL0l0ZXJhdG9yJyksXG4gICAgc2VsZWN0RG9tID0gcmVxdWlyZSgnLi9zZWxlY3QtZG9tJyk7XG5cbmNvbnN0IFNBVkVfUFJPUCA9ICdfX3BtX2FjdG9yXyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBvcHRzID0ge30pIHtcbiAgICB2YXIgZG9tID0gc2VsZWN0RG9tKHNlbGVjdG9yKSxcbiAgICAgICAgYWN0b3JzID0gW107XG5cbiAgICBkb20uZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICBsZXQgYWN0b3IgPSBlbGVtZW50W1NBVkVfUFJPUF07XG5cbiAgICAgICAgaWYgKCFhY3Rvcikge1xuICAgICAgICAgICAgb3B0cy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgIGFjdG9yID0gZWxlbWVudFtTQVZFX1BST1BdID0gbmV3IEFjdG9yKG9wdHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgYWN0b3JzLnB1c2goYWN0b3IpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIChhY3RvcnMubGVuZ3RoID4gMSkgPyBuZXcgSXRlcmF0b3IoYWN0b3JzKSA6IGFjdG9yc1swXTtcbn07XG4iXX0=

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/*
	    Easing functions
	    ----------------------------------------
	    
	    Generates and provides easing functions based on baseFunction definitions
	    
	    A call to easingFunction.get('functionName') returns a function that can be passed:
	        @param [number]: Progress 0-1
	        @param [number] (optional): Amp modifier, only accepted in some easing functions
	                                    and is used to adjust overall strength
	        @return [number]: Eased progress
	        
	    We can generate new functions by sending an easing function through easingFunction.extend(name, method).
	    Which will make nameIn, nameOut and nameInOut functions available to use.
	        
	    Easing functions from Robert Penner
	    http://www.robertpenner.com/easing/
	        
	    Bezier curve interpretor created from Gaëtan Renaudeau's original BezierEasing  
	    https://github.com/gre/bezier-easing/blob/master/index.js  
	    https://github.com/gre/bezier-easing/blob/master/LICENSE
	
	    Anticipate easing created by Elliot Gino
	    https://twitter.com/ElliotGeno
	*/
	// Imports
	var Easing = __webpack_require__(31);
	var utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	// Values
	var DEFAULT_BACK_STRENGTH = 1.525;
	var DEFAULT_POW_STRENGTH = 2;
	
	// Utility functions
	var generatePowerEasing = function (strength) {
	    return function (progress, strength) {
	        return baseEasing.ease(progress, strength);
	    };
	};
	
	/*
	    Each of these base functions is an easeIn
	    
	    On init, we use .mirror and .reverse to generate easeInOut and
	    easeOut functions respectively.
	*/
	var baseEasing = {
	    ease: function (progress) {
	        var strength = arguments.length <= 1 || arguments[1] === undefined ? DEFAULT_POW_STRENGTH : arguments[1];
	        return Math.pow(progress, strength);
	    },
	    circ: function (progress) {
	        return 1 - Math.sin(Math.acos(progress));
	    },
	    back: function (progress) {
	        var strength = arguments.length <= 1 || arguments[1] === undefined ? DEFAULT_BACK_STRENGTH : arguments[1];
	        return progress * progress * ((strength + 1) * progress - strength);
	    }
	};
	
	['cubic', 'quart', 'quint'].forEach(function (easingName, i) {
	    baseEasing[easingName] = generatePowerEasing(i + 3);
	});
	
	// Generate in/out/inOut variations
	utils.each(baseEasing, function (key, baseEase) {
	    var easingFunction = new Easing(baseEase);
	    baseEasing[key + 'In'] = easingFunction.in;
	    baseEasing[key + 'Out'] = easingFunction.out;
	    baseEasing[key + 'InOut'] = easingFunction.inOut;
	});
	
	baseEasing.linear = function (progress) {
	    return progress;
	};
	baseEasing.anticipate = function (progress) {
	    var strength = arguments.length <= 1 || arguments[1] === undefined ? DEFAULT_BACK_STRENGTH : arguments[1];
	    return (progress *= 2) < 1 ? 0.5 * baseEasing.backIn(progress, strength) : 0.5 * (2 - Math.pow(2, -10 * (progress - 1)));
	};
	
	module.exports = baseEasing;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZXNldC1lYXNpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCQSxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbkMsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDOzs7QUFBQyxBQUd6QyxJQUFNLHFCQUFxQixHQUFHLEtBQUssQ0FBQztBQUNwQyxJQUFNLG9CQUFvQixHQUFHLENBQUM7OztBQUFDLEFBRy9CLElBQU0sbUJBQW1CLEdBQUcsVUFBQSxRQUFRO1dBQUksVUFBQyxRQUFRLEVBQUUsUUFBUTtlQUFLLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztLQUFBO0NBQUE7Ozs7Ozs7O0FBQUMsQUFRcEcsSUFBSSxVQUFVLEdBQUc7QUFDYixRQUFJLEVBQUUsVUFBQyxRQUFRO1lBQUUsUUFBUSx5REFBRyxvQkFBb0I7d0JBQUssUUFBUSxFQUFJLFFBQVE7S0FBQTtBQUN6RSxRQUFJLEVBQUUsVUFBQSxRQUFRO2VBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUFBO0FBQ25ELFFBQUksRUFBRSxVQUFDLFFBQVE7WUFBRSxRQUFRLHlEQUFHLHFCQUFxQjtlQUFLLEFBQUMsUUFBUSxHQUFHLFFBQVEsSUFBSyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUEsR0FBSSxRQUFRLEdBQUcsUUFBUSxDQUFBLEFBQUM7S0FBQTtDQUN2SCxDQUFDOztBQUVGLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxVQUFVLEVBQUUsQ0FBQyxFQUFFO0FBQ3pELGNBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDdkQsQ0FBQzs7O0FBQUMsQUFHSCxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxVQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUs7QUFDdEMsUUFBSSxjQUFjLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUMsY0FBVSxDQUFJLEdBQUcsUUFBSyxHQUFHLGNBQWMsQ0FBQyxFQUFFLENBQUM7QUFDM0MsY0FBVSxDQUFJLEdBQUcsU0FBTSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUM7QUFDN0MsY0FBVSxDQUFJLEdBQUcsV0FBUSxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUM7Q0FDcEQsQ0FBQyxDQUFDOztBQUVILFVBQVUsQ0FBQyxNQUFNLEdBQUcsVUFBQSxRQUFRO1dBQUksUUFBUTtDQUFBLENBQUM7QUFDekMsVUFBVSxDQUFDLFVBQVUsR0FBRyxVQUFDLFFBQVE7UUFBRSxRQUFRLHlEQUFHLHFCQUFxQjtXQUMvRCxBQUFDLENBQUMsUUFBUSxJQUFFLENBQUMsQ0FBQSxHQUFJLENBQUMsR0FBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLEdBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxDQUFBLEFBQUM7Q0FBQSxDQUFDOztBQUV2SCxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyIsImZpbGUiOiJwcmVzZXQtZWFzaW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgICBFYXNpbmcgZnVuY3Rpb25zXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFxuICAgIEdlbmVyYXRlcyBhbmQgcHJvdmlkZXMgZWFzaW5nIGZ1bmN0aW9ucyBiYXNlZCBvbiBiYXNlRnVuY3Rpb24gZGVmaW5pdGlvbnNcbiAgICBcbiAgICBBIGNhbGwgdG8gZWFzaW5nRnVuY3Rpb24uZ2V0KCdmdW5jdGlvbk5hbWUnKSByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgcGFzc2VkOlxuICAgICAgICBAcGFyYW0gW251bWJlcl06IFByb2dyZXNzIDAtMVxuICAgICAgICBAcGFyYW0gW251bWJlcl0gKG9wdGlvbmFsKTogQW1wIG1vZGlmaWVyLCBvbmx5IGFjY2VwdGVkIGluIHNvbWUgZWFzaW5nIGZ1bmN0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGlzIHVzZWQgdG8gYWRqdXN0IG92ZXJhbGwgc3RyZW5ndGhcbiAgICAgICAgQHJldHVybiBbbnVtYmVyXTogRWFzZWQgcHJvZ3Jlc3NcbiAgICAgICAgXG4gICAgV2UgY2FuIGdlbmVyYXRlIG5ldyBmdW5jdGlvbnMgYnkgc2VuZGluZyBhbiBlYXNpbmcgZnVuY3Rpb24gdGhyb3VnaCBlYXNpbmdGdW5jdGlvbi5leHRlbmQobmFtZSwgbWV0aG9kKS5cbiAgICBXaGljaCB3aWxsIG1ha2UgbmFtZUluLCBuYW1lT3V0IGFuZCBuYW1lSW5PdXQgZnVuY3Rpb25zIGF2YWlsYWJsZSB0byB1c2UuXG4gICAgICAgIFxuICAgIEVhc2luZyBmdW5jdGlvbnMgZnJvbSBSb2JlcnQgUGVubmVyXG4gICAgaHR0cDovL3d3dy5yb2JlcnRwZW5uZXIuY29tL2Vhc2luZy9cbiAgICAgICAgXG4gICAgQmV6aWVyIGN1cnZlIGludGVycHJldG9yIGNyZWF0ZWQgZnJvbSBHYcOrdGFuIFJlbmF1ZGVhdSdzIG9yaWdpbmFsIEJlemllckVhc2luZyAgXG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2dyZS9iZXppZXItZWFzaW5nL2Jsb2IvbWFzdGVyL2luZGV4LmpzICBcbiAgICBodHRwczovL2dpdGh1Yi5jb20vZ3JlL2Jlemllci1lYXNpbmcvYmxvYi9tYXN0ZXIvTElDRU5TRVxuXG4gICAgQW50aWNpcGF0ZSBlYXNpbmcgY3JlYXRlZCBieSBFbGxpb3QgR2lub1xuICAgIGh0dHBzOi8vdHdpdHRlci5jb20vRWxsaW90R2Vub1xuKi9cbi8vIEltcG9ydHNcbmNvbnN0IEVhc2luZyA9IHJlcXVpcmUoJy4vRWFzaW5nJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL2luYy91dGlscycpO1xuXG4vLyBWYWx1ZXNcbmNvbnN0IERFRkFVTFRfQkFDS19TVFJFTkdUSCA9IDEuNTI1O1xuY29uc3QgREVGQVVMVF9QT1dfU1RSRU5HVEggPSAyO1xuXG4vLyBVdGlsaXR5IGZ1bmN0aW9uc1xuY29uc3QgZ2VuZXJhdGVQb3dlckVhc2luZyA9IHN0cmVuZ3RoID0+IChwcm9ncmVzcywgc3RyZW5ndGgpID0+IGJhc2VFYXNpbmcuZWFzZShwcm9ncmVzcywgc3RyZW5ndGgpO1xuXG4vKlxuICAgIEVhY2ggb2YgdGhlc2UgYmFzZSBmdW5jdGlvbnMgaXMgYW4gZWFzZUluXG4gICAgXG4gICAgT24gaW5pdCwgd2UgdXNlIC5taXJyb3IgYW5kIC5yZXZlcnNlIHRvIGdlbmVyYXRlIGVhc2VJbk91dCBhbmRcbiAgICBlYXNlT3V0IGZ1bmN0aW9ucyByZXNwZWN0aXZlbHkuXG4qL1xubGV0IGJhc2VFYXNpbmcgPSB7XG4gICAgZWFzZTogKHByb2dyZXNzLCBzdHJlbmd0aCA9IERFRkFVTFRfUE9XX1NUUkVOR1RIKSA9PiBwcm9ncmVzcyAqKiBzdHJlbmd0aCxcbiAgICBjaXJjOiBwcm9ncmVzcyA9PiAxIC0gTWF0aC5zaW4oTWF0aC5hY29zKHByb2dyZXNzKSksXG4gICAgYmFjazogKHByb2dyZXNzLCBzdHJlbmd0aCA9IERFRkFVTFRfQkFDS19TVFJFTkdUSCkgPT4gKHByb2dyZXNzICogcHJvZ3Jlc3MpICogKChzdHJlbmd0aCArIDEpICogcHJvZ3Jlc3MgLSBzdHJlbmd0aClcbn07XG5cblsnY3ViaWMnLCAncXVhcnQnLCAncXVpbnQnXS5mb3JFYWNoKGZ1bmN0aW9uIChlYXNpbmdOYW1lLCBpKSB7XG4gICAgYmFzZUVhc2luZ1tlYXNpbmdOYW1lXSA9IGdlbmVyYXRlUG93ZXJFYXNpbmcoaSArIDMpO1xufSk7XG5cbi8vIEdlbmVyYXRlIGluL291dC9pbk91dCB2YXJpYXRpb25zXG51dGlscy5lYWNoKGJhc2VFYXNpbmcsIChrZXksIGJhc2VFYXNlKSA9PiB7XG4gICAgbGV0IGVhc2luZ0Z1bmN0aW9uID0gbmV3IEVhc2luZyhiYXNlRWFzZSk7XG4gICAgYmFzZUVhc2luZ1tgJHtrZXl9SW5gXSA9IGVhc2luZ0Z1bmN0aW9uLmluO1xuICAgIGJhc2VFYXNpbmdbYCR7a2V5fU91dGBdID0gZWFzaW5nRnVuY3Rpb24ub3V0O1xuICAgIGJhc2VFYXNpbmdbYCR7a2V5fUluT3V0YF0gPSBlYXNpbmdGdW5jdGlvbi5pbk91dDtcbn0pO1xuXG5iYXNlRWFzaW5nLmxpbmVhciA9IHByb2dyZXNzID0+IHByb2dyZXNzO1xuYmFzZUVhc2luZy5hbnRpY2lwYXRlID0gKHByb2dyZXNzLCBzdHJlbmd0aCA9IERFRkFVTFRfQkFDS19TVFJFTkdUSCkgPT5cbiAgICAoKHByb2dyZXNzKj0yKSA8IDEpID8gMC41ICogYmFzZUVhc2luZy5iYWNrSW4ocHJvZ3Jlc3MsIHN0cmVuZ3RoKSA6ICAwLjUgKiAoMiAtIE1hdGgucG93KDIsIC0xMCAqIChwcm9ncmVzcyAtIDEpKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUVhc2luZzsiXX0=

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function (easing) {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }
	
	  return function (progress) {
	    return easing.apply(undefined, [progress].concat(args));
	  };
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGlmeS1lYXNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFDLE1BQU07b0NBQUssSUFBSTtBQUFKLFFBQUk7OztTQUFLLFVBQUMsUUFBUTtXQUFLLE1BQU0sbUJBQUMsUUFBUSxTQUFLLElBQUksRUFBQztHQUFBO0NBQUEsQ0FBQyIsImZpbGUiOiJtb2RpZnktZWFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKGVhc2luZywgLi4uYXJncykgPT4gKHByb2dyZXNzKSA9PiBlYXNpbmcocHJvZ3Jlc3MsIC4uLmFyZ3MpOyJdfQ==

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var each = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).each,
	    transformDictionary = __webpack_require__(59),
	    transformProps = transformDictionary.props,
	    TRANSLATE_Z = 'translateZ';
	
	module.exports = function (output, cache) {
	    var css = {},
	        transform = '',
	        transformHasZ = false;
	
	    // Loop through output, check for transform properties
	    each(output, function (key, rule) {
	        // If this is a transform property, add to transform string
	        if (transformProps[key]) {
	            transform += key + '(' + rule + ')';
	            transformHasZ = key === TRANSLATE_Z ? true : transformHasZ;
	
	            // Or just assign directly
	        } else {
	                if (rule !== cache[key]) {
	                    cache[key] = css[key] = rule;
	                }
	            }
	    });
	
	    // If we have transform properties, add translateZ
	    if (transform !== '') {
	        if (!transformHasZ) {
	            transform += ' ' + TRANSLATE_Z + '(0px)';
	        }
	
	        if (transform !== cache.transform) {
	            css.transform = transform;
	        }
	
	        cache.transform = transform;
	    }
	
	    return css;
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFFYixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJO0lBQ3RDLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztJQUN2RCxjQUFjLEdBQUcsbUJBQW1CLENBQUMsS0FBSztJQUUxQyxXQUFXLEdBQUcsWUFBWSxDQUFDOztBQUUvQixNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVUsTUFBTSxFQUFFLEtBQUssRUFBRTtBQUN0QyxRQUFJLEdBQUcsR0FBRyxFQUFFO1FBQ1IsU0FBUyxHQUFHLEVBQUU7UUFDZCxhQUFhLEdBQUcsS0FBSzs7O0FBQUMsQUFHMUIsUUFBSSxDQUFDLE1BQU0sRUFBRSxVQUFVLEdBQUcsRUFBRSxJQUFJLEVBQUU7O0FBRTlCLFlBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ3JCLHFCQUFTLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLHlCQUFhLEdBQUcsQUFBQyxHQUFHLEtBQUssV0FBVyxHQUFJLElBQUksR0FBRyxhQUFhOzs7QUFBQyxTQUdoRSxNQUFNO0FBQ0gsb0JBQUksSUFBSSxLQUFLLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNyQix5QkFBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7aUJBQ2hDO2FBQ0o7S0FDSixDQUFDOzs7QUFBQyxBQUdILFFBQUksU0FBUyxLQUFLLEVBQUUsRUFBRTtBQUNsQixZQUFJLENBQUMsYUFBYSxFQUFFO0FBQ2hCLHFCQUFTLElBQUksR0FBRyxHQUFHLFdBQVcsR0FBRyxPQUFPLENBQUM7U0FDNUM7O0FBRUQsWUFBSSxTQUFTLEtBQUssS0FBSyxDQUFDLFNBQVMsRUFBRTtBQUMvQixlQUFHLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztTQUM3Qjs7QUFFRCxhQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztLQUMvQjs7QUFFRCxXQUFPLEdBQUcsQ0FBQztDQUNkLENBQUMiLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGVhY2ggPSByZXF1aXJlKCcuLi8uLi9pbmMvdXRpbHMnKS5lYWNoLFxuICAgIHRyYW5zZm9ybURpY3Rpb25hcnkgPSByZXF1aXJlKCcuL3RyYW5zZm9ybS1kaWN0aW9uYXJ5JyksXG4gICAgdHJhbnNmb3JtUHJvcHMgPSB0cmFuc2Zvcm1EaWN0aW9uYXJ5LnByb3BzLFxuXG4gICAgVFJBTlNMQVRFX1ogPSAndHJhbnNsYXRlWic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG91dHB1dCwgY2FjaGUpIHtcbiAgICB2YXIgY3NzID0ge30sXG4gICAgICAgIHRyYW5zZm9ybSA9ICcnLFxuICAgICAgICB0cmFuc2Zvcm1IYXNaID0gZmFsc2U7XG4gICAgICAgIFxuICAgIC8vIExvb3AgdGhyb3VnaCBvdXRwdXQsIGNoZWNrIGZvciB0cmFuc2Zvcm0gcHJvcGVydGllc1xuICAgIGVhY2gob3V0cHV0LCBmdW5jdGlvbiAoa2V5LCBydWxlKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSB0cmFuc2Zvcm0gcHJvcGVydHksIGFkZCB0byB0cmFuc2Zvcm0gc3RyaW5nXG4gICAgICAgIGlmICh0cmFuc2Zvcm1Qcm9wc1trZXldKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm0gKz0ga2V5ICsgJygnICsgcnVsZSArICcpJztcbiAgICAgICAgICAgIHRyYW5zZm9ybUhhc1ogPSAoa2V5ID09PSBUUkFOU0xBVEVfWikgPyB0cnVlIDogdHJhbnNmb3JtSGFzWjtcbiAgICAgICAgXG4gICAgICAgIC8vIE9yIGp1c3QgYXNzaWduIGRpcmVjdGx5XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocnVsZSAhPT0gY2FjaGVba2V5XSkge1xuICAgICAgICAgICAgICAgIGNhY2hlW2tleV0gPSBjc3Nba2V5XSA9IHJ1bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIElmIHdlIGhhdmUgdHJhbnNmb3JtIHByb3BlcnRpZXMsIGFkZCB0cmFuc2xhdGVaXG4gICAgaWYgKHRyYW5zZm9ybSAhPT0gJycpIHtcbiAgICAgICAgaWYgKCF0cmFuc2Zvcm1IYXNaKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm0gKz0gJyAnICsgVFJBTlNMQVRFX1ogKyAnKDBweCknO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zZm9ybSAhPT0gY2FjaGUudHJhbnNmb3JtKSB7XG4gICAgICAgICAgICBjc3MudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjYWNoZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzcztcbn07Il19

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var TRANSLATE = 'translate';
	
	module.exports = {
	    x: TRANSLATE + 'X',
	    y: TRANSLATE + 'Y',
	    z: TRANSLATE + 'Z'
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksU0FBUyxHQUFHLFdBQVcsQ0FBQzs7QUFFNUIsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNiLEtBQUMsRUFBRSxTQUFTLEdBQUcsR0FBRztBQUNsQixLQUFDLEVBQUUsU0FBUyxHQUFHLEdBQUc7QUFDbEIsS0FBQyxFQUFFLFNBQVMsR0FBRyxHQUFHO0NBQ3JCLENBQUMiLCJmaWxlIjoibWFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFRSQU5TTEFURSA9ICd0cmFuc2xhdGUnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICB4OiBUUkFOU0xBVEUgKyAnWCcsXG4gICAgeTogVFJBTlNMQVRFICsgJ1knLFxuICAgIHo6IFRSQU5TTEFURSArICdaJ1xufTsiXX0=

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var COLOR = 'color',
	    POSITIONS = 'positions',
	    DIMENSIONS = 'dimensions',
	    SCALE = 'scale',
	    SHADOW = 'shadow',
	    ANGLE = 'angle',
	    ALPHA = 'alpha',
	    PX = 'px';
	
	module.exports = {
	    // Color properties
	    color: COLOR,
	    backgroundColor: COLOR,
	    outlineColor: COLOR,
	    fill: COLOR,
	    stroke: COLOR,
	    // Border
	    borderColor: COLOR,
	    borderTopColor: COLOR,
	    borderRightColor: COLOR,
	    borderBottomColor: COLOR,
	    borderLeftColor: COLOR,
	    borderRadius: PX,
	    // Dimensions
	    margin: DIMENSIONS,
	    padding: DIMENSIONS,
	    width: PX,
	    height: PX,
	    // Positions
	    backgroundPosition: POSITIONS,
	    perspectiveOrigin: POSITIONS,
	    transformOrigin: POSITIONS,
	    // Shadows
	    textShadow: SHADOW,
	    boxShadow: SHADOW,
	    // Transform properties
	    rotate: ANGLE,
	    rotateX: ANGLE,
	    rotateY: ANGLE,
	    rotateZ: ANGLE,
	    scale: SCALE,
	    scaleX: SCALE,
	    scaleY: SCALE,
	    scaleZ: SCALE,
	    skewX: ANGLE,
	    skewY: ANGLE,
	    distance: PX,
	    translateX: PX,
	    translateY: PX,
	    translateZ: PX,
	    perspective: PX,
	    opacity: ALPHA
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGUtbWFwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxLQUFLLEdBQUcsT0FBTztJQUNmLFNBQVMsR0FBRyxXQUFXO0lBQ3ZCLFVBQVUsR0FBRyxZQUFZO0lBQ3pCLEtBQUssR0FBRyxPQUFPO0lBQ2YsTUFBTSxHQUFHLFFBQVE7SUFDakIsS0FBSyxHQUFHLE9BQU87SUFDZixLQUFLLEdBQUcsT0FBTztJQUNmLEVBQUUsR0FBRyxJQUFJLENBQUM7O0FBRWQsTUFBTSxDQUFDLE9BQU8sR0FBRzs7QUFFYixTQUFLLEVBQUUsS0FBSztBQUNaLG1CQUFlLEVBQUUsS0FBSztBQUN0QixnQkFBWSxFQUFFLEtBQUs7QUFDbkIsUUFBSSxFQUFFLEtBQUs7QUFDWCxVQUFNLEVBQUUsS0FBSzs7QUFFYixlQUFXLEVBQUUsS0FBSztBQUNsQixrQkFBYyxFQUFFLEtBQUs7QUFDckIsb0JBQWdCLEVBQUUsS0FBSztBQUN2QixxQkFBaUIsRUFBRSxLQUFLO0FBQ3hCLG1CQUFlLEVBQUUsS0FBSztBQUN0QixnQkFBWSxFQUFFLEVBQUU7O0FBRWhCLFVBQU0sRUFBRSxVQUFVO0FBQ2xCLFdBQU8sRUFBRSxVQUFVO0FBQ25CLFNBQUssRUFBRSxFQUFFO0FBQ1QsVUFBTSxFQUFFLEVBQUU7O0FBRVYsc0JBQWtCLEVBQUUsU0FBUztBQUM3QixxQkFBaUIsRUFBRSxTQUFTO0FBQzVCLG1CQUFlLEVBQUUsU0FBUzs7QUFFMUIsY0FBVSxFQUFFLE1BQU07QUFDbEIsYUFBUyxFQUFFLE1BQU07O0FBRWpCLFVBQU0sRUFBRSxLQUFLO0FBQ2IsV0FBTyxFQUFFLEtBQUs7QUFDZCxXQUFPLEVBQUUsS0FBSztBQUNkLFdBQU8sRUFBRSxLQUFLO0FBQ2QsU0FBSyxFQUFFLEtBQUs7QUFDWixVQUFNLEVBQUUsS0FBSztBQUNiLFVBQU0sRUFBRSxLQUFLO0FBQ2IsVUFBTSxFQUFFLEtBQUs7QUFDYixTQUFLLEVBQUUsS0FBSztBQUNaLFNBQUssRUFBRSxLQUFLO0FBQ1osWUFBUSxFQUFFLEVBQUU7QUFDWixjQUFVLEVBQUUsRUFBRTtBQUNkLGNBQVUsRUFBRSxFQUFFO0FBQ2QsY0FBVSxFQUFFLEVBQUU7QUFDZCxlQUFXLEVBQUUsRUFBRTtBQUNmLFdBQU8sRUFBRSxLQUFLO0NBQ2pCLENBQUMiLCJmaWxlIjoidHlwZS1tYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ09MT1IgPSAnY29sb3InLFxuICAgIFBPU0lUSU9OUyA9ICdwb3NpdGlvbnMnLFxuICAgIERJTUVOU0lPTlMgPSAnZGltZW5zaW9ucycsXG4gICAgU0NBTEUgPSAnc2NhbGUnLFxuICAgIFNIQURPVyA9ICdzaGFkb3cnLFxuICAgIEFOR0xFID0gJ2FuZ2xlJyxcbiAgICBBTFBIQSA9ICdhbHBoYScsXG4gICAgUFggPSAncHgnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvLyBDb2xvciBwcm9wZXJ0aWVzXG4gICAgY29sb3I6IENPTE9SLFxuICAgIGJhY2tncm91bmRDb2xvcjogQ09MT1IsXG4gICAgb3V0bGluZUNvbG9yOiBDT0xPUixcbiAgICBmaWxsOiBDT0xPUixcbiAgICBzdHJva2U6IENPTE9SLFxuICAgIC8vIEJvcmRlclxuICAgIGJvcmRlckNvbG9yOiBDT0xPUixcbiAgICBib3JkZXJUb3BDb2xvcjogQ09MT1IsXG4gICAgYm9yZGVyUmlnaHRDb2xvcjogQ09MT1IsXG4gICAgYm9yZGVyQm90dG9tQ29sb3I6IENPTE9SLFxuICAgIGJvcmRlckxlZnRDb2xvcjogQ09MT1IsXG4gICAgYm9yZGVyUmFkaXVzOiBQWCxcbiAgICAvLyBEaW1lbnNpb25zXG4gICAgbWFyZ2luOiBESU1FTlNJT05TLFxuICAgIHBhZGRpbmc6IERJTUVOU0lPTlMsXG4gICAgd2lkdGg6IFBYLFxuICAgIGhlaWdodDogUFgsICAgIFxuICAgIC8vIFBvc2l0aW9uc1xuICAgIGJhY2tncm91bmRQb3NpdGlvbjogUE9TSVRJT05TLFxuICAgIHBlcnNwZWN0aXZlT3JpZ2luOiBQT1NJVElPTlMsXG4gICAgdHJhbnNmb3JtT3JpZ2luOiBQT1NJVElPTlMsXG4gICAgLy8gU2hhZG93c1xuICAgIHRleHRTaGFkb3c6IFNIQURPVyxcbiAgICBib3hTaGFkb3c6IFNIQURPVywgICAgXG4gICAgLy8gVHJhbnNmb3JtIHByb3BlcnRpZXNcbiAgICByb3RhdGU6IEFOR0xFLFxuICAgIHJvdGF0ZVg6IEFOR0xFLFxuICAgIHJvdGF0ZVk6IEFOR0xFLFxuICAgIHJvdGF0ZVo6IEFOR0xFLFxuICAgIHNjYWxlOiBTQ0FMRSxcbiAgICBzY2FsZVg6IFNDQUxFLFxuICAgIHNjYWxlWTogU0NBTEUsXG4gICAgc2NhbGVaOiBTQ0FMRSxcbiAgICBza2V3WDogQU5HTEUsXG4gICAgc2tld1k6IEFOR0xFLFxuICAgIGRpc3RhbmNlOiBQWCxcbiAgICB0cmFuc2xhdGVYOiBQWCxcbiAgICB0cmFuc2xhdGVZOiBQWCxcbiAgICB0cmFuc2xhdGVaOiBQWCxcbiAgICBwZXJzcGVjdGl2ZTogUFgsXG4gICAgb3BhY2l0eTogQUxQSEFcbn07Il19

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var transformDictionary = __webpack_require__(59);
	
	var each = utils.each;
	var camelToDash = utils.camelToDash;
	var transformProps = transformDictionary.props;
	var zeroNotZero = 0.0001;
	
	module.exports = function (output, origin) {
	    var props = {},
	        hasTransform = false,
	        scale = output.scale !== undefined ? output.scale || zeroNotZero : output.scaleX || 1,
	        scaleY = output.scaleY !== undefined ? output.scaleY || zeroNotZero : scale || 1,
	        transformOriginX = origin.x,
	        transformOriginY = origin.y,
	        scaleTransformX = -transformOriginX * (scale * 1),
	        scaleTransformY = -transformOriginY * (scaleY * 1),
	        scaleReplaceX = transformOriginX / scale,
	        scaleReplaceY = transformOriginY / scaleY,
	        transform = {
	        translate: 'translate(' + output.translateX + ', ' + output.translateY + ') ',
	        scale: 'translate(' + scaleTransformX + ', ' + scaleTransformY + ') scale(' + scale + ', ' + scaleY + ') translate(' + scaleReplaceX + ', ' + scaleReplaceY + ') ',
	        rotate: 'rotate(' + output.rotate + ', ' + transformOriginX + ', ' + transformOriginY + ') ',
	        skewX: 'skewX(' + output.skewX + ') ',
	        skewY: 'skewY(' + output.skewY + ') '
	    };
	
	    each(output, function (key, value) {
	        if (transformProps[key]) {
	            hasTransform = true;
	        } else {
	            props[camelToDash(key)] = value;
	        }
	    });
	
	    if (hasTransform) {
	        props.transform = '';
	
	        each(transform, function (key, value) {
	            var defaultValue = key === 'scale' ? '1' : '0';
	            props.transform += value.replace(/undefined/g, defaultValue);
	        });
	    }
	
	    return props;
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDekMsSUFBTSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQzs7QUFFbkUsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN4QixJQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3RDLElBQU0sY0FBYyxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQztBQUNqRCxJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUM7O0FBRTNCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxNQUFNLEVBQUUsTUFBTSxFQUFFO0FBQ3ZDLFFBQUksS0FBSyxHQUFHLEVBQUU7UUFDVixZQUFZLEdBQUcsS0FBSztRQUNwQixLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssS0FBSyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssSUFBSSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDO1FBQ3JGLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxLQUFLLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLFdBQVcsR0FBRyxLQUFLLElBQUksQ0FBQztRQUNoRixnQkFBZ0IsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUMzQixnQkFBZ0IsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUMzQixlQUFlLEdBQUcsQ0FBRSxnQkFBZ0IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFBLEFBQUM7UUFDbEQsZUFBZSxHQUFHLENBQUUsZ0JBQWdCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQSxBQUFDO1FBQ25ELGFBQWEsR0FBRyxnQkFBZ0IsR0FBRyxLQUFLO1FBQ3hDLGFBQWEsR0FBRyxnQkFBZ0IsR0FBRyxNQUFNO1FBQ3pDLFNBQVMsR0FBRztBQUNSLGlCQUFTLGlCQUFlLE1BQU0sQ0FBQyxVQUFVLFVBQUssTUFBTSxDQUFDLFVBQVUsT0FBSTtBQUNuRSxhQUFLLGlCQUFlLGVBQWUsVUFBSyxlQUFlLGdCQUFXLEtBQUssVUFBSyxNQUFNLG9CQUFlLGFBQWEsVUFBSyxhQUFhLE9BQUk7QUFDcEksY0FBTSxjQUFZLE1BQU0sQ0FBQyxNQUFNLFVBQUssZ0JBQWdCLFVBQUssZ0JBQWdCLE9BQUk7QUFDN0UsYUFBSyxhQUFXLE1BQU0sQ0FBQyxLQUFLLE9BQUk7QUFDaEMsYUFBSyxhQUFXLE1BQU0sQ0FBQyxLQUFLLE9BQUk7S0FDbkMsQ0FBQzs7QUFFTixRQUFJLENBQUMsTUFBTSxFQUFFLFVBQVUsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUMvQixZQUFJLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNyQix3QkFBWSxHQUFHLElBQUksQ0FBQztTQUN2QixNQUFNO0FBQ0gsaUJBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7U0FDbkM7S0FDSixDQUFDLENBQUM7O0FBRUgsUUFBSSxZQUFZLEVBQUU7QUFDZCxhQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQzs7QUFFckIsWUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDbEMsZ0JBQUksWUFBWSxHQUFHLEFBQUMsR0FBRyxLQUFLLE9BQU8sR0FBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ2pELGlCQUFLLENBQUMsU0FBUyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ2hFLENBQUMsQ0FBQztLQUNOOztBQUVELFdBQU8sS0FBSyxDQUFDO0NBQ2hCLENBQUMiLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL2luYy91dGlscycpO1xuY29uc3QgdHJhbnNmb3JtRGljdGlvbmFyeSA9IHJlcXVpcmUoJy4uL2Nzcy90cmFuc2Zvcm0tZGljdGlvbmFyeScpO1xuXG5jb25zdCBlYWNoID0gdXRpbHMuZWFjaDtcbmNvbnN0IGNhbWVsVG9EYXNoID0gdXRpbHMuY2FtZWxUb0Rhc2g7XG5jb25zdCB0cmFuc2Zvcm1Qcm9wcyA9IHRyYW5zZm9ybURpY3Rpb25hcnkucHJvcHM7XG5jb25zdCB6ZXJvTm90WmVybyA9IDAuMDAwMTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3V0cHV0LCBvcmlnaW4pIHtcbiAgICBsZXQgcHJvcHMgPSB7fSxcbiAgICAgICAgaGFzVHJhbnNmb3JtID0gZmFsc2UsXG4gICAgICAgIHNjYWxlID0gb3V0cHV0LnNjYWxlICE9PSB1bmRlZmluZWQgPyBvdXRwdXQuc2NhbGUgfHwgemVyb05vdFplcm8gOiBvdXRwdXQuc2NhbGVYIHx8IDEsXG4gICAgICAgIHNjYWxlWSA9IG91dHB1dC5zY2FsZVkgIT09IHVuZGVmaW5lZCA/IG91dHB1dC5zY2FsZVkgfHwgemVyb05vdFplcm8gOiBzY2FsZSB8fCAxLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW5YID0gb3JpZ2luLngsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpblkgPSBvcmlnaW4ueSxcbiAgICAgICAgc2NhbGVUcmFuc2Zvcm1YID0gLSB0cmFuc2Zvcm1PcmlnaW5YICogKHNjYWxlICogMSksXG4gICAgICAgIHNjYWxlVHJhbnNmb3JtWSA9IC0gdHJhbnNmb3JtT3JpZ2luWSAqIChzY2FsZVkgKiAxKSxcbiAgICAgICAgc2NhbGVSZXBsYWNlWCA9IHRyYW5zZm9ybU9yaWdpblggLyBzY2FsZSxcbiAgICAgICAgc2NhbGVSZXBsYWNlWSA9IHRyYW5zZm9ybU9yaWdpblkgLyBzY2FsZVksXG4gICAgICAgIHRyYW5zZm9ybSA9IHtcbiAgICAgICAgICAgIHRyYW5zbGF0ZTogYHRyYW5zbGF0ZSgke291dHB1dC50cmFuc2xhdGVYfSwgJHtvdXRwdXQudHJhbnNsYXRlWX0pIGAsXG4gICAgICAgICAgICBzY2FsZTogYHRyYW5zbGF0ZSgke3NjYWxlVHJhbnNmb3JtWH0sICR7c2NhbGVUcmFuc2Zvcm1ZfSkgc2NhbGUoJHtzY2FsZX0sICR7c2NhbGVZfSkgdHJhbnNsYXRlKCR7c2NhbGVSZXBsYWNlWH0sICR7c2NhbGVSZXBsYWNlWX0pIGAsXG4gICAgICAgICAgICByb3RhdGU6IGByb3RhdGUoJHtvdXRwdXQucm90YXRlfSwgJHt0cmFuc2Zvcm1PcmlnaW5YfSwgJHt0cmFuc2Zvcm1PcmlnaW5ZfSkgYCxcbiAgICAgICAgICAgIHNrZXdYOiBgc2tld1goJHtvdXRwdXQuc2tld1h9KSBgLFxuICAgICAgICAgICAgc2tld1k6IGBza2V3WSgke291dHB1dC5za2V3WX0pIGBcbiAgICAgICAgfTtcblxuICAgIGVhY2gob3V0cHV0LCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHJhbnNmb3JtUHJvcHNba2V5XSkge1xuICAgICAgICAgICAgaGFzVHJhbnNmb3JtID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzW2NhbWVsVG9EYXNoKGtleSldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChoYXNUcmFuc2Zvcm0pIHtcbiAgICAgICAgcHJvcHMudHJhbnNmb3JtID0gJyc7XG5cbiAgICAgICAgZWFjaCh0cmFuc2Zvcm0sIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gKGtleSA9PT0gJ3NjYWxlJykgPyAnMScgOiAnMCc7XG4gICAgICAgICAgICBwcm9wcy50cmFuc2Zvcm0gKz0gdmFsdWUucmVwbGFjZSgvdW5kZWZpbmVkL2csIGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wcztcbn07Il19

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var ALPHA = 'alpha';
	var COLOR = 'color';
	var SCALE = 'scale';
	
	module.exports = {
	    fill: COLOR,
	    stroke: COLOR,
	    scale: SCALE,
	    scaleX: SCALE,
	    scaleY: SCALE,
	    transformOrigin: 'positions',
	    d: 'complex',
	    opacity: ALPHA,
	    fillOpacity: ALPHA,
	    strokeOpacity: ALPHA
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGUtbWFwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDO0FBQ3RCLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQztBQUN0QixJQUFNLEtBQUssR0FBRyxPQUFPLENBQUM7O0FBRXRCLE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDYixRQUFJLEVBQUUsS0FBSztBQUNYLFVBQU0sRUFBRSxLQUFLO0FBQ2IsU0FBSyxFQUFFLEtBQUs7QUFDWixVQUFNLEVBQUUsS0FBSztBQUNiLFVBQU0sRUFBRSxLQUFLO0FBQ2IsbUJBQWUsRUFBRSxXQUFXO0FBQzVCLEtBQUMsRUFBRSxTQUFTO0FBQ1osV0FBTyxFQUFFLEtBQUs7QUFDZCxlQUFXLEVBQUUsS0FBSztBQUNsQixpQkFBYSxFQUFFLEtBQUs7Q0FDdkIsQ0FBQyIsImZpbGUiOiJ0eXBlLW1hcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFMUEhBID0gJ2FscGhhJztcbmNvbnN0IENPTE9SID0gJ2NvbG9yJztcbmNvbnN0IFNDQUxFID0gJ3NjYWxlJztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZmlsbDogQ09MT1IsXG4gICAgc3Ryb2tlOiBDT0xPUixcbiAgICBzY2FsZTogU0NBTEUsXG4gICAgc2NhbGVYOiBTQ0FMRSxcbiAgICBzY2FsZVk6IFNDQUxFLFxuICAgIHRyYW5zZm9ybU9yaWdpbjogJ3Bvc2l0aW9ucycsXG4gICAgZDogJ2NvbXBsZXgnLFxuICAgIG9wYWNpdHk6IEFMUEhBLFxuICAgIGZpbGxPcGFjaXR5OiBBTFBIQSxcbiAgICBzdHJva2VPcGFjaXR5OiBBTFBIQVxufTsiXX0=

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var STROKE = 'stroke';
	
	module.exports = {
	    opacity: STROKE + '-opacity',
	    width: STROKE + '-width',
	    miterlimit: STROKE + '-miterlimit'
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQzs7QUFFdEIsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNiLFdBQU8sRUFBRSxNQUFNLEdBQUcsVUFBVTtBQUM1QixTQUFLLEVBQUUsTUFBTSxHQUFHLFFBQVE7QUFDeEIsY0FBVSxFQUFFLE1BQU0sR0FBRyxhQUFhO0NBQ3JDLENBQUMiLCJmaWxlIjoibWFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFNUUk9LRSA9ICdzdHJva2UnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBvcGFjaXR5OiBTVFJPS0UgKyAnLW9wYWNpdHknLFxuICAgIHdpZHRoOiBTVFJPS0UgKyAnLXdpZHRoJyxcbiAgICBtaXRlcmxpbWl0OiBTVFJPS0UgKyAnLW1pdGVybGltaXQnXG59OyJdfQ==

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Queue = (function () {
	    function Queue() {
	        _classCallCheck(this, Queue);
	
	        this.clear();
	    }
	
	    /*
	        Add a set of arguments to queue
	    */
	
	    Queue.prototype.add = function add() {
	        this.queue.push([].slice.call(arguments));
	    };
	
	    /*
	        Get next set of arguments from queue
	    */
	
	    Queue.prototype.next = function next() {
	        var direction = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];
	
	        var queue = this.queue,
	            returnVal = false,
	            index = this.index;
	
	        // If our index is between 0 and the queue length, return that item
	        if (index >= 0 && index < queue.length) {
	            returnVal = queue[index];
	            this.index = index + direction;
	
	            // Or clear
	        } else {
	                this.clear();
	            }
	
	        return returnVal;
	    };
	
	    /*
	        Replace queue with empty array
	    */
	
	    Queue.prototype.clear = function clear() {
	        this.queue = [];
	        this.index = 0;
	    };
	
	    return Queue;
	})();
	
	module.exports = Queue;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlF1ZXVlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7SUFBTSxLQUFLO0FBQ1AsYUFERSxLQUFLLEdBQ087OEJBRFosS0FBSzs7QUFFSCxZQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDaEI7Ozs7O0FBQUE7QUFIQyxTQUFLLFdBUVAsR0FBRyxrQkFBRztBQUNGLFlBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDN0M7Ozs7OztBQVZDLFNBQUssV0FlUCxJQUFJLG1CQUFnQjtZQUFmLFNBQVMseURBQUcsQ0FBQzs7QUFDZCxZQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSztZQUNsQixTQUFTLEdBQUcsS0FBSztZQUNqQixLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUs7OztBQUFDLEFBR3ZCLFlBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRTtBQUNwQyxxQkFBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixnQkFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLEdBQUcsU0FBUzs7O0FBQUMsU0FHbEMsTUFBTTtBQUNILG9CQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDaEI7O0FBRUQsZUFBTyxTQUFTLENBQUM7S0FDcEI7Ozs7OztBQS9CQyxTQUFLLFdBb0NQLEtBQUssb0JBQUc7QUFDSixZQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNoQixZQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztLQUNsQjs7V0F2Q0MsS0FBSzs7O0FBMENYLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDIiwiZmlsZSI6IlF1ZXVlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUXVldWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICAgQWRkIGEgc2V0IG9mIGFyZ3VtZW50cyB0byBxdWV1ZVxuICAgICovXG4gICAgYWRkKCkge1xuICAgICAgICB0aGlzLnF1ZXVlLnB1c2goW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgICBHZXQgbmV4dCBzZXQgb2YgYXJndW1lbnRzIGZyb20gcXVldWVcbiAgICAqL1xuICAgIG5leHQoZGlyZWN0aW9uID0gMSkge1xuICAgICAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlLFxuICAgICAgICAgICAgcmV0dXJuVmFsID0gZmFsc2UsXG4gICAgICAgICAgICBpbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgIFxuICAgICAgICAvLyBJZiBvdXIgaW5kZXggaXMgYmV0d2VlbiAwIGFuZCB0aGUgcXVldWUgbGVuZ3RoLCByZXR1cm4gdGhhdCBpdGVtXG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgcXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm5WYWwgPSBxdWV1ZVtpbmRleF07XG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXggKyBkaXJlY3Rpb247XG4gICAgICAgIFxuICAgICAgICAvLyBPciBjbGVhclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmV0dXJuVmFsO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgIFJlcGxhY2UgcXVldWUgd2l0aCBlbXB0eSBhcnJheVxuICAgICovXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXVlOyJdfQ==

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/*
	    @param [string || NodeList || jQuery object]:
	        If string, treated as selector.
	        If not, treated as preexisting NodeList || jQuery object.
	*/
	module.exports = function (selector) {
	    var nodes = typeof selector === 'string' ? document.querySelectorAll(selector) : selector,
	        elements = [];
	
	    // If jQuery selection, get array of Elements
	    if (nodes.get) {
	        elements = nodes.get();
	
	        // Or convert NodeList to array
	    } else if (nodes.length) {
	            elements = [].slice.call(nodes);
	
	            // Or if it's just an Element, put into array
	        } else {
	                elements.push(nodes);
	            }
	
	    return elements;
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdC1kb20uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUtBLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxRQUFRLEVBQUU7QUFDakMsUUFBSSxLQUFLLEdBQUcsQUFBQyxPQUFPLFFBQVEsS0FBSyxRQUFRLEdBQUksUUFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVE7UUFDdkYsUUFBUSxHQUFHLEVBQUU7OztBQUFDLEFBR2xCLFFBQUksS0FBSyxDQUFDLEdBQUcsRUFBRTtBQUNYLGdCQUFRLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRTs7O0FBQUMsS0FHMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7QUFDckIsb0JBQVEsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7OztBQUFDLFNBR25DLE1BQU07QUFDSCx3QkFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN4Qjs7QUFFRCxXQUFPLFFBQVEsQ0FBQztDQUNuQixDQUFDIiwiZmlsZSI6InNlbGVjdC1kb20uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICAgIEBwYXJhbSBbc3RyaW5nIHx8IE5vZGVMaXN0IHx8IGpRdWVyeSBvYmplY3RdOlxuICAgICAgICBJZiBzdHJpbmcsIHRyZWF0ZWQgYXMgc2VsZWN0b3IuXG4gICAgICAgIElmIG5vdCwgdHJlYXRlZCBhcyBwcmVleGlzdGluZyBOb2RlTGlzdCB8fCBqUXVlcnkgb2JqZWN0LlxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgdmFyIG5vZGVzID0gKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikgOiBzZWxlY3RvcixcbiAgICAgICAgZWxlbWVudHMgPSBbXTtcblxuICAgIC8vIElmIGpRdWVyeSBzZWxlY3Rpb24sIGdldCBhcnJheSBvZiBFbGVtZW50c1xuICAgIGlmIChub2Rlcy5nZXQpIHtcbiAgICAgICAgZWxlbWVudHMgPSBub2Rlcy5nZXQoKTtcblxuICAgIC8vIE9yIGNvbnZlcnQgTm9kZUxpc3QgdG8gYXJyYXlcbiAgICB9IGVsc2UgaWYgKG5vZGVzLmxlbmd0aCkge1xuICAgICAgICBlbGVtZW50cyA9IFtdLnNsaWNlLmNhbGwobm9kZXMpO1xuXG4gICAgLy8gT3IgaWYgaXQncyBqdXN0IGFuIEVsZW1lbnQsIHB1dCBpbnRvIGFycmF5XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudHMucHVzaChub2Rlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnRzO1xufTsiXX0=

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var valueTypesManager = __webpack_require__(25),
	    calc = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/calc\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    isNum = utils.isNum,
	    each = utils.each;
	
	var numericalValues = ['current', 'to', 'min', 'max', 'velocity', 'friction', 'spring', 'acceleration'],
	    numNumericalValues = numericalValues.length,
	    defaultValue = {
	    current: 0,
	    velocity: 0,
	    speed: 0,
	    frameChange: 0
	};
	
	function checkNumericalValue(name) {
	    return numericalValues.indexOf(name) > -1;
	}
	
	/*
	    Check Role typeMaps to see if this value name has been mapped
	    to a specific value type
	
	    @param [string]
	    @param [array]
	    @returns [string]: Value type
	*/
	function checkRoles(name, roles) {
	    var valueType;
	
	    each(roles, function (key, role) {
	        if (role._typeMap) {
	            valueType = role._typeMap[role.map(name)] || valueType;
	        }
	    });
	
	    return valueType;
	}
	
	/*
	    Check value for special type
	
	    @param [object]
	    @param [object]
	    @param [object]
	    @param [string]
	    @returns [string || false]
	*/
	function checkValueType(existingValue, newValue, scope, valueName) {
	    var valueType;
	
	    // Check existing value for type already set
	    if (existingValue && existingValue.type) {
	        valueType = existingValue.type;
	    } else {
	        // Or check Role _typeMap properties
	        if (scope.roles) {
	            valueType = checkRoles(valueName, scope.roles);
	        }
	
	        // Finally run tests
	        if (!valueType && utils.isString(newValue.current)) {
	            valueType = valueTypesManager.test(newValue.current);
	        }
	    }
	
	    return valueType;
	}
	
	/*
	    Resolve a property
	
	    @param [string]
	    @param [string || function || number]
	    @param [object]
	    @param [object]
	    @returns [number]
	*/
	function resolve(name, prop, value, scope) {
	    var isNumericalValue = checkNumericalValue(name);
	
	    // If function, resolve
	    if (utils.isFunc(prop) && isNumericalValue) {
	        prop = prop.call(scope, scope);
	    }
	
	    // If string, check for relative numbers and units
	    if (utils.isString(prop)) {
	        // If relative value
	        if (prop.indexOf('=') > 0) {
	            prop = calc.relativeValue(value.current, prop);
	        }
	
	        // If unit
	        if (isNumericalValue) {
	            splitUnit(prop, value);
	        }
	    }
	
	    if (isNumericalValue) {
	        prop = parseFloat(prop);
	    }
	
	    return prop;
	}
	
	/*
	    Split a value into sub-values
	
	    @param [string]
	    @param [object]
	    @param [object]
	    @param [valueTypeHandler]
	    @returns [object]
	*/
	function split(name, value, scope, valueTypeHandler) {
	    var splitValues = {},
	        i = 0;
	
	    var _loop = function () {
	        var propName = numericalValues[i];
	        var splitProp = {};
	
	        if (value.hasOwnProperty(propName)) {
	            var valueProp = value[propName];
	
	            // If we need to first resolve this, resolve
	            if (utils.isFunc(valueProp)) {
	                valueProp = valueProp.call(scope, scope);
	            }
	
	            if (!utils.isString(valueProp)) {
	                return 'continue';
	            }
	
	            splitProp = valueTypeHandler.split(valueProp);
	
	            // Assign split properties to each child value
	            each(splitProp, function (key, prop) {
	                // Create new value if none exists
	                splitValues[key] = splitValues[key] || utils.copy(valueTypesManager.defaultProps(value.type, key));
	                splitValues[key][propName] = prop;
	
	                if (utils.isString(splitProp[key])) {
	                    splitUnit(splitValues[key][propName], splitValues[key]);
	                }
	            });
	        }
	    };
	
	    for (; i < numNumericalValues; i++) {
	        var _ret = _loop();
	
	        if (_ret === 'continue') continue;
	    }
	
	    return splitValues;
	}
	
	/*
	    Split value into number and unit, and set unit to value
	
	    @param [string]
	    @param [object]
	*/
	function splitUnit(property, hostValue) {
	    if (utils.isNum(property)) {
	        return property;
	    }
	    var returnVal = property;
	
	    var _utils$splitValUnit = utils.splitValUnit(property);
	
	    var value = _utils$splitValUnit.value;
	    var unit = _utils$splitValUnit.unit;
	
	    if (!isNaN(value)) {
	        returnVal = value;
	        if (unit) {
	            hostValue.unit = unit;
	        }
	    }
	
	    return returnVal;
	}
	
	/*
	    Preprocess incoming values, splitting non-numerical values
	    into sub-values ie hex
	
	    @param [object]
	    @param [object]
	    @param [object]
	    @param [string]
	*/
	function preprocess(existing, incoming, scope, defaultProp) {
	    var values = {};
	
	    each(incoming, function (key, value) {
	        var existingValue = existing[key],
	            newValue = {};
	
	        if (utils.isObj(value)) {
	            newValue = value;
	        } else {
	            newValue[defaultProp] = value;
	        }
	
	        // If value doesn't have a special type, check for one
	        newValue.type = checkValueType(existingValue, newValue, scope, key);
	
	        values[key] = newValue;
	
	        // If we have a type property, split/assign default props
	        if (newValue.type) {
	            var typeHandler = valueTypesManager[newValue.type];
	
	            // If valueType handler has a split function, split this value
	            if (typeHandler.split) {
	                var splitValues = split(key, newValue, scope, typeHandler);
	                newValue.children = {};
	
	                each(splitValues, function (childName, childValue) {
	                    each(newValue, function (key, value) {
	                        // Not great is it
	                        if (key !== 'children' && key !== 'action' && childValue[key] === undefined) {
	                            childValue[key] = value;
	                        }
	                    });
	
	                    childValue.parent = childValue.name = key;
	                    childValue.propName = childName;
	
	                    delete childValue.type;
	
	                    newValue.children[childName] = values[key + childName] = childValue;
	                });
	
	                if (typeHandler.template) {
	                    newValue.template = existingValue ? existingValue.template : typeHandler.template(newValue.current);
	                }
	
	                // Or just assign default properties for this value
	            } else {
	                    values[key] = utils.merge(valueTypesManager.defaultProps(newValue.type, key), newValue);
	                }
	        }
	    });
	
	    return values;
	}
	
	module.exports = {
	
	    /*
	        Flip value target/origin
	    */
	    flip: function (value) {
	        var target = value.target !== undefined ? value.target : value.current;
	        value.target = value.to = value.origin;
	        value.origin = target;
	    },
	
	    /*
	        Merge existing and incoming values, resolving properties
	        set as functions and splitting non-numerical values ie hex
	         @param [object]
	        @param [object]
	        @param [object]
	        @param [string] (optional)
	        @param [object]
	        @returns [object]: New values object
	    */
	    process: function (existing, incoming, inherit, defaultProp, scope) {
	        existing = existing || {};
	        defaultProp = defaultProp || 'current';
	        var preprocessed = preprocess(existing, incoming, scope, defaultProp);
	
	        each(preprocessed, function (key, value) {
	            var newValue = existing[key] || utils.copy(defaultValue),
	                hasChildren = value.children !== undefined,
	                defaultActionValue = inherit.action ? inherit.action.getDefaultValue() : {};
	
	            value.action = inherit.action;
	
	            each(defaultActionValue, function (propName, defaultActionProp) {
	                newValue[propName] = inherit.hasOwnProperty(propName) && !value.hasOwnProperty(propName) ? inherit[propName] : defaultActionProp;
	            });
	
	            each(value, function (valueName, valueProp) {
	                // If property is not undefined or a number, resolve
	                if (valueProp !== undefined && !isNum(valueProp) && !hasChildren) {
	                    valueProp = resolve(valueName, valueProp, newValue, scope);
	                }
	
	                newValue[valueName] = valueProp;
	
	                // Set internal target if this property is 'to'
	                if (valueName === 'to') {
	                    newValue.target = newValue.to;
	                }
	            });
	
	            newValue.origin = newValue.current;
	            newValue.hasRange = isNum(newValue.min) || isNum(newValue.max) ? true : false;
	
	            existing[key] = newValue;
	            scope.updateOrder(key, utils.has(newValue, 'watch'), hasChildren);
	        });
	
	        return existing;
	    }
	};
	//# sourceMappingURL=data:application/json;base64,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QUNwQiw0QkFBUSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDO2lCQUNqQzthQUNKLENBQUMsQ0FBQzs7QUFFSCxvQkFBUSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO0FBQ25DLG9CQUFRLENBQUMsUUFBUSxHQUFHLEFBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFJLElBQUksR0FBRyxLQUFLLENBQUM7O0FBRWhGLG9CQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDO0FBQ3pCLGlCQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztTQUNyRSxDQUFDLENBQUM7O0FBRUgsZUFBTyxRQUFRLENBQUM7S0FDbkI7Q0FDSixDQUFDIiwiZmlsZSI6InZhbHVlLW9wZXJhdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdmFsdWVUeXBlc01hbmFnZXIgPSByZXF1aXJlKCcuLi92YWx1ZS10eXBlcy9tYW5hZ2VyJyksXG4gICAgY2FsYyA9IHJlcXVpcmUoJy4uL2luYy9jYWxjJyksXG4gICAgdXRpbHMgPSByZXF1aXJlKCcuLi9pbmMvdXRpbHMnKSxcbiAgICBpc051bSA9IHV0aWxzLmlzTnVtLFxuICAgIGVhY2ggPSB1dGlscy5lYWNoO1xuXG5jb25zdCBudW1lcmljYWxWYWx1ZXMgPSBbJ2N1cnJlbnQnLCAndG8nLCAnbWluJywgJ21heCcsICd2ZWxvY2l0eScsICdmcmljdGlvbicsICdzcHJpbmcnLCAnYWNjZWxlcmF0aW9uJ10sXG4gICAgbnVtTnVtZXJpY2FsVmFsdWVzID0gbnVtZXJpY2FsVmFsdWVzLmxlbmd0aCxcbiAgICBkZWZhdWx0VmFsdWUgPSB7XG4gICAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgICBzcGVlZDogMCxcbiAgICAgICAgZnJhbWVDaGFuZ2U6IDBcbiAgICB9O1xuXG5mdW5jdGlvbiBjaGVja051bWVyaWNhbFZhbHVlKG5hbWUpIHtcbiAgICByZXR1cm4gKG51bWVyaWNhbFZhbHVlcy5pbmRleE9mKG5hbWUpID4gLTEpO1xufVxuXG4vKlxuICAgIENoZWNrIFJvbGUgdHlwZU1hcHMgdG8gc2VlIGlmIHRoaXMgdmFsdWUgbmFtZSBoYXMgYmVlbiBtYXBwZWRcbiAgICB0byBhIHNwZWNpZmljIHZhbHVlIHR5cGVcblxuICAgIEBwYXJhbSBbc3RyaW5nXVxuICAgIEBwYXJhbSBbYXJyYXldXG4gICAgQHJldHVybnMgW3N0cmluZ106IFZhbHVlIHR5cGVcbiovXG5mdW5jdGlvbiBjaGVja1JvbGVzKG5hbWUsIHJvbGVzKSB7XG4gICAgdmFyIHZhbHVlVHlwZTtcblxuICAgIGVhY2gocm9sZXMsIChrZXksIHJvbGUpID0+IHtcbiAgICAgICAgaWYgKHJvbGUuX3R5cGVNYXApIHtcbiAgICAgICAgICAgIHZhbHVlVHlwZSA9IHJvbGUuX3R5cGVNYXBbcm9sZS5tYXAobmFtZSldIHx8IHZhbHVlVHlwZTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZhbHVlVHlwZTtcbn1cblxuLypcbiAgICBDaGVjayB2YWx1ZSBmb3Igc3BlY2lhbCB0eXBlXG5cbiAgICBAcGFyYW0gW29iamVjdF1cbiAgICBAcGFyYW0gW29iamVjdF1cbiAgICBAcGFyYW0gW29iamVjdF1cbiAgICBAcGFyYW0gW3N0cmluZ11cbiAgICBAcmV0dXJucyBbc3RyaW5nIHx8IGZhbHNlXVxuKi9cbmZ1bmN0aW9uIGNoZWNrVmFsdWVUeXBlKGV4aXN0aW5nVmFsdWUsIG5ld1ZhbHVlLCBzY29wZSwgdmFsdWVOYW1lKSB7XG4gICAgdmFyIHZhbHVlVHlwZTtcblxuICAgIC8vIENoZWNrIGV4aXN0aW5nIHZhbHVlIGZvciB0eXBlIGFscmVhZHkgc2V0XG4gICAgaWYgKGV4aXN0aW5nVmFsdWUgJiYgZXhpc3RpbmdWYWx1ZS50eXBlKSB7XG4gICAgICAgIHZhbHVlVHlwZSA9IGV4aXN0aW5nVmFsdWUudHlwZTtcbiAgICBcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPciBjaGVjayBSb2xlIF90eXBlTWFwIHByb3BlcnRpZXNcbiAgICAgICAgaWYgKHNjb3BlLnJvbGVzKSB7XG4gICAgICAgICAgICB2YWx1ZVR5cGUgPSBjaGVja1JvbGVzKHZhbHVlTmFtZSwgc2NvcGUucm9sZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluYWxseSBydW4gdGVzdHNcbiAgICAgICAgaWYgKCF2YWx1ZVR5cGUgJiYgdXRpbHMuaXNTdHJpbmcobmV3VmFsdWUuY3VycmVudCkpIHtcbiAgICAgICAgICAgIHZhbHVlVHlwZSA9IHZhbHVlVHlwZXNNYW5hZ2VyLnRlc3QobmV3VmFsdWUuY3VycmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVUeXBlO1xufVxuXG4vKlxuICAgIFJlc29sdmUgYSBwcm9wZXJ0eVxuXG4gICAgQHBhcmFtIFtzdHJpbmddXG4gICAgQHBhcmFtIFtzdHJpbmcgfHwgZnVuY3Rpb24gfHwgbnVtYmVyXVxuICAgIEBwYXJhbSBbb2JqZWN0XVxuICAgIEBwYXJhbSBbb2JqZWN0XVxuICAgIEByZXR1cm5zIFtudW1iZXJdXG4qL1xuZnVuY3Rpb24gcmVzb2x2ZShuYW1lLCBwcm9wLCB2YWx1ZSwgc2NvcGUpIHtcbiAgICBsZXQgaXNOdW1lcmljYWxWYWx1ZSA9IGNoZWNrTnVtZXJpY2FsVmFsdWUobmFtZSk7XG5cbiAgICAvLyBJZiBmdW5jdGlvbiwgcmVzb2x2ZVxuICAgIGlmICh1dGlscy5pc0Z1bmMocHJvcCkgJiYgaXNOdW1lcmljYWxWYWx1ZSkge1xuICAgICAgICBwcm9wID0gcHJvcC5jYWxsKHNjb3BlLCBzY29wZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgc3RyaW5nLCBjaGVjayBmb3IgcmVsYXRpdmUgbnVtYmVycyBhbmQgdW5pdHNcbiAgICBpZiAodXRpbHMuaXNTdHJpbmcocHJvcCkpIHtcbiAgICAgICAgLy8gSWYgcmVsYXRpdmUgdmFsdWVcbiAgICAgICAgaWYgKHByb3AuaW5kZXhPZignPScpID4gMCkge1xuICAgICAgICAgICAgcHJvcCA9IGNhbGMucmVsYXRpdmVWYWx1ZSh2YWx1ZS5jdXJyZW50LCBwcm9wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHVuaXRcbiAgICAgICAgaWYgKGlzTnVtZXJpY2FsVmFsdWUpIHtcbiAgICAgICAgICAgIHNwbGl0VW5pdChwcm9wLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNOdW1lcmljYWxWYWx1ZSkge1xuICAgICAgICBwcm9wID0gcGFyc2VGbG9hdChwcm9wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbn1cblxuLypcbiAgICBTcGxpdCBhIHZhbHVlIGludG8gc3ViLXZhbHVlc1xuXG4gICAgQHBhcmFtIFtzdHJpbmddXG4gICAgQHBhcmFtIFtvYmplY3RdXG4gICAgQHBhcmFtIFtvYmplY3RdXG4gICAgQHBhcmFtIFt2YWx1ZVR5cGVIYW5kbGVyXVxuICAgIEByZXR1cm5zIFtvYmplY3RdXG4qL1xuZnVuY3Rpb24gc3BsaXQobmFtZSwgdmFsdWUsIHNjb3BlLCB2YWx1ZVR5cGVIYW5kbGVyKSB7XG4gICAgdmFyIHNwbGl0VmFsdWVzID0ge30sXG4gICAgICAgIGkgPSAwO1xuXG4gICAgZm9yICg7IGkgPCBudW1OdW1lcmljYWxWYWx1ZXM7IGkrKykge1xuICAgICAgICBsZXQgcHJvcE5hbWUgPSBudW1lcmljYWxWYWx1ZXNbaV07XG4gICAgICAgIGxldCBzcGxpdFByb3AgPSB7fTtcblxuICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWVQcm9wID0gdmFsdWVbcHJvcE5hbWVdO1xuXG4gICAgICAgICAgICAvLyBJZiB3ZSBuZWVkIHRvIGZpcnN0IHJlc29sdmUgdGhpcywgcmVzb2x2ZVxuICAgICAgICAgICAgaWYgKHV0aWxzLmlzRnVuYyh2YWx1ZVByb3ApKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVQcm9wID0gdmFsdWVQcm9wLmNhbGwoc2NvcGUsIHNjb3BlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF1dGlscy5pc1N0cmluZyh2YWx1ZVByb3ApKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNwbGl0UHJvcCA9IHZhbHVlVHlwZUhhbmRsZXIuc3BsaXQodmFsdWVQcm9wKTtcblxuICAgICAgICAgICAgLy8gQXNzaWduIHNwbGl0IHByb3BlcnRpZXMgdG8gZWFjaCBjaGlsZCB2YWx1ZVxuICAgICAgICAgICAgZWFjaChzcGxpdFByb3AsIChrZXksIHByb3ApID0+IHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgbmV3IHZhbHVlIGlmIG5vbmUgZXhpc3RzXG4gICAgICAgICAgICAgICAgc3BsaXRWYWx1ZXNba2V5XSA9IHNwbGl0VmFsdWVzW2tleV0gfHwgdXRpbHMuY29weSh2YWx1ZVR5cGVzTWFuYWdlci5kZWZhdWx0UHJvcHModmFsdWUudHlwZSwga2V5KSk7XG4gICAgICAgICAgICAgICAgc3BsaXRWYWx1ZXNba2V5XVtwcm9wTmFtZV0gPSBwcm9wO1xuXG4gICAgICAgICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHNwbGl0UHJvcFtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICBzcGxpdFVuaXQoc3BsaXRWYWx1ZXNba2V5XVtwcm9wTmFtZV0sIHNwbGl0VmFsdWVzW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwbGl0VmFsdWVzO1xufVxuXG4vKlxuICAgIFNwbGl0IHZhbHVlIGludG8gbnVtYmVyIGFuZCB1bml0LCBhbmQgc2V0IHVuaXQgdG8gdmFsdWVcblxuICAgIEBwYXJhbSBbc3RyaW5nXVxuICAgIEBwYXJhbSBbb2JqZWN0XVxuKi9cbmZ1bmN0aW9uIHNwbGl0VW5pdChwcm9wZXJ0eSwgaG9zdFZhbHVlKSB7XG4gICAgaWYgKHV0aWxzLmlzTnVtKHByb3BlcnR5KSkgeyByZXR1cm4gcHJvcGVydHk7IH1cbiAgICBsZXQgcmV0dXJuVmFsID0gcHJvcGVydHksXG4gICAgICAgIHsgdmFsdWUsIHVuaXQgfSA9IHV0aWxzLnNwbGl0VmFsVW5pdChwcm9wZXJ0eSk7XG5cbiAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICByZXR1cm5WYWwgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHVuaXQpIHtcbiAgICAgICAgICAgIGhvc3RWYWx1ZS51bml0ID0gdW5pdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXR1cm5WYWw7XG59XG5cbi8qXG4gICAgUHJlcHJvY2VzcyBpbmNvbWluZyB2YWx1ZXMsIHNwbGl0dGluZyBub24tbnVtZXJpY2FsIHZhbHVlc1xuICAgIGludG8gc3ViLXZhbHVlcyBpZSBoZXhcblxuICAgIEBwYXJhbSBbb2JqZWN0XVxuICAgIEBwYXJhbSBbb2JqZWN0XVxuICAgIEBwYXJhbSBbb2JqZWN0XVxuICAgIEBwYXJhbSBbc3RyaW5nXVxuKi9cbmZ1bmN0aW9uIHByZXByb2Nlc3MoZXhpc3RpbmcsIGluY29taW5nLCBzY29wZSwgZGVmYXVsdFByb3ApIHtcbiAgICB2YXIgdmFsdWVzID0ge307XG5cbiAgICBlYWNoKGluY29taW5nLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICBsZXQgZXhpc3RpbmdWYWx1ZSA9IGV4aXN0aW5nW2tleV0sXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHt9O1xuXG4gICAgICAgIGlmICh1dGlscy5pc09iaih2YWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZVtkZWZhdWx0UHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHZhbHVlIGRvZXNuJ3QgaGF2ZSBhIHNwZWNpYWwgdHlwZSwgY2hlY2sgZm9yIG9uZVxuICAgICAgICBuZXdWYWx1ZS50eXBlID0gY2hlY2tWYWx1ZVR5cGUoZXhpc3RpbmdWYWx1ZSwgbmV3VmFsdWUsIHNjb3BlLCBrZXkpO1xuXG4gICAgICAgIHZhbHVlc1trZXldID0gbmV3VmFsdWU7XG5cbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHR5cGUgcHJvcGVydHksIHNwbGl0L2Fzc2lnbiBkZWZhdWx0IHByb3BzXG4gICAgICAgIGlmIChuZXdWYWx1ZS50eXBlKSB7XG4gICAgICAgICAgICBsZXQgdHlwZUhhbmRsZXIgPSB2YWx1ZVR5cGVzTWFuYWdlcltuZXdWYWx1ZS50eXBlXTtcblxuICAgICAgICAgICAgLy8gSWYgdmFsdWVUeXBlIGhhbmRsZXIgaGFzIGEgc3BsaXQgZnVuY3Rpb24sIHNwbGl0IHRoaXMgdmFsdWVcbiAgICAgICAgICAgIGlmICh0eXBlSGFuZGxlci5zcGxpdCkge1xuICAgICAgICAgICAgICAgIGxldCBzcGxpdFZhbHVlcyA9IHNwbGl0KGtleSwgbmV3VmFsdWUsIHNjb3BlLCB0eXBlSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUuY2hpbGRyZW4gPSB7fTtcblxuICAgICAgICAgICAgICAgIGVhY2goc3BsaXRWYWx1ZXMsIChjaGlsZE5hbWUsIGNoaWxkVmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWFjaChuZXdWYWx1ZSwgKGtleSAsdmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBncmVhdCBpcyBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gJ2NoaWxkcmVuJyAmJiBrZXkgIT09ICdhY3Rpb24nICYmIGNoaWxkVmFsdWVba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRWYWx1ZVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkVmFsdWUucGFyZW50ID0gY2hpbGRWYWx1ZS5uYW1lID0ga2V5O1xuICAgICAgICAgICAgICAgICAgICBjaGlsZFZhbHVlLnByb3BOYW1lID0gY2hpbGROYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjaGlsZFZhbHVlLnR5cGU7XG5cbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUuY2hpbGRyZW5bY2hpbGROYW1lXSA9IHZhbHVlc1trZXkgKyBjaGlsZE5hbWVdID0gY2hpbGRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlSGFuZGxlci50ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZS50ZW1wbGF0ZSA9IGV4aXN0aW5nVmFsdWUgPyBleGlzdGluZ1ZhbHVlLnRlbXBsYXRlIDogdHlwZUhhbmRsZXIudGVtcGxhdGUobmV3VmFsdWUuY3VycmVudCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBPciBqdXN0IGFzc2lnbiBkZWZhdWx0IHByb3BlcnRpZXMgZm9yIHRoaXMgdmFsdWVcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzW2tleV0gPSB1dGlscy5tZXJnZSh2YWx1ZVR5cGVzTWFuYWdlci5kZWZhdWx0UHJvcHMobmV3VmFsdWUudHlwZSwga2V5KSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdmFsdWVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIC8qXG4gICAgICAgIEZsaXAgdmFsdWUgdGFyZ2V0L29yaWdpblxuICAgICovXG4gICAgZmxpcDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSAodmFsdWUudGFyZ2V0ICE9PSB1bmRlZmluZWQpID8gdmFsdWUudGFyZ2V0IDogdmFsdWUuY3VycmVudDtcbiAgICAgICAgdmFsdWUudGFyZ2V0ID0gdmFsdWUudG8gPSB2YWx1ZS5vcmlnaW47XG4gICAgICAgIHZhbHVlLm9yaWdpbiA9IHRhcmdldDtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgICAgTWVyZ2UgZXhpc3RpbmcgYW5kIGluY29taW5nIHZhbHVlcywgcmVzb2x2aW5nIHByb3BlcnRpZXNcbiAgICAgICAgc2V0IGFzIGZ1bmN0aW9ucyBhbmQgc3BsaXR0aW5nIG5vbi1udW1lcmljYWwgdmFsdWVzIGllIGhleFxuXG4gICAgICAgIEBwYXJhbSBbb2JqZWN0XVxuICAgICAgICBAcGFyYW0gW29iamVjdF1cbiAgICAgICAgQHBhcmFtIFtvYmplY3RdXG4gICAgICAgIEBwYXJhbSBbc3RyaW5nXSAob3B0aW9uYWwpXG4gICAgICAgIEBwYXJhbSBbb2JqZWN0XVxuICAgICAgICBAcmV0dXJucyBbb2JqZWN0XTogTmV3IHZhbHVlcyBvYmplY3RcbiAgICAqL1xuICAgIHByb2Nlc3M6IGZ1bmN0aW9uIChleGlzdGluZywgaW5jb21pbmcsIGluaGVyaXQsIGRlZmF1bHRQcm9wLCBzY29wZSkge1xuICAgICAgICBleGlzdGluZyA9IGV4aXN0aW5nIHx8IHt9O1xuICAgICAgICBkZWZhdWx0UHJvcCA9IGRlZmF1bHRQcm9wIHx8ICdjdXJyZW50JztcbiAgICAgICAgbGV0IHByZXByb2Nlc3NlZCA9IHByZXByb2Nlc3MoZXhpc3RpbmcsIGluY29taW5nLCBzY29wZSwgZGVmYXVsdFByb3ApO1xuXG4gICAgICAgIGVhY2gocHJlcHJvY2Vzc2VkLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgbGV0IG5ld1ZhbHVlID0gZXhpc3Rpbmdba2V5XSB8fCB1dGlscy5jb3B5KGRlZmF1bHRWYWx1ZSksXG4gICAgICAgICAgICAgICAgaGFzQ2hpbGRyZW4gPSAodmFsdWUuY2hpbGRyZW4gIT09IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgZGVmYXVsdEFjdGlvblZhbHVlID0gaW5oZXJpdC5hY3Rpb24gPyBpbmhlcml0LmFjdGlvbi5nZXREZWZhdWx0VmFsdWUoKSA6IHt9O1xuXG4gICAgICAgICAgICB2YWx1ZS5hY3Rpb24gPSBpbmhlcml0LmFjdGlvbjtcblxuICAgICAgICAgICAgZWFjaChkZWZhdWx0QWN0aW9uVmFsdWUsIChwcm9wTmFtZSwgZGVmYXVsdEFjdGlvblByb3ApID0+IHtcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZVtwcm9wTmFtZV0gPSAoaW5oZXJpdC5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgJiYgIXZhbHVlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkgPyBpbmhlcml0W3Byb3BOYW1lXSA6IGRlZmF1bHRBY3Rpb25Qcm9wO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGVhY2godmFsdWUsICh2YWx1ZU5hbWUsIHZhbHVlUHJvcCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIElmIHByb3BlcnR5IGlzIG5vdCB1bmRlZmluZWQgb3IgYSBudW1iZXIsIHJlc29sdmVcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVQcm9wICE9PSB1bmRlZmluZWQgJiYgIWlzTnVtKHZhbHVlUHJvcCkgJiYgIWhhc0NoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlUHJvcCA9IHJlc29sdmUodmFsdWVOYW1lLCB2YWx1ZVByb3AsIG5ld1ZhbHVlLCBzY29wZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbmV3VmFsdWVbdmFsdWVOYW1lXSA9IHZhbHVlUHJvcDtcblxuICAgICAgICAgICAgICAgIC8vIFNldCBpbnRlcm5hbCB0YXJnZXQgaWYgdGhpcyBwcm9wZXJ0eSBpcyAndG8nXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlTmFtZSA9PT0gJ3RvJykge1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZS50YXJnZXQgPSBuZXdWYWx1ZS50bztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbmV3VmFsdWUub3JpZ2luID0gbmV3VmFsdWUuY3VycmVudDtcbiAgICAgICAgICAgIG5ld1ZhbHVlLmhhc1JhbmdlID0gKGlzTnVtKG5ld1ZhbHVlLm1pbikgfHwgaXNOdW0obmV3VmFsdWUubWF4KSkgPyB0cnVlIDogZmFsc2U7XG5cbiAgICAgICAgICAgIGV4aXN0aW5nW2tleV0gPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIHNjb3BlLnVwZGF0ZU9yZGVyKGtleSwgdXRpbHMuaGFzKG5ld1ZhbHVlLCAnd2F0Y2gnKSwgaGFzQ2hpbGRyZW4pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgfVxufTsiXX0=

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var calc = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/calc\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var Action = __webpack_require__(32);
	var defaultAction = new Action();
	var Watch = __webpack_require__(60);
	var watcher = new Watch();
	
	module.exports = function (actor, framestamp, frameDuration) {
	    var numActiveValues = actor.activeValues.length;
	    var state = actor.state;
	
	    actor.hasChanged = false;
	
	    for (var i = 0; i < numActiveValues; i++) {
	        // Get value and key
	        var key = actor.activeValues[i];
	        var value = actor.values[key];
	        var action = !value.action || value.action && !value.action.isActive ? defaultAction : value.action;
	
	        // Fire action onFrameStart if not already fired
	        if (action.onFrameStart && action.lastUpdate !== framestamp) {
	            action.onFrameStart(actor, frameDuration, framestamp);
	            action.lastUpdate = framestamp;
	        }
	
	        // Calculate new value
	        var updatedValue = utils.has(value, 'watch') ? watcher.process(actor, value) : action.process(actor, value, key, frameDuration);
	
	        // User-defined transform function
	        if (value.transform) {
	            updatedValue = value.transform(updatedValue, key, actor);
	        }
	
	        // Limit if actor action does that kind of thing
	        if (action.limit && value.hasRange) {
	            updatedValue = action.limit(updatedValue, value);
	        }
	
	        // Smooth value if we have smoothing
	        if (value.smooth) {
	            updatedValue = calc.smooth(updatedValue, value.current, frameDuration, value.smooth);
	        }
	
	        // Round value if round is true
	        if (value.round) {
	            updatedValue = Math.round(updatedValue);
	        }
	
	        // Update frameChange
	        value.frameChange = updatedValue - value.current;
	
	        // Calculate velocity if Action hasn't
	        if (!action.calculatesVelocity) {
	            value.velocity = calc.speedPerSecond(value.frameChange, frameDuration);
	        }
	
	        // Update current speed
	        value.speed = Math.abs(value.velocity);
	
	        // Check if value's changed
	        if (value.current !== updatedValue || actor.firstFrame) {
	            actor.hasChanged = true;
	        }
	
	        // Set new current
	        value.current = updatedValue;
	        var valueState = value.unit ? updatedValue + value.unit : updatedValue;
	
	        // Put value in state if no parent
	        if (!value.parent) {
	            state.values[key] = valueState;
	
	            // Or, add to parent state to be combined later
	        } else {
	                state[value.parent] = state[value.parent] || {};
	                state[value.parent][value.propName] = valueState;
	            }
	    }
	};
	//# sourceMappingURL=data:application/json;base64,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LENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDMUU7OztBQUFBLEFBR0QsYUFBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7OztBQUFDLEFBR3ZDLFlBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxZQUFZLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTtBQUNwRCxpQkFBSyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7U0FDM0I7OztBQUFBLEFBR0QsYUFBSyxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUM7QUFDN0IsWUFBSSxVQUFVLEdBQUcsQUFBQyxLQUFLLENBQUMsSUFBSSxHQUFJLFlBQVksR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLFlBQVk7OztBQUFDLEFBR3pFLFlBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO0FBQ2YsaUJBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsVUFBVTs7O0FBQUMsU0FHbEMsTUFBTTtBQUNILHFCQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2hELHFCQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxVQUFVLENBQUM7YUFDcEQ7S0FDSjtDQUNKLENBQUEiLCJmaWxlIjoidXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY2FsYyA9IHJlcXVpcmUoJy4uL2luYy9jYWxjJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4uL2luYy91dGlscycpO1xuY29uc3QgQWN0aW9uID0gcmVxdWlyZSgnLi4vYWN0aW9ucy9BY3Rpb24nKTtcbmNvbnN0IGRlZmF1bHRBY3Rpb24gPSBuZXcgQWN0aW9uKCk7XG5jb25zdCBXYXRjaCA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvV2F0Y2gnKTtcbmNvbnN0IHdhdGNoZXIgPSBuZXcgV2F0Y2goKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoYWN0b3IsIGZyYW1lc3RhbXAsIGZyYW1lRHVyYXRpb24pID0+IHtcbiAgICBjb25zdCBudW1BY3RpdmVWYWx1ZXMgPSBhY3Rvci5hY3RpdmVWYWx1ZXMubGVuZ3RoO1xuICAgIGxldCBzdGF0ZSA9IGFjdG9yLnN0YXRlO1xuXG4gICAgYWN0b3IuaGFzQ2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1BY3RpdmVWYWx1ZXM7IGkrKykge1xuICAgICAgICAvLyBHZXQgdmFsdWUgYW5kIGtleVxuICAgICAgICBsZXQga2V5ID0gYWN0b3IuYWN0aXZlVmFsdWVzW2ldO1xuICAgICAgICBsZXQgdmFsdWUgPSBhY3Rvci52YWx1ZXNba2V5XTtcbiAgICAgICAgbGV0IGFjdGlvbiA9ICghdmFsdWUuYWN0aW9uIHx8IHZhbHVlLmFjdGlvbiAmJiAhdmFsdWUuYWN0aW9uLmlzQWN0aXZlKSA/IGRlZmF1bHRBY3Rpb24gOiB2YWx1ZS5hY3Rpb247XG5cbiAgICAgICAgLy8gRmlyZSBhY3Rpb24gb25GcmFtZVN0YXJ0IGlmIG5vdCBhbHJlYWR5IGZpcmVkXG4gICAgICAgIGlmIChhY3Rpb24ub25GcmFtZVN0YXJ0ICYmIGFjdGlvbi5sYXN0VXBkYXRlICE9PSBmcmFtZXN0YW1wKSB7XG4gICAgICAgICAgICBhY3Rpb24ub25GcmFtZVN0YXJ0KGFjdG9yLCBmcmFtZUR1cmF0aW9uLCBmcmFtZXN0YW1wKTtcbiAgICAgICAgICAgIGFjdGlvbi5sYXN0VXBkYXRlID0gZnJhbWVzdGFtcDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBDYWxjdWxhdGUgbmV3IHZhbHVlXG4gICAgICAgIGxldCB1cGRhdGVkVmFsdWUgPSB1dGlscy5oYXModmFsdWUsICd3YXRjaCcpID8gd2F0Y2hlci5wcm9jZXNzKGFjdG9yLCB2YWx1ZSkgOiBhY3Rpb24ucHJvY2VzcyhhY3RvciwgdmFsdWUsIGtleSwgZnJhbWVEdXJhdGlvbik7XG5cbiAgICAgICAgLy8gVXNlci1kZWZpbmVkIHRyYW5zZm9ybSBmdW5jdGlvblxuICAgICAgICBpZiAodmFsdWUudHJhbnNmb3JtKSB7XG4gICAgICAgICAgICB1cGRhdGVkVmFsdWUgPSB2YWx1ZS50cmFuc2Zvcm0odXBkYXRlZFZhbHVlLCBrZXksIGFjdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExpbWl0IGlmIGFjdG9yIGFjdGlvbiBkb2VzIHRoYXQga2luZCBvZiB0aGluZ1xuICAgICAgICBpZiAoYWN0aW9uLmxpbWl0ICYmIHZhbHVlLmhhc1JhbmdlKSB7XG4gICAgICAgICAgICB1cGRhdGVkVmFsdWUgPSBhY3Rpb24ubGltaXQodXBkYXRlZFZhbHVlLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTbW9vdGggdmFsdWUgaWYgd2UgaGF2ZSBzbW9vdGhpbmdcbiAgICAgICAgaWYgKHZhbHVlLnNtb290aCkge1xuICAgICAgICAgICAgdXBkYXRlZFZhbHVlID0gY2FsYy5zbW9vdGgodXBkYXRlZFZhbHVlLCB2YWx1ZS5jdXJyZW50LCBmcmFtZUR1cmF0aW9uLCB2YWx1ZS5zbW9vdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUm91bmQgdmFsdWUgaWYgcm91bmQgaXMgdHJ1ZVxuICAgICAgICBpZiAodmFsdWUucm91bmQpIHtcbiAgICAgICAgICAgIHVwZGF0ZWRWYWx1ZSA9IE1hdGgucm91bmQodXBkYXRlZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBmcmFtZUNoYW5nZVxuICAgICAgICB2YWx1ZS5mcmFtZUNoYW5nZSA9IHVwZGF0ZWRWYWx1ZSAtIHZhbHVlLmN1cnJlbnQ7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHZlbG9jaXR5IGlmIEFjdGlvbiBoYXNuJ3RcbiAgICAgICAgaWYgKCFhY3Rpb24uY2FsY3VsYXRlc1ZlbG9jaXR5KSB7XG4gICAgICAgICAgICB2YWx1ZS52ZWxvY2l0eSA9IGNhbGMuc3BlZWRQZXJTZWNvbmQodmFsdWUuZnJhbWVDaGFuZ2UsIGZyYW1lRHVyYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGN1cnJlbnQgc3BlZWRcbiAgICAgICAgdmFsdWUuc3BlZWQgPSBNYXRoLmFicyh2YWx1ZS52ZWxvY2l0eSk7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdmFsdWUncyBjaGFuZ2VkXG4gICAgICAgIGlmICh2YWx1ZS5jdXJyZW50ICE9PSB1cGRhdGVkVmFsdWUgfHwgYWN0b3IuZmlyc3RGcmFtZSkge1xuICAgICAgICAgICAgYWN0b3IuaGFzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgbmV3IGN1cnJlbnQgXG4gICAgICAgIHZhbHVlLmN1cnJlbnQgPSB1cGRhdGVkVmFsdWU7XG4gICAgICAgIGxldCB2YWx1ZVN0YXRlID0gKHZhbHVlLnVuaXQpID8gdXBkYXRlZFZhbHVlICsgdmFsdWUudW5pdCA6IHVwZGF0ZWRWYWx1ZTtcblxuICAgICAgICAvLyBQdXQgdmFsdWUgaW4gc3RhdGUgaWYgbm8gcGFyZW50XG4gICAgICAgIGlmICghdmFsdWUucGFyZW50KSB7XG4gICAgICAgICAgICBzdGF0ZS52YWx1ZXNba2V5XSA9IHZhbHVlU3RhdGU7XG5cbiAgICAgICAgLy8gT3IsIGFkZCB0byBwYXJlbnQgc3RhdGUgdG8gYmUgY29tYmluZWQgbGF0ZXJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlW3ZhbHVlLnBhcmVudF0gPSBzdGF0ZVt2YWx1ZS5wYXJlbnRdIHx8IHt9O1xuICAgICAgICAgICAgc3RhdGVbdmFsdWUucGFyZW50XVt2YWx1ZS5wcm9wTmFtZV0gPSB2YWx1ZVN0YXRlO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var valueTypeManager = __webpack_require__(25);
	var each = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).each;
	
	var createMapper = function (role, mappedValues) {
	    return function (name, val) {
	        return mappedValues[role.map(name)] = val;
	    };
	};
	
	module.exports = function (actor) {
	    var numActiveParents = actor.activeParents.length;
	    var numRoles = actor.roles.length;
	
	    // Update parent values from calculated children
	    for (var i = 0; i < numActiveParents; i++) {
	        var key = actor.activeParents[i];
	        var value = actor.values[key];
	
	        // Update parent value current property
	        value.current = valueTypeManager[value.type].combine(actor.state[key], value.template);
	
	        // Update state
	        actor.state.values[key] = value.current;
	    }
	
	    // Fire `frame` and `update` callbacks on all Roles
	    for (var i = 0; i < numRoles; i++) {
	        var role = actor.roles[i];
	        var mappedValues = {};
	
	        each(actor.state.values, createMapper(role, mappedValues));
	
	        if (role.frame) {
	            role.frame.call(actor, mappedValues, actor);
	        }
	
	        if (role.update && actor.hasChanged) {
	            role.update.call(actor, mappedValues, actor);
	        }
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbmRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDM0QsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQzs7QUFFMUMsSUFBTSxZQUFZLEdBQUcsVUFBQyxJQUFJLEVBQUUsWUFBWTtXQUFLLFVBQUMsSUFBSSxFQUFFLEdBQUc7ZUFBSyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUc7S0FBQTtDQUFBLENBQUM7O0FBRS9GLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBQyxLQUFLLEVBQUs7QUFDeEIsUUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztBQUNwRCxRQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU07OztBQUFDLEFBR3BDLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN2QyxZQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFlBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDOzs7QUFBQyxBQUc5QixhQUFLLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDOzs7QUFBQyxBQUd2RixhQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0tBQzNDOzs7QUFBQSxBQUdELFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDL0IsWUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixZQUFJLFlBQVksR0FBRyxFQUFFLENBQUM7O0FBRXRCLFlBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7O0FBRTNELFlBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtBQUNaLGdCQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQy9DOztBQUVELFlBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFFO0FBQ2pDLGdCQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2hEO0tBQ0o7Q0FDSixDQUFBIiwiZmlsZSI6InJlbmRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHZhbHVlVHlwZU1hbmFnZXIgPSByZXF1aXJlKCcuLi92YWx1ZS10eXBlcy9tYW5hZ2VyJyk7XG5jb25zdCBlYWNoID0gcmVxdWlyZSgnLi4vaW5jL3V0aWxzJykuZWFjaDtcblxuY29uc3QgY3JlYXRlTWFwcGVyID0gKHJvbGUsIG1hcHBlZFZhbHVlcykgPT4gKG5hbWUsIHZhbCkgPT4gbWFwcGVkVmFsdWVzW3JvbGUubWFwKG5hbWUpXSA9IHZhbDtcblxubW9kdWxlLmV4cG9ydHMgPSAoYWN0b3IpID0+IHtcbiAgICBjb25zdCBudW1BY3RpdmVQYXJlbnRzID0gYWN0b3IuYWN0aXZlUGFyZW50cy5sZW5ndGg7XG4gICAgY29uc3QgbnVtUm9sZXMgPSBhY3Rvci5yb2xlcy5sZW5ndGg7XG5cbiAgICAvLyBVcGRhdGUgcGFyZW50IHZhbHVlcyBmcm9tIGNhbGN1bGF0ZWQgY2hpbGRyZW5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUFjdGl2ZVBhcmVudHM7IGkrKykge1xuICAgICAgICBsZXQga2V5ID0gYWN0b3IuYWN0aXZlUGFyZW50c1tpXTtcbiAgICAgICAgbGV0IHZhbHVlID0gYWN0b3IudmFsdWVzW2tleV07XG5cbiAgICAgICAgLy8gVXBkYXRlIHBhcmVudCB2YWx1ZSBjdXJyZW50IHByb3BlcnR5XG4gICAgICAgIHZhbHVlLmN1cnJlbnQgPSB2YWx1ZVR5cGVNYW5hZ2VyW3ZhbHVlLnR5cGVdLmNvbWJpbmUoYWN0b3Iuc3RhdGVba2V5XSwgdmFsdWUudGVtcGxhdGUpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBzdGF0ZVxuICAgICAgICBhY3Rvci5zdGF0ZS52YWx1ZXNba2V5XSA9IHZhbHVlLmN1cnJlbnQ7XG4gICAgfVxuXG4gICAgLy8gRmlyZSBgZnJhbWVgIGFuZCBgdXBkYXRlYCBjYWxsYmFja3Mgb24gYWxsIFJvbGVzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Sb2xlczsgaSsrKSB7XG4gICAgICAgIGxldCByb2xlID0gYWN0b3Iucm9sZXNbaV07XG4gICAgICAgIGxldCBtYXBwZWRWYWx1ZXMgPSB7fTtcblxuICAgICAgICBlYWNoKGFjdG9yLnN0YXRlLnZhbHVlcywgY3JlYXRlTWFwcGVyKHJvbGUsIG1hcHBlZFZhbHVlcykpO1xuXG4gICAgICAgIGlmIChyb2xlLmZyYW1lKSB7XG4gICAgICAgICAgICByb2xlLmZyYW1lLmNhbGwoYWN0b3IsIG1hcHBlZFZhbHVlcywgYWN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJvbGUudXBkYXRlICYmIGFjdG9yLmhhc0NoYW5nZWQpIHtcbiAgICAgICAgICAgIHJvbGUudXBkYXRlLmNhbGwoYWN0b3IsIG1hcHBlZFZhbHVlcywgYWN0b3IpO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var each = utils.each;
	
	/*
	    Check all Actions for `onEnd`, return true if all are true
	
	    @param [Actor]
	    @param [boolean]
	    @returns [boolean]
	*/
	var checkAllActionsHaveEnded = function (actor, hasChanged) {
	    var hasEnded = true;
	    var values = actor.state.values;
	
	    each(actor.activeActions, function (key, action) {
	        // Return if action has been deleted elsewhere
	        if (!action) {
	            return;
	        }
	
	        if (action.onFrame) {
	            action.onFrame.call(actor, values, actor, action);
	        }
	
	        if (action.onUpdate && hasChanged) {
	            action.onUpdate.call(actor, values, actor, action);
	        }
	
	        if (action.hasEnded && action.hasEnded(actor) === false) {
	            hasEnded = false;
	        } else {
	            if (action.onComplete) {
	                action.onComplete.call(actor, actor, action);
	            }
	            actor.unbindAction(key);
	        }
	    });
	
	    return hasEnded;
	};
	
	module.exports = function (actor, framestamp) {
	    if (actor.isActive) {
	        actor.isActive = false;
	
	        if (checkAllActionsHaveEnded(actor, actor.hasChanged)) {
	            var numRoles = actor.roles.length;
	
	            // Fire `complete` callbacks
	            for (var i = 0; i < numRoles; i++) {
	                var role = actor.roles[i];
	                if (role.complete) {
	                    role.complete.call(actor, actor);
	                }
	            }
	
	            if (!actor.isActive) {
	                actor.next();
	            }
	        } else {
	            actor.isActive = true;
	            actor.firstFrame = false;
	        }
	    }
	
	    actor.framestamp = framestamp;
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3QtcmVuZGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RDLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJOzs7Ozs7Ozs7QUFBQyxBQVN4QixJQUFNLHdCQUF3QixHQUFHLFVBQUMsS0FBSyxFQUFFLFVBQVUsRUFBSztBQUNwRCxRQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDcEIsUUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7O0FBRWhDLFFBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLFVBQUMsR0FBRyxFQUFFLE1BQU0sRUFBSzs7QUFFdkMsWUFBSSxDQUFDLE1BQU0sRUFBRTtBQUFFLG1CQUFPO1NBQUU7O0FBRXhCLFlBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtBQUNoQixrQkFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDckQ7O0FBRUQsWUFBSSxNQUFNLENBQUMsUUFBUSxJQUFJLFVBQVUsRUFBRTtBQUMvQixrQkFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDdEQ7O0FBRUQsWUFBSSxNQUFNLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxFQUFFO0FBQ3JELG9CQUFRLEdBQUcsS0FBSyxDQUFDO1NBQ3BCLE1BQU07QUFDSCxnQkFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO0FBQ25CLHNCQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQ2hEO0FBQ0QsaUJBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDM0I7S0FDSixDQUFDLENBQUM7O0FBRUgsV0FBTyxRQUFRLENBQUM7Q0FDbkIsQ0FBQzs7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLFVBQUMsS0FBSyxFQUFFLFVBQVUsRUFBSztBQUNwQyxRQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7QUFDaEIsYUFBSyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7O0FBRXZCLFlBQUksd0JBQXdCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUNuRCxnQkFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNOzs7QUFBQyxBQUdwQyxpQkFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMvQixvQkFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixvQkFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ2Ysd0JBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDcEM7YUFDSjs7QUFFRCxnQkFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7QUFDakIscUJBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNoQjtTQUNKLE1BQU07QUFDSCxpQkFBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDdEIsaUJBQUssQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1NBQzVCO0tBQ0o7O0FBRUQsU0FBSyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7Q0FDakMsQ0FBQyIsImZpbGUiOiJwb3N0LXJlbmRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi4vaW5jL3V0aWxzJyk7XG5jb25zdCBlYWNoID0gdXRpbHMuZWFjaDtcblxuLypcbiAgICBDaGVjayBhbGwgQWN0aW9ucyBmb3IgYG9uRW5kYCwgcmV0dXJuIHRydWUgaWYgYWxsIGFyZSB0cnVlXG5cbiAgICBAcGFyYW0gW0FjdG9yXVxuICAgIEBwYXJhbSBbYm9vbGVhbl1cbiAgICBAcmV0dXJucyBbYm9vbGVhbl1cbiovXG5jb25zdCBjaGVja0FsbEFjdGlvbnNIYXZlRW5kZWQgPSAoYWN0b3IsIGhhc0NoYW5nZWQpID0+IHtcbiAgICBsZXQgaGFzRW5kZWQgPSB0cnVlO1xuICAgIGxldCB2YWx1ZXMgPSBhY3Rvci5zdGF0ZS52YWx1ZXM7XG5cbiAgICBlYWNoKGFjdG9yLmFjdGl2ZUFjdGlvbnMsIChrZXksIGFjdGlvbikgPT4ge1xuICAgICAgICAvLyBSZXR1cm4gaWYgYWN0aW9uIGhhcyBiZWVuIGRlbGV0ZWQgZWxzZXdoZXJlXG4gICAgICAgIGlmICghYWN0aW9uKSB7IHJldHVybjsgfVxuXG4gICAgICAgIGlmIChhY3Rpb24ub25GcmFtZSkge1xuICAgICAgICAgICAgYWN0aW9uLm9uRnJhbWUuY2FsbChhY3RvciwgdmFsdWVzLCBhY3RvciwgYWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24ub25VcGRhdGUgJiYgaGFzQ2hhbmdlZCkge1xuICAgICAgICAgICAgYWN0aW9uLm9uVXBkYXRlLmNhbGwoYWN0b3IsIHZhbHVlcywgYWN0b3IsIGFjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uLmhhc0VuZGVkICYmIGFjdGlvbi5oYXNFbmRlZChhY3RvcikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBoYXNFbmRlZCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFjdGlvbi5vbkNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm9uQ29tcGxldGUuY2FsbChhY3RvciwgYWN0b3IsIGFjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3Rvci51bmJpbmRBY3Rpb24oa2V5KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhhc0VuZGVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoYWN0b3IsIGZyYW1lc3RhbXApID0+IHtcbiAgICBpZiAoYWN0b3IuaXNBY3RpdmUpIHtcbiAgICAgICAgYWN0b3IuaXNBY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoY2hlY2tBbGxBY3Rpb25zSGF2ZUVuZGVkKGFjdG9yLCBhY3Rvci5oYXNDaGFuZ2VkKSkge1xuICAgICAgICAgICAgY29uc3QgbnVtUm9sZXMgPSBhY3Rvci5yb2xlcy5sZW5ndGg7XG5cbiAgICAgICAgICAgIC8vIEZpcmUgYGNvbXBsZXRlYCBjYWxsYmFja3NcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUm9sZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCByb2xlID0gYWN0b3Iucm9sZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHJvbGUuY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcm9sZS5jb21wbGV0ZS5jYWxsKGFjdG9yLCBhY3Rvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWFjdG9yLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgYWN0b3IubmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0b3IuaXNBY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgYWN0b3IuZmlyc3RGcmFtZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgICAgICAgICAgXG4gICAgYWN0b3IuZnJhbWVzdGFtcCA9IGZyYW1lc3RhbXA7XG59OyJdfQ==

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Role = __webpack_require__(30);
	
	module.exports = new Role({
	    init: function (actor) {
	        if (actor.init) {
	            actor.init(actor);
	        }
	    },
	
	    start: function (actor) {
	        if (actor.onStart) {
	            actor.onStart(actor);
	        }
	    },
	
	    frame: function (state, actor) {
	        if (actor.onFrame) {
	            actor.onFrame(state, actor);
	        }
	    },
	
	    update: function (state, actor) {
	        if (actor.onUpdate) {
	            actor.onUpdate(state, actor);
	        }
	    },
	
	    complete: function (actor) {
	        if (actor.onComplete) {
	            actor.onComplete(actor);
	        }
	    }
	});
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmF1bHRSb2xlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDOztBQUU3QixNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDO0FBQ3RCLFFBQUksRUFBRSxVQUFVLEtBQUssRUFBRTtBQUNuQixZQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7QUFDWixpQkFBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNyQjtLQUNKOztBQUVELFNBQUssRUFBRSxVQUFVLEtBQUssRUFBRTtBQUNwQixZQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7QUFDZixpQkFBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN4QjtLQUNKOztBQUVELFNBQUssRUFBRSxVQUFVLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDM0IsWUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO0FBQ2YsaUJBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQy9CO0tBQ0o7O0FBRUQsVUFBTSxFQUFFLFVBQVUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUM1QixZQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7QUFDaEIsaUJBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2hDO0tBQ0o7O0FBRUQsWUFBUSxFQUFFLFVBQVUsS0FBSyxFQUFFO0FBQ3ZCLFlBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTtBQUNsQixpQkFBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQjtLQUNKO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6ImRlZmF1bHRSb2xlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFJvbGUgPSByZXF1aXJlKCcuL1JvbGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgUm9sZSh7XG4gICAgaW5pdDogZnVuY3Rpb24gKGFjdG9yKSB7XG4gICAgICAgIGlmIChhY3Rvci5pbml0KSB7XG4gICAgICAgICAgICBhY3Rvci5pbml0KGFjdG9yKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzdGFydDogZnVuY3Rpb24gKGFjdG9yKSB7XG4gICAgICAgIGlmIChhY3Rvci5vblN0YXJ0KSB7XG4gICAgICAgICAgICBhY3Rvci5vblN0YXJ0KGFjdG9yKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBmcmFtZTogZnVuY3Rpb24gKHN0YXRlLCBhY3Rvcikge1xuICAgICAgICBpZiAoYWN0b3Iub25GcmFtZSkge1xuICAgICAgICAgICAgYWN0b3Iub25GcmFtZShzdGF0ZSwgYWN0b3IpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKHN0YXRlLCBhY3Rvcikge1xuICAgICAgICBpZiAoYWN0b3Iub25VcGRhdGUpIHtcbiAgICAgICAgICAgIGFjdG9yLm9uVXBkYXRlKHN0YXRlLCBhY3Rvcik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uIChhY3Rvcikge1xuICAgICAgICBpZiAoYWN0b3Iub25Db21wbGV0ZSkge1xuICAgICAgICAgICAgYWN0b3Iub25Db21wbGV0ZShhY3Rvcik7XG4gICAgICAgIH1cbiAgICB9XG59KTsiXX0=

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var each = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).each;
	
	var Controls = (function () {
	    function Controls(actor, action, hasStarted) {
	        _classCallCheck(this, Controls);
	
	        this.actor = actor;
	        this.action = action;
	        this.saveOrigins();
	
	        if (hasStarted) {
	            this.id = this.bindAction();
	            this.action.activate();
	        }
	    }
	
	    Controls.prototype.start = function start(input) {
	        this.id = this.bindAction();
	        this.actor.start(this.id, input);
	        this.action.activate();
	        return this;
	    };
	
	    Controls.prototype.stop = function stop() {
	        this.actor.unbindAction(this.id);
	        this.action.deactivate();
	
	        return this;
	    };
	
	    Controls.prototype.pause = function pause() {
	        this.action.deactivate();
	        return this;
	    };
	
	    Controls.prototype.resume = function resume() {
	        this.action.activate();
	        return this;
	    };
	
	    Controls.prototype.toggle = function toggle() {
	        var resume = this.actor.hasAction(this.id) ? this.resume : this.start;
	        return this.action.isActive ? this.pause() : resume.call(this);
	    };
	
	    Controls.prototype.then = function then() {
	        var _actor;
	
	        (_actor = this.actor).then.apply(_actor, arguments);
	        return this;
	    };
	
	    Controls.prototype.bindAction = function bindAction() {
	        return this.actor.bindAction(this.action, this.id);
	    };
	
	    Controls.prototype.saveOrigins = function saveOrigins() {
	        var _this = this;
	
	        this.origins = {};
	
	        each(this.action.values, function (key, value) {
	            var actorValue = _this.actor.values[key];
	
	            _this.origins[key] = actorValue.current;
	
	            if (actorValue.children) {
	                each(actorValue.children, function (childKey, childValue) {
	                    _this.origins[key + childKey] = _this.actor.values[key + childKey].current;
	                });
	            }
	        });
	    };
	
	    Controls.prototype.restoreOrigins = function restoreOrigins() {
	        var _this2 = this;
	
	        each(this.origins, function (key, value) {
	            _this2.actor.values[key].origin = value;
	        });
	    };
	
	    return Controls;
	})();
	
	module.exports = Controls;
	//# sourceMappingURL=data:application/json;base64,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QUFFLFVBQUMsUUFBUSxFQUFFLFVBQVUsRUFBSztBQUNoRCwwQkFBSyxPQUFPLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLE1BQUssS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDO2lCQUM1RSxDQUFDLENBQUM7YUFDTjtTQUNKLENBQUMsQ0FBQztLQUNOOztBQWhFQyxZQUFRLFdBa0VWLGNBQWMsNkJBQUc7OztBQUNiLFlBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQUMsR0FBRyxFQUFFLEtBQUssRUFBSztBQUMvQixtQkFBSyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7U0FDekMsQ0FBQyxDQUFDO0tBQ047O1dBdEVDLFFBQVE7OztBQXlFZCxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyIsImZpbGUiOiJDb250cm9scy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGVhY2ggPSByZXF1aXJlKCcuLi9pbmMvdXRpbHMnKS5lYWNoO1xuXG5jbGFzcyBDb250cm9scyB7XG4gICAgY29uc3RydWN0b3IoYWN0b3IsIGFjdGlvbiwgaGFzU3RhcnRlZCkge1xuICAgICAgICB0aGlzLmFjdG9yID0gYWN0b3I7XG4gICAgICAgIHRoaXMuYWN0aW9uID0gYWN0aW9uO1xuICAgICAgICB0aGlzLnNhdmVPcmlnaW5zKCk7XG5cbiAgICAgICAgaWYgKGhhc1N0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLmJpbmRBY3Rpb24oKTtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uLmFjdGl2YXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGFydChpbnB1dCkge1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5iaW5kQWN0aW9uKCk7XG4gICAgICAgIHRoaXMuYWN0b3Iuc3RhcnQodGhpcy5pZCwgaW5wdXQpO1xuICAgICAgICB0aGlzLmFjdGlvbi5hY3RpdmF0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLmFjdG9yLnVuYmluZEFjdGlvbih0aGlzLmlkKTtcbiAgICAgICAgdGhpcy5hY3Rpb24uZGVhY3RpdmF0ZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHBhdXNlKCkge1xuICAgICAgICB0aGlzLmFjdGlvbi5kZWFjdGl2YXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJlc3VtZSgpIHtcbiAgICAgICAgdGhpcy5hY3Rpb24uYWN0aXZhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9nZ2xlKCkge1xuICAgICAgICBsZXQgcmVzdW1lID0gdGhpcy5hY3Rvci5oYXNBY3Rpb24odGhpcy5pZCkgPyB0aGlzLnJlc3VtZSA6IHRoaXMuc3RhcnQ7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi5pc0FjdGl2ZSA/IHRoaXMucGF1c2UoKSA6IHJlc3VtZS5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIHRoZW4oLi4uYXJncykge1xuICAgICAgICB0aGlzLmFjdG9yLnRoZW4oLi4uYXJncyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGJpbmRBY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdG9yLmJpbmRBY3Rpb24odGhpcy5hY3Rpb24sIHRoaXMuaWQpO1xuICAgIH1cblxuICAgIHNhdmVPcmlnaW5zKCkge1xuICAgICAgICB0aGlzLm9yaWdpbnMgPSB7fTtcblxuICAgICAgICBlYWNoKHRoaXMuYWN0aW9uLnZhbHVlcywgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgIGxldCBhY3RvclZhbHVlID0gdGhpcy5hY3Rvci52YWx1ZXNba2V5XTtcblxuICAgICAgICAgICAgdGhpcy5vcmlnaW5zW2tleV0gPSBhY3RvclZhbHVlLmN1cnJlbnQ7XG5cbiAgICAgICAgICAgIGlmIChhY3RvclZhbHVlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgZWFjaChhY3RvclZhbHVlLmNoaWxkcmVuLCAoY2hpbGRLZXksIGNoaWxkVmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5zW2tleSArIGNoaWxkS2V5XSA9IHRoaXMuYWN0b3IudmFsdWVzW2tleSArIGNoaWxkS2V5XS5jdXJyZW50O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXN0b3JlT3JpZ2lucygpIHtcbiAgICAgICAgZWFjaCh0aGlzLm9yaWdpbnMsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFjdG9yLnZhbHVlc1trZXldLm9yaWdpbiA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udHJvbHM7Il19

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var calc = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../inc/calc\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    utils = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    speedPerFrame = calc.speedPerFrame;
	
	/*
	    Add core physics simulations
	*/
	var simulations = {
	    /*
	        Velocity
	        
	        The default .run() simulation.
	        
	        Applies any set deceleration and acceleration to existing velocity
	    */
	    velocity: function (value, duration) {
	        value.velocity = value.velocity + speedPerFrame(value.acceleration, duration);
	
	        return simulations.friction(value, duration);
	    },
	
	    /*
	        Glide
	        
	        Emulates touch device scrolling effects with exponential decay
	        http://ariya.ofilabs.com/2013/11/javascript-kinetic-scrolling-part-2.html
	    */
	    glide: function (value, duration, started) {
	        var timeUntilFinished = -utils.currentTime() - started,
	            delta = -value.to * Math.exp(timeUntilFinished / value.timeConstant);
	
	        return value.to + delta - value.current;
	    },
	
	    /*
	        Friction
	         Apply friction to the current value
	        TODO: Make this framerate-independent
	    */
	    friction: function (value, duration) {
	        var newVelocity = speedPerFrame(value.velocity, duration) * (1 - value.friction);
	
	        return calc.speedPerSecond(newVelocity, duration);
	    },
	
	    spring: function (value, duration) {
	        var distance = value.to - value.current;
	
	        value.velocity += distance * speedPerFrame(value.spring, duration);
	
	        return simulations.friction(value, duration);
	    },
	
	    bounce: function (value) {
	        var distance = 0,
	            to = value.to,
	            current = value.current,
	            bounce = value.bounce;
	
	        // If we're using glide simulation we have to flip our target too
	        if (value.simulate === 'glide') {
	            distance = to - current;
	            value.to = current - distance * bounce;
	        }
	
	        return value.velocity *= -bounce;
	    },
	
	    capture: function (value, target) {
	        value.to = target;
	        value.simulate = 'spring';
	        value.capture = value.min = value.max = undefined;
	    }
	};
	
	module.exports = simulations;
	//# sourceMappingURL=data:application/json;base64,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bnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjYWxjID0gcmVxdWlyZSgnLi4vLi4vaW5jL2NhbGMnKSxcbiAgICB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL2luYy91dGlscycpLFxuICAgIHNwZWVkUGVyRnJhbWUgPSBjYWxjLnNwZWVkUGVyRnJhbWU7XG5cbi8qXG4gICAgQWRkIGNvcmUgcGh5c2ljcyBzaW11bGF0aW9uc1xuKi9cbnZhciBzaW11bGF0aW9ucyA9IHtcbiAgICAvKlxuICAgICAgICBWZWxvY2l0eVxuICAgICAgICBcbiAgICAgICAgVGhlIGRlZmF1bHQgLnJ1bigpIHNpbXVsYXRpb24uXG4gICAgICAgIFxuICAgICAgICBBcHBsaWVzIGFueSBzZXQgZGVjZWxlcmF0aW9uIGFuZCBhY2NlbGVyYXRpb24gdG8gZXhpc3RpbmcgdmVsb2NpdHlcbiAgICAqL1xuICAgIHZlbG9jaXR5OiBmdW5jdGlvbiAodmFsdWUsIGR1cmF0aW9uKSB7XG4gICAgICAgIHZhbHVlLnZlbG9jaXR5ID0gdmFsdWUudmVsb2NpdHkgKyBzcGVlZFBlckZyYW1lKHZhbHVlLmFjY2VsZXJhdGlvbiwgZHVyYXRpb24pO1xuXG4gICAgICAgIHJldHVybiBzaW11bGF0aW9ucy5mcmljdGlvbih2YWx1ZSwgZHVyYXRpb24pO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAgICBHbGlkZVxuICAgICAgICBcbiAgICAgICAgRW11bGF0ZXMgdG91Y2ggZGV2aWNlIHNjcm9sbGluZyBlZmZlY3RzIHdpdGggZXhwb25lbnRpYWwgZGVjYXlcbiAgICAgICAgaHR0cDovL2FyaXlhLm9maWxhYnMuY29tLzIwMTMvMTEvamF2YXNjcmlwdC1raW5ldGljLXNjcm9sbGluZy1wYXJ0LTIuaHRtbFxuICAgICovXG4gICAgZ2xpZGU6IGZ1bmN0aW9uICh2YWx1ZSwgZHVyYXRpb24sIHN0YXJ0ZWQpIHtcbiAgICAgICAgdmFyIHRpbWVVbnRpbEZpbmlzaGVkID0gLSB1dGlscy5jdXJyZW50VGltZSgpIC0gc3RhcnRlZCxcbiAgICAgICAgICAgIGRlbHRhID0gLSB2YWx1ZS50byAqIE1hdGguZXhwKHRpbWVVbnRpbEZpbmlzaGVkIC8gdmFsdWUudGltZUNvbnN0YW50KTtcblxuICAgICAgICByZXR1cm4gKHZhbHVlLnRvICsgZGVsdGEpIC0gdmFsdWUuY3VycmVudDtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgICAgRnJpY3Rpb25cblxuICAgICAgICBBcHBseSBmcmljdGlvbiB0byB0aGUgY3VycmVudCB2YWx1ZVxuICAgICAgICBUT0RPOiBNYWtlIHRoaXMgZnJhbWVyYXRlLWluZGVwZW5kZW50XG4gICAgKi9cbiAgICBmcmljdGlvbjogZnVuY3Rpb24gKHZhbHVlLCBkdXJhdGlvbikge1xuICAgICAgICB2YXIgbmV3VmVsb2NpdHkgPSBzcGVlZFBlckZyYW1lKHZhbHVlLnZlbG9jaXR5LCBkdXJhdGlvbikgKiAoMSAtIHZhbHVlLmZyaWN0aW9uKTtcblxuICAgICAgICByZXR1cm4gY2FsYy5zcGVlZFBlclNlY29uZChuZXdWZWxvY2l0eSwgZHVyYXRpb24pO1xuICAgIH0sXG5cbiAgICBzcHJpbmc6IGZ1bmN0aW9uICh2YWx1ZSwgZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gdmFsdWUudG8gLSB2YWx1ZS5jdXJyZW50O1xuXG4gICAgICAgIHZhbHVlLnZlbG9jaXR5ICs9IGRpc3RhbmNlICogc3BlZWRQZXJGcmFtZSh2YWx1ZS5zcHJpbmcsIGR1cmF0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzaW11bGF0aW9ucy5mcmljdGlvbih2YWx1ZSwgZHVyYXRpb24pO1xuICAgIH0sXG5cbiAgICBib3VuY2U6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSAwLFxuICAgICAgICAgICAgdG8gPSB2YWx1ZS50byxcbiAgICAgICAgICAgIGN1cnJlbnQgPSB2YWx1ZS5jdXJyZW50LFxuICAgICAgICAgICAgYm91bmNlID0gdmFsdWUuYm91bmNlO1xuICAgICAgICBcbiAgICAgICAgLy8gSWYgd2UncmUgdXNpbmcgZ2xpZGUgc2ltdWxhdGlvbiB3ZSBoYXZlIHRvIGZsaXAgb3VyIHRhcmdldCB0b29cbiAgICAgICAgaWYgKHZhbHVlLnNpbXVsYXRlID09PSAnZ2xpZGUnKSB7XG4gICAgICAgICAgICBkaXN0YW5jZSA9IHRvIC0gY3VycmVudDtcbiAgICAgICAgICAgIHZhbHVlLnRvID0gY3VycmVudCAtIChkaXN0YW5jZSAqIGJvdW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB2YWx1ZS52ZWxvY2l0eSAqPSAtIGJvdW5jZTtcbiAgICB9LFxuXG4gICAgY2FwdHVyZTogZnVuY3Rpb24gKHZhbHVlLCB0YXJnZXQpIHtcbiAgICAgICAgdmFsdWUudG8gPSB0YXJnZXQ7XG4gICAgICAgIHZhbHVlLnNpbXVsYXRlID0gJ3NwcmluZyc7XG4gICAgICAgIHZhbHVlLmNhcHR1cmUgPSB2YWx1ZS5taW4gPSB2YWx1ZS5tYXggPSB1bmRlZmluZWQ7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzaW11bGF0aW9ucztcbiJdfQ==

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/*
	    Bezier function generator
	        
	    Gaëtan Renaudeau's BezierEasing
	    https://github.com/gre/bezier-easing/blob/master/index.js  
	    https://github.com/gre/bezier-easing/blob/master/LICENSE
	    You're a hero
	    
	    Use
	    
	        var easeOut = new Bezier(.17,.67,.83,.67),
	            x = easeOut(0.5); // returns 0.627...
	*/
	"use strict";
	
	var NEWTON_ITERATIONS = 8,
	    NEWTON_MIN_SLOPE = 0.001,
	    SUBDIVISION_PRECISION = 0.0000001,
	    SUBDIVISION_MAX_ITERATIONS = 10,
	    K_SPLINE_TABLE_SIZE = 11,
	    K_SAMPLE_STEP_SIZE = 1.0 / (K_SPLINE_TABLE_SIZE - 1.0),
	    FLOAT_32_SUPPORTED = typeof Float32Array !== 'undefined',
	    a = function (a1, a2) {
	    return 1.0 - 3.0 * a2 + 3.0 * a1;
	},
	    b = function (a1, a2) {
	    return 3.0 * a2 - 6.0 * a1;
	},
	    c = function (a1) {
	    return 3.0 * a1;
	},
	    getSlope = function (t, a1, a2) {
	    return 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);
	},
	    calcBezier = function (t, a1, a2) {
	    return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;
	},
	
	/*
	    Bezier constructor
	*/
	Bezier = function (mX1, mY1, mX2, mY2) {
	    var sampleValues = FLOAT_32_SUPPORTED ? new Float32Array(K_SPLINE_TABLE_SIZE) : new Array(K_SPLINE_TABLE_SIZE),
	        _precomputed = false,
	        binarySubdivide = function (aX, aA, aB) {
	        var currentX,
	            currentT,
	            i = 0;
	
	        do {
	            currentT = aA + (aB - aA) / 2.0;
	            currentX = calcBezier(currentT, mX1, mX2) - aX;
	            if (currentX > 0.0) {
	                aB = currentT;
	            } else {
	                aA = currentT;
	            }
	        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
	
	        return currentT;
	    },
	        newtonRaphsonIterate = function (aX, aGuessT) {
	        var i = 0,
	            currentSlope = 0.0,
	            currentX;
	
	        for (; i < NEWTON_ITERATIONS; ++i) {
	            currentSlope = getSlope(aGuessT, mX1, mX2);
	
	            if (currentSlope === 0.0) {
	                return aGuessT;
	            }
	
	            currentX = calcBezier(aGuessT, mX1, mX2) - aX;
	            aGuessT -= currentX / currentSlope;
	        }
	
	        return aGuessT;
	    },
	        calcSampleValues = function () {
	        for (var i = 0; i < K_SPLINE_TABLE_SIZE; ++i) {
	            sampleValues[i] = calcBezier(i * K_SAMPLE_STEP_SIZE, mX1, mX2);
	        }
	    },
	        getTForX = function (aX) {
	        var intervalStart = 0.0,
	            currentSample = 1,
	            lastSample = K_SPLINE_TABLE_SIZE - 1,
	            dist = 0.0,
	            guessForT = 0.0,
	            initialSlope = 0.0;
	
	        for (; currentSample != lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
	            intervalStart += K_SAMPLE_STEP_SIZE;
	        }
	
	        --currentSample;
	
	        dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
	        guessForT = intervalStart + dist * K_SAMPLE_STEP_SIZE;
	
	        initialSlope = getSlope(guessForT, mX1, mX2);
	
	        // If slope is greater than min
	        if (initialSlope >= NEWTON_MIN_SLOPE) {
	            return newtonRaphsonIterate(aX, guessForT);
	            // Slope is equal to min
	        } else if (initialSlope === 0.0) {
	                return guessForT;
	                // Slope is less than min
	            } else {
	                    return binarySubdivide(aX, intervalStart, intervalStart + K_SAMPLE_STEP_SIZE);
	                }
	    },
	        precompute = function () {
	        _precomputed = true;
	        if (mX1 != mY1 || mX2 != mY2) {
	            calcSampleValues();
	        }
	    },
	
	    /*
	        Generated function
	        
	        Returns value 0-1 based on X
	    */
	    f = function (aX) {
	        var returnValue;
	
	        if (!_precomputed) {
	            precompute();
	        }
	
	        // If linear gradient, return X as T
	        if (mX1 === mY1 && mX2 === mY2) {
	            returnValue = aX;
	
	            // If at start, return 0
	        } else if (aX === 0) {
	                returnValue = 0;
	
	                // If at end, return 1
	            } else if (aX === 1) {
	                    returnValue = 1;
	                } else {
	                    returnValue = calcBezier(getTForX(aX), mY1, mY2);
	                }
	
	        return returnValue;
	    };
	
	    return f;
	};
	
	module.exports = Bezier;
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Controls = __webpack_require__(52);
	
	var TweenControls = (function (_Controls) {
	    _inherits(TweenControls, _Controls);
	
	    function TweenControls() {
	        _classCallCheck(this, TweenControls);
	
	        return _possibleConstructorReturn(this, _Controls.apply(this, arguments));
	    }
	
	    TweenControls.prototype.restart = function restart() {
	        this.restoreOrigins();
	        this.action.restart();
	        return this;
	    };
	
	    TweenControls.prototype.reverse = function reverse() {
	        this.restoreOrigins();
	        this.action.reverse();
	        return this;
	    };
	
	    TweenControls.prototype.seek = function seek(progress) {
	        if (!this.actor.hasAction(this.id)) {
	            this.start().pause();
	        }
	
	        this.action.elapsed = this.action.duration * progress;
	
	        if (!this.action.isActive) {
	            this.action.activate();
	            this.actor.process.fire();
	            this.action.deactivate();
	        }
	
	        return this;
	    };
	
	    return TweenControls;
	})(Controls);
	
	module.exports = TweenControls;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlR3ZWVuQ29udHJvbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQzs7SUFFOUMsYUFBYTtjQUFiLGFBQWE7O2FBQWIsYUFBYTs4QkFBYixhQUFhOzs7OztBQUFiLGlCQUFhLFdBQ2YsT0FBTyxzQkFBRztBQUNOLFlBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN0QixZQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3RCLGVBQU8sSUFBSSxDQUFDO0tBQ2Y7O0FBTEMsaUJBQWEsV0FPZixPQUFPLHNCQUFHO0FBQ04sWUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3RCLFlBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDdEIsZUFBTyxJQUFJLENBQUM7S0FDZjs7QUFYQyxpQkFBYSxXQWFmLElBQUksaUJBQUMsUUFBUSxFQUFFO0FBQ1gsWUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUNoQyxnQkFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3hCOztBQUVELFlBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQzs7QUFFdEQsWUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO0FBQ3ZCLGdCQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3ZCLGdCQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUMxQixnQkFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUM1Qjs7QUFFRCxlQUFPLElBQUksQ0FBQztLQUNmOztXQTNCQyxhQUFhO0dBQVMsUUFBUTs7QUE4QnBDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDIiwiZmlsZSI6IlR3ZWVuQ29udHJvbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDb250cm9scyA9IHJlcXVpcmUoJy4uLy4uL2NvbnRyb2xzL0NvbnRyb2xzJyk7XG5cbmNsYXNzIFR3ZWVuQ29udHJvbHMgZXh0ZW5kcyBDb250cm9scyB7XG4gICAgcmVzdGFydCgpIHtcbiAgICAgICAgdGhpcy5yZXN0b3JlT3JpZ2lucygpO1xuICAgICAgICB0aGlzLmFjdGlvbi5yZXN0YXJ0KCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldmVyc2UoKSB7XG4gICAgICAgIHRoaXMucmVzdG9yZU9yaWdpbnMoKTtcbiAgICAgICAgdGhpcy5hY3Rpb24ucmV2ZXJzZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzZWVrKHByb2dyZXNzKSB7XG4gICAgICAgIGlmICghdGhpcy5hY3Rvci5oYXNBY3Rpb24odGhpcy5pZCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQoKS5wYXVzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hY3Rpb24uZWxhcHNlZCA9IHRoaXMuYWN0aW9uLmR1cmF0aW9uICogcHJvZ3Jlc3M7XG5cbiAgICAgICAgaWYgKCF0aGlzLmFjdGlvbi5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb24uYWN0aXZhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuYWN0b3IucHJvY2Vzcy5maXJlKCk7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbi5kZWFjdGl2YXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHdlZW5Db250cm9sczsiXX0=

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var Input = __webpack_require__(28),
	    currentPointer,
	    // Sort this out for multitouch
	
	TOUCHMOVE = 'touchmove',
	    MOUSEMOVE = 'mousemove',
	
	/*
	    Convert event into point
	    
	    Scrape the x/y coordinates from the provided event
	    
	    @param [event]: Original pointer event
	    @param [boolean]: True if touch event
	    @return [object]: x/y coordinates of event
	*/
	eventToPoint = function (event, isTouchEvent) {
	    var touchChanged = isTouchEvent ? event.changedTouches[0] : false;
	
	    return {
	        x: touchChanged ? touchChanged.clientX : event.pageX,
	        y: touchChanged ? touchChanged.clientY : event.pageY
	    };
	},
	
	/*
	    Get actual event
	    
	    Checks for jQuery's .originalEvent if present
	    
	    @param [event | jQuery event]
	    @return [event]: The actual JS event  
	*/
	getActualEvent = function (event) {
	    return event.originalEvent || event;
	},
	
	/*
	    Pointer constructor
	*/
	Pointer = function (e) {
	    var event = getActualEvent(e),
	        // In case of jQuery event
	    isTouch = event.touches ? true : false,
	        startPoint = eventToPoint(event, isTouch);
	
	    this.update(startPoint);
	    this.isTouch = isTouch;
	    this.bindEvents();
	},
	    proto = Pointer.prototype = new Input();
	
	/*
	    Bind move event
	*/
	proto.bindEvents = function () {
	    this.moveEvent = this.isTouch ? TOUCHMOVE : MOUSEMOVE;
	    this.autoStop = true;
	
	    currentPointer = this;
	
	    document.documentElement.addEventListener(this.moveEvent, this.onMove);
	};
	
	/*
	    Unbind move event
	*/
	proto.unbindEvents = function () {
	    document.documentElement.removeEventListener(this.moveEvent, this.onMove);
	};
	
	/*
	    Pointer onMove event handler
	    
	    @param [event]: Pointer move event
	*/
	proto.onMove = function (e) {
	    var newPoint = eventToPoint(e, currentPointer.isTouch);
	    e = getActualEvent(e);
	    e.preventDefault();
	    currentPointer.update(newPoint);
	};
	
	proto.stop = function () {
	    this.unbindEvents();
	};
	
	module.exports = Pointer;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBvaW50ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUViLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUM7SUFDN0IsY0FBYzs7O0FBRWQsU0FBUyxHQUFHLFdBQVc7SUFDdkIsU0FBUyxHQUFHLFdBQVc7Ozs7Ozs7Ozs7O0FBV3ZCLFlBQVksR0FBRyxVQUFVLEtBQUssRUFBRSxZQUFZLEVBQUU7QUFDMUMsUUFBSSxZQUFZLEdBQUcsWUFBWSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDOztBQUVsRSxXQUFPO0FBQ0gsU0FBQyxFQUFFLFlBQVksR0FBRyxZQUFZLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLO0FBQ3BELFNBQUMsRUFBRSxZQUFZLEdBQUcsWUFBWSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsS0FBSztLQUN2RCxDQUFDO0NBQ0w7Ozs7Ozs7Ozs7QUFVRCxjQUFjLEdBQUcsVUFBVSxLQUFLLEVBQUU7QUFDOUIsV0FBTyxLQUFLLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQztDQUN2Qzs7Ozs7QUFNRCxPQUFPLEdBQUcsVUFBVSxDQUFDLEVBQUU7QUFDbkIsUUFBSSxLQUFLLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQzs7QUFDekIsV0FBTyxHQUFHLEFBQUMsS0FBSyxDQUFDLE9BQU8sR0FBSSxJQUFJLEdBQUcsS0FBSztRQUN4QyxVQUFVLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQzs7QUFFOUMsUUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN4QixRQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUN2QixRQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Q0FDckI7SUFFRCxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLEtBQUssRUFBRTs7Ozs7QUFBQyxBQUs1QyxLQUFLLENBQUMsVUFBVSxHQUFHLFlBQVk7QUFDM0IsUUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDdEQsUUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7O0FBRXJCLGtCQUFjLEdBQUcsSUFBSSxDQUFDOztBQUV0QixZQUFRLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQzFFOzs7OztBQUFDLEFBS0YsS0FBSyxDQUFDLFlBQVksR0FBRyxZQUFZO0FBQzdCLFlBQVEsQ0FBQyxlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDN0U7Ozs7Ozs7QUFBQyxBQU9GLEtBQUssQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDLEVBQUU7QUFDeEIsUUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkQsS0FBQyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixLQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDbkIsa0JBQWMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDbkMsQ0FBQzs7QUFFRixLQUFLLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDckIsUUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3ZCLENBQUM7O0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMiLCJmaWxlIjoiUG9pbnRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgSW5wdXQgPSByZXF1aXJlKCcuL0lucHV0LmpzJyksXG4gICAgY3VycmVudFBvaW50ZXIsIC8vIFNvcnQgdGhpcyBvdXQgZm9yIG11bHRpdG91Y2hcbiAgICBcbiAgICBUT1VDSE1PVkUgPSAndG91Y2htb3ZlJyxcbiAgICBNT1VTRU1PVkUgPSAnbW91c2Vtb3ZlJyxcblxuICAgIC8qXG4gICAgICAgIENvbnZlcnQgZXZlbnQgaW50byBwb2ludFxuICAgICAgICBcbiAgICAgICAgU2NyYXBlIHRoZSB4L3kgY29vcmRpbmF0ZXMgZnJvbSB0aGUgcHJvdmlkZWQgZXZlbnRcbiAgICAgICAgXG4gICAgICAgIEBwYXJhbSBbZXZlbnRdOiBPcmlnaW5hbCBwb2ludGVyIGV2ZW50XG4gICAgICAgIEBwYXJhbSBbYm9vbGVhbl06IFRydWUgaWYgdG91Y2ggZXZlbnRcbiAgICAgICAgQHJldHVybiBbb2JqZWN0XTogeC95IGNvb3JkaW5hdGVzIG9mIGV2ZW50XG4gICAgKi9cbiAgICBldmVudFRvUG9pbnQgPSBmdW5jdGlvbiAoZXZlbnQsIGlzVG91Y2hFdmVudCkge1xuICAgICAgICB2YXIgdG91Y2hDaGFuZ2VkID0gaXNUb3VjaEV2ZW50ID8gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBmYWxzZTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB0b3VjaENoYW5nZWQgPyB0b3VjaENoYW5nZWQuY2xpZW50WCA6IGV2ZW50LnBhZ2VYLFxuICAgICAgICAgICAgeTogdG91Y2hDaGFuZ2VkID8gdG91Y2hDaGFuZ2VkLmNsaWVudFkgOiBldmVudC5wYWdlWVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgXG4gICAgLypcbiAgICAgICAgR2V0IGFjdHVhbCBldmVudFxuICAgICAgICBcbiAgICAgICAgQ2hlY2tzIGZvciBqUXVlcnkncyAub3JpZ2luYWxFdmVudCBpZiBwcmVzZW50XG4gICAgICAgIFxuICAgICAgICBAcGFyYW0gW2V2ZW50IHwgalF1ZXJ5IGV2ZW50XVxuICAgICAgICBAcmV0dXJuIFtldmVudF06IFRoZSBhY3R1YWwgSlMgZXZlbnQgIFxuICAgICovXG4gICAgZ2V0QWN0dWFsRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50Lm9yaWdpbmFsRXZlbnQgfHwgZXZlbnQ7XG4gICAgfSxcblxuICAgIFxuICAgIC8qXG4gICAgICAgIFBvaW50ZXIgY29uc3RydWN0b3JcbiAgICAqL1xuICAgIFBvaW50ZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgZXZlbnQgPSBnZXRBY3R1YWxFdmVudChlKSwgLy8gSW4gY2FzZSBvZiBqUXVlcnkgZXZlbnRcbiAgICAgICAgICAgIGlzVG91Y2ggPSAoZXZlbnQudG91Y2hlcykgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgICBzdGFydFBvaW50ID0gZXZlbnRUb1BvaW50KGV2ZW50LCBpc1RvdWNoKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudXBkYXRlKHN0YXJ0UG9pbnQpO1xuICAgICAgICB0aGlzLmlzVG91Y2ggPSBpc1RvdWNoO1xuICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgICB9LFxuICAgIFxuICAgIHByb3RvID0gUG9pbnRlci5wcm90b3R5cGUgPSBuZXcgSW5wdXQoKTtcblxuLypcbiAgICBCaW5kIG1vdmUgZXZlbnRcbiovXG5wcm90by5iaW5kRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubW92ZUV2ZW50ID0gdGhpcy5pc1RvdWNoID8gVE9VQ0hNT1ZFIDogTU9VU0VNT1ZFO1xuICAgIHRoaXMuYXV0b1N0b3AgPSB0cnVlO1xuICAgIFxuICAgIGN1cnJlbnRQb2ludGVyID0gdGhpcztcbiAgICBcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLm1vdmVFdmVudCwgdGhpcy5vbk1vdmUpO1xufTtcblxuLypcbiAgICBVbmJpbmQgbW92ZSBldmVudFxuKi9cbnByb3RvLnVuYmluZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLm1vdmVFdmVudCwgdGhpcy5vbk1vdmUpO1xufTtcblxuLypcbiAgICBQb2ludGVyIG9uTW92ZSBldmVudCBoYW5kbGVyXG4gICAgXG4gICAgQHBhcmFtIFtldmVudF06IFBvaW50ZXIgbW92ZSBldmVudFxuKi9cbnByb3RvLm9uTW92ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIG5ld1BvaW50ID0gZXZlbnRUb1BvaW50KGUsIGN1cnJlbnRQb2ludGVyLmlzVG91Y2gpO1xuICAgIGUgPSBnZXRBY3R1YWxFdmVudChlKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY3VycmVudFBvaW50ZXIudXBkYXRlKG5ld1BvaW50KTtcbn07XG5cbnByb3RvLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUG9pbnRlcjsiXX0=

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isString = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).isString;
	
	module.exports = function (value) {
	  return isString(value) ? value.split(/,\s*/) : [value];
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwbGl0LWNvbW1hLWRlbGltaXRlZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQzs7QUFFckQsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFBLEtBQUs7U0FBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztDQUFBLENBQUMiLCJmaWxlIjoic3BsaXQtY29tbWEtZGVsaW1pdGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaXNTdHJpbmcgPSByZXF1aXJlKCcuLi8uLi9pbmMvdXRpbHMnKS5pc1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSB2YWx1ZSA9PiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS5zcGxpdCgvLFxccyovKSA6IFt2YWx1ZV07Il19

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = function (value) {
	  return value.substring(value.indexOf('(') + 1, value.lastIndexOf(')'));
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZ1bmN0aW9uLWJyZWFrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFBLEtBQUs7U0FBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FBQSxDQUFDIiwiZmlsZSI6ImZ1bmN0aW9uLWJyZWFrLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB2YWx1ZSA9PiB2YWx1ZS5zdWJzdHJpbmcodmFsdWUuaW5kZXhPZignKCcpICsgMSwgdmFsdWUubGFzdEluZGV4T2YoJyknKSk7Il19

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var positionTerms = __webpack_require__(23).positions,
	    numPositionTerms = positionTerms.length,
	    TRANSFORM_PERSPECTIVE = 'transformPerspective',
	    SCALE = 'scale',
	    ROTATE = 'rotate',
	    terms = {
	    funcs: ['translate', SCALE, ROTATE, 'skew', TRANSFORM_PERSPECTIVE],
	    props: {} // objects are faster at direct lookups
	};
	
	// Create transform terms
	(function () {
	    var funcs = terms.funcs,
	        props = terms.props,
	        numFuncs = funcs.length,
	        i = 0,
	        createProps = function (funcName) {
	        var j = 0;
	
	        for (; j < numPositionTerms; j++) {
	            props[funcName + positionTerms[j]] = true;
	        }
	    };
	
	    // Manually add skew and transform perspective 
	    props[ROTATE] = props[SCALE] = props[TRANSFORM_PERSPECTIVE] = true;
	
	    // Loop over each function name and create function/property terms
	    for (; i < numFuncs; i++) {
	        createProps(funcs[i]);
	    }
	})();
	
	module.exports = terms;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zZm9ybS1kaWN0aW9uYXJ5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFFYixJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsdUNBQXVDLENBQUMsQ0FBQyxTQUFTO0lBQzFFLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxNQUFNO0lBRXZDLHFCQUFxQixHQUFHLHNCQUFzQjtJQUM5QyxLQUFLLEdBQUcsT0FBTztJQUNmLE1BQU0sR0FBRyxRQUFRO0lBQ2pCLEtBQUssR0FBRztBQUNKLFNBQUssRUFBRSxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQztBQUNsRSxTQUFLLEVBQUUsRUFBRTtBQUFBLENBQ1o7OztBQUFDLEFBR04sQ0FBQyxZQUFZO0FBQ1QsUUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUs7UUFDbkIsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLO1FBQ25CLFFBQVEsR0FBRyxLQUFLLENBQUMsTUFBTTtRQUN2QixDQUFDLEdBQUcsQ0FBQztRQUVMLFdBQVcsR0FBRyxVQUFVLFFBQVEsRUFBRTtBQUM5QixZQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7O0FBRVYsZUFBTyxDQUFDLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDOUIsaUJBQUssQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQzdDO0tBQ0o7OztBQUFDLEFBR04sU0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMscUJBQXFCLENBQUMsR0FBRyxJQUFJOzs7QUFBQyxBQUduRSxXQUFPLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdEIsbUJBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN6QjtDQUNKLENBQUEsRUFBRyxDQUFDOztBQUVMLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDIiwiZmlsZSI6InRyYW5zZm9ybS1kaWN0aW9uYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBwb3NpdGlvblRlcm1zID0gcmVxdWlyZSgnLi4vLi4vdmFsdWUtdHlwZXMvc2V0dGluZ3MvZGljdGlvbmFyeScpLnBvc2l0aW9ucyxcbiAgICBudW1Qb3NpdGlvblRlcm1zID0gcG9zaXRpb25UZXJtcy5sZW5ndGgsXG5cbiAgICBUUkFOU0ZPUk1fUEVSU1BFQ1RJVkUgPSAndHJhbnNmb3JtUGVyc3BlY3RpdmUnLFxuICAgIFNDQUxFID0gJ3NjYWxlJyxcbiAgICBST1RBVEUgPSAncm90YXRlJyxcbiAgICB0ZXJtcyA9IHtcbiAgICAgICAgZnVuY3M6IFsndHJhbnNsYXRlJywgU0NBTEUsIFJPVEFURSwgJ3NrZXcnLCBUUkFOU0ZPUk1fUEVSU1BFQ1RJVkVdLFxuICAgICAgICBwcm9wczoge30gLy8gb2JqZWN0cyBhcmUgZmFzdGVyIGF0IGRpcmVjdCBsb29rdXBzXG4gICAgfTtcblxuLy8gQ3JlYXRlIHRyYW5zZm9ybSB0ZXJtc1xuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnVuY3MgPSB0ZXJtcy5mdW5jcyxcbiAgICAgICAgcHJvcHMgPSB0ZXJtcy5wcm9wcyxcbiAgICAgICAgbnVtRnVuY3MgPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgIGkgPSAwLFxuXG4gICAgICAgIGNyZWF0ZVByb3BzID0gZnVuY3Rpb24gKGZ1bmNOYW1lKSB7XG4gICAgICAgICAgICB2YXIgaiA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoOyBqIDwgbnVtUG9zaXRpb25UZXJtczsgaisrKSB7XG4gICAgICAgICAgICAgICAgcHJvcHNbZnVuY05hbWUgKyBwb3NpdGlvblRlcm1zW2pdXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgXG4gICAgLy8gTWFudWFsbHkgYWRkIHNrZXcgYW5kIHRyYW5zZm9ybSBwZXJzcGVjdGl2ZSAgXG4gICAgcHJvcHNbUk9UQVRFXSA9IHByb3BzW1NDQUxFXSA9IHByb3BzW1RSQU5TRk9STV9QRVJTUEVDVElWRV0gPSB0cnVlO1xuICAgIFxuICAgIC8vIExvb3Agb3ZlciBlYWNoIGZ1bmN0aW9uIG5hbWUgYW5kIGNyZWF0ZSBmdW5jdGlvbi9wcm9wZXJ0eSB0ZXJtc1xuICAgIGZvciAoOyBpIDwgbnVtRnVuY3M7IGkrKykge1xuICAgICAgICBjcmVhdGVQcm9wcyhmdW5jc1tpXSk7XG4gICAgfVxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSB0ZXJtczsiXX0=

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Action = __webpack_require__(32),
	    calc = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/calc\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    isString = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../inc/utils\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).isString,
	
	/*
	    Translate our mapLink value into mapTo
	    
	    @param [number]: Calculated value from linked value
	    @param [Value || object]: Linked value or empty object if we're linking to input
	    @param [array]: List of numbers relating to linked value
	    @param [array]: List of numbers relating to this value
	*/
	findMappedValue = function (newValue, linkedValue, toValue, mapLink, mapTo) {
	    var mapLength = mapLink.length,
	        i = 1,
	        lastLinkValue,
	        thisLinkValue,
	        lastToValue,
	        thisToValue;
	
	    for (; i < mapLength; i++) {
	        // Assign values from array, or if they're strings, look for them in linkedValue
	        lastLinkValue = isString(mapLink[i - 1]) ? linkedValue[mapLink[i - 1]] : mapLink[i - 1];
	        thisLinkValue = isString(mapLink[i]) ? linkedValue[mapLink[i]] : mapLink[i];
	        lastToValue = isString(mapTo[i - 1]) ? toValue[mapTo[i - 1]] : mapTo[i - 1];
	        thisToValue = isString(mapTo[i]) ? toValue[mapTo[i]] : mapTo[i];
	
	        // Check if we've gone past our calculated value, or if we're at the end of the array
	        if (newValue < thisLinkValue || i === mapLength - 1) {
	            newValue = calc.value(calc.restricted(calc.progress(newValue, lastLinkValue, thisLinkValue), 0, 1), lastToValue, thisToValue);
	            break;
	        }
	    }
	
	    return newValue;
	};
	
	var Watch = (function (_Action) {
	    _inherits(Watch, _Action);
	
	    function Watch() {
	        _classCallCheck(this, Watch);
	
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        var _this = _possibleConstructorReturn(this, _Action.call.apply(_Action, [this].concat(args)));
	
	        _this.isActive = true;
	        return _this;
	    }
	
	    /*
	        Process this value
	        
	        First check if this value exists as a Value, if not
	        check within Input (if we have one)
	            
	        @param [Actor]
	        @param [Value]: Current value
	        @param [string]: Key of current value
	        @return [number]: Calculated value
	    */
	
	    Watch.prototype.process = function process(actor, value, key) {
	        var watchedKey = value.watch;
	        var watchedValue = 0;
	        var values = actor.values;
	        var newValue = value.current;
	        var inputOffset = value.action ? value.action.inputOffset : false;
	
	        if (isString(watchedKey)) {
	            watchedValue = values[watchedKey] ? values[watchedKey] : {};
	
	            // First look at Action and check value isn't linking itself
	            if (watchedValue.current !== undefined && key !== watchedKey) {
	                newValue = watchedValue.current;
	
	                // Then check values in Input
	            } else if (inputOffset && inputOffset.hasOwnProperty(watchedKey)) {
	                    newValue = value.action.process(actor, value, watchedKey);
	                }
	        } else {
	            newValue = watchedKey(actor);
	        }
	
	        // If we have mapFrom and mapTo properties, translate the new value
	        if (value.mapFrom && value.mapTo) {
	            newValue = findMappedValue(newValue, watchedValue, value, value.mapFrom, value.mapTo);
	        }
	
	        return newValue;
	    };
	
	    return Watch;
	})(Action);
	
	module.exports = Watch;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldhdGNoLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUM1QixJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUM3QixRQUFRLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFFBQVE7Ozs7Ozs7Ozs7QUFVM0MsZUFBZSxHQUFHLFVBQVUsUUFBUSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRTtBQUN4RSxRQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTTtRQUMxQixDQUFDLEdBQUcsQ0FBQztRQUNMLGFBQWE7UUFDYixhQUFhO1FBQ2IsV0FBVztRQUNYLFdBQVcsQ0FBQzs7QUFFaEIsV0FBTyxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFOztBQUV2QixxQkFBYSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLHFCQUFhLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUUsbUJBQVcsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1RSxtQkFBVyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQzs7O0FBQUMsQUFHaEUsWUFBSSxRQUFRLEdBQUcsYUFBYSxJQUFJLENBQUMsS0FBSyxTQUFTLEdBQUcsQ0FBQyxFQUFFO0FBQ2pELG9CQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLGFBQWEsRUFBRSxhQUFhLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzlILGtCQUFNO1NBQ1Q7S0FDSjs7QUFFRCxXQUFPLFFBQVEsQ0FBQztDQUNuQixDQUFDOztJQUVBLEtBQUs7Y0FBTCxLQUFLOztBQUNQLGFBREUsS0FBSyxHQUNjOzhCQURuQixLQUFLOzswQ0FDUSxJQUFJO0FBQUosZ0JBQUk7OztxREFDZiwwQ0FBUyxJQUFJLEVBQUM7O0FBQ2QsY0FBSyxRQUFRLEdBQUcsSUFBSSxDQUFDOztLQUN4Qjs7Ozs7Ozs7Ozs7OztBQUFBO0FBSkMsU0FBSyxXQWlCUCxPQUFPLG9CQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO0FBQ3ZCLFlBQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDL0IsWUFBSSxZQUFZLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLFlBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDMUIsWUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztBQUM3QixZQUFJLFdBQVcsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQzs7QUFFbEUsWUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFDdEIsd0JBQVksR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7OztBQUFDLEFBRzVELGdCQUFJLFlBQVksQ0FBQyxPQUFPLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxVQUFVLEVBQUU7QUFDMUQsd0JBQVEsR0FBRyxZQUFZLENBQUMsT0FBTzs7O0FBQUMsYUFHbkMsTUFBTSxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQzlELDRCQUFRLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztpQkFDN0Q7U0FFSixNQUFNO0FBQ0gsb0JBQVEsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDaEM7OztBQUFBLEFBR0QsWUFBSSxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7QUFDOUIsb0JBQVEsR0FBRyxlQUFlLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekY7O0FBRUQsZUFBTyxRQUFRLENBQUM7S0FDbkI7O1dBOUNDLEtBQUs7R0FBUyxNQUFNOztBQWlEMUIsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMiLCJmaWxlIjoiV2F0Y2guanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgQWN0aW9uID0gcmVxdWlyZSgnLi9BY3Rpb24nKSxcbiAgICBjYWxjID0gcmVxdWlyZSgnLi4vaW5jL2NhbGMnKSxcbiAgICBpc1N0cmluZyA9IHJlcXVpcmUoJy4uL2luYy91dGlscycpLmlzU3RyaW5nLFxuXG4gICAgLypcbiAgICAgICAgVHJhbnNsYXRlIG91ciBtYXBMaW5rIHZhbHVlIGludG8gbWFwVG9cbiAgICAgICAgXG4gICAgICAgIEBwYXJhbSBbbnVtYmVyXTogQ2FsY3VsYXRlZCB2YWx1ZSBmcm9tIGxpbmtlZCB2YWx1ZVxuICAgICAgICBAcGFyYW0gW1ZhbHVlIHx8IG9iamVjdF06IExpbmtlZCB2YWx1ZSBvciBlbXB0eSBvYmplY3QgaWYgd2UncmUgbGlua2luZyB0byBpbnB1dFxuICAgICAgICBAcGFyYW0gW2FycmF5XTogTGlzdCBvZiBudW1iZXJzIHJlbGF0aW5nIHRvIGxpbmtlZCB2YWx1ZVxuICAgICAgICBAcGFyYW0gW2FycmF5XTogTGlzdCBvZiBudW1iZXJzIHJlbGF0aW5nIHRvIHRoaXMgdmFsdWVcbiAgICAqL1xuICAgIGZpbmRNYXBwZWRWYWx1ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgbGlua2VkVmFsdWUsIHRvVmFsdWUsIG1hcExpbmssIG1hcFRvKSB7XG4gICAgICAgIHZhciBtYXBMZW5ndGggPSBtYXBMaW5rLmxlbmd0aCxcbiAgICAgICAgICAgIGkgPSAxLFxuICAgICAgICAgICAgbGFzdExpbmtWYWx1ZSxcbiAgICAgICAgICAgIHRoaXNMaW5rVmFsdWUsXG4gICAgICAgICAgICBsYXN0VG9WYWx1ZSxcbiAgICAgICAgICAgIHRoaXNUb1ZhbHVlO1xuXG4gICAgICAgIGZvciAoOyBpIDwgbWFwTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIEFzc2lnbiB2YWx1ZXMgZnJvbSBhcnJheSwgb3IgaWYgdGhleSdyZSBzdHJpbmdzLCBsb29rIGZvciB0aGVtIGluIGxpbmtlZFZhbHVlXG4gICAgICAgICAgICBsYXN0TGlua1ZhbHVlID0gaXNTdHJpbmcobWFwTGlua1tpIC0gMV0pID8gbGlua2VkVmFsdWVbbWFwTGlua1tpIC0gMV1dIDogbWFwTGlua1tpIC0gMV07XG4gICAgICAgICAgICB0aGlzTGlua1ZhbHVlID0gaXNTdHJpbmcobWFwTGlua1tpXSkgPyBsaW5rZWRWYWx1ZVttYXBMaW5rW2ldXSA6IG1hcExpbmtbaV07XG4gICAgICAgICAgICBsYXN0VG9WYWx1ZSA9IGlzU3RyaW5nKG1hcFRvW2kgLSAxXSkgPyB0b1ZhbHVlW21hcFRvW2kgLSAxXV0gOiBtYXBUb1tpIC0gMV07XG4gICAgICAgICAgICB0aGlzVG9WYWx1ZSA9IGlzU3RyaW5nKG1hcFRvW2ldKSA/IHRvVmFsdWVbbWFwVG9baV1dIDogbWFwVG9baV07XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlJ3ZlIGdvbmUgcGFzdCBvdXIgY2FsY3VsYXRlZCB2YWx1ZSwgb3IgaWYgd2UncmUgYXQgdGhlIGVuZCBvZiB0aGUgYXJyYXlcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA8IHRoaXNMaW5rVmFsdWUgfHwgaSA9PT0gbWFwTGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gY2FsYy52YWx1ZShjYWxjLnJlc3RyaWN0ZWQoY2FsYy5wcm9ncmVzcyhuZXdWYWx1ZSwgbGFzdExpbmtWYWx1ZSwgdGhpc0xpbmtWYWx1ZSksIDAsIDEpLCBsYXN0VG9WYWx1ZSwgdGhpc1RvVmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgfTtcblxuY2xhc3MgV2F0Y2ggZXh0ZW5kcyBBY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgIFByb2Nlc3MgdGhpcyB2YWx1ZVxuICAgICAgICBcbiAgICAgICAgRmlyc3QgY2hlY2sgaWYgdGhpcyB2YWx1ZSBleGlzdHMgYXMgYSBWYWx1ZSwgaWYgbm90XG4gICAgICAgIGNoZWNrIHdpdGhpbiBJbnB1dCAoaWYgd2UgaGF2ZSBvbmUpXG4gICAgICAgICAgICBcbiAgICAgICAgQHBhcmFtIFtBY3Rvcl1cbiAgICAgICAgQHBhcmFtIFtWYWx1ZV06IEN1cnJlbnQgdmFsdWVcbiAgICAgICAgQHBhcmFtIFtzdHJpbmddOiBLZXkgb2YgY3VycmVudCB2YWx1ZVxuICAgICAgICBAcmV0dXJuIFtudW1iZXJdOiBDYWxjdWxhdGVkIHZhbHVlXG4gICAgKi9cbiAgICBwcm9jZXNzKGFjdG9yLCB2YWx1ZSwga2V5KSB7XG4gICAgICAgIGNvbnN0IHdhdGNoZWRLZXkgPSB2YWx1ZS53YXRjaDtcbiAgICAgICAgbGV0IHdhdGNoZWRWYWx1ZSA9IDA7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBhY3Rvci52YWx1ZXM7XG4gICAgICAgIGxldCBuZXdWYWx1ZSA9IHZhbHVlLmN1cnJlbnQ7XG4gICAgICAgIGxldCBpbnB1dE9mZnNldCA9IHZhbHVlLmFjdGlvbiA/IHZhbHVlLmFjdGlvbi5pbnB1dE9mZnNldCA6IGZhbHNlO1xuXG4gICAgICAgIGlmIChpc1N0cmluZyh3YXRjaGVkS2V5KSkge1xuICAgICAgICAgICAgd2F0Y2hlZFZhbHVlID0gdmFsdWVzW3dhdGNoZWRLZXldID8gdmFsdWVzW3dhdGNoZWRLZXldIDoge307XG5cbiAgICAgICAgICAgIC8vIEZpcnN0IGxvb2sgYXQgQWN0aW9uIGFuZCBjaGVjayB2YWx1ZSBpc24ndCBsaW5raW5nIGl0c2VsZlxuICAgICAgICAgICAgaWYgKHdhdGNoZWRWYWx1ZS5jdXJyZW50ICE9PSB1bmRlZmluZWQgJiYga2V5ICE9PSB3YXRjaGVkS2V5KSB7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSB3YXRjaGVkVmFsdWUuY3VycmVudDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVGhlbiBjaGVjayB2YWx1ZXMgaW4gSW5wdXRcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXRPZmZzZXQgJiYgaW5wdXRPZmZzZXQuaGFzT3duUHJvcGVydHkod2F0Y2hlZEtleSkpIHtcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlLmFjdGlvbi5wcm9jZXNzKGFjdG9yLCB2YWx1ZSwgd2F0Y2hlZEtleSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gd2F0Y2hlZEtleShhY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB3ZSBoYXZlIG1hcEZyb20gYW5kIG1hcFRvIHByb3BlcnRpZXMsIHRyYW5zbGF0ZSB0aGUgbmV3IHZhbHVlXG4gICAgICAgIGlmICh2YWx1ZS5tYXBGcm9tICYmIHZhbHVlLm1hcFRvKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGZpbmRNYXBwZWRWYWx1ZShuZXdWYWx1ZSwgd2F0Y2hlZFZhbHVlLCB2YWx1ZSwgdmFsdWUubWFwRnJvbSwgdmFsdWUubWFwVG8pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXYXRjaDsiXX0=

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgY2EzNWQ3M2M4NGE3YTVhNGY3YjUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xvYWQvZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9sb2FkL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcG9wbW90aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy92YWx1ZS10eXBlcy9hbHBoYS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmFsdWUtdHlwZXMvYW5nbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbHVlLXR5cGVzL3B4LmpzIiwid2VicGFjazovLy8uL3NyYy92YWx1ZS10eXBlcy9oc2wuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbHVlLXR5cGVzL3JnYi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmFsdWUtdHlwZXMvaGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92YWx1ZS10eXBlcy9jb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmFsdWUtdHlwZXMvcG9zaXRpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy92YWx1ZS10eXBlcy9kaW1lbnNpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy92YWx1ZS10eXBlcy9zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmFsdWUtdHlwZXMvc2hhZG93LmpzIiwid2VicGFjazovLy8uL3NyYy92YWx1ZS10eXBlcy9jb21wbGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9yb2xlcy9hdHRyL2F0dHJSb2xlLmpzIiwid2VicGFjazovLy8uL3NyYy9yb2xlcy9jc3MvY3NzUm9sZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcm9sZXMvc3ZnL3N2Z1JvbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvbGVzL3BhdGgvZHJhd1BhdGhSb2xlLmpzIiwid2VicGFjazovLy8uL3NyYy92YWx1ZS10eXBlcy9tYW5pcHVsYXRvcnMvY3JlYXRlLWRlbGltaXRlZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmFsdWUtdHlwZXMvbWFuaXB1bGF0b3JzL2dldC1jb2xvci12YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbHVlLXR5cGVzL21hbmlwdWxhdG9ycy9mdW5jdGlvbi1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbHVlLXR5cGVzL3NldHRpbmdzL2RlZmF1bHQtcHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbHVlLXR5cGVzL3NldHRpbmdzL2RpY3Rpb25hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbHVlLXR5cGVzL21hbmlwdWxhdG9ycy9zcGxpdC1zcGFjZS1kZWxpbWl0ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbHVlLXR5cGVzL21hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdG9yL0FjdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9zZXF1ZW5jZS9TZXF1ZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5wdXQvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2l0ZXJhdG9yL0l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9yb2xlcy9Sb2xlLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL3R3ZWVuL0Vhc2luZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9ucy9BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvVHdlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvU2ltdWxhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvVHJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luYy9zZWxlY3QtYWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvdHdlZW4vcHJlc2V0LWVhc2luZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9ucy90d2Vlbi9tb2RpZnktZWFzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcm9sZXMvY3NzL2J1aWxkLmpzIiwid2VicGFjazovLy8uL3NyYy9yb2xlcy9jc3MvbWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9yb2xlcy9jc3MvdHlwZS1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvbGVzL3N2Zy9idWlsZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcm9sZXMvc3ZnL3R5cGUtbWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9yb2xlcy9wYXRoL21hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5jL1F1ZXVlLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmMvc2VsZWN0LWRvbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0b3IvdmFsdWUtb3BlcmF0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0b3IvdXBkYXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rvci9yZW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdG9yL3Bvc3QtcmVuZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9yb2xlcy9kZWZhdWx0Um9sZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbHMvQ29udHJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvc2ltdWxhdGUvc2ltdWxhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvdHdlZW4vQmV6aWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL3R3ZWVuL1R3ZWVuQ29udHJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2lucHV0L1BvaW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbHVlLXR5cGVzL21hbmlwdWxhdG9ycy9zcGxpdC1jb21tYS1kZWxpbWl0ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbHVlLXR5cGVzL21hbmlwdWxhdG9ycy9mdW5jdGlvbi1icmVhay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcm9sZXMvY3NzL3RyYW5zZm9ybS1kaWN0aW9uYXJ5LmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL1dhdGNoLmpzIl0sIm5hbWVzIjpbXSwibWFw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Ozs7O0FDeEIzQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBSztBQUNMO0FBQ0E7O0FBRUEsb0JBQW1CLGlCQUFpQjtBQUNwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQSxNQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUM7O0FBRUQ7QUFDQSw0Q0FBMkMsK2dKOzs7Ozs7QUNwRTNDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUOztBQUVBLEVBQUM7QUFDRCw0Q0FBMkMsMjVGOzs7Ozs7QUNsQzNDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQzs7QUFFRDtBQUNBLDRDQUEy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QSxVQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFTOztBQUVULGdDQUErQix3QkFBd0I7QUFDdkQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQSxrQkFBaUI7QUFDakI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBSzs7QUFFTDtBQUNBLEVBQUM7O0FBRUQ7QUFDQSw0Q0FBMkMsMnF2Qjs7Ozs7O0FDMWEzQzs7QUFFQSxrREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SixrREFBaUQsYUFBYSx1RkFBdUYsRUFBRSx1RkFBdUY7O0FBRTlPLDJDQUEwQywrREFBK0QscUdBQXFHLEVBQUUseUVBQXlFLGVBQWUseUVBQXlFLEVBQUUsRUFBRSx1SEFBdUg7O0FBRTVlO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDOztBQUVEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7O0FBRVQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVM7O0FBRVQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFDOztBQUVEO0FBQ0EsNENBQTJDLDJtUTs7Ozs7O0FDN0kzQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxNQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFTO0FBQ1Q7O0FBRUE7QUFDQSxjQUFhO0FBQ2I7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBMkMsdTRPOzs7Ozs7QUMzSDNDOztBQUVBLGtEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHVGQUFzRixhQUFhO0FBQ25HO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrRkFBOEYsZUFBZTtBQUM3RztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0ZBQThGLGVBQWU7QUFDN0c7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrRkFBOEYsZUFBZTtBQUM3RztBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFhO0FBQ2IsMkJBQTBCLHNCQUFzQjtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUM7O0FBRUQ7QUFDQSw0Q0FBMkMsK3lQOzs7Ozs7QUM3STNDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQSxrQkFBaUI7O0FBRWpCO0FBQ0EsY0FBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsTUFBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBLDRDQUEyQyxtN0s7Ozs7OztBQ3BGM0M7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNENBQTJDLHV5SDs7Ozs7O0FDbEUzQzs7QUFFQSxrREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFVBQVM7O0FBRVQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsNkVBQTRFO0FBQzVFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0JBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQSxrQkFBaUI7QUFDakIsY0FBYTtBQUNiOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUF5QjtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFF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QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTJDLDJnQjs7Ozs7O0FDVDNDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUEyQyx1OEY7Ozs7OztBQ3ZEM0M7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBLE1BQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLDRDQUEyQyxtaUo7Ozs7OztBQ2hEM0M7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUEyQywrL0I7Ozs7OztBQ2xCM0M7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUEyQywraUI7Ozs7OztBQ1QzQzs7QUFFQSxrREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBQzs7QUFFRDtBQUNBLDRDQUEyQywyeEU7Ozs7OztBQ3hEM0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFLO0FBQ0w7O0FBRUE7QUFDQSxVQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTJDLHVtRDs7Ozs7O0FDMUIzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBd0I7QUFDeEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FB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QUFDQTtBQUNBLE1BQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRCw0Q0FBMkMsbStEOzs7Ozs7QUNuQzNDOztBQUVBLGtEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBaUI7QUFDakI7QUFDQSxVQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBUztBQUNUOztBQUVBO0FBQ0EsRUFBQzs7QUFFRDtBQUNBLDRDQUEyQywyd0s7Ozs7OztBQzFGM0M7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBSzs7QUFFTDtBQUNBOztBQUVBOztBQUVBO0FBQ0EsTUFBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxN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Q2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVUsY0FBYztBQUN4QjtBQUNBO0FBQ0EsRUFBQzs7QUFFRDtBQUNBLDRDQUEyQyxtdUY7Ozs7OztBQ3BDM0M7O0FBRUEsa0RBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosa0RBQWlELGFBQWEsdUZBQXVGLEVBQUUsdUZBQXVGOztBQUU5TywyQ0FBMEMsK0RBQStELHFHQUFxRyxFQUFFLHlFQUF5RSxlQUFlLHlFQUF5RSxFQUFFLEVBQUUsdUhBQXVIOztBQUU1ZTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVSxlQUFlO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHdFQUF1RSxhQUFhO0FBQ3BGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWE7QUFDYjtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEVBQUM7O0FBRUQ7QUFDQSw0Q0FBMkMsKzRPIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgY2EzNWQ3M2M4NGE3YTVhNGY3YjVcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciBwb3Btb3Rpb24gPSByZXF1aXJlKCcuL21vZHVsZS5qcycpLFxuICAgIFVJcmVmID0gd2luZG93LnVpO1xuXG5wb3Btb3Rpb24ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB3aW5kb3cudWkgPSBVSXJlZjtcbn07XG5cbndpbmRvdy51aSA9IHdpbmRvdy5wb3Btb3Rpb24gPSBwb3Btb3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1kc2IySmhiQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRWxCUVVrc1UwRkJVeXhIUVVGSExFOUJRVThzUTBGQlF5eGhRVUZoTEVOQlFVTTdTVUZEYkVNc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGQlF5eEZRVUZGTEVOQlFVTTdPMEZCUlhSQ0xGTkJRVk1zUTBGQlF5eFZRVUZWTEVkQlFVY3NXVUZCV1R0QlFVTXZRaXhWUVVGTkxFTkJRVU1zUlVGQlJTeEhRVUZITEV0QlFVc3NRMEZCUXp0RFFVTnlRaXhEUVVGRE96dEJRVVZHTEUxQlFVMHNRMEZCUXl4RlFVRkZMRWRCUVVjc1RVRkJUU3hEUVVGRExGTkJRVk1zUjBGQlJ5eFRRVUZUTEVOQlFVTWlMQ0ptYVd4bElqb2laMnh2WW1Gc0xtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlIQnZjRzF2ZEdsdmJpQTlJSEpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxMbXB6Snlrc1hHNGdJQ0FnVlVseVpXWWdQU0IzYVc1a2IzY3VkV2s3WEc1Y2JuQnZjRzF2ZEdsdmJpNXViME52Ym1ac2FXTjBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhkcGJtUnZkeTUxYVNBOUlGVkpjbVZtTzF4dWZUdGNibHh1ZDJsdVpHOTNMblZwSUQwZ2QybHVaRzkzTG5CdmNHMXZkR2x2YmlBOUlIQnZjRzF2ZEdsdmJqc2lYWDA9XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9sb2FkL2dsb2JhbC5qc1xuICoqIG1vZHVsZSBpZCA9IDBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgcG9wbW90aW9uID0gcmVxdWlyZSgnLi4vcG9wbW90aW9uJyk7XG5cbi8qXG4gICAgQWRkIG9wdGlvbmFsIGN1c3RvbSB2YWx1ZSB0eXBlIHN1cHBvcnRcbiovXG5wb3Btb3Rpb24uYWRkVmFsdWVUeXBlKHtcbiAgICBhbHBoYTogcmVxdWlyZSgnLi4vdmFsdWUtdHlwZXMvYWxwaGEnKSxcbiAgICBhbmdsZTogcmVxdWlyZSgnLi4vdmFsdWUtdHlwZXMvYW5nbGUnKSxcbiAgICBweDogcmVxdWlyZSgnLi4vdmFsdWUtdHlwZXMvcHgnKSxcbiAgICBoc2w6IHJlcXVpcmUoJy4uL3ZhbHVlLXR5cGVzL2hzbCcpLFxuICAgIHJnYjogcmVxdWlyZSgnLi4vdmFsdWUtdHlwZXMvcmdiJyksXG4gICAgaGV4OiByZXF1aXJlKCcuLi92YWx1ZS10eXBlcy9oZXgnKSxcbiAgICBjb2xvcjogcmVxdWlyZSgnLi4vdmFsdWUtdHlwZXMvY29sb3InKSxcbiAgICBwb3NpdGlvbnM6IHJlcXVpcmUoJy4uL3ZhbHVlLXR5cGVzL3Bvc2l0aW9ucycpLFxuICAgIGRpbWVuc2lvbnM6IHJlcXVpcmUoJy4uL3ZhbHVlLXR5cGVzL2RpbWVuc2lvbnMnKSxcbiAgICBzY2FsZTogcmVxdWlyZSgnLi4vdmFsdWUtdHlwZXMvc2NhbGUnKSxcbiAgICBzaGFkb3c6IHJlcXVpcmUoJy4uL3ZhbHVlLXR5cGVzL3NoYWRvdycpLFxuICAgIGNvbXBsZXg6IHJlcXVpcmUoJy4uL3ZhbHVlLXR5cGVzL2NvbXBsZXgnKVxufSk7XG5cbi8qXG4gICAgUHJlZGVmaW5lZCByb2xlc1xuKi9cbnBvcG1vdGlvbi5hdHRyID0gcmVxdWlyZSgnLi4vcm9sZXMvYXR0ci9hdHRyUm9sZScpO1xucG9wbW90aW9uLmNzcyA9IHJlcXVpcmUoJy4uL3JvbGVzL2Nzcy9jc3NSb2xlJyk7XG5wb3Btb3Rpb24uc3ZnID0gcmVxdWlyZSgnLi4vcm9sZXMvc3ZnL3N2Z1JvbGUnKTtcbnBvcG1vdGlvbi5kcmF3UGF0aCA9IHJlcXVpcmUoJy4uL3JvbGVzL3BhdGgvZHJhd1BhdGhSb2xlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcG9wbW90aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltMXZaSFZzWlM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3haUVVGWkxFTkJRVU03TzBGQlJXSXNTVUZCU1N4VFFVRlRMRWRCUVVjc1QwRkJUeXhEUVVGRExHTkJRV01zUTBGQlF6czdPenM3UVVGQlF5eEJRVXQ0UXl4VFFVRlRMRU5CUVVNc1dVRkJXU3hEUVVGRE8wRkJRMjVDTEZOQlFVc3NSVUZCUlN4UFFVRlBMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTTdRVUZEZEVNc1UwRkJTeXhGUVVGRkxFOUJRVThzUTBGQlF5eHpRa0ZCYzBJc1EwRkJRenRCUVVOMFF5eE5RVUZGTEVWQlFVVXNUMEZCVHl4RFFVRkRMRzFDUVVGdFFpeERRVUZETzBGQlEyaERMRTlCUVVjc1JVRkJSU3hQUVVGUExFTkJRVU1zYjBKQlFXOUNMRU5CUVVNN1FVRkRiRU1zVDBGQlJ5eEZRVUZGTEU5QlFVOHNRMEZCUXl4dlFrRkJiMElzUTBGQlF6dEJRVU5zUXl4UFFVRkhMRVZCUVVVc1QwRkJUeXhEUVVGRExHOUNRVUZ2UWl4RFFVRkRPMEZCUTJ4RExGTkJRVXNzUlVGQlJTeFBRVUZQTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU03UVVGRGRFTXNZVUZCVXl4RlFVRkZMRTlCUVU4c1EwRkJReXd3UWtGQk1FSXNRMEZCUXp0QlFVTTVReXhqUVVGVkxFVkJRVVVzVDBGQlR5eERRVUZETERKQ1FVRXlRaXhEUVVGRE8wRkJRMmhFTEZOQlFVc3NSVUZCUlN4UFFVRlBMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTTdRVUZEZEVNc1ZVRkJUU3hGUVVGRkxFOUJRVThzUTBGQlF5eDFRa0ZCZFVJc1EwRkJRenRCUVVONFF5eFhRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMSGRDUVVGM1FpeERRVUZETzBOQlF6ZERMRU5CUVVNN096czdPMEZCUVVNc1FVRkxTQ3hUUVVGVExFTkJRVU1zU1VGQlNTeEhRVUZITEU5QlFVOHNRMEZCUXl4M1FrRkJkMElzUTBGQlF5eERRVUZETzBGQlEyNUVMRk5CUVZNc1EwRkJReXhIUVVGSExFZEJRVWNzVDBGQlR5eERRVUZETEhOQ1FVRnpRaXhEUVVGRExFTkJRVU03UVVGRGFFUXNVMEZCVXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhQUVVGUExFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1EwRkJRenRCUVVOb1JDeFRRVUZUTEVOQlFVTXNVVUZCVVN4SFFVRkhMRTlCUVU4c1EwRkJReXcwUWtGQk5FSXNRMEZCUXl4RFFVRkRPenRCUVVVelJDeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhMRk5CUVZNc1EwRkJReUlzSW1acGJHVWlPaUp0YjJSMWJHVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dWRtRnlJSEJ2Y0cxdmRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dUwzQnZjRzF2ZEdsdmJpY3BPMXh1WEc0dktseHVJQ0FnSUVGa1pDQnZjSFJwYjI1aGJDQmpkWE4wYjIwZ2RtRnNkV1VnZEhsd1pTQnpkWEJ3YjNKMFhHNHFMMXh1Y0c5d2JXOTBhVzl1TG1Ga1pGWmhiSFZsVkhsd1pTaDdYRzRnSUNBZ1lXeHdhR0U2SUhKbGNYVnBjbVVvSnk0dUwzWmhiSFZsTFhSNWNHVnpMMkZzY0doaEp5a3NYRzRnSUNBZ1lXNW5iR1U2SUhKbGNYVnBjbVVvSnk0dUwzWmhiSFZsTFhSNWNHVnpMMkZ1WjJ4bEp5a3NYRzRnSUNBZ2NIZzZJSEpsY1hWcGNtVW9KeTR1TDNaaGJIVmxMWFI1Y0dWekwzQjRKeWtzWEc0Z0lDQWdhSE5zT2lCeVpYRjFhWEpsS0NjdUxpOTJZV3gxWlMxMGVYQmxjeTlvYzJ3bktTeGNiaUFnSUNCeVoySTZJSEpsY1hWcGNtVW9KeTR1TDNaaGJIVmxMWFI1Y0dWekwzSm5ZaWNwTEZ4dUlDQWdJR2hsZURvZ2NtVnhkV2x5WlNnbkxpNHZkbUZzZFdVdGRIbHdaWE12YUdWNEp5a3NYRzRnSUNBZ1kyOXNiM0k2SUhKbGNYVnBjbVVvSnk0dUwzWmhiSFZsTFhSNWNHVnpMMk52Ykc5eUp5a3NYRzRnSUNBZ2NHOXphWFJwYjI1ek9pQnlaWEYxYVhKbEtDY3VMaTkyWVd4MVpTMTBlWEJsY3k5d2IzTnBkR2x2Ym5NbktTeGNiaUFnSUNCa2FXMWxibk5wYjI1ek9pQnlaWEYxYVhKbEtDY3VMaTkyWVd4MVpTMTBlWEJsY3k5a2FXMWxibk5wYjI1ekp5a3NYRzRnSUNBZ2MyTmhiR1U2SUhKbGNYVnBjbVVvSnk0dUwzWmhiSFZsTFhSNWNHVnpMM05qWVd4bEp5a3NYRzRnSUNBZ2MyaGhaRzkzT2lCeVpYRjFhWEpsS0NjdUxpOTJZV3gxWlMxMGVYQmxjeTl6YUdGa2IzY25LU3hjYmlBZ0lDQmpiMjF3YkdWNE9pQnlaWEYxYVhKbEtDY3VMaTkyWVd4MVpTMTBlWEJsY3k5amIyMXdiR1Y0SnlsY2JuMHBPMXh1WEc0dktseHVJQ0FnSUZCeVpXUmxabWx1WldRZ2NtOXNaWE5jYmlvdlhHNXdiM0J0YjNScGIyNHVZWFIwY2lBOUlISmxjWFZwY21Vb0p5NHVMM0p2YkdWekwyRjBkSEl2WVhSMGNsSnZiR1VuS1R0Y2JuQnZjRzF2ZEdsdmJpNWpjM01nUFNCeVpYRjFhWEpsS0NjdUxpOXliMnhsY3k5amMzTXZZM056VW05c1pTY3BPMXh1Y0c5d2JXOTBhVzl1TG5OMlp5QTlJSEpsY1hWcGNtVW9KeTR1TDNKdmJHVnpMM04yWnk5emRtZFNiMnhsSnlrN1hHNXdiM0J0YjNScGIyNHVaSEpoZDFCaGRHZ2dQU0J5WlhGMWFYSmxLQ2N1TGk5eWIyeGxjeTl3WVhSb0wyUnlZWGRRWVhSb1VtOXNaU2NwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIQnZjRzF2ZEdsdmJqc2lYWDA9XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9sb2FkL21vZHVsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHZhbHVlVHlwZXMgPSByZXF1aXJlKCcuL3ZhbHVlLXR5cGVzL21hbmFnZXInKSxcbiAgICBQb3Btb3Rpb24gPSB7XG5cbiAgICBBY3RvcjogcmVxdWlyZSgnLi9hY3Rvci9BY3RvcicpLFxuXG4gICAgU2VxdWVuY2U6IHJlcXVpcmUoJy4vc2VxdWVuY2UvU2VxdWVuY2UnKSxcblxuICAgIElucHV0OiByZXF1aXJlKCcuL2lucHV0L0lucHV0JyksXG5cbiAgICBJdGVyYXRvcjogcmVxdWlyZSgnLi9pdGVyYXRvci9JdGVyYXRvcicpLFxuXG4gICAgUHJvY2VzczogcmVxdWlyZSgnLi9wcm9jZXNzL1Byb2Nlc3MnKSxcblxuICAgIEVhc2luZzogcmVxdWlyZSgnLi9hY3Rpb25zL3R3ZWVuL0Vhc2luZycpLFxuXG4gICAgUm9sZTogcmVxdWlyZSgnLi9yb2xlcy9Sb2xlJyksXG5cbiAgICBBY3Rpb246IHJlcXVpcmUoJy4vYWN0aW9ucy9BY3Rpb24nKSxcbiAgICBUd2VlbjogcmVxdWlyZSgnLi9hY3Rpb25zL1R3ZWVuJyksXG4gICAgU2ltdWxhdGU6IHJlcXVpcmUoJy4vYWN0aW9ucy9TaW11bGF0ZScpLFxuICAgIFRyYWNrOiByZXF1aXJlKCcuL2FjdGlvbnMvVHJhY2snKSxcblxuICAgIC8qXG4gICAgICAgIENyZWF0ZSBhbiBJdGVyYXRvciBvZiBBY3RvcnMgd2l0aCBzZWxlY3RlZCBkb20gZWxlbWVudHNcbiAgICAqL1xuICAgIHNlbGVjdDogcmVxdWlyZSgnLi9pbmMvc2VsZWN0LWFjdG9yJyksXG5cbiAgICBlYXNlOiByZXF1aXJlKCcuL2FjdGlvbnMvdHdlZW4vcHJlc2V0LWVhc2luZycpLFxuXG4gICAgLypcbiAgICAgICAgTW9kaWZ5IHByb3BlcnRpZXMgb2YgaW5idWlsdCBlYXNpbmcgZnVuY3Rpb25cbiAgICAqL1xuICAgIG1vZGlmeUVhc2U6IHJlcXVpcmUoJy4vYWN0aW9ucy90d2Vlbi9tb2RpZnktZWFzZScpLFxuXG4gICAgYWRkVmFsdWVUeXBlOiBmdW5jdGlvbiAodHlwZXMpIHtcbiAgICAgICAgdmFsdWVUeXBlcy5leHRlbmQodHlwZXMpO1xuICAgICAgICByZXR1cm4gUG9wbW90aW9uO1xuICAgIH0sXG5cbiAgICBjYWxjOiByZXF1aXJlKCcuL2luYy9jYWxjJyksXG4gICAgdXRpbHM6IHJlcXVpcmUoJy4vaW5jL3V0aWxzJylcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUG9wbW90aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluQnZjRzF2ZEdsdmJpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFbEJRVWtzVlVGQlZTeEhRVUZITEU5QlFVOHNRMEZCUXl4MVFrRkJkVUlzUTBGQlF6dEpRVVUzUXl4VFFVRlRMRWRCUVVjN08wRkJSVklzVTBGQlN5eEZRVUZGTEU5QlFVOHNRMEZCUXl4bFFVRmxMRU5CUVVNN08wRkJSUzlDTEZsQlFWRXNSVUZCUlN4UFFVRlBMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTTdPMEZCUlhoRExGTkJRVXNzUlVGQlJTeFBRVUZQTEVOQlFVTXNaVUZCWlN4RFFVRkRPenRCUVVVdlFpeFpRVUZSTEVWQlFVVXNUMEZCVHl4RFFVRkRMSEZDUVVGeFFpeERRVUZET3p0QlFVVjRReXhYUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETEcxQ1FVRnRRaXhEUVVGRE96dEJRVVZ5UXl4VlFVRk5MRVZCUVVVc1QwRkJUeXhEUVVGRExIZENRVUYzUWl4RFFVRkRPenRCUVVWNlF5eFJRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRMR05CUVdNc1EwRkJRenM3UVVGRk4wSXNWVUZCVFN4RlFVRkZMRTlCUVU4c1EwRkJReXhyUWtGQmEwSXNRMEZCUXp0QlFVTnVReXhUUVVGTExFVkJRVVVzVDBGQlR5eERRVUZETEdsQ1FVRnBRaXhEUVVGRE8wRkJRMnBETEZsQlFWRXNSVUZCUlN4UFFVRlBMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTTdRVUZEZGtNc1UwRkJTeXhGUVVGRkxFOUJRVThzUTBGQlF5eHBRa0ZCYVVJc1EwRkJRenM3T3pzN1FVRkxha01zVlVGQlRTeEZRVUZGTEU5QlFVOHNRMEZCUXl4dlFrRkJiMElzUTBGQlF6czdRVUZGY2tNc1VVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF5d3JRa0ZCSzBJc1EwRkJRenM3T3pzN1FVRkxPVU1zWTBGQlZTeEZRVUZGTEU5QlFVOHNRMEZCUXl3MlFrRkJOa0lzUTBGQlF6czdRVUZGYkVRc1owSkJRVmtzUlVGQlJTeFZRVUZCTEV0QlFVc3NSVUZCU1R0QlFVTnVRaXhyUWtGQlZTeERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVONlFpeGxRVUZQTEZOQlFWTXNRMEZCUXp0TFFVTndRanM3UVVGRlJDeFJRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJRenRCUVVNelFpeFRRVUZMTEVWQlFVVXNUMEZCVHl4RFFVRkRMR0ZCUVdFc1EwRkJRenREUVVOb1F5eERRVUZET3p0QlFVVk9MRTFCUVUwc1EwRkJReXhQUVVGUExFZEJRVWNzVTBGQlV5eERRVUZESWl3aVptbHNaU0k2SW5CdmNHMXZkR2x2Ymk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJblpoY2lCMllXeDFaVlI1Y0dWeklEMGdjbVZ4ZFdseVpTZ25MaTkyWVd4MVpTMTBlWEJsY3k5dFlXNWhaMlZ5Snlrc1hHNWNiaUFnSUNCUWIzQnRiM1JwYjI0Z1BTQjdYRzVjYmlBZ0lDQWdJQ0FnUVdOMGIzSTZJSEpsY1hWcGNtVW9KeTR2WVdOMGIzSXZRV04wYjNJbktTeGNibHh1SUNBZ0lDQWdJQ0JUWlhGMVpXNWpaVG9nY21WeGRXbHlaU2duTGk5elpYRjFaVzVqWlM5VFpYRjFaVzVqWlNjcExGeHVYRzRnSUNBZ0lDQWdJRWx1Y0hWME9pQnlaWEYxYVhKbEtDY3VMMmx1Y0hWMEwwbHVjSFYwSnlrc1hHNWNiaUFnSUNBZ0lDQWdTWFJsY21GMGIzSTZJSEpsY1hWcGNtVW9KeTR2YVhSbGNtRjBiM0l2U1hSbGNtRjBiM0luS1N4Y2JseHVJQ0FnSUNBZ0lDQlFjbTlqWlhOek9pQnlaWEYxYVhKbEtDY3VMM0J5YjJObGMzTXZVSEp2WTJWemN5Y3BMRnh1WEc0Z0lDQWdJQ0FnSUVWaGMybHVaem9nY21WeGRXbHlaU2duTGk5aFkzUnBiMjV6TDNSM1pXVnVMMFZoYzJsdVp5Y3BMRnh1WEc0Z0lDQWdJQ0FnSUZKdmJHVTZJSEpsY1hWcGNtVW9KeTR2Y205c1pYTXZVbTlzWlNjcExGeHVYRzRnSUNBZ0lDQWdJRUZqZEdsdmJqb2djbVZ4ZFdseVpTZ25MaTloWTNScGIyNXpMMEZqZEdsdmJpY3BMRnh1SUNBZ0lDQWdJQ0JVZDJWbGJqb2djbVZ4ZFdseVpTZ25MaTloWTNScGIyNXpMMVIzWldWdUp5a3NYRzRnSUNBZ0lDQWdJRk5wYlhWc1lYUmxPaUJ5WlhGMWFYSmxLQ2N1TDJGamRHbHZibk12VTJsdGRXeGhkR1VuS1N4Y2JpQWdJQ0FnSUNBZ1ZISmhZMnM2SUhKbGNYVnBjbVVvSnk0dllXTjBhVzl1Y3k5VWNtRmpheWNwTEZ4dVhHNGdJQ0FnSUNBZ0lDOHFYRzRnSUNBZ0lDQWdJQ0FnSUNCRGNtVmhkR1VnWVc0Z1NYUmxjbUYwYjNJZ2IyWWdRV04wYjNKeklIZHBkR2dnYzJWc1pXTjBaV1FnWkc5dElHVnNaVzFsYm5SelhHNGdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJSE5sYkdWamREb2djbVZ4ZFdseVpTZ25MaTlwYm1NdmMyVnNaV04wTFdGamRHOXlKeWtzWEc1Y2JpQWdJQ0FnSUNBZ1pXRnpaVG9nY21WeGRXbHlaU2duTGk5aFkzUnBiMjV6TDNSM1pXVnVMM0J5WlhObGRDMWxZWE5wYm1jbktTeGNibHh1SUNBZ0lDQWdJQ0F2S2x4dUlDQWdJQ0FnSUNBZ0lDQWdUVzlrYVdaNUlIQnliM0JsY25ScFpYTWdiMllnYVc1aWRXbHNkQ0JsWVhOcGJtY2dablZ1WTNScGIyNWNiaUFnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnYlc5a2FXWjVSV0Z6WlRvZ2NtVnhkV2x5WlNnbkxpOWhZM1JwYjI1ekwzUjNaV1Z1TDIxdlpHbG1lUzFsWVhObEp5a3NYRzVjYmlBZ0lDQWdJQ0FnWVdSa1ZtRnNkV1ZVZVhCbE9pQjBlWEJsY3lBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVlI1Y0dWekxtVjRkR1Z1WkNoMGVYQmxjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VHOXdiVzkwYVc5dU8xeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUdOaGJHTTZJSEpsY1hWcGNtVW9KeTR2YVc1akwyTmhiR01uS1N4Y2JpQWdJQ0FnSUNBZ2RYUnBiSE02SUhKbGNYVnBjbVVvSnk0dmFXNWpMM1YwYVd4ekp5bGNiaUFnSUNCOU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRkJ2Y0cxdmRHbHZianNpWFgwPVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvcG9wbW90aW9uLmpzXG4gKiogbW9kdWxlIGlkID0gMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICBtaW46IDAsXG4gICAgICAgIG1heDogMVxuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Gc2NHaGhMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNUVUZCVFN4RFFVRkRMRTlCUVU4c1IwRkJSenRCUVVOaUxHZENRVUZaTEVWQlFVVTdRVUZEVml4WFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOT0xGZEJRVWNzUlVGQlJTeERRVUZETzB0QlExUTdRMEZEU2l4RFFVRkRJaXdpWm1sc1pTSTZJbUZzY0doaExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3WEc0Z0lDQWdaR1ZtWVhWc2RGQnliM0J6T2lCN1hHNGdJQ0FnSUNBZ0lHMXBiam9nTUN4Y2JpQWdJQ0FnSUNBZ2JXRjRPaUF4WEc0Z0lDQWdmVnh1ZlRzaVhYMD1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3ZhbHVlLXR5cGVzL2FscGhhLmpzXG4gKiogbW9kdWxlIGlkID0gM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBkZWZhdWx0UHJvcHM6IHtcbiAgICAgICAgdW5pdDogJ2RlZydcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnVaMnhsTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnp0QlFVTmlMR2RDUVVGWkxFVkJRVVU3UVVGRFZpeFpRVUZKTEVWQlFVVXNTMEZCU3p0TFFVTmtPME5CUTBvc1EwRkJReUlzSW1acGJHVWlPaUpoYm1kc1pTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4dUlDQWdJR1JsWm1GMWJIUlFjbTl3Y3pvZ2UxeHVJQ0FnSUNBZ0lDQjFibWwwT2lBblpHVm5KMXh1SUNBZ0lIMWNibjA3SWwxOVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvdmFsdWUtdHlwZXMvYW5nbGUuanNcbiAqKiBtb2R1bGUgaWQgPSA0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICB1bml0OiAncHgnXG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkI0TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnp0QlFVTmlMR2RDUVVGWkxFVkJRVVU3UVVGRFZpeFpRVUZKTEVWQlFVVXNTVUZCU1R0TFFVTmlPME5CUTBvc1EwRkJReUlzSW1acGJHVWlPaUp3ZUM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNBZ0lHUmxabUYxYkhSUWNtOXdjem9nZTF4dUlDQWdJQ0FnSUNCMWJtbDBPaUFuY0hnblhHNGdJQ0FnZlZ4dWZUc2lYWDA9XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy92YWx1ZS10eXBlcy9weC5qc1xuICoqIG1vZHVsZSBpZCA9IDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZURlbGltaXRlZCA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2NyZWF0ZS1kZWxpbWl0ZWQnKSxcbiAgICBnZXRDb2xvclZhbHVlcyA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2dldC1jb2xvci12YWx1ZXMnKSxcbiAgICBmdW5jdGlvbkNyZWF0ZSA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2Z1bmN0aW9uLWNyZWF0ZScpLFxuICAgIGRlZmF1bHRQcm9wcyA9IHJlcXVpcmUoJy4vc2V0dGluZ3MvZGVmYXVsdC1wcm9wcycpLFxuICAgIHRlcm1zID0gcmVxdWlyZSgnLi9zZXR0aW5ncy9kaWN0aW9uYXJ5JykuaHNsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICBIdWU6IHtcbiAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgIG1heDogMzYwXG4gICAgICAgIH0sXG4gICAgICAgIFNhdHVyYXRpb246IGRlZmF1bHRQcm9wcy5wZXJjZW50LFxuICAgICAgICBMaWdodG5lc3M6IGRlZmF1bHRQcm9wcy5wZXJjZW50LFxuICAgICAgICBBbHBoYTogZGVmYXVsdFByb3BzLm9wYWNpdHlcbiAgICB9LFxuXG4gICAgdGVzdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5pbmRleE9mKCdoc2wnKSA+IC0xO1xuICAgIH0sXG5cbiAgICBzcGxpdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBnZXRDb2xvclZhbHVlcyh2YWx1ZSwgdGVybXMpO1xuICAgIH0sXG5cbiAgICBjb21iaW5lOiBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbkNyZWF0ZShjcmVhdGVEZWxpbWl0ZWQodmFsdWVzLCB0ZXJtcywgJywgJywgMiksICdoc2xhJyk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWh6YkM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTEVsQlFVa3NaVUZCWlN4SFFVRkhMRTlCUVU4c1EwRkJReXhwUTBGQmFVTXNRMEZCUXp0SlFVTTFSQ3hqUVVGakxFZEJRVWNzVDBGQlR5eERRVUZETEdsRFFVRnBReXhEUVVGRE8wbEJRek5FTEdOQlFXTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1owTkJRV2RETEVOQlFVTTdTVUZETVVRc1dVRkJXU3hIUVVGSExFOUJRVThzUTBGQlF5d3dRa0ZCTUVJc1EwRkJRenRKUVVOc1JDeExRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRMSFZDUVVGMVFpeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRPenRCUVVWcVJDeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhPenRCUVVWaUxHZENRVUZaTEVWQlFVVTdRVUZEVml4WFFVRkhMRVZCUVVVN1FVRkRSQ3hsUVVGSExFVkJRVVVzUTBGQlF6dEJRVU5PTEdWQlFVY3NSVUZCUlN4SFFVRkhPMU5CUTFnN1FVRkRSQ3hyUWtGQlZTeEZRVUZGTEZsQlFWa3NRMEZCUXl4UFFVRlBPMEZCUTJoRExHbENRVUZUTEVWQlFVVXNXVUZCV1N4RFFVRkRMRTlCUVU4N1FVRkRMMElzWVVGQlN5eEZRVUZGTEZsQlFWa3NRMEZCUXl4UFFVRlBPMHRCUXpsQ096dEJRVVZFTEZGQlFVa3NSVUZCUlN4VlFVRkJMRXRCUVVzN1pVRkJTeXhMUVVGTExFbEJRVWtzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UzBGQlF6czdRVUZGYmtRc1UwRkJTeXhGUVVGRkxGVkJRVUVzUzBGQlN6dGxRVUZKTEdOQlFXTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRE8wdEJRVUU3TzBGQlJUVkRMRmRCUVU4c1JVRkJSU3hWUVVGQkxFMUJRVTA3WlVGQlNTeGpRVUZqTEVOQlFVTXNaVUZCWlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1EwRkJRenRMUVVGQk8wTkJRM0pHTEVOQlFVTWlMQ0ptYVd4bElqb2lhSE5zTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUdOeVpXRjBaVVJsYkdsdGFYUmxaQ0E5SUhKbGNYVnBjbVVvSnk0dmJXRnVhWEIxYkdGMGIzSnpMMk55WldGMFpTMWtaV3hwYldsMFpXUW5LU3hjYmlBZ0lDQm5aWFJEYjJ4dmNsWmhiSFZsY3lBOUlISmxjWFZwY21Vb0p5NHZiV0Z1YVhCMWJHRjBiM0p6TDJkbGRDMWpiMnh2Y2kxMllXeDFaWE1uS1N4Y2JpQWdJQ0JtZFc1amRHbHZia055WldGMFpTQTlJSEpsY1hWcGNtVW9KeTR2YldGdWFYQjFiR0YwYjNKekwyWjFibU4wYVc5dUxXTnlaV0YwWlNjcExGeHVJQ0FnSUdSbFptRjFiSFJRY205d2N5QTlJSEpsY1hWcGNtVW9KeTR2YzJWMGRHbHVaM012WkdWbVlYVnNkQzF3Y205d2N5Y3BMRnh1SUNBZ0lIUmxjbTF6SUQwZ2NtVnhkV2x5WlNnbkxpOXpaWFIwYVc1bmN5OWthV04wYVc5dVlYSjVKeWt1YUhOc08xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmx4dUlDQWdJR1JsWm1GMWJIUlFjbTl3Y3pvZ2UxeHVJQ0FnSUNBZ0lDQklkV1U2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFwYmpvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGVEb2dNell3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lGTmhkSFZ5WVhScGIyNDZJR1JsWm1GMWJIUlFjbTl3Y3k1d1pYSmpaVzUwTEZ4dUlDQWdJQ0FnSUNCTWFXZG9kRzVsYzNNNklHUmxabUYxYkhSUWNtOXdjeTV3WlhKalpXNTBMRnh1SUNBZ0lDQWdJQ0JCYkhCb1lUb2daR1ZtWVhWc2RGQnliM0J6TG05d1lXTnBkSGxjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdkR1Z6ZERvZ2RtRnNkV1VnUFQ0Z0tIWmhiSFZsSUNZbUlIWmhiSFZsTG1sdVpHVjRUMllvSjJoemJDY3BJRDRnTFRFcExGeHVJQ0FnSUZ4dUlDQWdJSE53YkdsME9pQjJZV3gxWlNBOVBpQm5aWFJEYjJ4dmNsWmhiSFZsY3loMllXeDFaU3dnZEdWeWJYTXBMRnh1WEc0Z0lDQWdZMjl0WW1sdVpUb2dkbUZzZFdWeklEMCtJR1oxYm1OMGFXOXVRM0psWVhSbEtHTnlaV0YwWlVSbGJHbHRhWFJsWkNoMllXeDFaWE1zSUhSbGNtMXpMQ0FuTENBbkxDQXlLU3dnSjJoemJHRW5LVnh1ZlRzaVhYMD1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3ZhbHVlLXR5cGVzL2hzbC5qc1xuICoqIG1vZHVsZSBpZCA9IDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZURlbGltaXRlZCA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2NyZWF0ZS1kZWxpbWl0ZWQnKSxcbiAgICBnZXRDb2xvclZhbHVlcyA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2dldC1jb2xvci12YWx1ZXMnKSxcbiAgICBmdW5jdGlvbkNyZWF0ZSA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2Z1bmN0aW9uLWNyZWF0ZScpLFxuICAgIGRlZmF1bHRQcm9wcyA9IHJlcXVpcmUoJy4vc2V0dGluZ3MvZGVmYXVsdC1wcm9wcycpLFxuICAgIGNvbG9yRGVmYXVsdHMgPSBkZWZhdWx0UHJvcHMuY29sb3IsXG4gICAgdGVybXMgPSByZXF1aXJlKCcuL3NldHRpbmdzL2RpY3Rpb25hcnknKS5jb2xvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICAgIFJlZDogY29sb3JEZWZhdWx0cyxcbiAgICAgICAgR3JlZW46IGNvbG9yRGVmYXVsdHMsXG4gICAgICAgIEJsdWU6IGNvbG9yRGVmYXVsdHMsXG4gICAgICAgIEFscGhhOiBkZWZhdWx0UHJvcHMub3BhY2l0eVxuICAgIH0sXG5cbiAgICB0ZXN0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLmluZGV4T2YoJ3JnYicpID4gLTE7XG4gICAgfSxcblxuICAgIHNwbGl0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGdldENvbG9yVmFsdWVzKHZhbHVlLCB0ZXJtcyk7XG4gICAgfSxcblxuICAgIGNvbWJpbmU6IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uQ3JlYXRlKGNyZWF0ZURlbGltaXRlZCh2YWx1ZXMsIHRlcm1zLCAnLCAnLCAyKSwgJ3JnYmEnKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluSm5ZaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRWxCUVVrc1pVRkJaU3hIUVVGSExFOUJRVThzUTBGQlF5eHBRMEZCYVVNc1EwRkJRenRKUVVNMVJDeGpRVUZqTEVkQlFVY3NUMEZCVHl4RFFVRkRMR2xEUVVGcFF5eERRVUZETzBsQlF6TkVMR05CUVdNc1IwRkJSeXhQUVVGUExFTkJRVU1zWjBOQlFXZERMRU5CUVVNN1NVRkRNVVFzV1VGQldTeEhRVUZITEU5QlFVOHNRMEZCUXl3d1FrRkJNRUlzUTBGQlF6dEpRVU5zUkN4aFFVRmhMRWRCUVVjc1dVRkJXU3hEUVVGRExFdEJRVXM3U1VGRGJFTXNTMEZCU3l4SFFVRkhMRTlCUVU4c1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJRenM3UVVGRmNFUXNUVUZCVFN4RFFVRkRMRTlCUVU4c1IwRkJSenM3UVVGRllpeG5Ra0ZCV1N4RlFVRkZPMEZCUTFZc1YwRkJSeXhGUVVGRkxHRkJRV0U3UVVGRGJFSXNZVUZCU3l4RlFVRkZMR0ZCUVdFN1FVRkRjRUlzV1VGQlNTeEZRVUZGTEdGQlFXRTdRVUZEYmtJc1lVRkJTeXhGUVVGRkxGbEJRVmtzUTBGQlF5eFBRVUZQTzB0QlF6bENPenRCUVVWRUxGRkJRVWtzUlVGQlJTeFZRVUZCTEV0QlFVczdaVUZCU3l4TFFVRkxMRWxCUVVrc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1MwRkJRenM3UVVGRmJrUXNVMEZCU3l4RlFVRkZMRlZCUVVFc1MwRkJTenRsUVVGSkxHTkJRV01zUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRPMHRCUVVFN08wRkJSVFZETEZkQlFVOHNSVUZCUlN4VlFVRkJMRTFCUVUwN1pVRkJTU3hqUVVGakxFTkJRVU1zWlVGQlpTeERRVUZETEUxQlFVMHNSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEUxQlFVMHNRMEZCUXp0TFFVRkJPME5CUTNKR0xFTkJRVU1pTENKbWFXeGxJam9pY21kaUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlHTnlaV0YwWlVSbGJHbHRhWFJsWkNBOUlISmxjWFZwY21Vb0p5NHZiV0Z1YVhCMWJHRjBiM0p6TDJOeVpXRjBaUzFrWld4cGJXbDBaV1FuS1N4Y2JpQWdJQ0JuWlhSRGIyeHZjbFpoYkhWbGN5QTlJSEpsY1hWcGNtVW9KeTR2YldGdWFYQjFiR0YwYjNKekwyZGxkQzFqYjJ4dmNpMTJZV3gxWlhNbktTeGNiaUFnSUNCbWRXNWpkR2x2YmtOeVpXRjBaU0E5SUhKbGNYVnBjbVVvSnk0dmJXRnVhWEIxYkdGMGIzSnpMMloxYm1OMGFXOXVMV055WldGMFpTY3BMRnh1SUNBZ0lHUmxabUYxYkhSUWNtOXdjeUE5SUhKbGNYVnBjbVVvSnk0dmMyVjBkR2x1WjNNdlpHVm1ZWFZzZEMxd2NtOXdjeWNwTEZ4dUlDQWdJR052Ykc5eVJHVm1ZWFZzZEhNZ1BTQmtaV1poZFd4MFVISnZjSE11WTI5c2IzSXNYRzRnSUNBZ2RHVnliWE1nUFNCeVpYRjFhWEpsS0NjdUwzTmxkSFJwYm1kekwyUnBZM1JwYjI1aGNua25LUzVqYjJ4dmNuTTdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4dVhHNGdJQ0FnWkdWbVlYVnNkRkJ5YjNCek9pQjdYRzRnSUNBZ0lDQWdJRkpsWkRvZ1kyOXNiM0pFWldaaGRXeDBjeXhjYmlBZ0lDQWdJQ0FnUjNKbFpXNDZJR052Ykc5eVJHVm1ZWFZzZEhNc1hHNGdJQ0FnSUNBZ0lFSnNkV1U2SUdOdmJHOXlSR1ZtWVhWc2RITXNYRzRnSUNBZ0lDQWdJRUZzY0doaE9pQmtaV1poZFd4MFVISnZjSE11YjNCaFkybDBlVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQjBaWE4wT2lCMllXeDFaU0E5UGlBb2RtRnNkV1VnSmlZZ2RtRnNkV1V1YVc1a1pYaFBaaWduY21kaUp5a2dQaUF0TVNrc1hHNGdJQ0FnWEc0Z0lDQWdjM0JzYVhRNklIWmhiSFZsSUQwK0lHZGxkRU52Ykc5eVZtRnNkV1Z6S0haaGJIVmxMQ0IwWlhKdGN5a3NYRzVjYmlBZ0lDQmpiMjFpYVc1bE9pQjJZV3gxWlhNZ1BUNGdablZ1WTNScGIyNURjbVZoZEdVb1kzSmxZWFJsUkdWc2FXMXBkR1ZrS0haaGJIVmxjeXdnZEdWeWJYTXNJQ2NzSUNjc0lESXBMQ0FuY21kaVlTY3BYRzU5T3lKZGZRPT1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3ZhbHVlLXR5cGVzL3JnYi5qc1xuICoqIG1vZHVsZSBpZCA9IDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJnYiA9IHJlcXVpcmUoJy4vcmdiJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgZGVmYXVsdFByb3BzOiByZ2IuZGVmYXVsdFByb3BzLFxuXG4gICAgdGVzdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5pbmRleE9mKCcjJykgPiAtMTtcbiAgICB9LFxuXG4gICAgc3BsaXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgciwgZywgYjtcblxuICAgICAgICAvLyBJZiB3ZSBoYXZlIDYgY2hhcmFjdGVycywgaWUgI0ZGMDAwMFxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgciA9IHZhbHVlLnN1YnN0cigxLCAyKTtcbiAgICAgICAgICAgIGcgPSB2YWx1ZS5zdWJzdHIoMywgMik7XG4gICAgICAgICAgICBiID0gdmFsdWUuc3Vic3RyKDUsIDIpO1xuXG4gICAgICAgICAgICAvLyBPciB3ZSBoYXZlIDMgY2hhcmFjdGVycywgaWUgI0YwMFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHIgPSB2YWx1ZS5zdWJzdHIoMSwgMSk7XG4gICAgICAgICAgICAgICAgZyA9IHZhbHVlLnN1YnN0cigyLCAxKTtcbiAgICAgICAgICAgICAgICBiID0gdmFsdWUuc3Vic3RyKDMsIDEpO1xuICAgICAgICAgICAgICAgIHIgKz0gcjtcbiAgICAgICAgICAgICAgICBnICs9IGc7XG4gICAgICAgICAgICAgICAgYiArPSBiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBSZWQ6IHBhcnNlSW50KHIsIDE2KSxcbiAgICAgICAgICAgIEdyZWVuOiBwYXJzZUludChnLCAxNiksXG4gICAgICAgICAgICBCbHVlOiBwYXJzZUludChiLCAxNiksXG4gICAgICAgICAgICBBbHBoYTogMVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjb21iaW5lOiBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiByZ2IuY29tYmluZSh2YWx1ZXMpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1obGVDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFbEJRVWtzUjBGQlJ5eEhRVUZITEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenM3UVVGRk0wSXNUVUZCVFN4RFFVRkRMRTlCUVU4c1IwRkJSenM3UVVGRllpeG5Ra0ZCV1N4RlFVRkZMRWRCUVVjc1EwRkJReXhaUVVGWk96dEJRVVU1UWl4UlFVRkpMRVZCUVVVc1ZVRkJRU3hMUVVGTE8yVkJRVXNzUzBGQlN5eEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzB0QlFVTTdPMEZCUldwRUxGTkJRVXNzUlVGQlJTeFZRVUZCTEV0QlFVc3NSVUZCU1R0QlFVTmFMRmxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZET3pzN1FVRkJReXhCUVVkYUxGbEJRVWtzUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRVZCUVVVN1FVRkRiRUlzWVVGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzWkNMR0ZCUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOMlFpeGhRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZET3pzN1FVRkJReXhUUVVjeFFpeE5RVUZOTzBGQlEwZ3NhVUpCUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOMlFpeHBRa0ZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNaQ0xHbENRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEZGtJc2FVSkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEVUN4cFFrRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU5RTEdsQ1FVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yRkJRMVk3TzBGQlJVUXNaVUZCVHp0QlFVTklMR1ZCUVVjc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0QlFVTndRaXhwUWtGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRE8wRkJRM1JDTEdkQ1FVRkpMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTTdRVUZEY2tJc2FVSkJRVXNzUlVGQlJTeERRVUZETzFOQlExZ3NRMEZCUXp0TFFVTk1PenRCUVVWRUxGZEJRVThzUlVGQlJTeFZRVUZCTEUxQlFVMDdaVUZCU1N4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF6dExRVUZCTzBOQlEzcERMRU5CUVVNaUxDSm1hV3hsSWpvaWFHVjRMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJSEpuWWlBOUlISmxjWFZwY21Vb0p5NHZjbWRpSnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1WEc0Z0lDQWdaR1ZtWVhWc2RGQnliM0J6T2lCeVoySXVaR1ZtWVhWc2RGQnliM0J6TEZ4dVhHNGdJQ0FnZEdWemREb2dkbUZzZFdVZ1BUNGdLSFpoYkhWbElDWW1JSFpoYkhWbExtbHVaR1Y0VDJZb0p5TW5LU0ErSUMweEtTeGNiaUFnSUNCY2JpQWdJQ0J6Y0d4cGREb2dkbUZzZFdVZ1BUNGdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2Npd2daeXdnWWp0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJKWmlCM1pTQm9ZWFpsSURZZ1kyaGhjbUZqZEdWeWN5d2dhV1VnSTBaR01EQXdNRnh1SUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1V1YkdWdVozUm9JRDRnTkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY2lBOUlIWmhiSFZsTG5OMVluTjBjaWd4TENBeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdjZ1BTQjJZV3gxWlM1emRXSnpkSElvTXl3Z01pazdYRzRnSUNBZ0lDQWdJQ0FnSUNCaUlEMGdkbUZzZFdVdWMzVmljM1J5S0RVc0lESXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFOXlJSGRsSUdoaGRtVWdNeUJqYUdGeVlXTjBaWEp6TENCcFpTQWpSakF3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlJRDBnZG1Gc2RXVXVjM1ZpYzNSeUtERXNJREVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaeUE5SUhaaGJIVmxMbk4xWW5OMGNpZ3lMQ0F4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0lnUFNCMllXeDFaUzV6ZFdKemRISW9NeXdnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5SUNzOUlISTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbklDczlJR2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmlJQ3M5SUdJN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1VtVmtPaUJ3WVhKelpVbHVkQ2h5TENBeE5pa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCSGNtVmxiam9nY0dGeWMyVkpiblFvWnl3Z01UWXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1FteDFaVG9nY0dGeWMyVkpiblFvWWl3Z01UWXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1FXeHdhR0U2SURGY2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1kyOXRZbWx1WlRvZ2RtRnNkV1Z6SUQwK0lISm5ZaTVqYjIxaWFXNWxLSFpoYkhWbGN5bGNibjA3SWwxOVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvdmFsdWUtdHlwZXMvaGV4LmpzXG4gKiogbW9kdWxlIGlkID0gOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi9pbmMvdXRpbHMnKSxcbiAgICByZ2IgPSByZXF1aXJlKCcuL3JnYicpLFxuICAgIGhzbCA9IHJlcXVpcmUoJy4vaHNsJyksXG4gICAgaGV4ID0gcmVxdWlyZSgnLi9oZXgnKSxcbiAgICBzdXBwb3J0ZWQgPSBbcmdiLCBoc2wsIGhleF0sXG4gICAgbnVtU3VwcG9ydGVkID0gMyxcbiAgICBydW5TdXBwb3J0ZWQgPSBmdW5jdGlvbiAobWV0aG9kLCB2YWx1ZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtU3VwcG9ydGVkOyBpKyspIHtcbiAgICAgICAgaWYgKHN1cHBvcnRlZFtpXS50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN1cHBvcnRlZFtpXVttZXRob2RdKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGRlZmF1bHRQcm9wczogdXRpbHMubWVyZ2UocmdiLmRlZmF1bHRQcm9wcywgaHNsLmRlZmF1bHRQcm9wcyksXG5cbiAgICB0ZXN0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHJnYi50ZXN0KHZhbHVlKSB8fCBoZXgudGVzdCh2YWx1ZSkgfHwgaHNsLnRlc3QodmFsdWUpO1xuICAgIH0sXG5cbiAgICBzcGxpdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBydW5TdXBwb3J0ZWQoJ3NwbGl0JywgdmFsdWUpO1xuICAgIH0sXG5cbiAgICBjb21iaW5lOiBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXMuUmVkICE9PSB1bmRlZmluZWQgPyByZ2IuY29tYmluZSh2YWx1ZXMpIDogaHNsLmNvbWJpbmUodmFsdWVzKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnZiRzl5TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzU1VGQlNTeExRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRMR05CUVdNc1EwRkJRenRKUVVNdlFpeEhRVUZITEVkQlFVY3NUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJRenRKUVVOMFFpeEhRVUZITEVkQlFVY3NUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJRenRKUVVOMFFpeEhRVUZITEVkQlFVY3NUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJRenRKUVVOMFFpeFRRVUZUTEVkQlFVY3NRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF6dEpRVU16UWl4WlFVRlpMRWRCUVVjc1EwRkJRenRKUVVWb1FpeFpRVUZaTEVkQlFVY3NWVUZCVlN4TlFVRk5MRVZCUVVVc1MwRkJTeXhGUVVGRk8wRkJRM0JETEZOQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eFpRVUZaTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkRia01zV1VGQlNTeFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzBGQlF6RkNMRzFDUVVGUExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dFRRVU4wUXp0TFFVTktPME5CUTBvc1EwRkJRenM3UVVGRlRpeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhPMEZCUTJJc1owSkJRVmtzUlVGQlJTeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhaUVVGWkxFVkJRVVVzUjBGQlJ5eERRVUZETEZsQlFWa3NRMEZCUXpzN1FVRkZOMFFzVVVGQlNTeEZRVUZGTEZWQlFVRXNTMEZCU3p0bFFVRkpMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRMUVVGQk96dEJRVVZ3UlN4VFFVRkxMRVZCUVVVc1ZVRkJRU3hMUVVGTE8yVkJRVWtzV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNN1MwRkJRVHM3UVVGRk5VTXNWMEZCVHl4RlFVRkZMRlZCUVVFc1RVRkJUVHRsUVVGSkxFRkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NTMEZCU3l4VFFVRlRMRWRCUVVrc1IwRkJSeXhEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF6dExRVUZCTzBOQlF6VkdMRU5CUVVNaUxDSm1hV3hsSWpvaVkyOXNiM0l1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1TGk5cGJtTXZkWFJwYkhNbktTeGNiaUFnSUNCeVoySWdQU0J5WlhGMWFYSmxLQ2N1TDNKbllpY3BMRnh1SUNBZ0lHaHpiQ0E5SUhKbGNYVnBjbVVvSnk0dmFITnNKeWtzWEc0Z0lDQWdhR1Y0SUQwZ2NtVnhkV2x5WlNnbkxpOW9aWGduS1N4Y2JpQWdJQ0J6ZFhCd2IzSjBaV1FnUFNCYmNtZGlMQ0JvYzJ3c0lHaGxlRjBzWEc0Z0lDQWdiblZ0VTNWd2NHOXlkR1ZrSUQwZ015eGNibHh1SUNBZ0lISjFibE4xY0hCdmNuUmxaQ0E5SUdaMWJtTjBhVzl1SUNodFpYUm9iMlFzSUhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2JuVnRVM1Z3Y0c5eWRHVmtPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpkWEJ3YjNKMFpXUmJhVjB1ZEdWemRDaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndjRzl5ZEdWa1cybGRXMjFsZEdodlpGMG9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdYRzRnSUNBZ1pHVm1ZWFZzZEZCeWIzQnpPaUIxZEdsc2N5NXRaWEpuWlNoeVoySXVaR1ZtWVhWc2RGQnliM0J6TENCb2Myd3VaR1ZtWVhWc2RGQnliM0J6S1N4Y2JseHVJQ0FnSUhSbGMzUTZJSFpoYkhWbElEMCtJSEpuWWk1MFpYTjBLSFpoYkhWbEtTQjhmQ0JvWlhndWRHVnpkQ2gyWVd4MVpTa2dmSHdnYUhOc0xuUmxjM1FvZG1Gc2RXVXBMRnh1WEc0Z0lDQWdjM0JzYVhRNklIWmhiSFZsSUQwK0lISjFibE4xY0hCdmNuUmxaQ2duYzNCc2FYUW5MQ0IyWVd4MVpTa3NYRzVjYmlBZ0lDQmpiMjFpYVc1bE9pQjJZV3gxWlhNZ1BUNGdLSFpoYkhWbGN5NVNaV1FnSVQwOUlIVnVaR1ZtYVc1bFpDa2dQeUJ5WjJJdVkyOXRZbWx1WlNoMllXeDFaWE1wSURvZ2FITnNMbU52YldKcGJtVW9kbUZzZFdWektWeHVmVHNpWFgwPVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvdmFsdWUtdHlwZXMvY29sb3IuanNcbiAqKiBtb2R1bGUgaWQgPSA5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVEZWxpbWl0ZWQgPSByZXF1aXJlKCcuL21hbmlwdWxhdG9ycy9jcmVhdGUtZGVsaW1pdGVkJyksXG4gICAgcHhEZWZhdWx0cyA9IHJlcXVpcmUoJy4vcHgnKS5kZWZhdWx0UHJvcHMsXG4gICAgc3BsaXRTcGFjZURlbGltaXRlZCA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL3NwbGl0LXNwYWNlLWRlbGltaXRlZCcpLFxuICAgIHRlcm1zID0gcmVxdWlyZSgnLi9zZXR0aW5ncy9kaWN0aW9uYXJ5JykucG9zaXRpb25zO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIGRlZmF1bHRQcm9wczogcHhEZWZhdWx0cyxcblxuICAgIC8qXG4gICAgICAgIFNwbGl0IHBvc2l0aW9ucyBpbiBmb3JtYXQgXCJYIFkgWlwiXG4gICAgICAgIFxuICAgICAgICBAcGFyYW0gW3N0cmluZ106IFBvc2l0aW9uIHZhbHVlc1xuICAgICAgICAgICAgXCIyMCUgMzAlIDBcIiAtPiB7MjAlLCAzMCUsIDB9XG4gICAgICAgICAgICBcIjIwJSAzMCVcIiAtPiB7MjAlLCAzMCV9XG4gICAgICAgICAgICBcIjIwJVwiIC0+IHsyMCUsIDIwJX1cbiAgICAqL1xuICAgIHNwbGl0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBvc2l0aW9ucyA9IHNwbGl0U3BhY2VEZWxpbWl0ZWQodmFsdWUpLFxuICAgICAgICAgICAgbnVtUG9zaXRpb25zID0gcG9zaXRpb25zLmxlbmd0aCxcbiAgICAgICAgICAgIHNwbGl0VmFsdWUgPSB7XG4gICAgICAgICAgICBYOiBwb3NpdGlvbnNbMF0sXG4gICAgICAgICAgICBZOiBudW1Qb3NpdGlvbnMgPiAxID8gcG9zaXRpb25zWzFdIDogcG9zaXRpb25zWzBdXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG51bVBvc2l0aW9ucyA+IDIpIHtcbiAgICAgICAgICAgIHNwbGl0VmFsdWUuWiA9IHBvc2l0aW9uc1syXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzcGxpdFZhbHVlO1xuICAgIH0sXG5cbiAgICBjb21iaW5lOiBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEZWxpbWl0ZWQodmFsdWVzLCB0ZXJtcywgJyAnKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluQnZjMmwwYVc5dWN5NXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFbEJRVWtzWlVGQlpTeEhRVUZITEU5QlFVOHNRMEZCUXl4cFEwRkJhVU1zUTBGQlF6dEpRVU0xUkN4VlFVRlZMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEZsQlFWazdTVUZEZWtNc2JVSkJRVzFDTEVkQlFVY3NUMEZCVHl4RFFVRkRMSE5EUVVGelF5eERRVUZETzBsQlEzSkZMRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVU03TzBGQlJYWkVMRTFCUVUwc1EwRkJReXhQUVVGUExFZEJRVWM3TzBGQlJXSXNaMEpCUVZrc1JVRkJSU3hWUVVGVk96czdPenM3T3pzN08wRkJWWGhDTEZOQlFVc3NSVUZCUlN4VlFVRkJMRXRCUVVzc1JVRkJTVHRCUVVOYUxGbEJRVWtzVTBGQlV5eEhRVUZITEcxQ1FVRnRRaXhEUVVGRExFdEJRVXNzUTBGQlF6dFpRVU4wUXl4WlFVRlpMRWRCUVVjc1UwRkJVeXhEUVVGRExFMUJRVTA3V1VGREwwSXNWVUZCVlN4SFFVRkhPMEZCUTFRc1lVRkJReXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEWml4aFFVRkRMRVZCUVVVc1FVRkJReXhaUVVGWkxFZEJRVWNzUTBGQlF5eEhRVUZKTEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEzUkVMRU5CUVVNN08wRkJSVTRzV1VGQlNTeFpRVUZaTEVkQlFVY3NRMEZCUXl4RlFVRkZPMEZCUTJ4Q0xITkNRVUZWTEVOQlFVTXNRMEZCUXl4SFFVRkhMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU12UWpzN1FVRkZSQ3hsUVVGUExGVkJRVlVzUTBGQlF6dExRVU55UWpzN1FVRkZSQ3hYUVVGUExFVkJRVVVzVlVGQlFTeE5RVUZOTzJWQlFVa3NaVUZCWlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hMUVVGTExFVkJRVVVzUjBGQlJ5eERRVUZETzB0QlFVRTdRMEZEZWtRc1EwRkJReUlzSW1acGJHVWlPaUp3YjNOcGRHbHZibk11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWTNKbFlYUmxSR1ZzYVcxcGRHVmtJRDBnY21WeGRXbHlaU2duTGk5dFlXNXBjSFZzWVhSdmNuTXZZM0psWVhSbExXUmxiR2x0YVhSbFpDY3BMRnh1SUNBZ0lIQjRSR1ZtWVhWc2RITWdQU0J5WlhGMWFYSmxLQ2N1TDNCNEp5a3VaR1ZtWVhWc2RGQnliM0J6TEZ4dUlDQWdJSE53YkdsMFUzQmhZMlZFWld4cGJXbDBaV1FnUFNCeVpYRjFhWEpsS0NjdUwyMWhibWx3ZFd4aGRHOXljeTl6Y0d4cGRDMXpjR0ZqWlMxa1pXeHBiV2wwWldRbktTeGNiaUFnSUNCMFpYSnRjeUE5SUhKbGNYVnBjbVVvSnk0dmMyVjBkR2x1WjNNdlpHbGpkR2x2Ym1GeWVTY3BMbkJ2YzJsMGFXOXVjenRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNWNiaUFnSUNCa1pXWmhkV3gwVUhKdmNITTZJSEI0UkdWbVlYVnNkSE1zWEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQzhxWEc0Z0lDQWdJQ0FnSUZOd2JHbDBJSEJ2YzJsMGFXOXVjeUJwYmlCbWIzSnRZWFFnWENKWUlGa2dXbHdpWEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCQWNHRnlZVzBnVzNOMGNtbHVaMTA2SUZCdmMybDBhVzl1SUhaaGJIVmxjMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSXlNQ1VnTXpBbElEQmNJaUF0UGlCN01qQWxMQ0F6TUNVc0lEQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCY0lqSXdKU0F6TUNWY0lpQXRQaUI3TWpBbExDQXpNQ1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJakl3SlZ3aUlDMCtJSHN5TUNVc0lESXdKWDFjYmlBZ0lDQXFMMXh1SUNBZ0lITndiR2wwT2lCMllXeDFaU0E5UGlCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ3YjNOcGRHbHZibk1nUFNCemNHeHBkRk53WVdObFJHVnNhVzFwZEdWa0tIWmhiSFZsS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzUxYlZCdmMybDBhVzl1Y3lBOUlIQnZjMmwwYVc5dWN5NXNaVzVuZEdnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Y0d4cGRGWmhiSFZsSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGZzZJSEJ2YzJsMGFXOXVjMXN3WFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCWk9pQW9iblZ0VUc5emFYUnBiMjV6SUQ0Z01Ta2dQeUJ3YjNOcGRHbHZibk5iTVYwZ09pQndiM05wZEdsdmJuTmJNRjFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHNTFiVkJ2YzJsMGFXOXVjeUErSURJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOd2JHbDBWbUZzZFdVdVdpQTlJSEJ2YzJsMGFXOXVjMXN5WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpjR3hwZEZaaGJIVmxPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmpiMjFpYVc1bE9pQjJZV3gxWlhNZ1BUNGdZM0psWVhSbFJHVnNhVzFwZEdWa0tIWmhiSFZsY3l3Z2RHVnliWE1zSUNjZ0p5bGNibjA3SWwxOVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvdmFsdWUtdHlwZXMvcG9zaXRpb25zLmpzXG4gKiogbW9kdWxlIGlkID0gMTBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRlcm1zID0gcmVxdWlyZSgnLi9zZXR0aW5ncy9kaWN0aW9uYXJ5JykuZGltZW5zaW9ucyxcbiAgICBweERlZmF1bHRzID0gcmVxdWlyZSgnLi9weCcpLmRlZmF1bHRQcm9wcyxcbiAgICBjcmVhdGVEZWxpbWl0ZWQgPSByZXF1aXJlKCcuL21hbmlwdWxhdG9ycy9jcmVhdGUtZGVsaW1pdGVkJyksXG4gICAgc3BsaXRTcGFjZURlbGltaXRlZCA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL3NwbGl0LXNwYWNlLWRlbGltaXRlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIGRlZmF1bHRQcm9wczogcHhEZWZhdWx0cyxcblxuICAgIC8qXG4gICAgICAgIFNwbGl0IGRpbWVuc2lvbnMgaW4gZm9ybWF0IFwiVG9wIFJpZ2h0IEJvdHRvbSBMZWZ0XCJcbiAgICAgICAgXG4gICAgICAgIEBwYXJhbSBbc3RyaW5nXTogRGltZW5zaW9uIHZhbHVlc1xuICAgICAgICAgICAgXCIyMHB4IDAgMzBweCA0MHB4XCIgLT4gezIwcHgsIDAsIDMwcHgsIDQwcHh9XG4gICAgICAgICAgICBcIjIwcHggMCAzMHB4XCIgLT4gezIwcHgsIDAsIDMwcHgsIDB9XG4gICAgICAgICAgICBcIjIwcHggMFwiIC0+IHsyMHB4LCAwLCAyMHB4LCAwfVxuICAgICAgICAgICAgXCIyMHB4XCIgLT4gezIwcHgsIDIwcHgsIDIwcHgsIDIwcHh9XG4gICAgICAgIFxuICAgICAgICBAcmV0dXJuIFtvYmplY3RdOiBPYmplY3Qgd2l0aCBUL1IvQi9MIG1ldHJpY3NcbiAgICAqL1xuICAgIHNwbGl0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGRpbWVuc2lvbnMgPSBzcGxpdFNwYWNlRGVsaW1pdGVkKHZhbHVlKSxcbiAgICAgICAgICAgIG51bURpbWVuc2lvbnMgPSBkaW1lbnNpb25zLmxlbmd0aCxcbiAgICAgICAgICAgIGp1bXBCYWNrID0gbnVtRGltZW5zaW9ucyAhPT0gMSA/IDIgOiAxLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBqID0gMCxcbiAgICAgICAgICAgIHNwbGl0VmFsdWUgPSB7fTtcblxuICAgICAgICBmb3IgKDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgc3BsaXRWYWx1ZVt0ZXJtc1tpXV0gPSBkaW1lbnNpb25zW2pdO1xuXG4gICAgICAgICAgICAvLyBKdW1wIGJhY2sgKHRvIHN0YXJ0KSBjb3VudGVyIGlmIHdlJ3ZlIHJlYWNoZWQgdGhlIGVuZCBvZiBvdXIgdmFsdWVzXG4gICAgICAgICAgICBqKys7XG4gICAgICAgICAgICBqID0gaiA9PT0gbnVtRGltZW5zaW9ucyA/IGogLSBqdW1wQmFjayA6IGo7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3BsaXRWYWx1ZTtcbiAgICB9LFxuXG4gICAgY29tYmluZTogZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gY3JlYXRlRGVsaW1pdGVkKHZhbHVlcywgdGVybXMsICcgJyk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVJwYldWdWMybHZibk11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zUTBGQlF5eFZRVUZWTzBsQlEyNUVMRlZCUVZVc1IwRkJSeXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNXVUZCV1R0SlFVTjZReXhsUVVGbExFZEJRVWNzVDBGQlR5eERRVUZETEdsRFFVRnBReXhEUVVGRE8wbEJRelZFTEcxQ1FVRnRRaXhIUVVGSExFOUJRVThzUTBGQlF5eHpRMEZCYzBNc1EwRkJReXhEUVVGRE96dEJRVVV4UlN4TlFVRk5MRU5CUVVNc1QwRkJUeXhIUVVGSE96dEJRVVZpTEdkQ1FVRlpMRVZCUVVVc1ZVRkJWVHM3T3pzN096czdPenM3T3p0QlFXRjRRaXhUUVVGTExFVkJRVVVzVlVGQlFTeExRVUZMTEVWQlFVazdRVUZEV2l4WlFVRkpMRlZCUVZVc1IwRkJSeXh0UWtGQmJVSXNRMEZCUXl4TFFVRkxMRU5CUVVNN1dVRkRka01zWVVGQllTeEhRVUZITEZWQlFWVXNRMEZCUXl4TlFVRk5PMWxCUTJwRExGRkJRVkVzUjBGQlJ5eEJRVUZETEdGQlFXRXNTMEZCU3l4RFFVRkRMRWRCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03V1VGRGVFTXNRMEZCUXl4SFFVRkhMRU5CUVVNN1dVRkRUQ3hEUVVGRExFZEJRVWNzUTBGQlF6dFpRVU5NTEZWQlFWVXNSMEZCUnl4RlFVRkZMRU5CUVVNN08wRkJSWEJDTEdWQlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU5tTEhOQ1FVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJRenM3TzBGQlFVTXNRVUZIY2tNc1lVRkJReXhGUVVGRkxFTkJRVU03UVVGRFNpeGhRVUZETEVkQlFVY3NRVUZCUXl4RFFVRkRMRXRCUVVzc1lVRkJZU3hIUVVGSkxFTkJRVU1zUjBGQlJ5eFJRVUZSTEVkQlFVY3NRMEZCUXl4RFFVRkRPMU5CUTJoRU96dEJRVVZFTEdWQlFVOHNWVUZCVlN4RFFVRkRPMHRCUTNKQ096dEJRVVZFTEZkQlFVOHNSVUZCUlN4VlFVRkJMRTFCUVUwN1pVRkJTU3hsUVVGbExFTkJRVU1zVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SFFVRkhMRU5CUVVNN1MwRkJRVHREUVVONlJDeERRVUZESWl3aVptbHNaU0k2SW1ScGJXVnVjMmx2Ym5NdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ2RHVnliWE1nUFNCeVpYRjFhWEpsS0NjdUwzTmxkSFJwYm1kekwyUnBZM1JwYjI1aGNua25LUzVrYVcxbGJuTnBiMjV6TEZ4dUlDQWdJSEI0UkdWbVlYVnNkSE1nUFNCeVpYRjFhWEpsS0NjdUwzQjRKeWt1WkdWbVlYVnNkRkJ5YjNCekxGeHVJQ0FnSUdOeVpXRjBaVVJsYkdsdGFYUmxaQ0E5SUhKbGNYVnBjbVVvSnk0dmJXRnVhWEIxYkdGMGIzSnpMMk55WldGMFpTMWtaV3hwYldsMFpXUW5LU3hjYmlBZ0lDQnpjR3hwZEZOd1lXTmxSR1ZzYVcxcGRHVmtJRDBnY21WeGRXbHlaU2duTGk5dFlXNXBjSFZzWVhSdmNuTXZjM0JzYVhRdGMzQmhZMlV0WkdWc2FXMXBkR1ZrSnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1WEc0Z0lDQWdaR1ZtWVhWc2RGQnliM0J6T2lCd2VFUmxabUYxYkhSekxGeHVJQ0FnSUZ4dUlDQWdJQzhxWEc0Z0lDQWdJQ0FnSUZOd2JHbDBJR1JwYldWdWMybHZibk1nYVc0Z1ptOXliV0YwSUZ3aVZHOXdJRkpwWjJoMElFSnZkSFJ2YlNCTVpXWjBYQ0pjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUVCd1lYSmhiU0JiYzNSeWFXNW5YVG9nUkdsdFpXNXphVzl1SUhaaGJIVmxjMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSXlNSEI0SURBZ016QndlQ0EwTUhCNFhDSWdMVDRnZXpJd2NIZ3NJREFzSURNd2NIZ3NJRFF3Y0hoOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JjSWpJd2NIZ2dNQ0F6TUhCNFhDSWdMVDRnZXpJd2NIZ3NJREFzSURNd2NIZ3NJREI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJakl3Y0hnZ01Gd2lJQzArSUhzeU1IQjRMQ0F3TENBeU1IQjRMQ0F3ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0l5TUhCNFhDSWdMVDRnZXpJd2NIZ3NJREl3Y0hnc0lESXdjSGdzSURJd2NIaDlYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0JBY21WMGRYSnVJRnR2WW1wbFkzUmRPaUJQWW1wbFkzUWdkMmwwYUNCVUwxSXZRaTlNSUcxbGRISnBZM05jYmlBZ0lDQXFMMXh1SUNBZ0lITndiR2wwT2lCMllXeDFaU0E5UGlCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrYVcxbGJuTnBiMjV6SUQwZ2MzQnNhWFJUY0dGalpVUmxiR2x0YVhSbFpDaDJZV3gxWlNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1ZFcxRWFXMWxibk5wYjI1eklEMGdaR2x0Wlc1emFXOXVjeTVzWlc1bmRHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCcWRXMXdRbUZqYXlBOUlDaHVkVzFFYVcxbGJuTnBiMjV6SUNFOVBTQXhLU0EvSURJZ09pQXhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FTQTlJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnFJRDBnTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE53YkdsMFZtRnNkV1VnUFNCN2ZUdGNibHh1SUNBZ0lDQWdJQ0JtYjNJZ0tEc2dhU0E4SURRN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjM0JzYVhSV1lXeDFaVnQwWlhKdGMxdHBYVjBnUFNCa2FXMWxibk5wYjI1elcycGRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJLZFcxd0lHSmhZMnNnS0hSdklITjBZWEowS1NCamIzVnVkR1Z5SUdsbUlIZGxKM1psSUhKbFlXTm9aV1FnZEdobElHVnVaQ0J2WmlCdmRYSWdkbUZzZFdWelhHNGdJQ0FnSUNBZ0lDQWdJQ0JxS3lzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JxSUQwZ0tHb2dQVDA5SUc1MWJVUnBiV1Z1YzJsdmJuTXBJRDhnYWlBdElHcDFiWEJDWVdOcklEb2dhanRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCemNHeHBkRlpoYkhWbE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCamIyMWlhVzVsT2lCMllXeDFaWE1nUFQ0Z1kzSmxZWFJsUkdWc2FXMXBkR1ZrS0haaGJIVmxjeXdnZEdWeWJYTXNJQ2NnSnlsY2JuMDdJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy92YWx1ZS10eXBlcy9kaW1lbnNpb25zLmpzXG4gKiogbW9kdWxlIGlkID0gMTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBkZWZhdWx0UHJvcHM6IHtcbiAgICAgICAgaW5pdDogMVxuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OallXeGxMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNUVUZCVFN4RFFVRkRMRTlCUVU4c1IwRkJSenRCUVVOaUxHZENRVUZaTEVWQlFVVTdRVUZEVml4WlFVRkpMRVZCUVVVc1EwRkJRenRMUVVOV08wTkJRMG9zUTBGQlF5SXNJbVpwYkdVaU9pSnpZMkZzWlM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNBZ0lHUmxabUYxYkhSUWNtOXdjem9nZTF4dUlDQWdJQ0FnSUNCcGJtbDBPaUF4WEc0Z0lDQWdmVnh1ZlRzaVhYMD1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3ZhbHVlLXR5cGVzL3NjYWxlLmpzXG4gKiogbW9kdWxlIGlkID0gMTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNvbG9yID0gcmVxdWlyZSgnLi9jb2xvcicpLFxuICAgIHV0aWxzID0gcmVxdWlyZSgnLi4vaW5jL3V0aWxzJyksXG4gICAgcHhEZWZhdWx0cyA9IHJlcXVpcmUoJy4vcHgnKS5kZWZhdWx0UHJvcHMsXG4gICAgdGVybXMgPSByZXF1aXJlKCcuL3NldHRpbmdzL2RpY3Rpb25hcnknKS5zaGFkb3csXG4gICAgc3BsaXRTcGFjZURlbGltaXRlZCA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL3NwbGl0LXNwYWNlLWRlbGltaXRlZCcpLFxuICAgIGNyZWF0ZURlbGltaXRlZCA9IHJlcXVpcmUoJy4vbWFuaXB1bGF0b3JzL2NyZWF0ZS1kZWxpbWl0ZWQnKSxcbiAgICBzaGFkb3dUZXJtcyA9IHRlcm1zLnNsaWNlKDAsIDQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIGRlZmF1bHRQcm9wczogdXRpbHMubWVyZ2UoY29sb3IuZGVmYXVsdFByb3BzLCB7XG4gICAgICAgIFg6IHB4RGVmYXVsdHMsXG4gICAgICAgIFk6IHB4RGVmYXVsdHMsXG4gICAgICAgIFJhZGl1czogcHhEZWZhdWx0cyxcbiAgICAgICAgU3ByZWFkOiBweERlZmF1bHRzXG4gICAgfSksXG5cbiAgICAvKlxuICAgICAgICBTcGxpdCBzaGFkb3cgcHJvcGVydGllcyBcIlggWSBSYWRpdXMgU3ByZWFkIENvbG9yXCJcbiAgICAgICAgXG4gICAgICAgIEBwYXJhbSBbc3RyaW5nXTogU2hhZG93IHByb3BlcnR5XG4gICAgICAgIEByZXR1cm4gW29iamVjdF1cbiAgICAqL1xuICAgIHNwbGl0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGJpdHMgPSBzcGxpdFNwYWNlRGVsaW1pdGVkKHZhbHVlKSxcbiAgICAgICAgICAgIG51bUJpdHMgPSBiaXRzLmxlbmd0aCxcbiAgICAgICAgICAgIGhhc1JlYWNoZWRDb2xvciA9IGZhbHNlLFxuICAgICAgICAgICAgY29sb3JQcm9wID0gJycsXG4gICAgICAgICAgICB0aGlzQml0LFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBzcGxpdFZhbHVlID0ge307XG5cbiAgICAgICAgZm9yICg7IGkgPCBudW1CaXRzOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXNCaXQgPSBiaXRzW2ldO1xuXG4gICAgICAgICAgICAvLyBJZiB3ZSd2ZSByZWFjaGVkIHRoZSBjb2xvciBwcm9wZXJ0eSwgYXBwZW5kIHRvIGNvbG9yIHN0cmluZ1xuICAgICAgICAgICAgaWYgKGhhc1JlYWNoZWRDb2xvciB8fCBjb2xvci50ZXN0KHRoaXNCaXQpKSB7XG4gICAgICAgICAgICAgICAgaGFzUmVhY2hlZENvbG9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb2xvclByb3AgKz0gdGhpc0JpdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3BsaXRWYWx1ZVt0ZXJtc1tpXV0gPSB0aGlzQml0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHNwbGl0VmFsdWUsIGNvbG9yLnNwbGl0KGNvbG9yUHJvcCkpO1xuICAgIH0sXG5cbiAgICBjb21iaW5lOiBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEZWxpbWl0ZWQodmFsdWVzLCBzaGFkb3dUZXJtcywgJyAnKSArIGNvbG9yLmNvbWJpbmUodmFsdWVzKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTm9ZV1J2ZHk1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTEVsQlFVa3NTMEZCU3l4SFFVRkhMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU03U1VGRE1VSXNTMEZCU3l4SFFVRkhMRTlCUVU4c1EwRkJReXhqUVVGakxFTkJRVU03U1VGREwwSXNWVUZCVlN4SFFVRkhMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eFpRVUZaTzBsQlEzcERMRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1EwRkJReXhOUVVGTk8wbEJReTlETEcxQ1FVRnRRaXhIUVVGSExFOUJRVThzUTBGQlF5eHpRMEZCYzBNc1EwRkJRenRKUVVOeVJTeGxRVUZsTEVkQlFVY3NUMEZCVHl4RFFVRkRMR2xEUVVGcFF5eERRVUZETzBsQlF6VkVMRmRCUVZjc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenM3UVVGRmJrTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1IwRkJSenM3UVVGRllpeG5Ra0ZCV1N4RlFVRkZMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEZsQlFWa3NSVUZCUlR0QlFVTXhReXhUUVVGRExFVkJRVVVzVlVGQlZUdEJRVU5pTEZOQlFVTXNSVUZCUlN4VlFVRlZPMEZCUTJJc1kwRkJUU3hGUVVGRkxGVkJRVlU3UVVGRGJFSXNZMEZCVFN4RlFVRkZMRlZCUVZVN1MwRkRja0lzUTBGQlF6czdPenM3T3pzN1FVRlJSaXhUUVVGTExFVkJRVVVzVlVGQlFTeExRVUZMTEVWQlFVazdRVUZEV2l4WlFVRkpMRWxCUVVrc1IwRkJSeXh0UWtGQmJVSXNRMEZCUXl4TFFVRkxMRU5CUVVNN1dVRkRha01zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5PMWxCUTNKQ0xHVkJRV1VzUjBGQlJ5eExRVUZMTzFsQlEzWkNMRk5CUVZNc1IwRkJSeXhGUVVGRk8xbEJRMlFzVDBGQlR6dFpRVU5RTEVOQlFVTXNSMEZCUnl4RFFVRkRPMWxCUTB3c1ZVRkJWU3hIUVVGSExFVkJRVVVzUTBGQlF6czdRVUZGY0VJc1pVRkJUeXhEUVVGRExFZEJRVWNzVDBGQlR5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMEZCUTNKQ0xHMUNRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenM3TzBGQlFVTXNRVUZIYkVJc1owSkJRVWtzWlVGQlpTeEpRVUZKTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3UVVGRGVFTXNLMEpCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGRrSXNlVUpCUVZNc1NVRkJTU3hQUVVGUExFTkJRVU03WVVGRmVFSXNUVUZCVFR0QlFVTklMREJDUVVGVkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1QwRkJUeXhEUVVGRE8yRkJRMnhETzFOQlEwbzdPMEZCUlVRc1pVRkJUeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEZWQlFWVXNSVUZCUlN4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdTMEZETVVRN08wRkJSVVFzVjBGQlR5eEZRVUZGTEZWQlFVRXNUVUZCVFR0bFFVRkpMR1ZCUVdVc1EwRkJReXhOUVVGTkxFVkJRVVVzVjBGQlZ5eEZRVUZGTEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETzB0QlFVRTdRMEZEZGtZc1EwRkJReUlzSW1acGJHVWlPaUp6YUdGa2IzY3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdZMjlzYjNJZ1BTQnlaWEYxYVhKbEtDY3VMMk52Ykc5eUp5a3NYRzRnSUNBZ2RYUnBiSE1nUFNCeVpYRjFhWEpsS0NjdUxpOXBibU12ZFhScGJITW5LU3hjYmlBZ0lDQndlRVJsWm1GMWJIUnpJRDBnY21WeGRXbHlaU2duTGk5d2VDY3BMbVJsWm1GMWJIUlFjbTl3Y3l4Y2JpQWdJQ0IwWlhKdGN5QTlJSEpsY1hWcGNtVW9KeTR2YzJWMGRHbHVaM012WkdsamRHbHZibUZ5ZVNjcExuTm9ZV1J2ZHl4Y2JpQWdJQ0J6Y0d4cGRGTndZV05sUkdWc2FXMXBkR1ZrSUQwZ2NtVnhkV2x5WlNnbkxpOXRZVzVwY0hWc1lYUnZjbk12YzNCc2FYUXRjM0JoWTJVdFpHVnNhVzFwZEdWa0p5a3NYRzRnSUNBZ1kzSmxZWFJsUkdWc2FXMXBkR1ZrSUQwZ2NtVnhkV2x5WlNnbkxpOXRZVzVwY0hWc1lYUnZjbk12WTNKbFlYUmxMV1JsYkdsdGFYUmxaQ2NwTEZ4dUlDQWdJSE5vWVdSdmQxUmxjbTF6SUQwZ2RHVnliWE11YzJ4cFkyVW9NQ3cwS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdYRzVjYmlBZ0lDQmtaV1poZFd4MFVISnZjSE02SUhWMGFXeHpMbTFsY21kbEtHTnZiRzl5TG1SbFptRjFiSFJRY205d2N5d2dlMXh1SUNBZ0lDQWdJQ0JZT2lCd2VFUmxabUYxYkhSekxGeHVJQ0FnSUNBZ0lDQlpPaUJ3ZUVSbFptRjFiSFJ6TEZ4dUlDQWdJQ0FnSUNCU1lXUnBkWE02SUhCNFJHVm1ZWFZzZEhNc1hHNGdJQ0FnSUNBZ0lGTndjbVZoWkRvZ2NIaEVaV1poZFd4MGMxeHVJQ0FnSUgwcExGeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQWdVM0JzYVhRZ2MyaGhaRzkzSUhCeWIzQmxjblJwWlhNZ1hDSllJRmtnVW1Ga2FYVnpJRk53Y21WaFpDQkRiMnh2Y2x3aVhHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQkFjR0Z5WVcwZ1czTjBjbWx1WjEwNklGTm9ZV1J2ZHlCd2NtOXdaWEowZVZ4dUlDQWdJQ0FnSUNCQWNtVjBkWEp1SUZ0dlltcGxZM1JkWEc0Z0lDQWdLaTljYmlBZ0lDQnpjR3hwZERvZ2RtRnNkV1VnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQjJZWElnWW1sMGN5QTlJSE53YkdsMFUzQmhZMlZFWld4cGJXbDBaV1FvZG1Gc2RXVXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JuVnRRbWwwY3lBOUlHSnBkSE11YkdWdVozUm9MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHRnpVbVZoWTJobFpFTnZiRzl5SUQwZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2xCeWIzQWdQU0FuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhOQ2FYUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCcElEMGdNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITndiR2wwVm1Gc2RXVWdQU0I3ZlR0Y2JseHVJQ0FnSUNBZ0lDQm1iM0lnS0RzZ2FTQThJRzUxYlVKcGRITTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGMwSnBkQ0E5SUdKcGRITmJhVjA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlIZGxKM1psSUhKbFlXTm9aV1FnZEdobElHTnZiRzl5SUhCeWIzQmxjblI1TENCaGNIQmxibVFnZEc4Z1kyOXNiM0lnYzNSeWFXNW5YRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hR0Z6VW1WaFkyaGxaRU52Ykc5eUlIeDhJR052Ykc5eUxuUmxjM1FvZEdocGMwSnBkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lYTlNaV0ZqYUdWa1EyOXNiM0lnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eVVISnZjQ0FyUFNCMGFHbHpRbWwwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE53YkdsMFZtRnNkV1ZiZEdWeWJYTmJhVjFkSUQwZ2RHaHBjMEpwZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWMGFXeHpMbTFsY21kbEtITndiR2wwVm1Gc2RXVXNJR052Ykc5eUxuTndiR2wwS0dOdmJHOXlVSEp2Y0NrcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCamIyMWlhVzVsT2lCMllXeDFaWE1nUFQ0Z1kzSmxZWFJsUkdWc2FXMXBkR1ZrS0haaGJIVmxjeXdnYzJoaFpHOTNWR1Z5YlhNc0lDY2dKeWtnS3lCamIyeHZjaTVqYjIxaWFXNWxLSFpoYkhWbGN5bGNibjA3SWwxOVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvdmFsdWUtdHlwZXMvc2hhZG93LmpzXG4gKiogbW9kdWxlIGlkID0gMTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vaW5jL3V0aWxzJyksXG4gICAgZWFjaCA9IHV0aWxzLmVhY2gsXG4gICAgZmxvYXRSZWdleCA9IC8oLSk/KFxcZFtcXGRcXC5dKikvZyxcbiAgICBnZW5lcmF0ZVRva2VuID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAnJHsnICsga2V5ICsgJ30nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgdGVzdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gdmFsdWUubWF0Y2goZmxvYXRSZWdleCk7XG4gICAgICAgIHJldHVybiB1dGlscy5pc0FycmF5KG1hdGNoZXMpICYmIG1hdGNoZXMubGVuZ3RoID4gMTtcbiAgICB9LFxuXG4gICAgdGVtcGxhdGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKGZsb2F0UmVnZXgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZVRva2VuKGNvdW50ZXIrKyk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBzcGxpdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBzcGxpdFZhbHVlID0ge30sXG4gICAgICAgICAgICBtYXRjaGVzID0gdmFsdWUubWF0Y2goZmxvYXRSZWdleCksXG4gICAgICAgICAgICBudW1NYXRjaGVzID0gbWF0Y2hlcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1NYXRjaGVzOyBpKyspIHtcbiAgICAgICAgICAgIHNwbGl0VmFsdWVbaV0gPSBtYXRjaGVzW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNwbGl0VmFsdWU7XG4gICAgfSxcblxuICAgIGNvbWJpbmU6IGZ1bmN0aW9uICh2YWx1ZXMsIHRlbXBsYXRlKSB7XG4gICAgICAgIHZhciBjb21iaW5lZFZhbHVlID0gdGVtcGxhdGU7XG5cbiAgICAgICAgZWFjaCh2YWx1ZXMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBjb21iaW5lZFZhbHVlID0gY29tYmluZWRWYWx1ZS5yZXBsYWNlKGdlbmVyYXRlVG9rZW4oa2V5KSwgdmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gY29tYmluZWRWYWx1ZTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnZiWEJzWlhndWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4SlFVRkpMRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU1zWTBGQll5eERRVUZETzBsQlF5OUNMRWxCUVVrc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNUdEpRVU5xUWl4VlFVRlZMRWRCUVVjc2EwSkJRV3RDTzBsQlJTOUNMR0ZCUVdFc1IwRkJSeXhWUVVGVkxFZEJRVWNzUlVGQlJUdEJRVU16UWl4WFFVRlBMRWxCUVVrc1IwRkJSeXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETzBOQlF6TkNMRU5CUVVNN08wRkJSVTRzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnp0QlFVTmlMRkZCUVVrc1JVRkJSU3hWUVVGVkxFdEJRVXNzUlVGQlJUdEJRVU51UWl4WlFVRkpMRTlCUVU4c1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMEZCUTNSRExHVkJRVkVzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hQUVVGUExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUlR0TFFVTjZSRHM3UVVGRlJDeFpRVUZSTEVWQlFVVXNWVUZCVlN4TFFVRkxMRVZCUVVVN1FVRkRka0lzV1VGQlNTeFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTJoQ0xHVkJRVThzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRlZMRVZCUVVVN2JVSkJRVTBzWVVGQllTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMU5CUVVFc1EwRkJReXhEUVVGRE8wdEJRM0JGT3p0QlFVVkVMRk5CUVVzc1JVRkJSU3hWUVVGVkxFdEJRVXNzUlVGQlJUdEJRVU53UWl4WlFVRkpMRlZCUVZVc1IwRkJSeXhGUVVGRk8xbEJRMllzVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRE8xbEJRMnBETEZWQlFWVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRE96dEJRVVZvUXl4aFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NWVUZCVlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8wRkJRMnBETEhOQ1FVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMU5CUXpsQ096dEJRVVZFTEdWQlFVOHNWVUZCVlN4RFFVRkRPMHRCUTNKQ096dEJRVVZFTEZkQlFVOHNSVUZCUlN4VlFVRlZMRTFCUVUwc1JVRkJSU3hSUVVGUkxFVkJRVVU3UVVGRGFrTXNXVUZCU1N4aFFVRmhMRWRCUVVjc1VVRkJVU3hEUVVGRE96dEJRVVUzUWl4WlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxGVkJRVU1zUjBGQlJ5eEZRVUZGTEV0QlFVc3NSVUZCU3p0QlFVTjZRaXg1UWtGQllTeEhRVUZITEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1lVRkJZU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMU5CUTNCRkxFTkJRVU1zUTBGQlF6czdRVUZGU0N4bFFVRlBMR0ZCUVdFc1EwRkJRenRMUVVONFFqdERRVU5LTEVOQlFVTWlMQ0ptYVd4bElqb2lZMjl0Y0d4bGVDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQjFkR2xzY3lBOUlISmxjWFZwY21Vb0p5NHVMMmx1WXk5MWRHbHNjeWNwTEZ4dUlDQWdJR1ZoWTJnZ1BTQjFkR2xzY3k1bFlXTm9MRnh1SUNBZ0lHWnNiMkYwVW1WblpYZ2dQU0F2S0MwcFB5aGNYR1JiWEZ4a1hGd3VYU29wTDJjc1hHNWNiaUFnSUNCblpXNWxjbUYwWlZSdmEyVnVJRDBnWm5WdVkzUnBiMjRnS0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdKeVI3SnlBcklHdGxlU0FySUNkOUp6dGNiaUFnSUNCOU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmlBZ0lDQjBaWE4wT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzFoZEdOb1pYTWdQU0IyWVd4MVpTNXRZWFJqYUNobWJHOWhkRkpsWjJWNEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaDFkR2xzY3k1cGMwRnljbUY1S0cxaGRHTm9aWE1wSUNZbUlHMWhkR05vWlhNdWJHVnVaM1JvSUQ0Z01TazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lIUmxiWEJzWVhSbE9pQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdOdmRXNTBaWElnUFNBd08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1V1Y21Wd2JHRmpaU2htYkc5aGRGSmxaMlY0TENBb0tTQTlQaUJuWlc1bGNtRjBaVlJ2YTJWdUtHTnZkVzUwWlhJckt5a3BPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnpjR3hwZERvZ1puVnVZM1JwYjI0Z0tIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6Y0d4cGRGWmhiSFZsSUQwZ2UzMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCdFlYUmphR1Z6SUQwZ2RtRnNkV1V1YldGMFkyZ29abXh2WVhSU1pXZGxlQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVkVzFOWVhSamFHVnpJRDBnYldGMFkyaGxjeTVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUc1MWJVMWhkR05vWlhNN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjM0JzYVhSV1lXeDFaVnRwWFNBOUlHMWhkR05vWlhOYmFWMDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzNCc2FYUldZV3gxWlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWTI5dFltbHVaVG9nWm5WdVkzUnBiMjRnS0haaGJIVmxjeXdnZEdWdGNHeGhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR052YldKcGJtVmtWbUZzZFdVZ1BTQjBaVzF3YkdGMFpUdGNibHh1SUNBZ0lDQWdJQ0JsWVdOb0tIWmhiSFZsY3l3Z0tHdGxlU3dnZG1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052YldKcGJtVmtWbUZzZFdVZ1BTQmpiMjFpYVc1bFpGWmhiSFZsTG5KbGNHeGhZMlVvWjJWdVpYSmhkR1ZVYjJ0bGJpaHJaWGtwTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMjFpYVc1bFpGWmhiSFZsTzF4dUlDQWdJSDFjYm4wN0lsMTlcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3ZhbHVlLXR5cGVzL2NvbXBsZXguanNcbiAqKiBtb2R1bGUgaWQgPSAxNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSb2xlID0gcmVxdWlyZSgnLi4vUm9sZScpO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuLi8uLi9pbmMvdXRpbHMnKS5lYWNoO1xuXG52YXIgYXR0clJvbGUgPSBuZXcgUm9sZSh7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGFjdG9yID0gdGhpcztcblxuICAgICAgICBlYWNoKHN0YXRlLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgYXR0clJvbGUuc2V0KGFjdG9yLmVsZW1lbnQsIGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgZ2V0OiBmdW5jdGlvbiAoZWxlbWVudCwga2V5KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShrZXkpO1xuICAgIH0sXG5cbiAgICBzZXQ6IGZ1bmN0aW9uIChlbGVtZW50LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF0dHJSb2xlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRjBkSEpTYjJ4bExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEZsQlFWa3NRMEZCUXpzN1FVRkZZaXhKUVVGSkxFbEJRVWtzUjBGQlJ5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1FVRkRPVUlzU1VGQlNTeEpRVUZKTEVkQlFVY3NUMEZCVHl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRPenRCUVVVelF5eEpRVUZKTEZGQlFWRXNSMEZCUnl4SlFVRkpMRWxCUVVrc1EwRkJRenRCUVVOd1FpeFZRVUZOTEVWQlFVVXNWVUZCVlN4TFFVRkxMRVZCUVVVN1FVRkRja0lzV1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRPenRCUVVWcVFpeFpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRlZCUVZVc1IwRkJSeXhGUVVGRkxFdEJRVXNzUlVGQlJUdEJRVU01UWl4dlFrRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dFRRVU16UXl4RFFVRkRMRU5CUVVNN1MwRkRUanM3UVVGRlJDeFBRVUZITEVWQlFVVXNWVUZCVlN4UFFVRlBMRVZCUVVVc1IwRkJSeXhGUVVGRk8wRkJRM3BDTEdWQlFVOHNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dExRVU53UXpzN1FVRkZSQ3hQUVVGSExFVkJRVVVzVlVGQlZTeFBRVUZQTEVWQlFVVXNSMEZCUnl4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVOb1F5eGxRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dExRVU53UXp0RFFVTktMRU5CUVVNc1EwRkJRenM3UVVGRlNDeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhMRkZCUVZFc1EwRkJReUlzSW1acGJHVWlPaUpoZEhSeVVtOXNaUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNTJZWElnVW05c1pTQTlJSEpsY1hWcGNtVW9KeTR1TDFKdmJHVW5LVHRjYm5aaGNpQmxZV05vSUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2YVc1akwzVjBhV3h6SnlrdVpXRmphRHRjYmx4dWRtRnlJR0YwZEhKU2IyeGxJRDBnYm1WM0lGSnZiR1VvZTF4dUlDQWdJSFZ3WkdGMFpUb2dablZ1WTNScGIyNGdLSE4wWVhSbEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaFkzUnZjaUE5SUhSb2FYTTdYRzVjYmlBZ0lDQWdJQ0FnWldGamFDaHpkR0YwWlN3Z1puVnVZM1JwYjI0Z0tHdGxlU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRjBkSEpTYjJ4bExuTmxkQ2hoWTNSdmNpNWxiR1Z0Wlc1MExDQnJaWGtzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdkbGREb2dablZ1WTNScGIyNGdLR1ZzWlcxbGJuUXNJR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pXeGxiV1Z1ZEM1blpYUkJkSFJ5YVdKMWRHVW9hMlY1S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYzJWME9pQm1kVzVqZEdsdmJpQW9aV3hsYldWdWRDd2dhMlY1TENCMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNCbGJHVnRaVzUwTG5ObGRFRjBkSEpwWW5WMFpTaHJaWGtzSUhaaGJIVmxLVHRjYmlBZ0lDQjlYRzU5S1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmhkSFJ5VW05c1pUdGNibHh1SWwxOVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvcm9sZXMvYXR0ci9hdHRyUm9sZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIFJvbGUgPSByZXF1aXJlKCcuLi9Sb2xlJyk7XG52YXIgYnVpbGQgPSByZXF1aXJlKCcuL2J1aWxkJyk7XG5cbnZhciBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ01veicsICdPJywgJ21zJywgJyddO1xudmFyIG51bVByZWZpeGVzID0gcHJlZml4ZXMubGVuZ3RoO1xudmFyIHByb3BlcnR5TmFtZUNhY2hlID0ge307XG52YXIgdGVzdEVsZW1lbnQ7XG5cbi8qXG4gICAgVGVzdCBzdHlsZSBwcm9wZXJ0eSBmb3IgcHJlZml4ZWQgdmVyc2lvblxuICAgIFxuICAgIEBwYXJhbSBbc3RyaW5nXTogU3R5bGUgcHJvcGVydHlcbiAgICBAcmV0dXJuIFtzdHJpbmddOiBDYWNoZWQgcHJvcGVydHkgbmFtZVxuKi9cbnZhciB0ZXN0UHJlZml4ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHRlc3RFbGVtZW50ID0gdGVzdEVsZW1lbnQgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBpZiAocHJvcGVydHlOYW1lQ2FjaGVba2V5XSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3BlcnR5TmFtZUNhY2hlW2tleV0gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVByZWZpeGVzOyBpKyspIHtcbiAgICAgICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldLFxuICAgICAgICAgICAgcHJlZml4ZWQgPSBwcmVmaXggPT09ICcnID8ga2V5IDogcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpO1xuXG4gICAgICAgIGlmIChwcmVmaXhlZCBpbiB0ZXN0RWxlbWVudC5zdHlsZSkge1xuICAgICAgICAgICAgcHJvcGVydHlOYW1lQ2FjaGVba2V5XSA9IHByZWZpeGVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BlcnR5TmFtZUNhY2hlW2tleV07XG59O1xuXG52YXIgY3NzUm9sZSA9IG5ldyBSb2xlKHtcbiAgICBfbWFwOiByZXF1aXJlKCcuL21hcCcpLFxuICAgIF90eXBlTWFwOiByZXF1aXJlKCcuL3R5cGUtbWFwJyksXG5cbiAgICBpbml0OiBmdW5jdGlvbiAoYWN0b3IpIHtcbiAgICAgICAgYWN0b3IuX2Nzc0NhY2hlID0ge307XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKHN0YXRlLCBhY3Rvcikge1xuICAgICAgICBjc3NSb2xlKGFjdG9yLmVsZW1lbnQsIGJ1aWxkKHN0YXRlLCBhY3Rvci5fY3NzQ2FjaGUpKTtcbiAgICB9LFxuXG4gICAgZ2V0OiBmdW5jdGlvbiAoZWxlbWVudCwga2V5KSB7XG4gICAgICAgIGtleSA9IHByb3BlcnR5TmFtZUNhY2hlW2tleV0gfHwgdGVzdFByZWZpeChrZXkpO1xuXG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKVtrZXldO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNldDogZnVuY3Rpb24gKGVsZW1lbnQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAga2V5ID0gcHJvcGVydHlOYW1lQ2FjaGVba2V5XSB8fCB0ZXN0UHJlZml4KGtleSk7XG5cbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNzc1JvbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OemMxSnZiR1V1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNXVUZCV1N4RFFVRkRPenRCUVVWaUxFbEJRVWtzU1VGQlNTeEhRVUZITEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRCUVVNNVFpeEpRVUZKTEV0QlFVc3NSMEZCUnl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03TzBGQlJTOUNMRWxCUVVrc1VVRkJVU3hIUVVGSExFTkJRVU1zVVVGQlVTeEZRVUZETEV0QlFVc3NSVUZCUXl4SFFVRkhMRVZCUVVNc1NVRkJTU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBGQlF6ZERMRWxCUVVrc1YwRkJWeXhIUVVGSExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZEYkVNc1NVRkJTU3hwUWtGQmFVSXNSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRNMElzU1VGQlNTeFhRVUZYT3pzN096czdPenRCUVVGRExFRkJVV2hDTEVsQlFVa3NWVUZCVlN4SFFVRkhMRlZCUVZVc1IwRkJSeXhGUVVGRk8wRkJRelZDTEdWQlFWY3NSMEZCUnl4WFFVRlhMRWxCUVVrc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXpzN1FVRkZNMFFzVVVGQlNTeHBRa0ZCYVVJc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eExRVUZMTEVWQlFVVTdRVUZEYkVNc1pVRkJUeXhMUVVGTExFTkJRVU03UzBGRGFFSXNUVUZCVFR0QlFVTklMSGxDUVVGcFFpeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJRenRMUVVOc1F6czdRVUZGUkN4VFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NWMEZCVnl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8wRkJRMnhETEZsQlFVa3NUVUZCVFN4SFFVRkhMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGNFSXNVVUZCVVN4SFFVRkhMRUZCUVVNc1RVRkJUU3hMUVVGTExFVkJRVVVzUjBGQlNTeEhRVUZITEVkQlFVY3NUVUZCVFN4SFFVRkhMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNWMEZCVnl4RlFVRkZMRWRCUVVjc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXpzN1FVRkZNMFlzV1VGQlNTeFJRVUZSTEVsQlFVa3NWMEZCVnl4RFFVRkRMRXRCUVVzc1JVRkJSVHRCUVVNdlFpdzJRa0ZCYVVJc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTTdVMEZEY2tNN1MwRkRTanM3UVVGRlJDeFhRVUZQTEdsQ1FVRnBRaXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBOQlEycERMRU5CUVVNN08wRkJSVVlzU1VGQlNTeFBRVUZQTEVkQlFVY3NTVUZCU1N4SlFVRkpMRU5CUVVNN1FVRkRia0lzVVVGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNN1FVRkRkRUlzV1VGQlVTeEZRVUZGTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNN08wRkJSUzlDTEZGQlFVa3NSVUZCUlN4VlFVRlZMRXRCUVVzc1JVRkJSVHRCUVVOdVFpeGhRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRkhMRVZCUVVVc1EwRkJRenRMUVVONFFqczdRVUZGUkN4VlFVRk5MRVZCUVVVc1ZVRkJWU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTzBGQlF6VkNMR1ZCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEV0QlFVc3NRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdTMEZEZWtRN08wRkJSVVFzVDBGQlJ5eEZRVUZGTEZWQlFWVXNUMEZCVHl4RlFVRkZMRWRCUVVjc1JVRkJSVHRCUVVONlFpeFhRVUZITEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NWVUZCVlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE96dEJRVVZvUkN4WlFVRkpMRWRCUVVjc1JVRkJSVHRCUVVOTUxHMUNRVUZQTEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03VTBGRGRFUTdTMEZEU2pzN1FVRkZSQ3hQUVVGSExFVkJRVVVzVlVGQlZTeFBRVUZQTEVWQlFVVXNSMEZCUnl4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVOb1F5eFhRVUZITEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NWVUZCVlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE96dEJRVVZvUkN4WlFVRkpMRWRCUVVjc1JVRkJSVHRCUVVOTUxHMUNRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF6dFRRVU01UWp0TFFVTktPenREUVVWS0xFTkJRVU1zUTBGQlF6czdRVUZGU0N4TlFVRk5MRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5SXNJbVpwYkdVaU9pSmpjM05TYjJ4bExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYm5aaGNpQlNiMnhsSUQwZ2NtVnhkV2x5WlNnbkxpNHZVbTlzWlNjcE8xeHVkbUZ5SUdKMWFXeGtJRDBnY21WeGRXbHlaU2duTGk5aWRXbHNaQ2NwTzF4dVhHNTJZWElnY0hKbFptbDRaWE1nUFNCYkoxZGxZbXRwZENjc0owMXZlaWNzSjA4bkxDZHRjeWNzSUNjblhUdGNiblpoY2lCdWRXMVFjbVZtYVhobGN5QTlJSEJ5WldacGVHVnpMbXhsYm1kMGFEdGNiblpoY2lCd2NtOXdaWEowZVU1aGJXVkRZV05vWlNBOUlIdDlPMXh1ZG1GeUlIUmxjM1JGYkdWdFpXNTBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY2JpOHFYRzRnSUNBZ1ZHVnpkQ0J6ZEhsc1pTQndjbTl3WlhKMGVTQm1iM0lnY0hKbFptbDRaV1FnZG1WeWMybHZibHh1SUNBZ0lGeHVJQ0FnSUVCd1lYSmhiU0JiYzNSeWFXNW5YVG9nVTNSNWJHVWdjSEp2Y0dWeWRIbGNiaUFnSUNCQWNtVjBkWEp1SUZ0emRISnBibWRkT2lCRFlXTm9aV1FnY0hKdmNHVnlkSGtnYm1GdFpWeHVLaTljYm5aaGNpQjBaWE4wVUhKbFptbDRJRDBnWm5WdVkzUnBiMjRnS0d0bGVTa2dlMXh1SUNBZ0lIUmxjM1JGYkdWdFpXNTBJRDBnZEdWemRFVnNaVzFsYm5RZ2ZId2daRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWs3WEc1Y2JpQWdJQ0JwWmlBb2NISnZjR1Z5ZEhsT1lXMWxRMkZqYUdWYmEyVjVYU0E5UFQwZ1ptRnNjMlVwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIQnliM0JsY25SNVRtRnRaVU5oWTJobFcydGxlVjBnUFNCbVlXeHpaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRzUxYlZCeVpXWnBlR1Z6T3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQnlaV1pwZUNBOUlIQnlaV1pwZUdWelcybGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NISmxabWw0WldRZ1BTQW9jSEpsWm1sNElEMDlQU0FuSnlrZ1B5QnJaWGtnT2lCd2NtVm1hWGdnS3lCclpYa3VZMmhoY2tGMEtEQXBMblJ2VlhCd1pYSkRZWE5sS0NrZ0t5QnJaWGt1YzJ4cFkyVW9NU2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJ5WldacGVHVmtJR2x1SUhSbGMzUkZiR1Z0Wlc1MExuTjBlV3hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBlVTVoYldWRFlXTm9aVnRyWlhsZElEMGdjSEpsWm1sNFpXUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnY21WMGRYSnVJSEJ5YjNCbGNuUjVUbUZ0WlVOaFkyaGxXMnRsZVYwN1hHNTlPMXh1WEc1MllYSWdZM056VW05c1pTQTlJRzVsZHlCU2IyeGxLSHRjYmlBZ0lDQmZiV0Z3T2lCeVpYRjFhWEpsS0NjdUwyMWhjQ2NwTEZ4dUlDQWdJRjkwZVhCbFRXRndPaUJ5WlhGMWFYSmxLQ2N1TDNSNWNHVXRiV0Z3Snlrc1hHNWNiaUFnSUNCcGJtbDBPaUJtZFc1amRHbHZiaUFvWVdOMGIzSXBJSHRjYmlBZ0lDQWdJQ0FnWVdOMGIzSXVYMk56YzBOaFkyaGxJRDBnZTMwN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhWd1pHRjBaVG9nWm5WdVkzUnBiMjRnS0hOMFlYUmxMQ0JoWTNSdmNpa2dlMXh1SUNBZ0lDQWdJQ0JqYzNOU2IyeGxLR0ZqZEc5eUxtVnNaVzFsYm5Rc0lHSjFhV3hrS0hOMFlYUmxMQ0JoWTNSdmNpNWZZM056UTJGamFHVXBLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlBb1pXeGxiV1Z1ZEN3Z2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUd0bGVTQTlJSEJ5YjNCbGNuUjVUbUZ0WlVOaFkyaGxXMnRsZVYwZ2ZId2dkR1Z6ZEZCeVpXWnBlQ2hyWlhrcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoclpYa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCM2FXNWtiM2N1WjJWMFEyOXRjSFYwWldSVGRIbHNaU2hsYkdWdFpXNTBMQ0J1ZFd4c0tWdHJaWGxkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhObGREb2dablZ1WTNScGIyNGdLR1ZzWlcxbGJuUXNJR3RsZVN3Z2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ2EyVjVJRDBnY0hKdmNHVnlkSGxPWVcxbFEyRmphR1ZiYTJWNVhTQjhmQ0IwWlhOMFVISmxabWw0S0d0bGVTazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHdGxlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaV3hsYldWdWRDNXpkSGxzWlZ0clpYbGRJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYm4wcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR056YzFKdmJHVTdJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9yb2xlcy9jc3MvY3NzUm9sZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIFJvbGUgPSByZXF1aXJlKCcuLi9Sb2xlJyksXG4gICAgYXR0clJvbGUgPSByZXF1aXJlKCcuLi9hdHRyL2F0dHJSb2xlJyksXG4gICAgYnVpbGQgPSByZXF1aXJlKCcuL2J1aWxkJyksXG4gICAgZWFjaCA9IHJlcXVpcmUoJy4uLy4uL2luYy91dGlscycpLmVhY2g7XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFJvbGUoe1xuICAgIF9tYXA6IHJlcXVpcmUoJy4uL2Nzcy9tYXAnKSxcbiAgICBfdHlwZU1hcDogcmVxdWlyZSgnLi90eXBlLW1hcCcpLFxuXG4gICAgc3RhcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJvdW5kaW5nQm94ID0gdGhpcy5lbGVtZW50LmdldEJCb3goKSxcbiAgICAgICAgICAgIHZhbHVlcyA9IHRoaXMudmFsdWVzLFxuXG4gICAgICAgIC8vIFRPRE86IFN1cHBvcnQgcHhcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luWCA9IHZhbHVlcy50cmFuc2Zvcm1PcmlnaW5YID8gdmFsdWVzLnRyYW5zZm9ybU9yaWdpblguY3VycmVudCA6IDUwLFxuICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luWSA9IHZhbHVlcy50cmFuc2Zvcm1PcmlnaW5ZID8gdmFsdWVzLnRyYW5zZm9ybU9yaWdpblkuY3VycmVudCA6IDUwLFxuICAgICAgICAgICAgb3JpZ2luID0ge1xuICAgICAgICAgICAgeDogYm91bmRpbmdCb3gud2lkdGggKiAodHJhbnNmb3JtT3JpZ2luWCAvIDEwMCkgKyBib3VuZGluZ0JveC54LFxuICAgICAgICAgICAgeTogYm91bmRpbmdCb3guaGVpZ2h0ICogKHRyYW5zZm9ybU9yaWdpblkgLyAxMDApICsgYm91bmRpbmdCb3gueVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc3ZnT3JpZ2luID0gb3JpZ2luO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgYWN0b3IgPSB0aGlzO1xuICAgICAgICBlYWNoKGJ1aWxkKHN0YXRlLCB0aGlzLnN2Z09yaWdpbiksIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBhdHRyUm9sZS5zZXQoYWN0b3IuZWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OMloxSnZiR1V1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNXVUZCV1N4RFFVRkRPenRCUVVWaUxFbEJRVWtzU1VGQlNTeEhRVUZITEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNN1NVRkRla0lzVVVGQlVTeEhRVUZITEU5QlFVOHNRMEZCUXl4clFrRkJhMElzUTBGQlF6dEpRVU4wUXl4TFFVRkxMRWRCUVVjc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF6dEpRVU14UWl4SlFVRkpMRWRCUVVjc1QwRkJUeXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRE96dEJRVVV6UXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETzBGQlEzUkNMRkZCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETzBGQlF6TkNMRmxCUVZFc1JVRkJSU3hQUVVGUExFTkJRVU1zV1VGQldTeERRVUZET3p0QlFVVXZRaXhUUVVGTExFVkJRVVVzV1VGQldUdEJRVU5tTEZsQlFVa3NWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eEZRVUZGTzFsQlEzQkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRUczdPMEZCUlhCQ0xIZENRVUZuUWl4SFFVRkhMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNSMEZCUnl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4SFFVRkhMRVZCUVVVN1dVRkRha1lzWjBKQlFXZENMRWRCUVVjc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4SFFVRkhMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRWRCUVVjc1JVRkJSVHRaUVVOcVJpeE5RVUZOTEVkQlFVYzdRVUZEVEN4aFFVRkRMRVZCUVVVc1YwRkJWeXhEUVVGRExFdEJRVXNzU1VGQlNTeG5Ra0ZCWjBJc1IwRkJSeXhIUVVGSExFTkJRVUVzUVVGQlF5eEhRVUZITEZkQlFWY3NRMEZCUXl4RFFVRkRPMEZCUXk5RUxHRkJRVU1zUlVGQlJTeFhRVUZYTEVOQlFVTXNUVUZCVFN4SlFVRkpMR2RDUVVGblFpeEhRVUZITEVkQlFVY3NRMEZCUVN4QlFVRkRMRWRCUVVjc1YwRkJWeXhEUVVGRExFTkJRVU03VTBGRGJrVXNRMEZCUXpzN1FVRkZUaXhaUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEUxQlFVMHNRMEZCUXp0TFFVTXpRanM3UVVGRlJDeFZRVUZOTEVWQlFVVXNWVUZCVlN4TFFVRkxMRVZCUVVVN1FVRkRja0lzV1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUTJwQ0xGbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUlVGQlJTeFZRVUZWTEVkQlFVY3NSVUZCUlN4TFFVRkxMRVZCUVVVN1FVRkRja1FzYjBKQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUlVGQlJTeEhRVUZITEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1UwRkRNME1zUTBGQlF5eERRVUZETzB0QlEwNDdPME5CUlVvc1EwRkJReXhEUVVGRElpd2labWxzWlNJNkluTjJaMUp2YkdVdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1ZG1GeUlGSnZiR1VnUFNCeVpYRjFhWEpsS0NjdUxpOVNiMnhsSnlrc1hHNGdJQ0FnWVhSMGNsSnZiR1VnUFNCeVpYRjFhWEpsS0NjdUxpOWhkSFJ5TDJGMGRISlNiMnhsSnlrc1hHNGdJQ0FnWW5WcGJHUWdQU0J5WlhGMWFYSmxLQ2N1TDJKMWFXeGtKeWtzWEc0Z0lDQWdaV0ZqYUNBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDJsdVl5OTFkR2xzY3ljcExtVmhZMmc3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2JtVjNJRkp2YkdVb2UxeHVJQ0FnSUY5dFlYQTZJSEpsY1hWcGNtVW9KeTR1TDJOemN5OXRZWEFuS1N4Y2JpQWdJQ0JmZEhsd1pVMWhjRG9nY21WeGRXbHlaU2duTGk5MGVYQmxMVzFoY0NjcExGeHVYRzRnSUNBZ2MzUmhjblE2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdKdmRXNWthVzVuUW05NElEMGdkR2hwY3k1bGJHVnRaVzUwTG1kbGRFSkNiM2dvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbGN5QTlJSFJvYVhNdWRtRnNkV1Z6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVkU5RVR6b2dVM1Z3Y0c5eWRDQndlRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5tYjNKdFQzSnBaMmx1V0NBOUlIWmhiSFZsY3k1MGNtRnVjMlp2Y20xUGNtbG5hVzVZSUQ4Z2RtRnNkV1Z6TG5SeVlXNXpabTl5YlU5eWFXZHBibGd1WTNWeWNtVnVkQ0E2SURVd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTm1iM0p0VDNKcFoybHVXU0E5SUhaaGJIVmxjeTUwY21GdWMyWnZjbTFQY21sbmFXNVpJRDhnZG1Gc2RXVnpMblJ5WVc1elptOXliVTl5YVdkcGJsa3VZM1Z5Y21WdWRDQTZJRFV3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiM0pwWjJsdUlEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGc2SUdKdmRXNWthVzVuUW05NExuZHBaSFJvSUNvZ0tIUnlZVzV6Wm05eWJVOXlhV2RwYmxnZ0x5QXhNREFwSUNzZ1ltOTFibVJwYm1kQ2IzZ3VlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1T2lCaWIzVnVaR2x1WjBKdmVDNW9aV2xuYUhRZ0tpQW9kSEpoYm5ObWIzSnRUM0pwWjJsdVdTQXZJREV3TUNrZ0t5QmliM1Z1WkdsdVowSnZlQzU1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1puVDNKcFoybHVJRDBnYjNKcFoybHVPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQjFjR1JoZEdVNklHWjFibU4wYVc5dUlDaHpkR0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWVdOMGIzSWdQU0IwYUdsek8xeHVJQ0FnSUNBZ0lDQmxZV05vS0dKMWFXeGtLSE4wWVhSbExDQjBhR2x6TG5OMlowOXlhV2RwYmlrc0lHWjFibU4wYVc5dUlDaHJaWGtzSUhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhkSFJ5VW05c1pTNXpaWFFvWVdOMGIzSXVaV3hsYldWdWRDd2dhMlY1TENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVmU2s3SWwxOVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvcm9sZXMvc3ZnL3N2Z1JvbGUuanNcbiAqKiBtb2R1bGUgaWQgPSAxN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSb2xlID0gcmVxdWlyZSgnLi4vUm9sZScpO1xudmFyIGF0dHJSb2xlID0gcmVxdWlyZSgnLi4vYXR0ci9hdHRyUm9sZScpO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuLi8uLi9pbmMvdXRpbHMnKS5lYWNoO1xuXG4vKlxuICAgIENvbnZlcnQgcGVyY2VudGFnZSB0byBwaXhlbHNcbiAgICBcbiAgICBAcGFyYW0gW251bWJlcl06IFBlcmNlbnRhZ2Ugb2YgdG90YWwgbGVuZ3RoXG4gICAgQHBhcmFtIFtudW1iZXJdOiBUb3RhbCBsZW5ndGhcbiovXG52YXIgcGVyY2VudFRvUGl4ZWxzID0gZnVuY3Rpb24gKHBlcmNlbnRhZ2UsIGxlbmd0aCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHBlcmNlbnRhZ2UpIC8gMTAwICogbGVuZ3RoICsgJ3B4Jztcbn07XG5cbi8qXG4gICAgQ3JlYXRlIHN0eWxlc1xuICAgIFxuICAgIEBwYXJhbSBbb2JqZWN0XTogU1ZHIFBhdGggcHJvcGVydGllc1xuICAgIEBwYXJhbSBbb2JqZWN0XTogTGVuZ3RoIG9mIHBhdGhcbiAgICBAcmV0dXJucyBbb2JqZWN0XTogS2V5L3ZhbHVlIHBhaXJzIG9mIHZhbGlkIENTUyBwcm9wZXJ0aWVzXG4qL1xudmFyIGNyZWF0ZVN0eWxlcyA9IGZ1bmN0aW9uIChwcm9wcywgbGVuZ3RoKSB7XG4gICAgdmFyIGhhc0Rhc2hBcnJheSA9IGZhbHNlLFxuICAgICAgICBkYXNoQXJyYXlTdHlsZXMgPSB7XG4gICAgICAgIGxlbmd0aDogMCxcbiAgICAgICAgc3BhY2luZzogbGVuZ3RoICsgJ3B4J1xuICAgIH0sXG4gICAgICAgIHN0eWxlcyA9IHt9O1xuXG4gICAgZWFjaChwcm9wcywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAga2V5ID0gU1ZHRHJhd1BhdGguX21hcFtrZXldIHx8IGtleTtcblxuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAnbGVuZ3RoJzpcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNpbmcnOlxuICAgICAgICAgICAgICAgIGhhc0Rhc2hBcnJheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgZGFzaEFycmF5U3R5bGVzW2tleV0gPSBwZXJjZW50VG9QaXhlbHModmFsdWUsIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdvZmZzZXQnOlxuICAgICAgICAgICAgICAgIHN0eWxlc1snc3Ryb2tlLWRhc2hvZmZzZXQnXSA9IHBlcmNlbnRUb1BpeGVscygtdmFsdWUsIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHN0eWxlc1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChoYXNEYXNoQXJyYXkpIHtcbiAgICAgICAgc3R5bGVzWydzdHJva2UtZGFzaGFycmF5J10gPSBkYXNoQXJyYXlTdHlsZXMubGVuZ3RoICsgJyAnICsgZGFzaEFycmF5U3R5bGVzLnNwYWNpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlcztcbn07XG5cbi8qXG4gICAgRHJhdyBQYXRoIHJvbGVcbiovXG52YXIgU1ZHRHJhd1BhdGggPSBuZXcgUm9sZSh7XG4gICAgX21hcDogcmVxdWlyZSgnLi9tYXAnKSxcblxuICAgIF90eXBlTWFwOiB7XG4gICAgICAgIHN0cm9rZTogJ2NvbG9yJyxcbiAgICAgICAgZDogJ2NvbXBsZXgnXG4gICAgfSxcblxuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXRoTGVuZ3RoID0gdGhpcy5lbGVtZW50LmdldFRvdGFsTGVuZ3RoKCk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICAgIFVwZGF0ZSBgcGF0aGAgc3R5bGVzIGFuZCBpZiBgZWxlbWVudGAgaXMgcHJlc2VudCwgc2V0XG4gICAgICAgIHgsIHkgYW5kIHJvdGF0aW9uXG4gICAgKi9cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICBhdHRyUm9sZS51cGRhdGUuY2FsbCh0aGlzLCBjcmVhdGVTdHlsZXMoc3RhdGUsIHRoaXMucGF0aExlbmd0aCkpO1xuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNWR0RyYXdQYXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltUnlZWGRRWVhSb1VtOXNaUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeFpRVUZaTEVOQlFVTTdPMEZCUldJc1NVRkJTU3hKUVVGSkxFZEJRVWNzVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMEZCUXpsQ0xFbEJRVWtzVVVGQlVTeEhRVUZITEU5QlFVOHNRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETzBGQlF6TkRMRWxCUVVrc1NVRkJTU3hIUVVGSExFOUJRVThzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRExFbEJRVWs3T3pzN096czdPMEZCUVVNc1FVRlJNME1zU1VGQlNTeGxRVUZsTEVkQlFVY3NWVUZCVlN4VlFVRlZMRVZCUVVVc1RVRkJUU3hGUVVGRk8wRkJRMmhFTEZkQlFVOHNRVUZCUXl4VlFVRlZMRU5CUVVNc1ZVRkJWU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZKTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNN1EwRkRla1E3T3pzN096czdPenRCUVVGRExFRkJVMFlzU1VGQlNTeFpRVUZaTEVkQlFVY3NWVUZCVlN4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRk8wRkJRM2hETEZGQlFVa3NXVUZCV1N4SFFVRkhMRXRCUVVzN1VVRkRjRUlzWlVGQlpTeEhRVUZITzBGQlEyUXNZMEZCVFN4RlFVRkZMRU5CUVVNN1FVRkRWQ3hsUVVGUExFVkJRVVVzVFVGQlRTeEhRVUZITEVsQlFVazdTMEZEZWtJN1VVRkRSQ3hOUVVGTkxFZEJRVWNzUlVGQlJTeERRVUZET3p0QlFVVm9RaXhSUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEZWQlFWVXNSMEZCUnl4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVNNVFpeFhRVUZITEVkQlFVY3NWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTTdPMEZCUlc1RExHZENRVUZSTEVkQlFVYzdRVUZEVUN4cFFrRkJTeXhSUVVGUkxFTkJRVU03UVVGRFpDeHBRa0ZCU3l4VFFVRlRPMEZCUTFZc05FSkJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEY0VJc0swSkJRV1VzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4bFFVRmxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEzUkVMSE5DUVVGTk8wRkJRVUVzUVVGRFZpeHBRa0ZCU3l4UlFVRlJPMEZCUTFRc2MwSkJRVTBzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhIUVVGSExHVkJRV1VzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVNNVJDeHpRa0ZCVFR0QlFVRkJMRUZCUTFZN1FVRkRTU3h6UWtGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJRenRCUVVGQkxGTkJRek5DTzB0QlEwb3NRMEZCUXl4RFFVRkRPenRCUVVWSUxGRkJRVWtzV1VGQldTeEZRVUZGTzBGQlEyUXNZMEZCVFN4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NaVUZCWlN4RFFVRkRMRTFCUVUwc1IwRkJSeXhIUVVGSExFZEJRVWNzWlVGQlpTeERRVUZETEU5QlFVOHNRMEZCUXp0TFFVTjJSanM3UVVGRlJDeFhRVUZQTEUxQlFVMHNRMEZCUXp0RFFVTnFRanM3T3pzN1FVRkJReXhCUVV0R0xFbEJRVWtzVjBGQlZ5eEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRPMEZCUTNaQ0xGRkJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRPenRCUVVWMFFpeFpRVUZSTEVWQlFVVTdRVUZEVGl4alFVRk5MRVZCUVVVc1QwRkJUenRCUVVObUxGTkJRVU1zUlVGQlJTeFRRVUZUTzB0QlEyWTdPMEZCUlVRc1VVRkJTU3hGUVVGRkxGbEJRVms3UVVGRFpDeFpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zWTBGQll5eEZRVUZGTEVOQlFVTTdTMEZEYmtRN096czdPenRCUVUxRUxGVkJRVTBzUlVGQlJTeFZRVUZWTEV0QlFVc3NSVUZCUlR0QlFVTnlRaXhuUWtGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxGbEJRVmtzUTBGQlF5eExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFTkJRVU03UzBGRGNFVTdRMEZEU2l4RFFVRkRMRU5CUVVNN08wRkJSVWdzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4WFFVRlhMRU5CUVVNaUxDSm1hV3hsSWpvaVpISmhkMUJoZEdoU2IyeGxMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1Y2JuWmhjaUJTYjJ4bElEMGdjbVZ4ZFdseVpTZ25MaTR2VW05c1pTY3BPMXh1ZG1GeUlHRjBkSEpTYjJ4bElEMGdjbVZ4ZFdseVpTZ25MaTR2WVhSMGNpOWhkSFJ5VW05c1pTY3BPMXh1ZG1GeUlHVmhZMmdnUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTlwYm1NdmRYUnBiSE1uS1M1bFlXTm9PMXh1WEc0dktseHVJQ0FnSUVOdmJuWmxjblFnY0dWeVkyVnVkR0ZuWlNCMGJ5QndhWGhsYkhOY2JpQWdJQ0JjYmlBZ0lDQkFjR0Z5WVcwZ1cyNTFiV0psY2wwNklGQmxjbU5sYm5SaFoyVWdiMllnZEc5MFlXd2diR1Z1WjNSb1hHNGdJQ0FnUUhCaGNtRnRJRnR1ZFcxaVpYSmRPaUJVYjNSaGJDQnNaVzVuZEdoY2Jpb3ZYRzUyWVhJZ2NHVnlZMlZ1ZEZSdlVHbDRaV3h6SUQwZ1puVnVZM1JwYjI0Z0tIQmxjbU5sYm5SaFoyVXNJR3hsYm1kMGFDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBb2NHRnljMlZHYkc5aGRDaHdaWEpqWlc1MFlXZGxLU0F2SURFd01Da2dLaUJzWlc1bmRHZ2dLeUFuY0hnbk8xeHVmVHRjYmx4dUx5cGNiaUFnSUNCRGNtVmhkR1VnYzNSNWJHVnpYRzRnSUNBZ1hHNGdJQ0FnUUhCaGNtRnRJRnR2WW1wbFkzUmRPaUJUVmtjZ1VHRjBhQ0J3Y205d1pYSjBhV1Z6WEc0Z0lDQWdRSEJoY21GdElGdHZZbXBsWTNSZE9pQk1aVzVuZEdnZ2IyWWdjR0YwYUZ4dUlDQWdJRUJ5WlhSMWNtNXpJRnR2WW1wbFkzUmRPaUJMWlhrdmRtRnNkV1VnY0dGcGNuTWdiMllnZG1Gc2FXUWdRMU5USUhCeWIzQmxjblJwWlhOY2Jpb3ZYRzUyWVhJZ1kzSmxZWFJsVTNSNWJHVnpJRDBnWm5WdVkzUnBiMjRnS0hCeWIzQnpMQ0JzWlc1bmRHZ3BJSHRjYmlBZ0lDQjJZWElnYUdGelJHRnphRUZ5Y21GNUlEMGdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHUmhjMmhCY25KaGVWTjBlV3hsY3lBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGJtZDBhRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE53WVdOcGJtYzZJR3hsYm1kMGFDQXJJQ2R3ZUNkY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdjM1I1YkdWeklEMGdlMzA3WEc1Y2JpQWdJQ0JsWVdOb0tIQnliM0J6TENCbWRXNWpkR2x2YmlBb2EyVjVMQ0IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0JyWlhrZ1BTQlRWa2RFY21GM1VHRjBhQzVmYldGd1cydGxlVjBnZkh3Z2EyVjVPMXh1WEc0Z0lDQWdJQ0FnSUhOM2FYUmphQ0FvYTJWNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RzWlc1bmRHZ25PbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuYzNCaFkybHVaeWM2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGelJHRnphRUZ5Y21GNUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYTm9RWEp5WVhsVGRIbHNaWE5iYTJWNVhTQTlJSEJsY21ObGJuUlViMUJwZUdWc2N5aDJZV3gxWlN3Z2JHVnVaM1JvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjI5bVpuTmxkQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSNWJHVnpXeWR6ZEhKdmEyVXRaR0Z6YUc5bVpuTmxkQ2RkSUQwZ2NHVnlZMlZ1ZEZSdlVHbDRaV3h6S0MxMllXeDFaU3dnYkdWdVozUm9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSNWJHVnpXMnRsZVYwZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2FXWWdLR2hoYzBSaGMyaEJjbkpoZVNrZ2UxeHVJQ0FnSUNBZ0lDQnpkSGxzWlhOYkozTjBjbTlyWlMxa1lYTm9ZWEp5WVhrblhTQTlJR1JoYzJoQmNuSmhlVk4wZVd4bGN5NXNaVzVuZEdnZ0t5QW5JQ2NnS3lCa1lYTm9RWEp5WVhsVGRIbHNaWE11YzNCaFkybHVaenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2MzUjViR1Z6TzF4dWZUdGNibHh1THlwY2JpQWdJQ0JFY21GM0lGQmhkR2dnY205c1pWeHVLaTljYm5aaGNpQlRWa2RFY21GM1VHRjBhQ0E5SUc1bGR5QlNiMnhsS0h0Y2JpQWdJQ0JmYldGd09pQnlaWEYxYVhKbEtDY3VMMjFoY0NjcExGeHVYRzRnSUNBZ1gzUjVjR1ZOWVhBNklIdGNiaUFnSUNBZ0lDQWdjM1J5YjJ0bE9pQW5ZMjlzYjNJbkxGeHVJQ0FnSUNBZ0lDQmtPaUFuWTI5dGNHeGxlQ2RjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdhVzVwZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmhkR2hNWlc1bmRHZ2dQU0IwYUdsekxtVnNaVzFsYm5RdVoyVjBWRzkwWVd4TVpXNW5kR2dvS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ1ZYQmtZWFJsSUdCd1lYUm9ZQ0J6ZEhsc1pYTWdZVzVrSUdsbUlHQmxiR1Z0Wlc1MFlDQnBjeUJ3Y21WelpXNTBMQ0J6WlhSY2JpQWdJQ0FnSUNBZ2VDd2dlU0JoYm1RZ2NtOTBZWFJwYjI1Y2JpQWdJQ0FxTDF4dUlDQWdJSFZ3WkdGMFpUb2dablZ1WTNScGIyNGdLSE4wWVhSbEtTQjdYRzRnSUNBZ0lDQWdJR0YwZEhKU2IyeGxMblZ3WkdGMFpTNWpZV3hzS0hSb2FYTXNJR055WldGMFpWTjBlV3hsY3loemRHRjBaU3dnZEdocGN5NXdZWFJvVEdWdVozUm9LU2s3WEc0Z0lDQWdmVnh1ZlNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdVMVpIUkhKaGQxQmhkR2c3SWwxOVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvcm9sZXMvcGF0aC9kcmF3UGF0aFJvbGUuanNcbiAqKiBtb2R1bGUgaWQgPSAxOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZXMsIHRlcm1zLCBkZWxpbWl0ZXIsIGNob3ApIHtcbiAgICB2YXIgY29tYmluZWQgPSAnJyxcbiAgICAgICAga2V5ID0gJycsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBudW1UZXJtcyA9IHRlcm1zLmxlbmd0aDtcblxuICAgIGZvciAoOyBpIDwgbnVtVGVybXM7IGkrKykge1xuICAgICAgICBrZXkgPSB0ZXJtc1tpXTtcblxuICAgICAgICBpZiAodmFsdWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGNvbWJpbmVkICs9IHZhbHVlc1trZXldICsgZGVsaW1pdGVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNob3ApIHtcbiAgICAgICAgY29tYmluZWQgPSBjb21iaW5lZC5zbGljZSgwLCAtY2hvcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbWJpbmVkO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbU55WldGMFpTMWtaV3hwYldsMFpXUXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhMRlZCUVVNc1RVRkJUU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFRRVUZUTEVWQlFVVXNTVUZCU1N4RlFVRkxPMEZCUTJwRUxGRkJRVWtzVVVGQlVTeEhRVUZITEVWQlFVVTdVVUZEWWl4SFFVRkhMRWRCUVVjc1JVRkJSVHRSUVVOU0xFTkJRVU1zUjBGQlJ5eERRVUZETzFGQlEwd3NVVUZCVVN4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU03TzBGQlJUVkNMRmRCUVU4c1EwRkJReXhIUVVGSExGRkJRVkVzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTjBRaXhYUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPenRCUVVWbUxGbEJRVWtzVFVGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVHRCUVVNMVFpeHZRa0ZCVVN4SlFVRkpMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eFRRVUZUTEVOQlFVTTdVMEZEZGtNN1MwRkRTanM3UVVGRlJDeFJRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTk9MR2RDUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dExRVU4yUXpzN1FVRkZSQ3hYUVVGUExGRkJRVkVzUTBGQlF6dERRVU51UWl4RFFVRkRJaXdpWm1sc1pTSTZJbU55WldGMFpTMWtaV3hwYldsMFpXUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNoMllXeDFaWE1zSUhSbGNtMXpMQ0JrWld4cGJXbDBaWElzSUdOb2IzQXBJRDArSUh0Y2JpQWdJQ0IyWVhJZ1kyOXRZbWx1WldRZ1BTQW5KeXhjYmlBZ0lDQWdJQ0FnYTJWNUlEMGdKeWNzWEc0Z0lDQWdJQ0FnSUdrZ1BTQXdMRnh1SUNBZ0lDQWdJQ0J1ZFcxVVpYSnRjeUE5SUhSbGNtMXpMbXhsYm1kMGFEdGNibHh1SUNBZ0lHWnZjaUFvT3lCcElEd2diblZ0VkdWeWJYTTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnJaWGtnUFNCMFpYSnRjMXRwWFR0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVnpMbWhoYzA5M2JsQnliM0JsY25SNUtHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052YldKcGJtVmtJQ3M5SUhaaGJIVmxjMXRyWlhsZElDc2daR1ZzYVcxcGRHVnlPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dOb2IzQXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dFltbHVaV1FnUFNCamIyMWlhVzVsWkM1emJHbGpaU2d3TENBdFkyaHZjQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHTnZiV0pwYm1Wa08xeHVmVHNpWFgwPVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvdmFsdWUtdHlwZXMvbWFuaXB1bGF0b3JzL2NyZWF0ZS1kZWxpbWl0ZWQuanNcbiAqKiBtb2R1bGUgaWQgPSAxOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3BsaXRDb21tYURlbGltaXRlZCA9IHJlcXVpcmUoJy4vc3BsaXQtY29tbWEtZGVsaW1pdGVkJyksXG4gICAgZnVuY3Rpb25CcmVhayA9IHJlcXVpcmUoJy4vZnVuY3Rpb24tYnJlYWsnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIHRlcm1zKSB7XG4gICAgdmFyIHNwbGl0VmFsdWUgPSB7fSxcbiAgICAgICAgbnVtVGVybXMgPSB0ZXJtcy5sZW5ndGgsXG4gICAgICAgIGNvbG9ycyA9IHNwbGl0Q29tbWFEZWxpbWl0ZWQoZnVuY3Rpb25CcmVhayh2YWx1ZSkpLFxuICAgICAgICBpID0gMDtcblxuICAgIGZvciAoOyBpIDwgbnVtVGVybXM7IGkrKykge1xuICAgICAgICBzcGxpdFZhbHVlW3Rlcm1zW2ldXSA9IGNvbG9yc1tpXSAhPT0gdW5kZWZpbmVkID8gY29sb3JzW2ldIDogMTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3BsaXRWYWx1ZTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1kbGRDMWpiMnh2Y2kxMllXeDFaWE11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3hKUVVGSkxHMUNRVUZ0UWl4SFFVRkhMRTlCUVU4c1EwRkJReXg1UWtGQmVVSXNRMEZCUXp0SlFVTjRSQ3hoUVVGaExFZEJRVWNzVDBGQlR5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03TzBGQlJXaEVMRTFCUVUwc1EwRkJReXhQUVVGUExFZEJRVWNzVlVGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkxPMEZCUXk5Q0xGRkJRVWtzVlVGQlZTeEhRVUZITEVWQlFVVTdVVUZEWml4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTA3VVVGRGRrSXNUVUZCVFN4SFFVRkhMRzFDUVVGdFFpeERRVUZETEdGQlFXRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVOc1JDeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPenRCUVVWV0xGZEJRVThzUTBGQlF5eEhRVUZITEZGQlFWRXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOMFFpeHJRa0ZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVGQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExGTkJRVk1zUjBGQlNTeE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wdEJRM0JGT3p0QlFVVkVMRmRCUVU4c1ZVRkJWU3hEUVVGRE8wTkJRM0pDTEVOQlFVTWlMQ0ptYVd4bElqb2laMlYwTFdOdmJHOXlMWFpoYkhWbGN5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQnpjR3hwZEVOdmJXMWhSR1ZzYVcxcGRHVmtJRDBnY21WeGRXbHlaU2duTGk5emNHeHBkQzFqYjIxdFlTMWtaV3hwYldsMFpXUW5LU3hjYmlBZ0lDQm1kVzVqZEdsdmJrSnlaV0ZySUQwZ2NtVnhkV2x5WlNnbkxpOW1kVzVqZEdsdmJpMWljbVZoYXljcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJQ2gyWVd4MVpTd2dkR1Z5YlhNcElEMCtJSHRjYmlBZ0lDQjJZWElnYzNCc2FYUldZV3gxWlNBOUlIdDlMRnh1SUNBZ0lDQWdJQ0J1ZFcxVVpYSnRjeUE5SUhSbGNtMXpMbXhsYm1kMGFDeGNiaUFnSUNBZ0lDQWdZMjlzYjNKeklEMGdjM0JzYVhSRGIyMXRZVVJsYkdsdGFYUmxaQ2htZFc1amRHbHZia0p5WldGcktIWmhiSFZsS1Nrc1hHNGdJQ0FnSUNBZ0lHa2dQU0F3TzF4dVhHNGdJQ0FnWm05eUlDZzdJR2tnUENCdWRXMVVaWEp0Y3pzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhOd2JHbDBWbUZzZFdWYmRHVnliWE5iYVYxZElEMGdLR052Ykc5eWMxdHBYU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQS9JR052Ykc5eWMxdHBYU0E2SURFN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSE53YkdsMFZtRnNkV1U3WEc1OU95SmRmUT09XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy92YWx1ZS10eXBlcy9tYW5pcHVsYXRvcnMvZ2V0LWNvbG9yLXZhbHVlcy5qc1xuICoqIG1vZHVsZSBpZCA9IDIwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIHByZWZpeCkge1xuICByZXR1cm4gcHJlZml4ICsgXCIoXCIgKyB2YWx1ZSArIFwiKVwiO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVoxYm1OMGFXOXVMV055WldGMFpTNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFMUJRVTBzUTBGQlF5eFBRVUZQTEVkQlFVY3NWVUZCUXl4TFFVRkxMRVZCUVVVc1RVRkJUVHRUUVVGUkxFMUJRVTBzVTBGQlNTeExRVUZMTzBOQlFVY3NRMEZCUXlJc0ltWnBiR1VpT2lKbWRXNWpkR2x2YmkxamNtVmhkR1V1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlDaDJZV3gxWlN3Z2NISmxabWw0S1NBOVBpQmdKSHR3Y21WbWFYaDlLQ1I3ZG1Gc2RXVjlLV0E3SWwxOVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvdmFsdWUtdHlwZXMvbWFuaXB1bGF0b3JzL2Z1bmN0aW9uLWNyZWF0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDIxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNvbG9yOiB7XG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgbWF4OiAyNTUsXG4gICAgICAgIHJvdW5kOiB0cnVlXG4gICAgfSxcbiAgICBvcGFjaXR5OiB7XG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgbWF4OiAxXG4gICAgfSxcbiAgICBwZXJjZW50OiB7XG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgbWF4OiAxMDAsXG4gICAgICAgIHVuaXQ6ICclJ1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1SbFptRjFiSFF0Y0hKdmNITXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhPMEZCUTJJc1UwRkJTeXhGUVVGRk8wRkJRMGdzVjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEVGl4WFFVRkhMRVZCUVVVc1IwRkJSenRCUVVOU0xHRkJRVXNzUlVGQlJTeEpRVUZKTzB0QlEyUTdRVUZEUkN4WFFVRlBMRVZCUVVVN1FVRkRUQ3hYUVVGSExFVkJRVVVzUTBGQlF6dEJRVU5PTEZkQlFVY3NSVUZCUlN4RFFVRkRPMHRCUTFRN1FVRkRSQ3hYUVVGUExFVkJRVVU3UVVGRFRDeFhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTk9MRmRCUVVjc1JVRkJSU3hIUVVGSE8wRkJRMUlzV1VGQlNTeEZRVUZGTEVkQlFVYzdTMEZEV2p0RFFVTktMRU5CUVVNaUxDSm1hV3hsSWpvaVpHVm1ZWFZzZEMxd2NtOXdjeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0FnSUdOdmJHOXlPaUI3WEc0Z0lDQWdJQ0FnSUcxcGJqb2dNQ3hjYmlBZ0lDQWdJQ0FnYldGNE9pQXlOVFVzWEc0Z0lDQWdJQ0FnSUhKdmRXNWtPaUIwY25WbFhHNGdJQ0FnZlN4Y2JpQWdJQ0J2Y0dGamFYUjVPaUI3WEc0Z0lDQWdJQ0FnSUcxcGJqb2dNQ3hjYmlBZ0lDQWdJQ0FnYldGNE9pQXhYRzRnSUNBZ2ZTeGNiaUFnSUNCd1pYSmpaVzUwT2lCN1hHNGdJQ0FnSUNBZ0lHMXBiam9nTUN4Y2JpQWdJQ0FnSUNBZ2JXRjRPaUF4TURBc1hHNGdJQ0FnSUNBZ0lIVnVhWFE2SUNjbEoxeHVJQ0FnSUgxY2JuMDdYRzRpWFgwPVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvdmFsdWUtdHlwZXMvc2V0dGluZ3MvZGVmYXVsdC1wcm9wcy5qc1xuICoqIG1vZHVsZSBpZCA9IDIyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciBYID0gJ1gnLFxuICAgIFkgPSAnWScsXG4gICAgQUxQSEEgPSAnQWxwaGEnLFxuICAgIHRlcm1zID0ge1xuICAgIGNvbG9yczogWydSZWQnLCAnR3JlZW4nLCAnQmx1ZScsIEFMUEhBXSxcbiAgICBwb3NpdGlvbnM6IFtYLCBZLCAnWiddLFxuICAgIGRpbWVuc2lvbnM6IFsnVG9wJywgJ1JpZ2h0JywgJ0JvdHRvbScsICdMZWZ0J10sXG4gICAgc2hhZG93OiBbWCwgWSwgJ1JhZGl1cycsICdTcHJlYWQnLCAnQ29sb3InXSxcbiAgICBoc2w6IFsnSHVlJywgJ1NhdHVyYXRpb24nLCAnTGlnaHRuZXNzJywgQUxQSEFdXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRlcm1zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltUnBZM1JwYjI1aGNua3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhPMGxCUTFBc1EwRkJReXhIUVVGSExFZEJRVWM3U1VGRFVDeExRVUZMTEVkQlFVY3NUMEZCVHp0SlFVVm1MRXRCUVVzc1IwRkJSenRCUVVOS0xGVkJRVTBzUlVGQlJTeERRVUZETEV0QlFVc3NSVUZCUlN4UFFVRlBMRVZCUVVVc1RVRkJUU3hGUVVGRkxFdEJRVXNzUTBGQlF6dEJRVU4yUXl4aFFVRlRMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXp0QlFVTjBRaXhqUVVGVkxFVkJRVVVzUTBGQlF5eExRVUZMTEVWQlFVVXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hOUVVGTkxFTkJRVU03UVVGRE9VTXNWVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeFJRVUZSTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTlCUVU4c1EwRkJRenRCUVVNelF5eFBRVUZITEVWQlFVVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1dVRkJXU3hGUVVGRkxGZEJRVmNzUlVGQlJTeExRVUZMTEVOQlFVTTdRMEZEYWtRc1EwRkJRenM3UVVGRlRpeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJReUlzSW1acGJHVWlPaUprYVdOMGFXOXVZWEo1TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUZnZ1BTQW5XQ2NzWEc0Z0lDQWdXU0E5SUNkWkp5eGNiaUFnSUNCQlRGQklRU0E5SUNkQmJIQm9ZU2NzWEc1Y2JpQWdJQ0IwWlhKdGN5QTlJSHRjYmlBZ0lDQWdJQ0FnWTI5c2IzSnpPaUJiSjFKbFpDY3NJQ2RIY21WbGJpY3NJQ2RDYkhWbEp5d2dRVXhRU0VGZExGeHVJQ0FnSUNBZ0lDQndiM05wZEdsdmJuTTZJRnRZTENCWkxDQW5XaWRkTEZ4dUlDQWdJQ0FnSUNCa2FXMWxibk5wYjI1ek9pQmJKMVJ2Y0Njc0lDZFNhV2RvZENjc0lDZENiM1IwYjIwbkxDQW5UR1ZtZENkZExGeHVJQ0FnSUNBZ0lDQnphR0ZrYjNjNklGdFlMQ0JaTENBblVtRmthWFZ6Snl3Z0oxTndjbVZoWkNjc0lDZERiMnh2Y2lkZExGeHVJQ0FnSUNBZ0lDQm9jMnc2SUZzblNIVmxKeXdnSjFOaGRIVnlZWFJwYjI0bkxDQW5UR2xuYUhSdVpYTnpKeXdnUVV4UVNFRmRYRzRnSUNBZ2ZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0IwWlhKdGN6c2lYWDA9XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy92YWx1ZS10eXBlcy9zZXR0aW5ncy9kaWN0aW9uYXJ5LmpzXG4gKiogbW9kdWxlIGlkID0gMjNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzU3RyaW5nID0gcmVxdWlyZSgnLi4vLi4vaW5jL3V0aWxzJykuaXNTdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS5zcGxpdCgnICcpIDogW3ZhbHVlXTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5Od2JHbDBMWE53WVdObExXUmxiR2x0YVhSbFpDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFbEJRVTBzVVVGQlVTeEhRVUZITEU5QlFVOHNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXpzN1FVRkZja1FzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4VlFVRkJMRXRCUVVzN1UwRkJTU3hSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXp0RFFVRkJMRU5CUVVNaUxDSm1hV3hsSWpvaWMzQnNhWFF0YzNCaFkyVXRaR1ZzYVcxcGRHVmtMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVkyOXVjM1FnYVhOVGRISnBibWNnUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTlwYm1NdmRYUnBiSE1uS1M1cGMxTjBjbWx1Wnp0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjJZV3gxWlNBOVBpQnBjMU4wY21sdVp5aDJZV3gxWlNrZ1B5QjJZV3gxWlM1emNHeHBkQ2duSUNjcElEb2dXM1poYkhWbFhUc2lYWDA9XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy92YWx1ZS10eXBlcy9tYW5pcHVsYXRvcnMvc3BsaXQtc3BhY2UtZGVsaW1pdGVkLmpzXG4gKiogbW9kdWxlIGlkID0gMjRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVhY2ggPSByZXF1aXJlKCcuLi9pbmMvdXRpbHMnKS5lYWNoO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBleHRlbmQ6IGZ1bmN0aW9uICh0eXBlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGVhY2godHlwZXMsIGZ1bmN0aW9uIChuYW1lLCB0eXBlKSB7XG4gICAgICAgICAgICBfdGhpc1tuYW1lXSA9IHR5cGU7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBkZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICh0eXBlTmFtZSwga2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZVR5cGUgPSB0aGlzW3R5cGVOYW1lXSxcbiAgICAgICAgICAgIGRlZmF1bHRQcm9wcyA9IHZhbHVlVHlwZS5kZWZhdWx0UHJvcHMgPyB2YWx1ZVR5cGUuZGVmYXVsdFByb3BzW2tleV0gfHwgdmFsdWVUeXBlLmRlZmF1bHRQcm9wcyA6IHt9O1xuXG4gICAgICAgIHJldHVybiBkZWZhdWx0UHJvcHM7XG4gICAgfSxcblxuICAgIHRlc3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgdHlwZSA9IGZhbHNlO1xuXG4gICAgICAgIGVhY2godGhpcywgZnVuY3Rpb24gKGtleSwgdmFsdWVUeXBlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVUeXBlLnRlc3QgJiYgdmFsdWVUeXBlLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdHlwZSA9IGtleTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW0xaGJtRm5aWEl1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3hKUVVGTkxFbEJRVWtzUjBGQlJ5eFBRVUZQTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRE96dEJRVVV4UXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhIUVVGSE8wRkJRMklzVlVGQlRTeEZRVUZGTEZWQlFWVXNTMEZCU3l4RlFVRkZPenM3UVVGRGNrSXNXVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hWUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVczdRVUZEZUVJc2EwSkJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRPMU5CUTNKQ0xFTkJRVU1zUTBGQlF6dExRVU5PT3p0QlFVVkVMR2RDUVVGWkxFVkJRVVVzVlVGQlZTeFJRVUZSTEVWQlFVVXNSMEZCUnl4RlFVRkZPMEZCUTI1RExGbEJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNN1dVRkRNVUlzV1VGQldTeEhRVUZITEVGQlFVTXNVMEZCVXl4RFFVRkRMRmxCUVZrc1IwRkJTU3hUUVVGVExFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRk5CUVZNc1EwRkJReXhaUVVGWkxFZEJRVWNzUlVGQlJTeERRVUZET3p0QlFVVjZSeXhsUVVGUExGbEJRVmtzUTBGQlF6dExRVU4yUWpzN1FVRkZSQ3hSUVVGSkxFVkJRVVVzVlVGQlZTeExRVUZMTEVWQlFVVTdRVUZEYmtJc1dVRkJTU3hKUVVGSkxFZEJRVWNzUzBGQlN5eERRVUZET3p0QlFVVnFRaXhaUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEZWQlFVTXNSMEZCUnl4RlFVRkZMRk5CUVZNc1JVRkJTenRCUVVNelFpeG5Ra0ZCU1N4VFFVRlRMRU5CUVVNc1NVRkJTU3hKUVVGSkxGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1FVRkRla01zYjBKQlFVa3NSMEZCUnl4SFFVRkhMRU5CUVVNN1FVRkRXQ3gxUWtGQlR5eExRVUZMTEVOQlFVTTdZVUZEYUVJN1UwRkRTaXhEUVVGRExFTkJRVU03TzBGQlJVZ3NaVUZCVHl4SlFVRkpMRU5CUVVNN1MwRkRaanREUVVOS0xFTkJRVU1pTENKbWFXeGxJam9pYldGdVlXZGxjaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltTnZibk4wSUdWaFkyZ2dQU0J5WlhGMWFYSmxLQ2N1TGk5cGJtTXZkWFJwYkhNbktTNWxZV05vTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNiaUFnSUNCbGVIUmxibVE2SUdaMWJtTjBhVzl1SUNoMGVYQmxjeWtnZTF4dUlDQWdJQ0FnSUNCbFlXTm9LSFI1Y0dWekxDQW9ibUZ0WlN3Z2RIbHdaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGMxdHVZVzFsWFNBOUlIUjVjR1U3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCa1pXWmhkV3gwVUhKdmNITTZJR1oxYm1OMGFXOXVJQ2gwZVhCbFRtRnRaU3dnYTJWNUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCMllXeDFaVlI1Y0dVZ1BTQjBhR2x6VzNSNWNHVk9ZVzFsWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUlFjbTl3Y3lBOUlDaDJZV3gxWlZSNWNHVXVaR1ZtWVhWc2RGQnliM0J6S1NBL0lIWmhiSFZsVkhsd1pTNWtaV1poZFd4MFVISnZjSE5iYTJWNVhTQjhmQ0IyWVd4MVpWUjVjR1V1WkdWbVlYVnNkRkJ5YjNCeklEb2dlMzA3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSbFptRjFiSFJRY205d2N6dGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2RHVnpkRG9nWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQjBlWEJsSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0FnSUNBZ1pXRmphQ2gwYUdsekxDQW9hMlY1TENCMllXeDFaVlI1Y0dVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpWUjVjR1V1ZEdWemRDQW1KaUIyWVd4MVpWUjVjR1V1ZEdWemRDaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsSUQwZ2EyVjVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUjVjR1U3WEc0Z0lDQWdmVnh1ZlR0Y2JpSmRmUT09XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy92YWx1ZS10eXBlcy9tYW5hZ2VyLmpzXG4gKiogbW9kdWxlIGlkID0gMjVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUHJvY2VzcyA9IHJlcXVpcmUoJy4uL3Byb2Nlc3MvUHJvY2VzcycpLFxuICAgIFF1ZXVlID0gcmVxdWlyZSgnLi4vaW5jL1F1ZXVlJyksXG4gICAgdXRpbHMgPSByZXF1aXJlKCcuLi9pbmMvdXRpbHMnKSxcbiAgICBzZWxlY3QgPSByZXF1aXJlKCcuLi9pbmMvc2VsZWN0LWRvbScpLFxuICAgIHZhbHVlT3BzID0gcmVxdWlyZSgnLi92YWx1ZS1vcGVyYXRpb25zJyksXG5cbi8qXG4gICAgUHJvY2VzcyBtZXRob2RzXG4qL1xudXBkYXRlID0gcmVxdWlyZSgnLi91cGRhdGUnKSxcbiAgICByZW5kZXIgPSByZXF1aXJlKCcuL3JlbmRlcicpLFxuICAgIHBvc3RSZW5kZXIgPSByZXF1aXJlKCcuL3Bvc3QtcmVuZGVyJyksXG5cbi8qXG4gICAgUm9sZSBpbXBvcnRzXG4qL1xuZGVmYXVsdFJvbGUgPSByZXF1aXJlKCcuLi9yb2xlcy9kZWZhdWx0Um9sZScpLFxuICAgIGNzc1JvbGUgPSByZXF1aXJlKCcuLi9yb2xlcy9jc3MvY3NzUm9sZScpLFxuICAgIHN2Z1JvbGUgPSByZXF1aXJlKCcuLi9yb2xlcy9zdmcvc3ZnUm9sZScpLFxuICAgIGRyYXdQYXRoUm9sZSA9IHJlcXVpcmUoJy4uL3JvbGVzL3BhdGgvZHJhd1BhdGhSb2xlJyksXG4gICAgQWN0aW9uID0gcmVxdWlyZSgnLi4vYWN0aW9ucy9BY3Rpb24nKSxcbiAgICBlYWNoID0gdXRpbHMuZWFjaDtcblxudmFyIEFjdG9yID0gKGZ1bmN0aW9uICgpIHtcblxuICAgIC8qXG4gICAgICAgIEBwYXJhbSBbb2JqZWN0XVxuICAgICovXG5cbiAgICBmdW5jdGlvbiBBY3RvcigpIHtcbiAgICAgICAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWN0b3IpO1xuXG4gICAgICAgIHZhciBwcm9wcyA9IHV0aWxzLmlzU3RyaW5nKG9wdHMpID8geyBlbGVtZW50OiBvcHRzIH0gOiBvcHRzO1xuXG4gICAgICAgIHRoaXMudmFsdWVzID0ge307XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7IHZhbHVlczoge30gfTtcbiAgICAgICAgdGhpcy5xdWV1ZSA9IG5ldyBRdWV1ZSgpO1xuICAgICAgICB0aGlzLnByb2Nlc3MgPSBuZXcgUHJvY2Vzcyh7IHVwZGF0ZTogdXBkYXRlLCByZW5kZXI6IHJlbmRlciwgcG9zdFJlbmRlcjogcG9zdFJlbmRlciB9LCB0aGlzKTtcbiAgICAgICAgdGhpcy5hY3RpdmVBY3Rpb25zID0ge307XG4gICAgICAgIHRoaXMubnVtQWN0aXZlID0gMDtcbiAgICAgICAgdGhpcy5hY3Rpb25Db3VudGVyID0gMDtcbiAgICAgICAgdGhpcy5hY3RpdmVWYWx1ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5hY3RpdmVQYXJlbnRzID0gW107XG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBHZXQgYWN0dWFsIGVsZW1lbnRzIGlmIHRoaXMgaXMgYSBzZWxlY3RvclxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocHJvcHMuZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHByb3BzLmVsZW1lbnQgPSBzZWxlY3QocHJvcHMuZWxlbWVudClbMF07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFzc2lnblJvbGVzKHByb3BzLmVsZW1lbnQsIHByb3BzLmFzLCB0cnVlKTtcbiAgICAgICAgdGhpcy5zZXQocHJvcHMpO1xuICAgICAgICB0aGlzLmluaXRSb2xlcygpO1xuICAgICAgICB0aGlzLnN5bmMoKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgICBTZXQgQWN0b3IgcHJvcGVydGllcyBhbmQgdmFsdWVzXG4gICAgICAgICBAcGFyYW0gW29iamVjdF1cbiAgICAgICAgQHJldHVybnMgW0FjdG9yXVxuICAgICovXG5cbiAgICBBY3Rvci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0KG9wdHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBlYWNoKG9wdHMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoa2V5ICE9PSAndmFsdWVzJyAmJiBrZXkgIT09ICdhY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgX3RoaXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAob3B0cyAmJiBvcHRzLnZhbHVlcykge1xuICAgICAgICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZU9wcy5wcm9jZXNzKHRoaXMudmFsdWVzLCBvcHRzLnZhbHVlcywgb3B0cywgJ2N1cnJlbnQnLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGFsbCBhY3RpdmUgYWN0aW9ucyBmb3IgYW55IHRoYXQgY2FuIGJlIHJlbW92ZWRcbiAgICAgICAgZWFjaCh0aGlzLmFjdGl2ZUFjdGlvbnMsIGZ1bmN0aW9uIChpZCwgYWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgYWN0aW9uSXNBY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICAgICAgZWFjaChfdGhpcy52YWx1ZXMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uSXNBY3RpdmUgPSB2YWx1ZS5hY3Rpb24gPT09IGFjdGlvbiA/IHRydWUgOiBhY3Rpb25Jc0FjdGl2ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWFjdGlvbklzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudW5iaW5kQWN0aW9uKGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgIEJpbmQgQWN0aW9uLXNwZWNpZmljIGNvbnRyb2xzIHRvIEFjdG9yXG4gICAgICAgICBAcmV0dXJucyBbQ29udHJvbHNdXG4gICAgKi9cblxuICAgIEFjdG9yLnByb3RvdHlwZS5jb250cm9scyA9IGZ1bmN0aW9uIGNvbnRyb2xzKGFjdGlvbikge1xuICAgICAgICB2YXIgQ29udHJvbHMgPSBhY3Rpb24uZ2V0Q29udHJvbHMoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250cm9scyh0aGlzLCBhY3Rpb24uZ2V0UGxheWFibGUoKSk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgIFN0YXJ0IGEgbmV3IEFjdGlvblxuICAgICAgICAgQHBhcmFtIFtBY3Rpb24gfHwgbnVtYmVyXVxuICAgICAgICBAcGFyYW0gW0lucHV0IHx8IGV2ZW50XSAob3B0aW9uYWwpXG4gICAgICAgIEBwYXJhbSBbYm9vbGVhbl0gKG9wdGlvbmFsKTogZGVmaW5lZCBgdHJ1ZWAgaWYgd2Ugc3VycHJlc3MgbWFraW5nIG5ldyBxdWV1ZVxuICAgICAgICBAcmV0dXJucyBbQ29udHJvbHNdXG4gICAgKi9cblxuICAgIEFjdG9yLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIHN0YXJ0KHRvU2V0LCBpbnB1dCkge1xuICAgICAgICB2YXIgYWN0aW9uRXhpc3RzID0gdXRpbHMuaXNOdW0odG9TZXQpO1xuICAgICAgICB2YXIgYWN0aW9uID0gYWN0aW9uRXhpc3RzID8gdGhpcy5nZXRBY3Rpb24odG9TZXQpIDogdG9TZXQuZ2V0UGxheWFibGUoKTtcbiAgICAgICAgdmFyIG9wdHMgPSBhY3Rpb24uZ2V0U2V0KCk7XG4gICAgICAgIHZhciBzdXJwcmVzc1F1ZXVlQ2xlYXIgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdID09PSBmYWxzZTtcblxuICAgICAgICBvcHRzLmFjdGlvbiA9IGFjdGlvbjtcblxuICAgICAgICB0aGlzLnNldChvcHRzKTtcblxuICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICAgIGFjdGlvbi5iaW5kSW5wdXQoaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdXJwcmVzc1F1ZXVlQ2xlYXIpIHtcbiAgICAgICAgICAgIHRoaXMucXVldWUuY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcmUgYWxsIFJvbGUgb25TdGFydHMgaWYgbm90IGFscmVhZHkgYWN0aXZlXG4gICAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgdmFyIG51bVJvbGVzID0gdGhpcy5yb2xlcy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVJvbGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcm9sZSA9IHRoaXMucm9sZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHJvbGUuc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcm9sZS5zdGFydC5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcmUgbmV3IGFjdGlvbiBvblN0YXJ0XG4gICAgICAgIGlmICghYWN0aW9uLmlzQWN0aXZlICYmIGFjdGlvbi5vblN0YXJ0KSB7XG4gICAgICAgICAgICBhY3Rpb24ub25TdGFydCh0aGlzLCBhY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hY3RpdmF0ZSgpO1xuXG4gICAgICAgIGlmICghYWN0aW9uRXhpc3RzKSB7XG4gICAgICAgICAgICB2YXIgQ29udHJvbHMgPSBhY3Rpb24uZ2V0Q29udHJvbHMoKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29udHJvbHModGhpcywgYWN0aW9uLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKlxuICAgICAgICBQYXVzZSBhbGwgYWN0aXZlIEFjdGlvbnNcbiAgICAgICAgIEBwYXJhbSBbaW50XSAob3B0aW9uYWwpXG4gICAgICAgIEByZXR1cm5zIFtBY3Rvcl1cbiAgICAqL1xuXG4gICAgQWN0b3IucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgZWFjaCh0aGlzLmFjdGl2ZUFjdGlvbnMsIGZ1bmN0aW9uIChpZCwgYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucHJvY2Vzcy5zdG9wKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAgICBSZXN1bWUgYWxsIGFjdGl2ZSBBY3Rpb25zXG4gICAgICAgICBAcGFyYW0gW2ludF0gKG9wdGlvbmFsKVxuICAgICAgICBAcmV0dXJucyBbQWN0b3JdO1xuICAgICovXG5cbiAgICBBY3Rvci5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgICAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgZWFjaCh0aGlzLmFjdGl2ZUFjdGlvbnMsIGZ1bmN0aW9uIChpZCwgYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLmFjdGl2YXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnByb2Nlc3Muc3RhcnQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgIFN0b3AgYWxsIGFjdGl2ZSBBY3Rpb25zXG4gICAgICAgICBAcGFyYW0gW2ludF0gKG9wdGlvbmFsKVxuICAgICAgICBAcmV0dXJucyBbQWN0b3JdXG4gICAgKi9cblxuICAgIEFjdG9yLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICBlYWNoKHRoaXMuYWN0aXZlQWN0aW9ucywgZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLnVuYmluZEFjdGlvbihpZCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLypcbiAgICAgICAgVG9nZ2xlIGFsbCBhY3RpdmUgQWN0aW9uc1xuICAgICAgICAgQHBhcmFtIFtpbnRdIChvcHRpb25hbClcbiAgICAgICAgQHJldHVybnMgW0FjdG9yXVxuICAgICovXG5cbiAgICBBY3Rvci5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0FjdGl2ZSA/IHRoaXMucGF1c2UoKSA6IHRoaXMucmVzdW1lKCk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgIFN5bmNzIGBlbGVtZW50YCB3aXRoIGN1cnJlbnQgcHJvcGVydGllc1xuICAgICAgICAgQHJldHVybnMgW0FjdG9yXVxuICAgICovXG5cbiAgICBBY3Rvci5wcm90b3R5cGUuc3luYyA9IGZ1bmN0aW9uIHN5bmMoKSB7XG4gICAgICAgIHZhciBjdXJyZW50VmFsdWVzID0ge307XG5cbiAgICAgICAgdXRpbHMuZWFjaCh0aGlzLnZhbHVlcywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZXNba2V5XSA9IHZhbHVlLmN1cnJlbnQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc3RhcnQobmV3IEFjdGlvbih7IHZhbHVlczogY3VycmVudFZhbHVlcyB9KSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAgICBBZGQgYSBuZXcgQWN0aW9uIHRvIHRoZSBxdWV1ZVxuICAgICovXG5cbiAgICBBY3Rvci5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIHRoZW4oKSB7XG4gICAgICAgIHRoaXMucXVldWUuYWRkLmFwcGx5KHRoaXMucXVldWUsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAgICBFeGVjdXRlIG5leHQgaW4gcXVldWVcbiAgICAqL1xuXG4gICAgQWN0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICB2YXIgbmV4dCA9IHRoaXMucXVldWUubmV4dCgpO1xuXG4gICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICBpZiAodXRpbHMuaXNGdW5jKG5leHRbMF0pKSB7XG4gICAgICAgICAgICAgICAgbmV4dFswXSgpO1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgICAgIC8vIE9yIHRoaXMgaXMgYW4gYWN0aW9uXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXh0LnB1c2goZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0LmFwcGx5KHRoaXMsIG5leHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgIEFzc2lnbiBSb2xlcyBiYXNlZCBvbiBlbGVtZW50IGFuZCBtYW51YWxseSBwcm92aWRlZCBwcm9wc1xuICAgICAgICAgQHBhcmFtIFtvYmplY3RdOiBFbGVtZW50XG4gICAgICAgIEBwYXJhbSBbUm9sZSB8fCBhcnJheV1cbiAgICAgICAgQHBhcmFtIFtib29sZWFuXSAob3B0aW9uYWwpXG4gICAgKi9cblxuICAgIEFjdG9yLnByb3RvdHlwZS5hc3NpZ25Sb2xlcyA9IGZ1bmN0aW9uIGFzc2lnblJvbGVzKGVsZW1lbnQsIG1hbnVhbFJvbGVzLCBzdXJwcmVzc0luaXQpIHtcbiAgICAgICAgLy8gQWxsIEFjdG9ycyBnZXQgYSBkZWZhdWx0IFJvbGUgdGhhdCBoYW5kbGVzIHVzZXIgY2FsbGJhY2tzXG4gICAgICAgIHRoaXMucm9sZXMgPSBbZGVmYXVsdFJvbGVdO1xuXG4gICAgICAgIC8vIEF1dG8tYXNzaWduIGlmIG5vIG1hbnVhbGx5LXNldCBSb2xlc1xuICAgICAgICBpZiAoIW1hbnVhbFJvbGVzICYmIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuYXV0b0Fzc2lnblJvbGVzKGVsZW1lbnQpO1xuXG4gICAgICAgICAgICAvLyBPciBtYW51YWxseSBzZXQgaWYgcHJvdmlkZWRcbiAgICAgICAgfSBlbHNlIGlmIChtYW51YWxSb2xlcykge1xuICAgICAgICAgICAgICAgIGlmICh1dGlscy5pc0FycmF5KG1hbnVhbFJvbGVzKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvbGVzLnB1c2guYXBwbHkodGhpcy5yb2xlcywgbWFudWFsUm9sZXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9sZXMucHVzaChtYW51YWxSb2xlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIGlmICghc3VycHJlc3NJbml0KSB7XG4gICAgICAgICAgICB0aGlzLmluaXRSb2xlcygpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgIEF1dG9tYXRpY2FsbHkgYXNzaWduIFJvbGVzIGJhc2VkIG9uIGVsZW1lbnQsIGRlc2lnbmVkXG4gICAgICAgIHRvIGJlIGV4dGVuZGVkXG4gICAgICAgICBAcGFyYW0gW29iamVjdF06IEVsZW1lbnRcbiAgICAqL1xuXG4gICAgQWN0b3IucHJvdG90eXBlLmF1dG9Bc3NpZ25Sb2xlcyA9IGZ1bmN0aW9uIGF1dG9Bc3NpZ25Sb2xlcyhlbGVtZW50KSB7XG4gICAgICAgIC8vIEFkZCBDU1Mgcm9sZSBpZiBIVE1MRWxlbWVudFxuICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IGVsZW1lbnQudGFnTmFtZSA9PT0gJ3N2ZycpIHtcbiAgICAgICAgICAgIHRoaXMucm9sZXMucHVzaChjc3NSb2xlKTtcblxuICAgICAgICAgICAgLy8gQWRkIFNWRyByb2xlIGlmIFNWRyBlbGVtZW50XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvbGVzLnB1c2goc3ZnUm9sZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgRHJhdyBQYXRoIHJvbGUgaWYgcGF0aCBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudGFnTmFtZSA9PT0gJ3BhdGgnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9sZXMucHVzaChkcmF3UGF0aFJvbGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICB9O1xuXG4gICAgLypcbiAgICAgICAgRmlyZSBpbml0IGNhbGxiYWNrc1xuICAgICovXG5cbiAgICBBY3Rvci5wcm90b3R5cGUuaW5pdFJvbGVzID0gZnVuY3Rpb24gaW5pdFJvbGVzKCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAvLyBGaXJlIGluaXQgY2FsbGJhY2tcbiAgICAgICAgdGhpcy5yb2xlcy5mb3JFYWNoKGZ1bmN0aW9uIChyb2xlKSB7XG4gICAgICAgICAgICBpZiAocm9sZS5pbml0KSB7XG4gICAgICAgICAgICAgICAgcm9sZS5pbml0LmNhbGwoX3RoaXMzLCBfdGhpczMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgQWN0b3IucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmZpcnN0RnJhbWUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLypcbiAgICAgICAgQmluZCBBY3Rpb24gYW5kIHJldHVybiBpdHMgdGFibGUgaWRcbiAgICAgICAgIEBwYXJhbSBbQWN0aW9uXVxuICAgICAgICBAcmV0dXJucyBbaW50XVxuICAgICovXG5cbiAgICBBY3Rvci5wcm90b3R5cGUuYmluZEFjdGlvbiA9IGZ1bmN0aW9uIGJpbmRBY3Rpb24oYWN0aW9uLCBpZCkge1xuICAgICAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWQgPSB0aGlzLmFjdGlvbkNvdW50ZXIrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5oYXNBY3Rpb24oaWQpKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZUFjdGlvbnNbaWRdID0gYWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5udW1BY3RpdmUrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9O1xuXG4gICAgQWN0b3IucHJvdG90eXBlLnVuYmluZEFjdGlvbiA9IGZ1bmN0aW9uIHVuYmluZEFjdGlvbihpZCkge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmVBY3Rpb25zLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHRoaXMuYWN0aXZlQWN0aW9uc1tpZF07XG4gICAgICAgICAgICBpZiAoYWN0aW9uLmlucHV0ICYmIGFjdGlvbi5pbnB1dC5hdXRvU3RvcCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi5pbnB1dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3Rpb24uZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5udW1BY3RpdmUtLTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFjdGl2ZUFjdGlvbnNbaWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm51bUFjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIEFjdG9yLnByb3RvdHlwZS5nZXRBY3Rpb24gPSBmdW5jdGlvbiBnZXRBY3Rpb24oaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlQWN0aW9uc1tpZF07XG4gICAgfTtcblxuICAgIEFjdG9yLnByb3RvdHlwZS5oYXNBY3Rpb24gPSBmdW5jdGlvbiBoYXNBY3Rpb24oaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QWN0aW9uKGlkKSAhPT0gdW5kZWZpbmVkO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAgICBVcGRhdGUgcHJvY2Vzc2luZyBvcmRlclxuICAgICAgICBcbiAgICAgICAgQHBhcmFtIFtzdHJpbmddXG4gICAgICAgIEBwYXJhbSBbYm9vbGVhbl1cbiAgICAgICAgQHBhcmFtIFtib29sZWFuXVxuICAgICovXG5cbiAgICBBY3Rvci5wcm90b3R5cGUudXBkYXRlT3JkZXIgPSBmdW5jdGlvbiB1cGRhdGVPcmRlcihrZXksIG1vdmVUb0JhY2ssIGhhc0NoaWxkcmVuKSB7XG4gICAgICAgIHZhciBvcmRlciA9ICFoYXNDaGlsZHJlbiA/IHRoaXMuYWN0aXZlVmFsdWVzIDogdGhpcy5hY3RpdmVQYXJlbnRzLFxuICAgICAgICAgICAgcG9zaXRpb24gPSBvcmRlci5pbmRleE9mKGtleSk7XG5cbiAgICAgICAgLy8gSWYga2V5IGlzbid0IGxpc3Qgb3IgbW92ZVRvQmFjayBpcyBzZXQgdG8gdHJ1ZSwgYWRkIGtleVxuICAgICAgICBpZiAocG9zaXRpb24gPT09IC0xIHx8IG1vdmVUb0JhY2spIHtcbiAgICAgICAgICAgIG9yZGVyLnB1c2goa2V5KTtcblxuICAgICAgICAgICAgLy8gSWYga2V5IGFscmVhZHkgZXhpc3RzLCByZW1vdmVcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA+IC0xKSB7XG4gICAgICAgICAgICAgICAgb3JkZXIuc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBbYm9vbGVhbl06IElzIHRoaXMgQWN0b3IgYWN0aXZlP1xuXG4gICAgX2NyZWF0ZUNsYXNzKEFjdG9yLCBbe1xuICAgICAgICBrZXk6ICdpc0FjdGl2ZScsXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzQWN0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IGhhc0NoYW5nZWQgdG8gdHJ1ZSBpcyB0aGlzIGlzIG5vdyBhY3RpdmVcbiAgICAgICAgLFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc0NoYW5nZWQgPSBzdGF0dXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2lzQWN0aXZlID0gc3RhdHVzO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEFjdG9yO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBY3Rvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa0ZqZEc5eUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3p0QlFVRkJMRWxCUVVrc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eHZRa0ZCYjBJc1EwRkJRenRKUVVOMlF5eExRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRMR05CUVdNc1EwRkJRenRKUVVNdlFpeExRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRMR05CUVdNc1EwRkJRenRKUVVNdlFpeE5RVUZOTEVkQlFVY3NUMEZCVHl4RFFVRkRMRzFDUVVGdFFpeERRVUZETzBsQlEzSkRMRkZCUVZFc1IwRkJSeXhQUVVGUExFTkJRVU1zYjBKQlFXOUNMRU5CUVVNN096czdPMEZCUzNoRExFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRPMGxCUXpWQ0xFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRPMGxCUXpWQ0xGVkJRVlVzUjBGQlJ5eFBRVUZQTEVOQlFVTXNaVUZCWlN4RFFVRkRPenM3T3p0QlFVdHlReXhYUVVGWExFZEJRVWNzVDBGQlR5eERRVUZETEhOQ1FVRnpRaXhEUVVGRE8wbEJRemRETEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTTdTVUZEZWtNc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eHpRa0ZCYzBJc1EwRkJRenRKUVVONlF5eFpRVUZaTEVkQlFVY3NUMEZCVHl4RFFVRkRMRFJDUVVFMFFpeERRVUZETzBsQlJYQkVMRTFCUVUwc1IwRkJSeXhQUVVGUExFTkJRVU1zYlVKQlFXMUNMRU5CUVVNN1NVRkRja01zU1VGQlNTeEhRVUZITEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNN08wbEJSV2hDTEV0QlFVczdPenM3T3p0QlFVdFFMR0ZCVEVVc1MwRkJTeXhIUVV0blFqdFpRVUZZTEVsQlFVa3NlVVJCUVVjc1JVRkJSVHM3T0VKQlRHNUNMRXRCUVVzN08wRkJUVWdzV1VGQlNTeExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEU5QlFVOHNSVUZCUlN4SlFVRkpMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU03TzBGQlJUVkVMRmxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEycENMRmxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUlVGQlJTeE5RVUZOTEVWQlFVVXNSVUZCUlN4RlFVRkZMRU5CUVVNN1FVRkROVUlzV1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRXRCUVVzc1JVRkJSU3hEUVVGRE8wRkJRM3BDTEZsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hQUVVGUExFTkJRVU1zUlVGQlJTeE5RVUZOTEVWQlFVNHNUVUZCVFN4RlFVRkZMRTFCUVUwc1JVRkJUaXhOUVVGTkxFVkJRVVVzVlVGQlZTeEZRVUZXTEZWQlFWVXNSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMnBGTEZsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRM2hDTEZsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMjVDTEZsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRM1pDTEZsQlFVa3NRMEZCUXl4WlFVRlpMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRM1pDTEZsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRM2hDTEZsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1MwRkJTenM3TzBGQlFVTXNRVUZIZEVJc1dVRkJTU3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSVHRCUVVNdlFpeHBRa0ZCU3l4RFFVRkRMRTlCUVU4c1IwRkJSeXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRelZET3p0QlFVVkVMRmxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1JVRkJSU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEyaEVMRmxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEYUVJc1dVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETzBGQlEycENMRmxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dExRVU5tT3pzN096czdPMEZCUVVFN1FVRTFRa01zVTBGQlN5eFhRVzlEVUN4SFFVRkhMR2RDUVVGRExFbEJRVWtzUlVGQlJUczdPMEZCUTA0c1dVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeFZRVUZETEVkQlFVY3NSVUZCUlN4TFFVRkxMRVZCUVVzN1FVRkRka0lzWjBKQlFVa3NSMEZCUnl4TFFVRkxMRkZCUVZFc1NVRkJTU3hIUVVGSExFdEJRVXNzVVVGQlVTeEZRVUZGTzBGQlEzUkRMSE5DUVVGTExFZEJRVWNzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXp0aFFVTnlRanRUUVVOS0xFTkJRVU1zUTBGQlF6czdRVUZGU0N4WlFVRkpMRWxCUVVrc1NVRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlEzSkNMR2RDUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWxCUVVrc1JVRkJSU3hUUVVGVExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVMEZEYmtZN096dEJRVUZCTEVGQlIwUXNXVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRVVVzVlVGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RlFVRkxPMEZCUTNKRExHZENRVUZKTEdOQlFXTXNSMEZCUnl4TFFVRkxMRU5CUVVNN08wRkJSVE5DTEdkQ1FVRkpMRU5CUVVNc1RVRkJTeXhOUVVGTkxFVkJRVVVzVlVGQlF5eEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkxPMEZCUXpsQ0xEaENRVUZqTEVkQlFVY3NRVUZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hMUVVGTExFMUJRVTBzUjBGQlNTeEpRVUZKTEVkQlFVY3NZMEZCWXl4RFFVRkRPMkZCUTNSRkxFTkJRVU1zUTBGQlF6czdRVUZGU0N4blFrRkJTU3hEUVVGRExHTkJRV01zUlVGQlJUdEJRVU5xUWl4elFrRkJTeXhaUVVGWkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdZVUZEZWtJN1UwRkRTaXhEUVVGRExFTkJRVU03TzBGQlJVZ3NaVUZCVHl4SlFVRkpMRU5CUVVNN1MwRkRaanM3T3pzN096dEJRVGRFUXl4VFFVRkxMRmRCYjBWUUxGRkJRVkVzY1VKQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTJJc1dVRkJUU3hSUVVGUkxFZEJRVWNzVFVGQlRTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRPMEZCUTNSRExHVkJRVThzU1VGQlNTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTFCUVUwc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF5eERRVUZETzB0QlEyNUVPenM3T3pzN096czdPMEZCZGtWRExGTkJRVXNzVjBGcFJsQXNTMEZCU3l4clFrRkJReXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTzBGQlEyaENMRmxCUVVrc1dVRkJXU3hIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRkRU1zV1VGQlNTeE5RVUZOTEVkQlFVY3NRVUZCUXl4WlFVRlpMRWRCUVVrc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU03UVVGRE1VVXNXVUZCU1N4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETzBGQlF6TkNMRmxCUVVrc2EwSkJRV3RDTEVkQlFVa3NVMEZCVXl4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEV0QlFVc3NTMEZCU3l4QlFVRkRMRU5CUVVNN08wRkJSWEpGTEZsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRE96dEJRVVZ5UWl4WlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZET3p0QlFVVm1MRmxCUVVrc1MwRkJTeXhGUVVGRk8wRkJRMUFzYTBKQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGRE0wSTdPMEZCUlVRc1dVRkJTU3hEUVVGRExHdENRVUZyUWl4RlFVRkZPMEZCUTNKQ0xHZENRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8xTkJRM1JDT3pzN1FVRkJRU3hCUVVkRUxGbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMEZCUTJoQ0xHZENRVUZKTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU5xUXl4cFFrRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRkZCUVZFc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU12UWl4dlFrRkJTU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVONlFpeHZRa0ZCU1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJRMW9zZDBKQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0cFFrRkRMMEk3WVVGRFNqdFRRVU5LT3pzN1FVRkJRU3hCUVVkRUxGbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4SlFVRkpMRTFCUVUwc1EwRkJReXhQUVVGUExFVkJRVVU3UVVGRGNFTXNhMEpCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMU5CUTJoRE96dEJRVVZFTEZsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenM3UVVGRmFFSXNXVUZCU1N4RFFVRkRMRmxCUVZrc1JVRkJSVHRCUVVObUxHZENRVUZKTEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU03UVVGRGNFTXNiVUpCUVU4c1NVRkJTU3hSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRUUVVNelF6dExRVU5LT3pzN096czdPenRCUVhwSVF5eFRRVUZMTEZkQmFVbFFMRXRCUVVzc2IwSkJRVWM3UVVGRFNpeFpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRXRCUVVzc1EwRkJRenRCUVVOMFFpeFpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1JVRkJSU3hWUVVGRExFVkJRVVVzUlVGQlJTeE5RVUZOTzIxQ1FVRkxMRTFCUVUwc1EwRkJReXhWUVVGVkxFVkJRVVU3VTBGQlFTeERRVUZETEVOQlFVTTdRVUZET1VRc1dVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0QlFVTndRaXhsUVVGUExFbEJRVWtzUTBGQlF6dExRVU5tT3pzN096czdPenRCUVhSSlF5eFRRVUZMTEZkQk9FbFFMRTFCUVUwc2NVSkJRVWM3UVVGRFRDeFpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVOeVFpeFpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1JVRkJSU3hWUVVGRExFVkJRVVVzUlVGQlJTeE5RVUZOTzIxQ1FVRkxMRTFCUVUwc1EwRkJReXhSUVVGUkxFVkJRVVU3VTBGQlFTeERRVUZETEVOQlFVTTdRVUZETlVRc1dVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0QlFVTnlRaXhsUVVGUExFbEJRVWtzUTBGQlF6dExRVU5tT3pzN096czdPenRCUVc1S1F5eFRRVUZMTEZkQk1rcFFMRWxCUVVrc2JVSkJRVWM3T3p0QlFVTklMRmxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dEJRVU5pTEZsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hGUVVGRkxGVkJRVU1zUlVGQlJUdHRRa0ZCU3l4UFFVRkxMRmxCUVZrc1EwRkJReXhGUVVGRkxFTkJRVU03VTBGQlFTeERRVUZETEVOQlFVTTdRVUZEZUVRc1pVRkJUeXhKUVVGSkxFTkJRVU03UzBGRFpqczdPenM3T3pzN1FVRXZTa01zVTBGQlN5eFhRWFZMVUN4TlFVRk5MSEZDUVVGSE8wRkJRMHdzWlVGQlR5eEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN1MwRkRka1E3T3pzN096czdRVUY2UzBNc1UwRkJTeXhYUVdkTVVDeEpRVUZKTEcxQ1FVRkhPMEZCUTBnc1dVRkJUU3hoUVVGaExFZEJRVWNzUlVGQlJTeERRVUZET3p0QlFVVjZRaXhoUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1ZVRkJReXhIUVVGSExFVkJRVVVzUzBGQlN5eEZRVUZMTzBGQlEzQkRMSGxDUVVGaExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJRenRUUVVOMFF5eERRVUZETEVOQlFVTTdPMEZCUlVnc1dVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEUxQlFVMHNRMEZCUXl4RlFVRkZMRTFCUVUwc1JVRkJSU3hoUVVGaExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEYkVRc1pVRkJUeXhKUVVGSkxFTkJRVU03UzBGRFpqczdPenM3TzBGQmVreERMRk5CUVVzc1YwRTRURkFzU1VGQlNTeHRRa0ZCUnp0QlFVTklMRmxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzBGQlF6VkRMR1ZCUVU4c1NVRkJTU3hEUVVGRE8wdEJRMlk3T3pzN096dEJRV3BOUXl4VFFVRkxMRmRCYzAxUUxFbEJRVWtzYlVKQlFVYzdRVUZEU0N4WlFVRkpMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPenRCUVVVM1FpeFpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTk9MR2RDUVVGSkxFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGRGRrSXNiMEpCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETzBGQlExWXNiMEpCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVU3TzBGQlFVTXNZVUZGWml4TlFVRk5PMEZCUTBnc2QwSkJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRha0lzZDBKQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0cFFrRkRhRU03VTBGRFNpeE5RVUZOTzBGQlEwZ3NaMEpCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dFRRVU5tT3p0QlFVVkVMR1ZCUVU4c1NVRkJTU3hEUVVGRE8wdEJRMlk3T3pzN096czdPenRCUVhaT1F5eFRRVUZMTEZkQlowOVFMRmRCUVZjc2QwSkJRVU1zVDBGQlR5eEZRVUZGTEZkQlFWY3NSVUZCUlN4WlFVRlpMRVZCUVVVN08wRkJSVFZETEZsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1EwRkJSU3hYUVVGWExFTkJRVVU3T3p0QlFVRkRMRUZCUnpkQ0xGbEJRVWtzUTBGQlF5eFhRVUZYTEVsQlFVa3NUMEZCVHl4RlFVRkZPMEZCUTNwQ0xHZENRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRTlCUVU4c1EwRkJRenM3TzBGQlFVTXNVMEZIYWtNc1RVRkJUU3hKUVVGSkxGZEJRVmNzUlVGQlJUdEJRVU53UWl4dlFrRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUXl4RlFVRkZPMEZCUXpWQ0xIZENRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRenRwUWtGRGJFUXNUVUZCVFR0QlFVTklMSGRDUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRwUWtGRGFFTTdZVUZEU2pzN1FVRkZSQ3haUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTzBGQlEyWXNaMEpCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF6dFRRVU53UWp0TFFVTktPenM3T3pzN096dEJRWEJRUXl4VFFVRkxMRmRCTkZCUUxHVkJRV1VzTkVKQlFVTXNUMEZCVHl4RlFVRkZPenRCUVVWeVFpeFpRVUZKTEU5QlFVOHNXVUZCV1N4WFFVRlhMRWxCUVVrc1QwRkJUeXhEUVVGRExFOUJRVThzUzBGQlN5eExRVUZMTEVWQlFVVTdRVUZETjBRc1owSkJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJRenM3TzBGQlFVTXNVMEZITlVJc1RVRkJUU3hKUVVGSkxFOUJRVThzV1VGQldTeFZRVUZWTEVWQlFVVTdRVUZEZEVNc2IwSkJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJRenM3TzBGQlFVTXNRVUZIZWtJc2IwSkJRVWtzVDBGQlR5eERRVUZETEU5QlFVOHNTMEZCU3l4TlFVRk5MRVZCUVVVN1FVRkROVUlzZDBKQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzJsQ1FVTnFRenRoUVVOS08wdEJRMG83T3pzN096dEJRVEZSUXl4VFFVRkxMRmRCSzFGUUxGTkJRVk1zZDBKQlFVYzdPenM3UVVGRlVpeFpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGRExFbEJRVWtzUlVGQlN6dEJRVU42UWl4blFrRkJTU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTzBGQlExZ3NiMEpCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeG5Ra0ZCV1N4RFFVRkRPMkZCUXpsQ08xTkJRMG9zUTBGQlF5eERRVUZETzB0QlEwNDdPMEZCZEZKRExGTkJRVXNzVjBGM1VsQXNVVUZCVVN4MVFrRkJSenRCUVVOUUxGbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMEZCUTJoQ0xHZENRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVOeVFpeG5Ra0ZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGRrSXNaMEpCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdVMEZEZUVJN1MwRkRTanM3T3pzN096czdRVUU1VWtNc1UwRkJTeXhYUVhOVFVDeFZRVUZWTEhWQ1FVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRkxFVkJRVVU3UVVGRGJrSXNXVUZCU1N4RlFVRkZMRXRCUVVzc1UwRkJVeXhGUVVGRk8wRkJRMnhDTEdOQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJZU3hGUVVGRkxFTkJRVU03VTBGRE4wSTdPMEZCUlVRc1dVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVN1FVRkRja0lzWjBKQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETzBGQlEyaERMR2RDUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTTdVMEZEY0VJN08wRkJSVVFzWlVGQlR5eEZRVUZGTEVOQlFVTTdTMEZEWWpzN1FVRnFWRU1zVTBGQlN5eFhRVzFVVUN4WlFVRlpMSGxDUVVGRExFVkJRVVVzUlVGQlJUdEJRVU5pTEZsQlFVa3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhqUVVGakxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVTdRVUZEZGtNc1owSkJRVWtzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGNFTXNaMEpCUVVrc1RVRkJUU3hEUVVGRExFdEJRVXNzU1VGQlNTeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1MwRkJTeXhKUVVGSkxFVkJRVVU3UVVGRGFFUXNjMEpCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdZVUZEZGtJN1FVRkRSQ3hyUWtGQlRTeERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRPMEZCUTNCQ0xHZENRVUZKTEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNN1FVRkRha0lzYlVKQlFVOHNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFRRVU5xUXpzN1FVRkZSQ3haUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlR0QlFVTnFRaXhuUWtGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMU5CUTJoQ08wdEJRMG83TzBGQmFsVkRMRk5CUVVzc1YwRnRWVkFzVTBGQlV5eHpRa0ZCUXl4RlFVRkZMRVZCUVVVN1FVRkRWaXhsUVVGUExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1MwRkRha003TzBGQmNsVkRMRk5CUVVzc1YwRjFWVkFzVTBGQlV5eHpRa0ZCUXl4RlFVRkZMRVZCUVVVN1FVRkRWaXhsUVVGUkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSVUZCUlN4RFFVRkRMRXRCUVVzc1UwRkJVeXhEUVVGRk8wdEJRemRET3pzN096czdPenM3TzBGQmVsVkRMRk5CUVVzc1YwRnJWbEFzVjBGQlZ5eDNRa0ZCUXl4SFFVRkhMRVZCUVVVc1ZVRkJWU3hGUVVGRkxGZEJRVmNzUlVGQlJUdEJRVU4wUXl4WlFVRkpMRXRCUVVzc1IwRkJSeXhCUVVGRExFTkJRVU1zVjBGQlZ5eEhRVUZKTEVsQlFVa3NRMEZCUXl4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExHRkJRV0U3V1VGREwwUXNVVUZCVVN4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZET3pzN1FVRkJReXhCUVVkc1F5eFpRVUZKTEZGQlFWRXNTMEZCU3l4RFFVRkRMRU5CUVVNc1NVRkJTU3hWUVVGVkxFVkJRVVU3UVVGREwwSXNhVUpCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZET3pzN1FVRkJReXhCUVVkb1FpeG5Ra0ZCU1N4UlFVRlJMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGRFppeHhRa0ZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdZVUZETjBJN1UwRkRTanRMUVVOS096czdPMmxDUVM5V1F5eExRVUZMT3p0NVFrRnJWMUU3UVVGRFdDeHRRa0ZCVHl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRE8xTkJRM3BDT3pzN08zVkNRVWRaTEUxQlFVMHNSVUZCUlR0QlFVTnFRaXhuUWtGQlNTeE5RVUZOTEV0QlFVc3NTVUZCU1N4RlFVRkZPMEZCUTJwQ0xHOUNRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRTFCUVUwc1EwRkJRenRoUVVNMVFqczdRVUZGUkN4blFrRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eE5RVUZOTEVOQlFVTTdVMEZETTBJN096dFhRVGRYUXl4TFFVRkxPenM3UVVGbldGZ3NUVUZCVFN4RFFVRkRMRTlCUVU4c1IwRkJSeXhMUVVGTExFTkJRVU1pTENKbWFXeGxJam9pUVdOMGIzSXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdVSEp2WTJWemN5QTlJSEpsY1hWcGNtVW9KeTR1TDNCeWIyTmxjM012VUhKdlkyVnpjeWNwTEZ4dUlDQWdJRkYxWlhWbElEMGdjbVZ4ZFdseVpTZ25MaTR2YVc1akwxRjFaWFZsSnlrc1hHNGdJQ0FnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1TGk5cGJtTXZkWFJwYkhNbktTeGNiaUFnSUNCelpXeGxZM1FnUFNCeVpYRjFhWEpsS0NjdUxpOXBibU12YzJWc1pXTjBMV1J2YlNjcExGeHVJQ0FnSUhaaGJIVmxUM0J6SUQwZ2NtVnhkV2x5WlNnbkxpOTJZV3gxWlMxdmNHVnlZWFJwYjI1ekp5a3NYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQWdJQ0JRY205alpYTnpJRzFsZEdodlpITmNiaUFnSUNBcUwxeHVJQ0FnSUhWd1pHRjBaU0E5SUhKbGNYVnBjbVVvSnk0dmRYQmtZWFJsSnlrc1hHNGdJQ0FnY21WdVpHVnlJRDBnY21WeGRXbHlaU2duTGk5eVpXNWtaWEluS1N4Y2JpQWdJQ0J3YjNOMFVtVnVaR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOXdiM04wTFhKbGJtUmxjaWNwTEZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ1VtOXNaU0JwYlhCdmNuUnpYRzRnSUNBZ0tpOWNiaUFnSUNCa1pXWmhkV3gwVW05c1pTQTlJSEpsY1hWcGNtVW9KeTR1TDNKdmJHVnpMMlJsWm1GMWJIUlNiMnhsSnlrc1hHNGdJQ0FnWTNOelVtOXNaU0E5SUhKbGNYVnBjbVVvSnk0dUwzSnZiR1Z6TDJOemN5OWpjM05TYjJ4bEp5a3NYRzRnSUNBZ2MzWm5VbTlzWlNBOUlISmxjWFZwY21Vb0p5NHVMM0p2YkdWekwzTjJaeTl6ZG1kU2IyeGxKeWtzWEc0Z0lDQWdaSEpoZDFCaGRHaFNiMnhsSUQwZ2NtVnhkV2x5WlNnbkxpNHZjbTlzWlhNdmNHRjBhQzlrY21GM1VHRjBhRkp2YkdVbktTeGNibHh1SUNBZ0lFRmpkR2x2YmlBOUlISmxjWFZwY21Vb0p5NHVMMkZqZEdsdmJuTXZRV04wYVc5dUp5a3NYRzRnSUNBZ1pXRmphQ0E5SUhWMGFXeHpMbVZoWTJnN1hHNWNibU5zWVhOeklFRmpkRzl5SUh0Y2JseHVJQ0FnSUM4cVhHNGdJQ0FnSUNBZ0lFQndZWEpoYlNCYmIySnFaV04wWFZ4dUlDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYjNCMGN5QTlJSHQ5S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J3Y205d2N5QTlJSFYwYVd4ekxtbHpVM1J5YVc1bktHOXdkSE1wSUQ4Z2V5QmxiR1Z0Wlc1ME9pQnZjSFJ6SUgwZ09pQnZjSFJ6TzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2RXVnpJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSaGRHVWdQU0I3SUhaaGJIVmxjem9nZTMwZ2ZUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eGRXVjFaU0E5SUc1bGR5QlJkV1YxWlNncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIyTmxjM01nUFNCdVpYY2dVSEp2WTJWemN5aDdJSFZ3WkdGMFpTd2djbVZ1WkdWeUxDQndiM04wVW1WdVpHVnlJSDBzSUhSb2FYTXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtRmpkR2wyWlVGamRHbHZibk1nUFNCN2ZUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dWRXMUJZM1JwZG1VZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtRmpkR2x2YmtOdmRXNTBaWElnUFNBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GamRHbDJaVlpoYkhWbGN5QTlJRnRkTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbUZqZEdsMlpWQmhjbVZ1ZEhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXBjMEZqZEdsMlpTQTlJR1poYkhObE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUVkbGRDQmhZM1IxWVd3Z1pXeGxiV1Z1ZEhNZ2FXWWdkR2hwY3lCcGN5QmhJSE5sYkdWamRHOXlYRzRnSUNBZ0lDQWdJR2xtSUNoMWRHbHNjeTVwYzFOMGNtbHVaeWh3Y205d2N5NWxiR1Z0Wlc1MEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZjSE11Wld4bGJXVnVkQ0E5SUhObGJHVmpkQ2h3Y205d2N5NWxiR1Z0Wlc1MEtWc3dYVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WVhOemFXZHVVbTlzWlhNb2NISnZjSE11Wld4bGJXVnVkQ3dnY0hKdmNITXVZWE1zSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkQ2h3Y205d2N5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFXNXBkRkp2YkdWektDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzbHVZeWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxWEc0Z0lDQWdJQ0FnSUZObGRDQkJZM1J2Y2lCd2NtOXdaWEowYVdWeklHRnVaQ0IyWVd4MVpYTmNibHh1SUNBZ0lDQWdJQ0JBY0dGeVlXMGdXMjlpYW1WamRGMWNiaUFnSUNBZ0lDQWdRSEpsZEhWeWJuTWdXMEZqZEc5eVhWeHVJQ0FnSUNvdlhHNGdJQ0FnYzJWMEtHOXdkSE1wSUh0Y2JpQWdJQ0FnSUNBZ1pXRmphQ2h2Y0hSekxDQW9hMlY1TENCMllXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHdGxlU0FoUFQwZ0ozWmhiSFZsY3ljZ0ppWWdhMlY1SUNFOVBTQW5ZV04wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhOYmEyVjVYU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9iM0IwY3lBbUppQnZjSFJ6TG5aaGJIVmxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MllXeDFaWE1nUFNCMllXeDFaVTl3Y3k1d2NtOWpaWE56S0hSb2FYTXVkbUZzZFdWekxDQnZjSFJ6TG5aaGJIVmxjeXdnYjNCMGN5d2dKMk4xY25KbGJuUW5MQ0IwYUdsektUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklFTm9aV05ySUdGc2JDQmhZM1JwZG1VZ1lXTjBhVzl1Y3lCbWIzSWdZVzU1SUhSb1lYUWdZMkZ1SUdKbElISmxiVzkyWldSY2JpQWdJQ0FnSUNBZ1pXRmphQ2gwYUdsekxtRmpkR2wyWlVGamRHbHZibk1zSUNocFpDd2dZV04wYVc5dUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWVdOMGFXOXVTWE5CWTNScGRtVWdQU0JtWVd4elpUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXRmphQ2gwYUdsekxuWmhiSFZsY3l3Z0tHdGxlU3dnZG1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFkzUnBiMjVKYzBGamRHbDJaU0E5SUNoMllXeDFaUzVoWTNScGIyNGdQVDA5SUdGamRHbHZiaWtnUHlCMGNuVmxJRG9nWVdOMGFXOXVTWE5CWTNScGRtVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZoWTNScGIyNUpjMEZqZEdsMlpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRXNWlhVzVrUVdOMGFXOXVLR2xrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdJQ0FnUW1sdVpDQkJZM1JwYjI0dGMzQmxZMmxtYVdNZ1kyOXVkSEp2YkhNZ2RHOGdRV04wYjNKY2JseHVJQ0FnSUNBZ0lDQkFjbVYwZFhKdWN5QmJRMjl1ZEhKdmJITmRYRzRnSUNBZ0tpOWNiaUFnSUNCamIyNTBjbTlzY3loaFkzUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnUTI5dWRISnZiSE1nUFNCaFkzUnBiMjR1WjJWMFEyOXVkSEp2YkhNb0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJEYjI1MGNtOXNjeWgwYUdsekxDQmhZM1JwYjI0dVoyVjBVR3hoZVdGaWJHVW9LU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdJQ0FnVTNSaGNuUWdZU0J1WlhjZ1FXTjBhVzl1WEc1Y2JpQWdJQ0FnSUNBZ1FIQmhjbUZ0SUZ0QlkzUnBiMjRnZkh3Z2JuVnRZbVZ5WFZ4dUlDQWdJQ0FnSUNCQWNHRnlZVzBnVzBsdWNIVjBJSHg4SUdWMlpXNTBYU0FvYjNCMGFXOXVZV3dwWEc0Z0lDQWdJQ0FnSUVCd1lYSmhiU0JiWW05dmJHVmhibDBnS0c5d2RHbHZibUZzS1RvZ1pHVm1hVzVsWkNCZ2RISjFaV0FnYVdZZ2QyVWdjM1Z5Y0hKbGMzTWdiV0ZyYVc1bklHNWxkeUJ4ZFdWMVpWeHVJQ0FnSUNBZ0lDQkFjbVYwZFhKdWN5QmJRMjl1ZEhKdmJITmRYRzRnSUNBZ0tpOWNiaUFnSUNCemRHRnlkQ2gwYjFObGRDd2dhVzV3ZFhRcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUdGamRHbHZia1Y0YVhOMGN5QTlJSFYwYVd4ekxtbHpUblZ0S0hSdlUyVjBLVHRjYmlBZ0lDQWdJQ0FnYkdWMElHRmpkR2x2YmlBOUlDaGhZM1JwYjI1RmVHbHpkSE1wSUQ4Z2RHaHBjeTVuWlhSQlkzUnBiMjRvZEc5VFpYUXBJRG9nZEc5VFpYUXVaMlYwVUd4aGVXRmliR1VvS1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJRzl3ZEhNZ1BTQmhZM1JwYjI0dVoyVjBVMlYwS0NrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J6ZFhKd2NtVnpjMUYxWlhWbFEyeGxZWElnUFNBb1lYSm5kVzFsYm5SelcyRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ0xTQXhYU0E5UFQwZ1ptRnNjMlVwTzF4dVhHNGdJQ0FnSUNBZ0lHOXdkSE11WVdOMGFXOXVJRDBnWVdOMGFXOXVPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwS0c5d2RITXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHBibkIxZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdOMGFXOXVMbUpwYm1SSmJuQjFkQ2hwYm5CMWRDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9JWE4xY25CeVpYTnpVWFZsZFdWRGJHVmhjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eGRXVjFaUzVqYkdWaGNpZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdSbWx5WlNCaGJHd2dVbTlzWlNCdmJsTjBZWEowY3lCcFppQnViM1FnWVd4eVpXRmtlU0JoWTNScGRtVmNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbWx6UVdOMGFYWmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYm5WdFVtOXNaWE1nUFNCMGFHbHpMbkp2YkdWekxteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYm5WdFVtOXNaWE03SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeWIyeGxJRDBnZEdocGN5NXliMnhsYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY205c1pTNXpkR0Z5ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjJ4bExuTjBZWEowTG1OaGJHd29kR2hwY3l3Z2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdSbWx5WlNCdVpYY2dZV04wYVc5dUlHOXVVM1JoY25SY2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZoWTNScGIyNHVhWE5CWTNScGRtVWdKaVlnWVdOMGFXOXVMbTl1VTNSaGNuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmpkR2x2Ymk1dmJsTjBZWEowS0hSb2FYTXNJR0ZqZEdsdmJpazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbUZqZEdsMllYUmxLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZoWTNScGIyNUZlR2x6ZEhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQkRiMjUwY205c2N5QTlJR0ZqZEdsdmJpNW5aWFJEYjI1MGNtOXNjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJEYjI1MGNtOXNjeWgwYUdsekxDQmhZM1JwYjI0c0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ1VHRjFjMlVnWVd4c0lHRmpkR2wyWlNCQlkzUnBiMjV6WEc1Y2JpQWdJQ0FnSUNBZ1FIQmhjbUZ0SUZ0cGJuUmRJQ2h2Y0hScGIyNWhiQ2xjYmlBZ0lDQWdJQ0FnUUhKbGRIVnlibk1nVzBGamRHOXlYVnh1SUNBZ0lDb3ZYRzRnSUNBZ2NHRjFjMlVvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YVhOQlkzUnBkbVVnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnWldGamFDaDBhR2x6TG1GamRHbDJaVUZqZEdsdmJuTXNJQ2hwWkN3Z1lXTjBhVzl1S1NBOVBpQmhZM1JwYjI0dVpHVmhZM1JwZG1GMFpTZ3BLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTlqWlhOekxuTjBiM0FvS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQWdVbVZ6ZFcxbElHRnNiQ0JoWTNScGRtVWdRV04wYVc5dWMxeHVYRzRnSUNBZ0lDQWdJRUJ3WVhKaGJTQmJhVzUwWFNBb2IzQjBhVzl1WVd3cFhHNGdJQ0FnSUNBZ0lFQnlaWFIxY201eklGdEJZM1J2Y2wwN1hHNGdJQ0FnS2k5Y2JpQWdJQ0J5WlhOMWJXVW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWE5CWTNScGRtVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQmxZV05vS0hSb2FYTXVZV04wYVhabFFXTjBhVzl1Y3l3Z0tHbGtMQ0JoWTNScGIyNHBJRDArSUdGamRHbHZiaTVoWTNScGRtRjBaU2dwS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3Y205alpYTnpMbk4wWVhKMEtDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxWEc0Z0lDQWdJQ0FnSUZOMGIzQWdZV3hzSUdGamRHbDJaU0JCWTNScGIyNXpYRzVjYmlBZ0lDQWdJQ0FnUUhCaGNtRnRJRnRwYm5SZElDaHZjSFJwYjI1aGJDbGNiaUFnSUNBZ0lDQWdRSEpsZEhWeWJuTWdXMEZqZEc5eVhWeHVJQ0FnSUNvdlhHNGdJQ0FnYzNSdmNDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZWFZ6WlNncE8xeHVJQ0FnSUNBZ0lDQmxZV05vS0hSb2FYTXVZV04wYVhabFFXTjBhVzl1Y3l3Z0tHbGtLU0E5UGlCMGFHbHpMblZ1WW1sdVpFRmpkR2x2YmlocFpDa3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2x4dUlDQWdJQ0FnSUNCVWIyZG5iR1VnWVd4c0lHRmpkR2wyWlNCQlkzUnBiMjV6WEc1Y2JpQWdJQ0FnSUNBZ1FIQmhjbUZ0SUZ0cGJuUmRJQ2h2Y0hScGIyNWhiQ2xjYmlBZ0lDQWdJQ0FnUUhKbGRIVnlibk1nVzBGamRHOXlYVnh1SUNBZ0lDb3ZYRzRnSUNBZ2RHOW5aMnhsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwYzBGamRHbDJaU0EvSUhSb2FYTXVjR0YxYzJVb0tTQTZJSFJvYVhNdWNtVnpkVzFsS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ1UzbHVZM01nWUdWc1pXMWxiblJnSUhkcGRHZ2dZM1Z5Y21WdWRDQndjbTl3WlhKMGFXVnpYRzVjYmlBZ0lDQWdJQ0FnUUhKbGRIVnlibk1nVzBGamRHOXlYVnh1SUNBZ0lDb3ZYRzRnSUNBZ2MzbHVZeWdwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTNWeWNtVnVkRlpoYkhWbGN5QTlJSHQ5TzF4dVhHNGdJQ0FnSUNBZ0lIVjBhV3h6TG1WaFkyZ29kR2hwY3k1MllXeDFaWE1zSUNoclpYa3NJSFpoYkhWbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFZtRnNkV1Z6VzJ0bGVWMGdQU0IyWVd4MVpTNWpkWEp5Wlc1ME8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wWVhKMEtHNWxkeUJCWTNScGIyNG9leUIyWVd4MVpYTTZJR04xY25KbGJuUldZV3gxWlhNZ2ZTa3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2x4dUlDQWdJQ0FnSUNCQlpHUWdZU0J1WlhjZ1FXTjBhVzl1SUhSdklIUm9aU0J4ZFdWMVpWeHVJQ0FnSUNvdlhHNGdJQ0FnZEdobGJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXhkV1YxWlM1aFpHUXVZWEJ3Ykhrb2RHaHBjeTV4ZFdWMVpTd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ1JYaGxZM1YwWlNCdVpYaDBJR2x1SUhGMVpYVmxYRzRnSUNBZ0tpOWNiaUFnSUNCdVpYaDBLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdibVY0ZENBOUlIUm9hWE11Y1hWbGRXVXVibVY0ZENncE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNodVpYaDBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZFhScGJITXVhWE5HZFc1aktHNWxlSFJiTUYwcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVY0ZEZzd1hTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJtVjRkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVDNJZ2RHaHBjeUJwY3lCaGJpQmhZM1JwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVY0ZEM1d2RYTm9LR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYSjBMbUZ3Y0d4NUtIUm9hWE1zSUc1bGVIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpkRzl3S0NrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2x4dUlDQWdJQ0FnSUNCQmMzTnBaMjRnVW05c1pYTWdZbUZ6WldRZ2IyNGdaV3hsYldWdWRDQmhibVFnYldGdWRXRnNiSGtnY0hKdmRtbGtaV1FnY0hKdmNITmNibHh1SUNBZ0lDQWdJQ0JBY0dGeVlXMGdXMjlpYW1WamRGMDZJRVZzWlcxbGJuUmNiaUFnSUNBZ0lDQWdRSEJoY21GdElGdFNiMnhsSUh4OElHRnljbUY1WFZ4dUlDQWdJQ0FnSUNCQWNHRnlZVzBnVzJKdmIyeGxZVzVkSUNodmNIUnBiMjVoYkNsY2JpQWdJQ0FxTDF4dUlDQWdJR0Z6YzJsbmJsSnZiR1Z6S0dWc1pXMWxiblFzSUcxaGJuVmhiRkp2YkdWekxDQnpkWEp3Y21WemMwbHVhWFFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdRV3hzSUVGamRHOXljeUJuWlhRZ1lTQmtaV1poZFd4MElGSnZiR1VnZEdoaGRDQm9ZVzVrYkdWeklIVnpaWElnWTJGc2JHSmhZMnR6WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbTlzWlhNZ1BTQmJJR1JsWm1GMWJIUlNiMnhsSUYwN1hHNWNiaUFnSUNBZ0lDQWdMeThnUVhWMGJ5MWhjM05wWjI0Z2FXWWdibThnYldGdWRXRnNiSGt0YzJWMElGSnZiR1Z6WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hiV0Z1ZFdGc1VtOXNaWE1nSmlZZ1pXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhkWFJ2UVhOemFXZHVVbTlzWlhNb1pXeGxiV1Z1ZENrN1hHNWNiaUFnSUNBZ0lDQWdMeThnVDNJZ2JXRnVkV0ZzYkhrZ2MyVjBJR2xtSUhCeWIzWnBaR1ZrWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JXRnVkV0ZzVW05c1pYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gxZEdsc2N5NXBjMEZ5Y21GNUtHMWhiblZoYkZKdmJHVnpLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbTlzWlhNdWNIVnphQzVoY0hCc2VTaDBhR2x6TG5KdmJHVnpMQ0J0WVc1MVlXeFNiMnhsY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtOXNaWE11Y0hWemFDaHRZVzUxWVd4U2IyeGxjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9JWE4xY25CeVpYTnpTVzVwZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBibWwwVW05c1pYTW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxWEc0Z0lDQWdJQ0FnSUVGMWRHOXRZWFJwWTJGc2JIa2dZWE56YVdkdUlGSnZiR1Z6SUdKaGMyVmtJRzl1SUdWc1pXMWxiblFzSUdSbGMybG5ibVZrWEc0Z0lDQWdJQ0FnSUhSdklHSmxJR1Y0ZEdWdVpHVmtYRzVjYmlBZ0lDQWdJQ0FnUUhCaGNtRnRJRnR2WW1wbFkzUmRPaUJGYkdWdFpXNTBYRzRnSUNBZ0tpOWNiaUFnSUNCaGRYUnZRWE56YVdkdVVtOXNaWE1vWld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkJaR1FnUTFOVElISnZiR1VnYVdZZ1NGUk5URVZzWlcxbGJuUmNiaUFnSUNBZ0lDQWdhV1lnS0dWc1pXMWxiblFnYVc1emRHRnVZMlZ2WmlCSVZFMU1SV3hsYldWdWRDQjhmQ0JsYkdWdFpXNTBMblJoWjA1aGJXVWdQVDA5SUNkemRtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KdmJHVnpMbkIxYzJnb1kzTnpVbTlzWlNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnUVdSa0lGTldSeUJ5YjJ4bElHbG1JRk5XUnlCbGJHVnRaVzUwWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pXeGxiV1Z1ZENCcGJuTjBZVzVqWlc5bUlGTldSMFZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y205c1pYTXVjSFZ6YUNoemRtZFNiMnhsS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1FXUmtJRVJ5WVhjZ1VHRjBhQ0J5YjJ4bElHbG1JSEJoZEdnZ1pXeGxiV1Z1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWc1pXMWxiblF1ZEdGblRtRnRaU0E5UFQwZ0ozQmhkR2duS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5YjJ4bGN5NXdkWE5vS0dSeVlYZFFZWFJvVW05c1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktseHVJQ0FnSUNBZ0lDQkdhWEpsSUdsdWFYUWdZMkZzYkdKaFkydHpYRzRnSUNBZ0tpOWNiaUFnSUNCcGJtbDBVbTlzWlhNb0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUVacGNtVWdhVzVwZENCallXeHNZbUZqYTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YkdWekxtWnZja1ZoWTJnb0tISnZiR1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHliMnhsTG1sdWFYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjJ4bExtbHVhWFF1WTJGc2JDaDBhR2x6TENCMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZV04wYVhaaGRHVW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1cGMwRmpkR2wyWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBjMEZqZEdsMlpTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtWnBjbk4wUm5KaGJXVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbTlqWlhOekxuTjBZWEowS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktseHVJQ0FnSUNBZ0lDQkNhVzVrSUVGamRHbHZiaUJoYm1RZ2NtVjBkWEp1SUdsMGN5QjBZV0pzWlNCcFpGeHVYRzRnSUNBZ0lDQWdJRUJ3WVhKaGJTQmJRV04wYVc5dVhWeHVJQ0FnSUNBZ0lDQkFjbVYwZFhKdWN5QmJhVzUwWFZ4dUlDQWdJQ292WEc0Z0lDQWdZbWx1WkVGamRHbHZiaWhoWTNScGIyNHNJR2xrS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwWkNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaQ0E5SUhSb2FYTXVZV04wYVc5dVEyOTFiblJsY2lzck8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG1oaGMwRmpkR2x2YmlocFpDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WVdOMGFYWmxRV04wYVc5dWMxdHBaRjBnUFNCaFkzUnBiMjQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG01MWJVRmpkR2wyWlNzck8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2xrTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFZ1WW1sdVpFRmpkR2x2YmlocFpDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVoWTNScGRtVkJZM1JwYjI1ekxtaGhjMDkzYmxCeWIzQmxjblI1S0dsa0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0ZqZEdsdmJpQTlJSFJvYVhNdVlXTjBhWFpsUVdOMGFXOXVjMXRwWkYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lXTjBhVzl1TG1sdWNIVjBJQ1ltSUdGamRHbHZiaTVwYm5CMWRDNWhkWFJ2VTNSdmNDQTlQVDBnZEhKMVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZqZEdsdmJpNXBibkIxZEM1emRHOXdLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCaFkzUnBiMjR1WkdWaFkzUnBkbUYwWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXVkVzFCWTNScGRtVXRMVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCMGFHbHpMbUZqZEdsMlpVRmpkR2x2Ym5OYmFXUmRPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtNTFiVUZqZEdsMlpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WVhWelpTZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaMlYwUVdOMGFXOXVLR2xrS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZqZEdsMlpVRmpkR2x2Ym5OYmFXUmRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHaGhjMEZqZEdsdmJpaHBaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0hSb2FYTXVaMlYwUVdOMGFXOXVLR2xrS1NBaFBUMGdkVzVrWldacGJtVmtLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQWdJQ0JWY0dSaGRHVWdjSEp2WTJWemMybHVaeUJ2Y21SbGNseHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdRSEJoY21GdElGdHpkSEpwYm1kZFhHNGdJQ0FnSUNBZ0lFQndZWEpoYlNCYlltOXZiR1ZoYmwxY2JpQWdJQ0FnSUNBZ1FIQmhjbUZ0SUZ0aWIyOXNaV0Z1WFZ4dUlDQWdJQ292WEc0Z0lDQWdkWEJrWVhSbFQzSmtaWElvYTJWNUxDQnRiM1psVkc5Q1lXTnJMQ0JvWVhORGFHbHNaSEpsYmlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYjNKa1pYSWdQU0FvSVdoaGMwTm9hV3hrY21WdUtTQS9JSFJvYVhNdVlXTjBhWFpsVm1Gc2RXVnpJRG9nZEdocGN5NWhZM1JwZG1WUVlYSmxiblJ6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjRzl6YVhScGIyNGdQU0J2Y21SbGNpNXBibVJsZUU5bUtHdGxlU2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdTV1lnYTJWNUlHbHpiaWQwSUd4cGMzUWdiM0lnYlc5MlpWUnZRbUZqYXlCcGN5QnpaWFFnZEc4Z2RISjFaU3dnWVdSa0lHdGxlVnh1SUNBZ0lDQWdJQ0JwWmlBb2NHOXphWFJwYjI0Z1BUMDlJQzB4SUh4OElHMXZkbVZVYjBKaFkyc3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXlaR1Z5TG5CMWMyZ29hMlY1S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdhMlY1SUdGc2NtVmhaSGtnWlhocGMzUnpMQ0J5WlcxdmRtVmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdiM05wZEdsdmJpQStJQzB4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzSmtaWEl1YzNCc2FXTmxLSEJ2YzJsMGFXOXVMQ0F4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZ0aWIyOXNaV0Z1WFRvZ1NYTWdkR2hwY3lCQlkzUnZjaUJoWTNScGRtVS9YRzRnSUNBZ1oyVjBJR2x6UVdOMGFYWmxLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZhWE5CWTNScGRtVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdVMlYwSUdoaGMwTm9ZVzVuWldRZ2RHOGdkSEoxWlNCcGN5QjBhR2x6SUdseklHNXZkeUJoWTNScGRtVmNiaUFnSUNCelpYUWdhWE5CWTNScGRtVW9jM1JoZEhWektTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoemRHRjBkWE1nUFQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHRnpRMmhoYm1kbFpDQTlJSE4wWVhSMWN6dGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmx6UVdOMGFYWmxJRDBnYzNSaGRIVnpPMXh1SUNBZ0lIMWNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCQlkzUnZjanRjYmx4dVhHNWNibHh1WEc1Y2JseHVYRzVjYmx4dVhHNWNibHh1WEc1Y2JseHVYRzVjYmx4dVhHNWNibHh1WEc1Y2JseHVYRzVjYmx4dVhHNWNibHh1WEc1Y2JseHVJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9hY3Rvci9BY3Rvci5qc1xuICoqIG1vZHVsZSBpZCA9IDI2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEFjdG9yID0gcmVxdWlyZSgnLi4vYWN0b3IvQWN0b3InKTtcbnZhciBUd2VlbiA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvVHdlZW4nKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL2luYy91dGlscycpO1xudmFyIGNhbGNSZWxhdGl2ZSA9IHJlcXVpcmUoJy4uL2luYy9jYWxjJykucmVsYXRpdmVWYWx1ZTtcblxudmFyIHRpbWVsaW5lID0gbmV3IFR3ZWVuKHtcbiAgICBlYXNlOiAnbGluZWFyJyxcbiAgICB2YWx1ZXM6IHtcbiAgICAgICAgcGxheWhlYWQ6IDBcbiAgICB9XG59KTtcblxudmFyIGNoZWNrQWN0aW9ucyA9IGZ1bmN0aW9uIChfcmVmLCBzZXF1ZW5jZSkge1xuICAgIHZhciBwbGF5aGVhZCA9IF9yZWYucGxheWhlYWQ7XG5cbiAgICB2YXIgaSA9IHNlcXVlbmNlLmNoZWNrLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdmFyIHRvQ2hlY2sgPSBzZXF1ZW5jZS5jaGVja1tpXTtcblxuICAgICAgICBpZiAocGxheWhlYWQgPj0gdG9DaGVjay50aW1lc3RhbXApIHtcbiAgICAgICAgICAgIHRvQ2hlY2suY2FsbGJhY2soKTtcbiAgICAgICAgICAgIHNlcXVlbmNlLmNoZWNrLnNwbGljZShpLCAxKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBnZW5lcmF0ZUNhbGxiYWNrID0gZnVuY3Rpb24gKGFjdG9yLCBhY3Rpb24pIHtcbiAgICB2YXIgY2FsbGJhY2sgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoYWN0b3IuZWFjaCkge1xuICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFjdG9yLmVhY2goYWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFjdG9yLnN0YXJ0KGFjdGlvbik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGxiYWNrO1xufTtcblxudmFyIFNlcXVlbmNlID0gKGZ1bmN0aW9uIChfQWN0b3IpIHtcbiAgICBfaW5oZXJpdHMoU2VxdWVuY2UsIF9BY3Rvcik7XG5cbiAgICBmdW5jdGlvbiBTZXF1ZW5jZSgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlcXVlbmNlKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0FjdG9yLmNhbGwodGhpcywge1xuICAgICAgICAgICAgY2hlY2s6IFtdLFxuICAgICAgICAgICAgc2VxdWVuY2U6IFtdLFxuICAgICAgICAgICAgZHVyYXRpb246IDAsXG4gICAgICAgICAgICBjdXJyZW50VGltZXN0YW1wOiAwLFxuICAgICAgICAgICAgcHJldkFjdGlvbkVuZDogMCxcbiAgICAgICAgICAgIG9uVXBkYXRlOiBjaGVja0FjdGlvbnNcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIFNlcXVlbmNlLnByb3RvdHlwZS5kbyA9IGZ1bmN0aW9uIF9kbyhhY3RvciwgYWN0aW9uKSB7XG4gICAgICAgIHZhciBpc0NhbGxiYWNrID0gdXRpbHMuaXNGdW5jKGFjdG9yKTtcblxuICAgICAgICB0aGlzLnNlcXVlbmNlLnB1c2goe1xuICAgICAgICAgICAgdGltZXN0YW1wOiB0aGlzLmN1cnJlbnRUaW1lc3RhbXAsXG4gICAgICAgICAgICBjYWxsYmFjazogaXNDYWxsYmFjayA/IGFjdG9yIDogZ2VuZXJhdGVDYWxsYmFjayhhY3RvciwgYWN0aW9uKVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoYWN0aW9uICYmIGFjdGlvbi5kdXJhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5wcmV2QWN0aW9uRW5kID0gdGhpcy5jdXJyZW50VGltZXN0YW1wICsgYWN0aW9uLmR1cmF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFNlcXVlbmNlLnByb3RvdHlwZS5zdGFnZ2VyID0gZnVuY3Rpb24gc3RhZ2dlcihpdGVyYXRvciwgYWN0aW9uLCBzdGFnZ2VyUHJvcHMpIHtcbiAgICAgICAgdmFyIG51bUl0ZW1zID0gaXRlcmF0b3IubWVtYmVycy5sZW5ndGg7XG4gICAgICAgIHZhciBpbnRlcnZhbCA9IHV0aWxzLmlzTnVtKHN0YWdnZXJQcm9wcykgPyBzdGFnZ2VyUHJvcHMgOiBzdGFnZ2VyUHJvcHMuaW50ZXJ2YWwgfHwgMTAwO1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBhY3Rpb24uZHVyYXRpb24gPyBhY3Rpb24uZHVyYXRpb24gOiAwO1xuXG4gICAgICAgIHRoaXMuZG8oaXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yLnN0YWdnZXIoYWN0aW9uLCBzdGFnZ2VyUHJvcHMpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnByZXZBY3Rpb25FbmQgPSB0aGlzLmN1cnJlbnRUaW1lc3RhbXAgKyBkdXJhdGlvbiArIGludGVydmFsICogbnVtSXRlbXM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFNlcXVlbmNlLnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uIGF0KHRpbWVzdGFtcCkge1xuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcodGltZXN0YW1wKSkge1xuICAgICAgICAgICAgdGltZXN0YW1wID0gY2FsY1JlbGF0aXZlKHRoaXMuY3VycmVudFRpbWVzdGFtcCwgdGltZXN0YW1wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3VycmVudFRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IE1hdGgubWF4KHRoaXMuY3VycmVudFRpbWVzdGFtcCwgdGhpcy5kdXJhdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBTZXF1ZW5jZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIHRoZW4oKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyBcIis9MFwiIDogYXJndW1lbnRzWzBdO1xuXG4gICAgICAgIHRoaXMuYXQoY2FsY1JlbGF0aXZlKHRoaXMucHJldkFjdGlvbkVuZCwgb2Zmc2V0KSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBTZXF1ZW5jZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgX0FjdG9yLnByb3RvdHlwZS5zdGFydC5jYWxsKHRoaXMsIHRpbWVsaW5lLmV4dGVuZCh7XG4gICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5kdXJhdGlvbixcbiAgICAgICAgICAgIHZhbHVlczoge1xuICAgICAgICAgICAgICAgIHBsYXloZWFkOiB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHRvOiB0aGlzLmR1cmF0aW9uXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFNlcXVlbmNlLnByb3RvdHlwZS5vblN0YXJ0ID0gZnVuY3Rpb24gb25TdGFydCgpIHtcbiAgICAgICAgdGhpcy5jaGVjayA9IHRoaXMuc2VxdWVuY2Uuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgU2VxdWVuY2UucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuc2VxdWVuY2UgPSBbXTtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IHRoaXMuY3VycmVudFRpbWVzdGFtcCA9IHRoaXMucHJldkFjdGlvbkVuZCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2VxdWVuY2U7XG59KShBY3Rvcik7XG5cbm1vZHVsZS5leHBvcnRzID0gU2VxdWVuY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxObGNYVmxibU5sTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3TzBGQlFVRXNTVUZCVFN4TFFVRkxMRWRCUVVjc1QwRkJUeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1FVRkRlRU1zU1VGQlRTeExRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVOQlFVTTdRVUZETVVNc1NVRkJUU3hMUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPMEZCUTNSRExFbEJRVTBzV1VGQldTeEhRVUZITEU5QlFVOHNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJReXhoUVVGaExFTkJRVU03TzBGQlJURkVMRWxCUVUwc1VVRkJVU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETzBGQlEzWkNMRkZCUVVrc1JVRkJSU3hSUVVGUk8wRkJRMlFzVlVGQlRTeEZRVUZGTzBGQlEwb3NaMEpCUVZFc1JVRkJSU3hEUVVGRE8wdEJRMlE3UTBGRFNpeERRVUZETEVOQlFVTTdPMEZCUlVnc1NVRkJUU3haUVVGWkxFZEJRVWNzWjBKQlFXVXNVVUZCVVN4RlFVRkxPMUZCUVhwQ0xGRkJRVkVzVVVGQlVpeFJRVUZST3p0QlFVTTFRaXhSUVVGSkxFTkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJRenM3UVVGRk9VSXNWMEZCVHl4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOU0xGbEJRVWtzVDBGQlR5eEhRVUZITEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03TzBGQlJXaERMRmxCUVVrc1VVRkJVU3hKUVVGSkxFOUJRVThzUTBGQlF5eFRRVUZUTEVWQlFVVTdRVUZETDBJc2JVSkJRVThzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0QlFVTnVRaXh2UWtGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFOQlF5OUNPMHRCUTBvN1EwRkRTaXhEUVVGQk96dEJRVVZFTEVsQlFVMHNaMEpCUVdkQ0xFZEJRVWNzVlVGQlF5eExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkxPMEZCUTNoRExGRkJRVWtzVVVGQlVTeFpRVUZCTEVOQlFVTTdPMEZCUldJc1VVRkJTU3hMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTzBGQlExb3NaMEpCUVZFc1IwRkJSeXhaUVVGTk8wRkJRMklzYVVKQlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03VTBGRGRFSXNRMEZCUXp0TFFVTk1MRTFCUVUwN1FVRkRTQ3huUWtGQlVTeEhRVUZITEZsQlFVMDdRVUZEWWl4cFFrRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0VFFVTjJRaXhEUVVGRE8wdEJRMHc3TzBGQlJVUXNWMEZCVHl4UlFVRlJMRU5CUVVNN1EwRkRia0lzUTBGQlFUczdTVUZGU3l4UlFVRlJPMk5CUVZJc1VVRkJVVHM3UVVGRlZpeGhRVVpGTEZGQlFWRXNSMEZGU1RzNFFrRkdXaXhSUVVGUk96dG5SRUZIVGl4clFrRkJUVHRCUVVOR0xHbENRVUZMTEVWQlFVVXNSVUZCUlR0QlFVTlVMRzlDUVVGUkxFVkJRVVVzUlVGQlJUdEJRVU5hTEc5Q1FVRlJMRVZCUVVVc1EwRkJRenRCUVVOWUxEUkNRVUZuUWl4RlFVRkZMRU5CUVVNN1FVRkRia0lzZVVKQlFXRXNSVUZCUlN4RFFVRkRPMEZCUTJoQ0xHOUNRVUZSTEVWQlFVVXNXVUZCV1R0VFFVTjZRaXhEUVVGRE8wdEJRMHc3TzBGQldFTXNXVUZCVVN4WFFXRldMRVZCUVVVc1owSkJRVU1zUzBGQlN5eEZRVUZGTEUxQlFVMHNSVUZCUlR0QlFVTmtMRmxCUVUwc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN08wRkJSWFpETEZsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRMllzY1VKQlFWTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1owSkJRV2RDTzBGQlEyaERMRzlDUVVGUkxFVkJRVVVzVlVGQlZTeEhRVUZITEV0QlFVc3NSMEZCUnl4blFrRkJaMElzUTBGQlF5eExRVUZMTEVWQlFVVXNUVUZCVFN4RFFVRkRPMU5CUTJwRkxFTkJRVU1zUTBGQlF6czdRVUZGU0N4WlFVRkpMRTFCUVUwc1NVRkJTU3hOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTzBGQlF6TkNMR2RDUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRPMU5CUTJoRk96dEJRVVZFTEdWQlFVOHNTVUZCU1N4RFFVRkRPMHRCUTJZN08wRkJNVUpETEZsQlFWRXNWMEUwUWxZc1QwRkJUeXh2UWtGQlF5eFJRVUZSTEVWQlFVVXNUVUZCVFN4RlFVRkZMRmxCUVZrc1JVRkJSVHRCUVVOd1F5eFpRVUZOTEZGQlFWRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU42UXl4WlFVRk5MRkZCUVZFc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEZsQlFWa3NRMEZCUXl4SFFVRkhMRmxCUVZrc1IwRkJSeXhaUVVGWkxFTkJRVU1zVVVGQlVTeEpRVUZKTEVkQlFVY3NRMEZCUXp0QlFVTjZSaXhaUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVVUZCVVN4SFFVRkhMRTFCUVUwc1EwRkJReXhSUVVGUkxFZEJRVWNzUTBGQlF5eERRVUZET3p0QlFVVjJSQ3haUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEZGQlFWRXNSVUZCUlN4WlFVRk5PMEZCUTNCQ0xHOUNRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1JVRkJSU3haUVVGWkxFTkJRVU1zUTBGQlF6dFRRVU14UXl4RFFVRkRMRU5CUVVNN08wRkJSVWdzV1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NVVUZCVVN4SFFVRkpMRkZCUVZFc1IwRkJSeXhSUVVGUkxFRkJRVU1zUTBGQlF6czdRVUZGT1VVc1pVRkJUeXhKUVVGSkxFTkJRVU03UzBGRFpqczdRVUY0UTBNc1dVRkJVU3hYUVRCRFZpeEZRVUZGTEdWQlFVTXNVMEZCVXl4RlFVRkZPMEZCUTFZc1dVRkJTU3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4RlFVRkZPMEZCUXpOQ0xIRkNRVUZUTEVkQlFVY3NXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenRUUVVNNVJEczdRVUZGUkN4WlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NVMEZCVXl4RFFVRkRPMEZCUTJ4RExGbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlF5OUVMR1ZCUVU4c1NVRkJTU3hEUVVGRE8wdEJRMlk3TzBGQmJFUkRMRmxCUVZFc1YwRnZSRllzU1VGQlNTeHRRa0ZCYVVJN1dVRkJhRUlzVFVGQlRTeDVSRUZCUnl4TFFVRkxPenRCUVVObUxGbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTnNSQ3hsUVVGUExFbEJRVWtzUTBGQlF6dExRVU5tT3p0QlFYWkVReXhaUVVGUkxGZEJlVVJXTEV0QlFVc3NiMEpCUVVjN1FVRkRTaXg1UWtGQlRTeExRVUZMTEV0QlFVRXNUMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRM2hDTEc5Q1FVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkU3UVVGRGRrSXNhMEpCUVUwc1JVRkJSVHRCUVVOS0xIZENRVUZSTEVWQlFVVTdRVUZEVGl3eVFrRkJUeXhGUVVGRkxFTkJRVU03UVVGRFZpeHpRa0ZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhSUVVGUk8ybENRVU53UWp0aFFVTktPMU5CUTBvc1EwRkJReXhEUVVGRExFTkJRVU03TzBGQlJVb3NaVUZCVHl4SlFVRkpMRU5CUVVNN1MwRkRaanM3UVVGeVJVTXNXVUZCVVN4WFFYVkZWaXhQUVVGUExITkNRVUZITzBGQlEwNHNXVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMHRCUTNSRE96dEJRWHBGUXl4WlFVRlJMRmRCTWtWV0xFdEJRVXNzYjBKQlFVYzdRVUZEU2l4WlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU51UWl4WlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTXZSQ3hsUVVGUExFbEJRVWtzUTBGQlF6dExRVU5tT3p0WFFTOUZReXhSUVVGUk8wZEJRVk1zUzBGQlN6czdRVUZyUmpWQ0xFMUJRVTBzUTBGQlF5eFBRVUZQTEVkQlFVY3NVVUZCVVN4RFFVRkRJaXdpWm1sc1pTSTZJbE5sY1hWbGJtTmxMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVkyOXVjM1FnUVdOMGIzSWdQU0J5WlhGMWFYSmxLQ2N1TGk5aFkzUnZjaTlCWTNSdmNpY3BPMXh1WTI5dWMzUWdWSGRsWlc0Z1BTQnlaWEYxYVhKbEtDY3VMaTloWTNScGIyNXpMMVIzWldWdUp5azdYRzVqYjI1emRDQjFkR2xzY3lBOUlISmxjWFZwY21Vb0p5NHVMMmx1WXk5MWRHbHNjeWNwTzF4dVkyOXVjM1FnWTJGc1kxSmxiR0YwYVhabElEMGdjbVZ4ZFdseVpTZ25MaTR2YVc1akwyTmhiR01uS1M1eVpXeGhkR2wyWlZaaGJIVmxPMXh1WEc1amIyNXpkQ0IwYVcxbGJHbHVaU0E5SUc1bGR5QlVkMlZsYmloN1hHNGdJQ0FnWldGelpUb2dKMnhwYm1WaGNpY3NYRzRnSUNBZ2RtRnNkV1Z6T2lCN1hHNGdJQ0FnSUNBZ0lIQnNZWGxvWldGa09pQXdYRzRnSUNBZ2ZWeHVmU2s3WEc1Y2JtTnZibk4wSUdOb1pXTnJRV04wYVc5dWN5QTlJQ2g3SUhCc1lYbG9aV0ZrSUgwc0lITmxjWFZsYm1ObEtTQTlQaUI3WEc0Z0lDQWdiR1YwSUdrZ1BTQnpaWEYxWlc1alpTNWphR1ZqYXk1c1pXNW5kR2c3WEc1Y2JpQWdJQ0IzYUdsc1pTQW9hUzB0S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IwYjBOb1pXTnJJRDBnYzJWeGRXVnVZMlV1WTJobFkydGJhVjA3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJzWVhsb1pXRmtJRDQ5SUhSdlEyaGxZMnN1ZEdsdFpYTjBZVzF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjBOb1pXTnJMbU5oYkd4aVlXTnJLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWEYxWlc1alpTNWphR1ZqYXk1emNHeHBZMlVvYVN3Z01TazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzU5WEc1Y2JtTnZibk4wSUdkbGJtVnlZWFJsUTJGc2JHSmhZMnNnUFNBb1lXTjBiM0lzSUdGamRHbHZiaWtnUFQ0Z2UxeHVJQ0FnSUd4bGRDQmpZV3hzWW1GamF6dGNibHh1SUNBZ0lHbG1JQ2hoWTNSdmNpNWxZV05vS1NCN1hHNGdJQ0FnSUNBZ0lHTmhiR3hpWVdOcklEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdOMGIzSXVaV0ZqYUNoaFkzUnBiMjRwTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdOaGJHeGlZV05ySUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZV04wYjNJdWMzUmhjblFvWVdOMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdZMkZzYkdKaFkyczdYRzU5WEc1Y2JtTnNZWE56SUZObGNYVmxibU5sSUdWNGRHVnVaSE1nUVdOMGIzSWdlMXh1WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWldOck9pQmJYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxjWFZsYm1ObE9pQmJYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUjFjbUYwYVc5dU9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZScGJXVnpkR0Z0Y0RvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCeVpYWkJZM1JwYjI1RmJtUTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZibFZ3WkdGMFpUb2dZMmhsWTJ0QlkzUnBiMjV6WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdSdktHRmpkRzl5TENCaFkzUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYVhORFlXeHNZbUZqYXlBOUlIVjBhV3h6TG1selJuVnVZeWhoWTNSdmNpazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWEYxWlc1alpTNXdkWE5vS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJwYldWemRHRnRjRG9nZEdocGN5NWpkWEp5Wlc1MFZHbHRaWE4wWVcxd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JHSmhZMnM2SUdselEyRnNiR0poWTJzZ1B5QmhZM1J2Y2lBNklHZGxibVZ5WVhSbFEyRnNiR0poWTJzb1lXTjBiM0lzSUdGamRHbHZiaWxjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dGamRHbHZiaUFtSmlCaFkzUnBiMjR1WkhWeVlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNISmxka0ZqZEdsdmJrVnVaQ0E5SUhSb2FYTXVZM1Z5Y21WdWRGUnBiV1Z6ZEdGdGNDQXJJR0ZqZEdsdmJpNWtkWEpoZEdsdmJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlXZG5aWElvYVhSbGNtRjBiM0lzSUdGamRHbHZiaXdnYzNSaFoyZGxjbEJ5YjNCektTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHNTFiVWwwWlcxeklEMGdhWFJsY21GMGIzSXViV1Z0WW1WeWN5NXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdsdWRHVnlkbUZzSUQwZ2RYUnBiSE11YVhOT2RXMG9jM1JoWjJkbGNsQnliM0J6S1NBL0lITjBZV2RuWlhKUWNtOXdjeUE2SUhOMFlXZG5aWEpRY205d2N5NXBiblJsY25aaGJDQjhmQ0F4TURBN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdSMWNtRjBhVzl1SUQwZ1lXTjBhVzl1TG1SMWNtRjBhVzl1SUQ4Z1lXTjBhVzl1TG1SMWNtRjBhVzl1SURvZ01EdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtUnZLR2wwWlhKaGRHOXlMQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGRHVnlZWFJ2Y2k1emRHRm5aMlZ5S0dGamRHbHZiaXdnYzNSaFoyZGxjbEJ5YjNCektUdGNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3Y21WMlFXTjBhVzl1Ulc1a0lEMGdkR2hwY3k1amRYSnlaVzUwVkdsdFpYTjBZVzF3SUNzZ1pIVnlZWFJwYjI0Z0t5QW9hVzUwWlhKMllXd2dLaUJ1ZFcxSmRHVnRjeWs3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1lYUW9kR2x0WlhOMFlXMXdLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDFkR2xzY3k1cGMxTjBjbWx1WnloMGFXMWxjM1JoYlhBcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFXMWxjM1JoYlhBZ1BTQmpZV3hqVW1Wc1lYUnBkbVVvZEdocGN5NWpkWEp5Wlc1MFZHbHRaWE4wWVcxd0xDQjBhVzFsYzNSaGJYQXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqZFhKeVpXNTBWR2x0WlhOMFlXMXdJRDBnZEdsdFpYTjBZVzF3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVIxY21GMGFXOXVJRDBnVFdGMGFDNXRZWGdvZEdocGN5NWpkWEp5Wlc1MFZHbHRaWE4wWVcxd0xDQjBhR2x6TG1SMWNtRjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaGxiaWh2Wm1aelpYUWdQU0JjSWlzOU1Gd2lLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZWFFvWTJGc1kxSmxiR0YwYVhabEtIUm9hWE11Y0hKbGRrRmpkR2x2YmtWdVpDd2diMlptYzJWMEtTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhKMEtDa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpNXpkR0Z5ZENoMGFXMWxiR2x1WlM1bGVIUmxibVFvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaSFZ5WVhScGIyNDZJSFJvYVhNdVpIVnlZWFJwYjI0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YkdGNWFHVmhaRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1ME9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGJ6b2dkR2hwY3k1a2RYSmhkR2x2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDFjYmx4dUlDQWdJRzl1VTNSaGNuUW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMmhsWTJzZ1BTQjBhR2x6TG5ObGNYVmxibU5sTG5Oc2FXTmxLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMnhsWVhJb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVnhkV1Z1WTJVZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtkWEpoZEdsdmJpQTlJSFJvYVhNdVkzVnljbVZ1ZEZScGJXVnpkR0Z0Y0NBOUlIUm9hWE11Y0hKbGRrRmpkR2x2YmtWdVpDQTlJREE3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgxY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JUWlhGMVpXNWpaVHNpWFgwPVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvc2VxdWVuY2UvU2VxdWVuY2UuanNcbiAqKiBtb2R1bGUgaWQgPSAyN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLypcbiAgICBJbnB1dCBjb250cm9sbGVyXG4qL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjYWxjID0gcmVxdWlyZSgnLi4vaW5jL2NhbGMuanMnKSxcbiAgICB1dGlscyA9IHJlcXVpcmUoJy4uL2luYy91dGlscy5qcycpLFxuICAgIEhpc3RvcnkgPSByZXF1aXJlKCcuLi9pbmMvSGlzdG9yeS5qcycpLFxuXG4vKlxuICAgIElucHV0IGNvbnN0cnVjdG9yXG4gICAgXG4gICAgICAgIFN5bnRheFxuICAgICAgICAgICAgbmV3SW5wdXQobmFtZSwgdmFsdWVbLCBwb2xsXSlcbiAgICAgICAgICAgICAgICBAcGFyYW0gW3N0cmluZ106IE5hbWUgb2YgdG8gdHJhY2tcbiAgICAgICAgICAgICAgICBAcGFyYW0gW251bWJlcl06IEluaXRpYWwgdmFsdWVcbiAgICAgICAgICAgICAgICBAcGFyYW0gW2Z1bmN0aW9uXSAob3B0aW9uYWwpOiBGdW5jdGlvbiB0byBwb2xsIElucHV0IGRhdGFcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIG5ld0lucHV0KHByb3BzWywgcG9sbF0pXG4gICAgICAgICAgICAgICAgQHBhcmFtIFtvYmplY3RdOiBPYmplY3Qgb2YgdmFsdWVzXG4gICAgICAgICAgICAgICAgQHBhcmFtIFtmdW5jdGlvbl0gKG9wdGlvbmFsKTogRnVuY3Rpb24gdG8gcG9sbCBJbnB1dCBkYXRhXG4gICAgIEByZXR1cm4gW0lucHV0XVxuKi9cbklucHV0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwb2xsUG9zID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG5cbiAgICB0aGlzLmN1cnJlbnQgPSB7fTtcbiAgICB0aGlzLm9mZnNldCA9IHt9O1xuICAgIHRoaXMudmVsb2NpdHkgPSB7fTtcbiAgICB0aGlzLmhpc3RvcnkgPSBuZXcgSGlzdG9yeSgpO1xuICAgIHRoaXMudXBkYXRlKGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKTtcblxuICAgIGlmICh1dGlscy5pc0Z1bmMoYXJndW1lbnRzW3BvbGxQb3NdKSkge1xuICAgICAgICB0aGlzLnBvbGwgPSBhcmd1bWVudHNbcG9sbFBvc107XG4gICAgfVxufTtcblxuSW5wdXQucHJvdG90eXBlID0ge1xuXG4gICAgLy8gW251bWJlcl06IE51bWJlciBvZiBmcmFtZXMgb2YgaW5hY3Rpdml0eSBiZWZvcmUgdmVsb2NpdHkgaXMgdHVybmVkIHRvIDBcbiAgICBtYXhJbmFjdGl2ZUZyYW1lczogMixcblxuICAgIC8vIFtudW1iZXJdOiBOdW1iZXIgb2YgZnJhbWVzIGlucHV0IGhhc24ndCBiZWVuIHVwZGF0ZWRcbiAgICBpbmFjdGl2ZUZyYW1lczogMCxcblxuICAgIC8qXG4gICAgICAgIEdldCBsYXRlc3QgaW5wdXQgdmFsdWVzXG4gICAgICAgIFxuICAgICAgICBAcGFyYW0gW3N0cmluZ10gKG9wdGlvbmFsKTogTmFtZSBvZiBzcGVjaWZpYyBwcm9wZXJ0eSB0byByZXR1cm5cbiAgICAgICAgQHJldHVybiBbb2JqZWN0IHx8IG51bWJlcl06IExhdGVzdCBpbnB1dCB2YWx1ZXMgb3IsIGlmIHNwZWNpZmllZCwgc2luZ2xlIHZhbHVlXG4gICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHZhciBsYXRlc3QgPSB0aGlzLmhpc3RvcnkuZ2V0KCksXG4gICAgICAgICAgICB2YWwgPSBwcm9wICE9PSB1bmRlZmluZWQgPyBsYXRlc3RbcHJvcF0gOiBsYXRlc3Q7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICAgIFVwZGF0ZSB0aGUgaW5wdXQgdmFsdWVzXG4gICAgICAgIFxuICAgICAgICBTeW50YXhcbiAgICAgICAgICAgIGlucHV0LnVwZGF0ZShuYW1lLCB2YWx1ZSlcbiAgICAgICAgICAgICAgICBAcGFyYW0gW3N0cmluZ106IE5hbWUgb2YgdG8gdHJhY2tcbiAgICAgICAgICAgICAgICBAcGFyYW0gW251bWJlcl06IEluaXRpYWwgdmFsdWVcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlucHV0LnVwZGF0ZShwcm9wcylcbiAgICAgICAgICAgICAgICBAcGFyYW0gW29iamVjdF06IE9iamVjdCBvZiB2YWx1ZXNcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgQHJldHVybiBbSW5wdXRdXG4gICAgKi9cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIChhcmcwLCBhcmcxKSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSB7fTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW0oYXJnMSkpIHtcbiAgICAgICAgICAgIHZhbHVlc1thcmcwXSA9IGFyZzE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZXMgPSBhcmcwO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5oaXN0b3J5LmFkZCh1dGlscy5tZXJnZSh0aGlzLmN1cnJlbnQsIHZhbHVlcykpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAgICBDaGVjayBmb3IgaW5wdXQgbW92ZW1lbnQgYW5kIHVwZGF0ZSBwb2ludGVyIG9iamVjdCdzIHByb3BlcnRpZXNcbiAgICAgICAgXG4gICAgICAgIEBwYXJhbSBbbnVtYmVyXTogVGltZXN0YW1wIG9mIGZyYW1lXG4gICAgICAgIEByZXR1cm4gW0lucHV0XVxuICAgICovXG4gICAgb25GcmFtZTogZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgICAgICB2YXIgbGF0ZXN0LCBoYXNDaGFuZ2VkO1xuXG4gICAgICAgIC8vIENoZWNrIHByb3ZpZGVkIHRpbWVzdGFtcCBhZ2FpbnN0IGxhc3RGcmFtZSB0aW1lc3RhbXAgYW5kIHJldHVybiBpbnB1dCBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWRcbiAgICAgICAgaWYgKHRpbWVzdGFtcCA9PT0gdGhpcy5sYXN0RnJhbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhdGVzdCA9IHRoaXMucG9sbCA/IHRoaXMucG9sbCgpIDogdGhpcy5oaXN0b3J5LmdldCgpO1xuICAgICAgICBoYXNDaGFuZ2VkID0gdXRpbHMuaGFzQ2hhbmdlZCh0aGlzLmN1cnJlbnQsIGxhdGVzdCk7XG5cbiAgICAgICAgLy8gSWYgaW5wdXQgaGFzIGNoYW5nZWQgYmV0d2VlbiBmcmFtZXMgXG4gICAgICAgIGlmIChoYXNDaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLnZlbG9jaXR5ID0gY2FsYy5vZmZzZXQodGhpcy5jdXJyZW50LCBsYXRlc3QpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gbGF0ZXN0O1xuICAgICAgICAgICAgdGhpcy5pbmFjdGl2ZUZyYW1lcyA9IDA7XG5cbiAgICAgICAgICAgIC8vIE9yIGl0IGhhc24ndCBtb3ZlZCBhbmQgb3VyIGZyYW1lIGxpbWl0IGhhcyBiZWVuIHJlYWNoZWRcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmluYWN0aXZlRnJhbWVzID49IHRoaXMubWF4SW5hY3RpdmVGcmFtZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZlbG9jaXR5ID0gY2FsYy5vZmZzZXQodGhpcy5jdXJyZW50LCB0aGlzLmN1cnJlbnQpO1xuXG4gICAgICAgICAgICAgICAgLy8gT3IgaW5wdXQgaGFzbid0IGNoYW5nZWRcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5hY3RpdmVGcmFtZXMrKztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sYXN0RnJhbWUgPSB0aW1lc3RhbXA7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnB1dDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa2x1Y0hWMExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVkQkxGbEJRVmtzUTBGQlF6czdRVUZGWWl4SlFVRkpMRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1NVRkRhRU1zUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUXl4cFFrRkJhVUlzUTBGQlF6dEpRVU5zUXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRPenM3T3pzN096czdPenM3T3pzN08wRkJhVUowUXl4TFFVRkxMRWRCUVVjc1dVRkJXVHRCUVVOb1FpeFJRVUZKTEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF6czdRVUZGYmtNc1VVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEYkVJc1VVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEYWtJc1VVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEYmtJc1VVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eEpRVUZKTEU5QlFVOHNSVUZCUlN4RFFVRkRPMEZCUXpkQ0xGRkJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPenRCUVVWNFF5eFJRVUZKTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVWQlFVVTdRVUZEYkVNc1dVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1MwRkRiRU03UTBGRFNpeERRVUZET3p0QlFVVk9MRXRCUVVzc1EwRkJReXhUUVVGVExFZEJRVWM3T3p0QlFVZGtMSEZDUVVGcFFpeEZRVUZGTEVOQlFVTTdPenRCUVVkd1FpeHJRa0ZCWXl4RlFVRkZMRU5CUVVNN096czdPenM3TzBGQlVXcENMRTlCUVVjc1JVRkJSU3hWUVVGVkxFbEJRVWtzUlVGQlJUdEJRVU5xUWl4WlFVRkpMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlR0WlFVTXpRaXhIUVVGSExFZEJRVWNzUVVGQlF5eEpRVUZKTEV0QlFVc3NVMEZCVXl4SFFVRkpMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTTdRVUZEZGtRc1pVRkJUeXhIUVVGSExFTkJRVU03UzBGRFpEczdPenM3T3pzN096czdPenM3TzBGQlpVUXNWVUZCVFN4RlFVRkZMRlZCUVZVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJUdEJRVU14UWl4WlFVRkpMRTFCUVUwc1IwRkJSeXhGUVVGRkxFTkJRVU03TzBGQlJXaENMRmxCUVVrc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlR0QlFVTnVRaXhyUWtGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJRenRUUVVOMlFpeE5RVUZOTzBGQlEwZ3NhMEpCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU03VTBGRGFrSTdPMEZCUlVRc1dVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN08wRkJSWEJFTEdWQlFVOHNTVUZCU1N4RFFVRkRPMHRCUTJZN096czdPenM3TzBGQlVVUXNWMEZCVHl4RlFVRkZMRlZCUVZVc1UwRkJVeXhGUVVGRk8wRkJRekZDTEZsQlFVa3NUVUZCVFN4RlFVRkZMRlZCUVZVN096dEJRVUZETEVGQlIzWkNMRmxCUVVrc1UwRkJVeXhMUVVGTExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVTdRVUZET1VJc2JVSkJRVTg3VTBGRFZqczdRVUZGUkN4alFVRk5MRWRCUVVjc1FVRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTNoRUxHdENRVUZWTEVkQlFVY3NTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEUxQlFVMHNRMEZCUXpzN08wRkJRVU1zUVVGSGNFUXNXVUZCU1N4VlFVRlZMRVZCUVVVN1FVRkRXaXhuUWtGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRiRVFzWjBKQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGRE8wRkJRM1JDTEdkQ1FVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExFTkJRVU03T3p0QlFVRkRMRk5CUnpOQ0xFMUJRVTBzU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4SlFVRkpMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNSVUZCUlR0QlFVTjBSQ3h2UWtGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJRenM3TzBGQlFVTXNZVUZITTBRc1RVRkJUVHRCUVVOSUxIZENRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN2FVSkJRM3BDT3p0QlFVVkVMRmxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzVTBGQlV5eERRVUZET3p0QlFVVXpRaXhsUVVGUExFbEJRVWtzUTBGQlF6dExRVU5tTzBOQlEwb3NRMEZCUXpzN1FVRkZSaXhOUVVGTkxFTkJRVU1zVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXlJc0ltWnBiR1VpT2lKSmJuQjFkQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFYRzRnSUNBZ1NXNXdkWFFnWTI5dWRISnZiR3hsY2x4dUtpOWNibHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzUyWVhJZ1kyRnNZeUE5SUhKbGNYVnBjbVVvSnk0dUwybHVZeTlqWVd4akxtcHpKeWtzWEc0Z0lDQWdkWFJwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMaTlwYm1NdmRYUnBiSE11YW5NbktTeGNiaUFnSUNCSWFYTjBiM0o1SUQwZ2NtVnhkV2x5WlNnbkxpNHZhVzVqTDBocGMzUnZjbmt1YW5NbktTeGNibHh1SUNBZ0lDOHFYRzRnSUNBZ0lDQWdJRWx1Y0hWMElHTnZibk4wY25WamRHOXlYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ1UzbHVkR0Y0WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM1NXNXdkWFFvYm1GdFpTd2dkbUZzZFdWYkxDQndiMnhzWFNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRSEJoY21GdElGdHpkSEpwYm1kZE9pQk9ZVzFsSUc5bUlIUnZJSFJ5WVdOclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRUJ3WVhKaGJTQmJiblZ0WW1WeVhUb2dTVzVwZEdsaGJDQjJZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkFjR0Z5WVcwZ1cyWjFibU4wYVc5dVhTQW9iM0IwYVc5dVlXd3BPaUJHZFc1amRHbHZiaUIwYnlCd2IyeHNJRWx1Y0hWMElHUmhkR0ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNTVzV3ZFhRb2NISnZjSE5iTENCd2IyeHNYU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1FIQmhjbUZ0SUZ0dlltcGxZM1JkT2lCUFltcGxZM1FnYjJZZ2RtRnNkV1Z6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFQndZWEpoYlNCYlpuVnVZM1JwYjI1ZElDaHZjSFJwYjI1aGJDazZJRVoxYm1OMGFXOXVJSFJ2SUhCdmJHd2dTVzV3ZFhRZ1pHRjBZVnh1WEc0Z0lDQWdJQ0FnSUVCeVpYUjFjbTRnVzBsdWNIVjBYVnh1SUNBZ0lDb3ZYRzRnSUNBZ1NXNXdkWFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCd2IyeHNVRzl6SUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUNBdElERTdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWpkWEp5Wlc1MElEMGdlMzA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMlptYzJWMElEMGdlMzA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbVZzYjJOcGRIa2dQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVvYVhOMGIzSjVJRDBnYm1WM0lFaHBjM1J2Y25rb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1VvWVhKbmRXMWxiblJ6V3pCZExDQmhjbWQxYldWdWRITmJNVjBwTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2FXWWdLSFYwYVd4ekxtbHpSblZ1WXloaGNtZDFiV1Z1ZEhOYmNHOXNiRkJ2YzEwcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ2Ykd3Z1BTQmhjbWQxYldWdWRITmJjRzlzYkZCdmMxMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1WEc1SmJuQjFkQzV3Y205MGIzUjVjR1VnUFNCN1hHNGdJQ0FnWEc0Z0lDQWdMeThnVzI1MWJXSmxjbDA2SUU1MWJXSmxjaUJ2WmlCbWNtRnRaWE1nYjJZZ2FXNWhZM1JwZG1sMGVTQmlaV1p2Y21VZ2RtVnNiMk5wZEhrZ2FYTWdkSFZ5Ym1Wa0lIUnZJREJjYmlBZ0lDQnRZWGhKYm1GamRHbDJaVVp5WVcxbGN6b2dNaXhjYmlBZ0lDQmNiaUFnSUNBdkx5QmJiblZ0WW1WeVhUb2dUblZ0WW1WeUlHOW1JR1p5WVcxbGN5QnBibkIxZENCb1lYTnVKM1FnWW1WbGJpQjFjR1JoZEdWa1hHNGdJQ0FnYVc1aFkzUnBkbVZHY21GdFpYTTZJREFzWEc0Z0lDQWdYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQWdSMlYwSUd4aGRHVnpkQ0JwYm5CMWRDQjJZV3gxWlhOY2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lFQndZWEpoYlNCYmMzUnlhVzVuWFNBb2IzQjBhVzl1WVd3cE9pQk9ZVzFsSUc5bUlITndaV05wWm1saklIQnliM0JsY25SNUlIUnZJSEpsZEhWeWJseHVJQ0FnSUNBZ0lDQkFjbVYwZFhKdUlGdHZZbXBsWTNRZ2ZId2diblZ0WW1WeVhUb2dUR0YwWlhOMElHbHVjSFYwSUhaaGJIVmxjeUJ2Y2l3Z2FXWWdjM0JsWTJsbWFXVmtMQ0J6YVc1bmJHVWdkbUZzZFdWY2JpQWdJQ0FxTDF4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0Z0tIQnliM0FwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR3hoZEdWemRDQTlJSFJvYVhNdWFHbHpkRzl5ZVM1blpYUW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiQ0E5SUNod2NtOXdJQ0U5UFNCMWJtUmxabWx1WldRcElEOGdiR0YwWlhOMFczQnliM0JkSURvZ2JHRjBaWE4wTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZG1Gc08xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktseHVJQ0FnSUNBZ0lDQlZjR1JoZEdVZ2RHaGxJR2x1Y0hWMElIWmhiSFZsYzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ1UzbHVkR0Y0WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEM1MWNHUmhkR1VvYm1GdFpTd2dkbUZzZFdVcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1FIQmhjbUZ0SUZ0emRISnBibWRkT2lCT1lXMWxJRzltSUhSdklIUnlZV05yWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUUhCaGNtRnRJRnR1ZFcxaVpYSmRPaUJKYm1sMGFXRnNJSFpoYkhWbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm5CMWRDNTFjR1JoZEdVb2NISnZjSE1wWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUUhCaGNtRnRJRnR2WW1wbFkzUmRPaUJQWW1wbFkzUWdiMllnZG1Gc2RXVnpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJRUJ5WlhSMWNtNGdXMGx1Y0hWMFhWeHVJQ0FnSUNvdlhHNGdJQ0FnZFhCa1lYUmxPaUJtZFc1amRHbHZiaUFvWVhKbk1Dd2dZWEpuTVNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnZG1Gc2RXVnpJRDBnZTMwN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hWMGFXeHpMbWx6VG5WdEtHRnlaekVwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpYTmJZWEpuTUYwZ1BTQmhjbWN4TzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdWeklEMGdZWEpuTUR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWFHbHpkRzl5ZVM1aFpHUW9kWFJwYkhNdWJXVnlaMlVvZEdocGN5NWpkWEp5Wlc1MExDQjJZV3gxWlhNcEtUdGNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDBzWEc0Z0lDQWdYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQWdRMmhsWTJzZ1ptOXlJR2x1Y0hWMElHMXZkbVZ0Wlc1MElHRnVaQ0IxY0dSaGRHVWdjRzlwYm5SbGNpQnZZbXBsWTNRbmN5QndjbTl3WlhKMGFXVnpYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0JBY0dGeVlXMGdXMjUxYldKbGNsMDZJRlJwYldWemRHRnRjQ0J2WmlCbWNtRnRaVnh1SUNBZ0lDQWdJQ0JBY21WMGRYSnVJRnRKYm5CMWRGMWNiaUFnSUNBcUwxeHVJQ0FnSUc5dVJuSmhiV1U2SUdaMWJtTjBhVzl1SUNoMGFXMWxjM1JoYlhBcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUd4aGRHVnpkQ3dnYUdGelEyaGhibWRsWkR0Y2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDOHZJRU5vWldOcklIQnliM1pwWkdWa0lIUnBiV1Z6ZEdGdGNDQmhaMkZwYm5OMElHeGhjM1JHY21GdFpTQjBhVzFsYzNSaGJYQWdZVzVrSUhKbGRIVnliaUJwYm5CMWRDQm9ZWE1nWVd4eVpXRmtlU0JpWldWdUlIVndaR0YwWldSY2JpQWdJQ0FnSUNBZ2FXWWdLSFJwYldWemRHRnRjQ0E5UFQwZ2RHaHBjeTVzWVhOMFJuSmhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnYkdGMFpYTjBJRDBnS0hSb2FYTXVjRzlzYkNrZ1B5QjBhR2x6TG5CdmJHd29LU0E2SUhSb2FYTXVhR2x6ZEc5eWVTNW5aWFFvS1R0Y2JpQWdJQ0FnSUNBZ2FHRnpRMmhoYm1kbFpDQTlJSFYwYVd4ekxtaGhjME5vWVc1blpXUW9kR2hwY3k1amRYSnlaVzUwTENCc1lYUmxjM1FwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRWxtSUdsdWNIVjBJR2hoY3lCamFHRnVaMlZrSUdKbGRIZGxaVzRnWm5KaGJXVnpJQ0JjYmlBZ0lDQWdJQ0FnYVdZZ0tHaGhjME5vWVc1blpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1Wc2IyTnBkSGtnUFNCallXeGpMbTltWm5ObGRDaDBhR2x6TG1OMWNuSmxiblFzSUd4aGRHVnpkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OMWNuSmxiblFnUFNCc1lYUmxjM1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sdVlXTjBhWFpsUm5KaGJXVnpJRDBnTUR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJQY2lCcGRDQm9ZWE51SjNRZ2JXOTJaV1FnWVc1a0lHOTFjaUJtY21GdFpTQnNhVzFwZENCb1lYTWdZbVZsYmlCeVpXRmphR1ZrWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTVwYm1GamRHbDJaVVp5WVcxbGN5QStQU0IwYUdsekxtMWhlRWx1WVdOMGFYWmxSbkpoYldWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpsYkc5amFYUjVJRDBnWTJGc1l5NXZabVp6WlhRb2RHaHBjeTVqZFhKeVpXNTBMQ0IwYUdsekxtTjFjbkpsYm5RcE8xeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdMeThnVDNJZ2FXNXdkWFFnYUdGemJpZDBJR05vWVc1blpXUmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhVzVoWTNScGRtVkdjbUZ0WlhNckt6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnZEdocGN5NXNZWE4wUm5KaGJXVWdQU0IwYVcxbGMzUmhiWEE3WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVsdWNIVjBPeUpkZlE9PVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvaW5wdXQvSW5wdXQuanNcbiAqKiBtb2R1bGUgaWQgPSAyOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQWN0b3IgPSByZXF1aXJlKCcuLi9hY3Rvci9BY3RvcicpO1xudmFyIFR3ZWVuID0gcmVxdWlyZSgnLi4vYWN0aW9ucy9Ud2VlbicpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vaW5jL3V0aWxzJyk7XG5cbnZhciBERUZBVUxUX1NUQUdHRVJfRUFTRSA9ICdsaW5lYXInO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUNhbGxiYWNrKG1ldGhvZCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgY2FsbGJhY2sgPSBtZXRob2Q7XG5cbiAgICBpZiAodXRpbHMuaXNTdHJpbmcobWV0aG9kKSkge1xuICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uIChtZW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBtZW1iZXJbbWV0aG9kXS5hcHBseShtZW1iZXIsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzRnVuYyhtZXRob2QpKSB7XG4gICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKG1lbWJlcikge1xuICAgICAgICAgICAgbWVtYmVyLnN0YXJ0LmFwcGx5KG1lbWJlciwgW21ldGhvZF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbGJhY2s7XG59XG5cbnZhciBJdGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSXRlcmF0b3IobWVtYmVycykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSXRlcmF0b3IpO1xuXG4gICAgICAgIHRoaXMuY2xlYXIoKTtcblxuICAgICAgICBpZiAobWVtYmVycykge1xuICAgICAgICAgICAgdGhpcy5hZGQobWVtYmVycyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zdGFnZ2VyID0gbmV3IEFjdG9yKCk7XG4gICAgfVxuXG4gICAgSXRlcmF0b3IucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChtZW1iZXJzKSB7XG4gICAgICAgIHRoaXMubWVtYmVycyA9IHRoaXMubWVtYmVycy5jb25jYXQobWVtYmVycyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBJdGVyYXRvci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5tZW1iZXJzID0gW107XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBJdGVyYXRvci5wcm90b3R5cGUuZWFjaCA9IGZ1bmN0aW9uIGVhY2gobWV0aG9kKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2FsbGJhY2sgPSBnZW5lcmF0ZUNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgW21ldGhvZF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgdGhpcy5tZW1iZXJzLmZvckVhY2goY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgSXRlcmF0b3IucHJvdG90eXBlLmVhY2hJbnRvTmV3ID0gZnVuY3Rpb24gZWFjaEludG9OZXcobWV0aG9kKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4zID4gMSA/IF9sZW4zIC0gMSA6IDApLCBfa2V5MyA9IDE7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleTMgLSAxXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2FsbGJhY2sgPSBnZW5lcmF0ZUNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgW21ldGhvZF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgdmFyIG5ld0l0ZXJhdG9yID0gbmV3IEl0ZXJhdG9yKCk7XG5cbiAgICAgICAgdGhpcy5tZW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKG1lbWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG5ld0l0ZXJhdG9yLmFkZChjYWxsYmFjayhtZW1iZXIpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5ld0l0ZXJhdG9yO1xuICAgIH07XG5cbiAgICBJdGVyYXRvci5wcm90b3R5cGUuc3RhZ2dlciA9IGZ1bmN0aW9uIHN0YWdnZXIobWV0aG9kLCBwcm9wcykge1xuICAgICAgICB2YXIgdGVtcE1lbWJlcnMgPSB1dGlscy5jb3B5QXJyYXkodGhpcy5tZW1iZXJzKTtcbiAgICAgICAgdmFyIG51bU1lbWJlcnMgPSB0ZW1wTWVtYmVycy5sZW5ndGg7XG4gICAgICAgIHZhciBwcm9wc0lzSW50ZXJ2YWwgPSB1dGlscy5pc051bShwcm9wcyk7XG4gICAgICAgIHZhciBpbnRlcnZhbCA9IHByb3BzSXNJbnRlcnZhbCA/IHByb3BzIDogcHJvcHMuaW50ZXJ2YWwgfHwgMTAwO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW40ID4gMiA/IF9sZW40IC0gMiA6IDApLCBfa2V5NCA9IDI7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleTQgLSAyXSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2FsbGJhY2sgPSBnZW5lcmF0ZUNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgW21ldGhvZF0uY29uY2F0KGFyZ3MpKTtcblxuICAgICAgICB2YXIgaSA9IC0xO1xuICAgICAgICB2YXIgc3RhZ2dlclByb3BzID0ge307XG5cbiAgICAgICAgc3RhZ2dlclByb3BzLnZhbHVlcyA9IHtcbiAgICAgICAgICAgIGk6IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50OiAtMC42LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBpbnRlcnZhbCAqIG51bU1lbWJlcnMsXG4gICAgICAgICAgICAgICAgZWFzZTogcHJvcHNJc0ludGVydmFsID8gREVGQVVMVF9TVEFHR0VSX0VBU0UgOiBwcm9wcy5lYXNlIHx8IERFRkFVTFRfU1RBR0dFUl9FQVNFLFxuICAgICAgICAgICAgICAgIHJvdW5kOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRvOiBudW1NZW1iZXJzIC0gMC42XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc3RhZ2dlclByb3BzLm9uQ29tcGxldGUgPSBwcm9wc0lzSW50ZXJ2YWwgPyB1bmRlZmluZWQgOiBwcm9wcy5vbkNvbXBsZXRlO1xuXG4gICAgICAgIHN0YWdnZXJQcm9wcy5vblVwZGF0ZSA9IGZ1bmN0aW9uIChvdXRwdXQpIHtcbiAgICAgICAgICAgIHZhciBuZXdJbmRleCA9IG91dHB1dC5pO1xuICAgICAgICAgICAgdmFyIGdhcEluZGV4ID0gaSArIDE7XG5cbiAgICAgICAgICAgIC8vIElmIG91ciBuZXcgaW5kZXggaXMgb25seSBvbmUgbW9yZSB0aGFuIHRoZSBwcmV2aW91cyBpbmRleCwgZmlyZSBpbW1lZGlldGx5XG4gICAgICAgICAgICBpZiAobmV3SW5kZXggPT09IGkgKyAxKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGVtcE1lbWJlcnNbZ2FwSW5kZXhdLCBnYXBJbmRleCk7XG5cbiAgICAgICAgICAgICAgICAvLyBPciBsb29wIHRocm91Z2ggdGhlIGRpc3RhbmNlIHRvIGZpcmUgYWxsIGluZGVjaWVzLiBJbmNyZWFzZSBkZWxheS5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBnYXBJbmRleCA8PSBuZXdJbmRleDsgZ2FwSW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodGVtcE1lbWJlcnNbZ2FwSW5kZXhdLCBnYXBJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGkgPSBuZXdJbmRleDtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9zdGFnZ2VyLnN0YXJ0KG5ldyBUd2VlbihzdGFnZ2VyUHJvcHMpKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLypcbiAgICAgICAgQXJyYXkgbWFuaXB1bGF0aW9uXG4gICAgKi9cblxuICAgIEl0ZXJhdG9yLnByb3RvdHlwZS5yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgdGhpcy5tZW1iZXJzLnJldmVyc2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIHJldHVybiBJdGVyYXRvcjtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gSXRlcmF0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtsMFpYSmhkRzl5TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdRVUZCUVN4SlFVRk5MRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenRCUVVONFF5eEpRVUZOTEV0QlFVc3NSMEZCUnl4UFFVRlBMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXp0QlFVTXhReXhKUVVGTkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN08wRkJSWFJETEVsQlFVMHNiMEpCUVc5Q0xFZEJRVWNzVVVGQlVTeERRVUZET3p0QlFVVjBReXhUUVVGVExHZENRVUZuUWl4RFFVRkRMRTFCUVUwc1JVRkJWenR6UTBGQlRpeEpRVUZKTzBGQlFVb3NXVUZCU1RzN08wRkJRM0pETEZGQlFVa3NVVUZCVVN4SFFVRkhMRTFCUVUwc1EwRkJRenM3UVVGRmRFSXNVVUZCU1N4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTzBGQlEzaENMR2RDUVVGUkxFZEJRVWNzVlVGQlF5eE5RVUZOTzIxQ1FVRkxMRTFCUVUwc1EwRkJReXhOUVVGTkxFOUJRVU1zUTBGQlpDeE5RVUZOTEVWQlFWa3NTVUZCU1N4RFFVRkRPMU5CUVVFc1EwRkJRenRMUVVOc1JDeE5RVUZOTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTzBGQlF6bENMR2RDUVVGUkxFZEJRVWNzVlVGQlF5eE5RVUZOTEVWQlFVczdRVUZEYmtJc2EwSkJRVTBzUTBGQlF5eExRVUZMTEUxQlFVRXNRMEZCV2l4TlFVRk5MRWRCUVU4c1RVRkJUU3hUUVVGTExFbEJRVWtzUlVGQlF5eERRVUZETzFOQlEycERMRU5CUVVFN1MwRkRTanM3UVVGRlJDeFhRVUZQTEZGQlFWRXNRMEZCUXp0RFFVTnVRanM3U1VGRlN5eFJRVUZSTzBGQlExWXNZVUZFUlN4UlFVRlJMRU5CUTBVc1QwRkJUeXhGUVVGRk96aENRVVJ1UWl4UlFVRlJPenRCUVVWT0xGbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXpzN1FVRkZZaXhaUVVGSkxFOUJRVThzUlVGQlJUdEJRVU5VTEdkQ1FVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFOQlEzSkNPenRCUVVWRUxGbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NTVUZCU1N4TFFVRkxMRVZCUVVVc1EwRkJRenRMUVVNdlFqczdRVUZVUXl4WlFVRlJMRmRCVjFZc1IwRkJSeXhuUWtGQlF5eFBRVUZQTEVWQlFVVTdRVUZEVkN4WlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRelZETEdWQlFVOHNTVUZCU1N4RFFVRkRPMHRCUTJZN08wRkJaRU1zV1VGQlVTeFhRV2RDVml4TFFVRkxMRzlDUVVGSE8wRkJRMG9zV1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRiRUlzWlVGQlR5eEpRVUZKTEVOQlFVTTdTMEZEWmpzN1FVRnVRa01zV1VGQlVTeFhRWEZDVml4SlFVRkpMR2xDUVVGRExFMUJRVTBzUlVGQlZ6c3lRMEZCVGl4SlFVRkpPMEZCUVVvc1owSkJRVWs3T3p0QlFVTm9RaXhaUVVGTkxGRkJRVkVzUjBGQlJ5eG5Ra0ZCWjBJc2JVSkJRVU1zVFVGQlRTeFRRVUZMTEVsQlFVa3NSVUZCUXl4RFFVRkRPMEZCUTI1RUxGbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wRkJReTlDTEdWQlFVOHNTVUZCU1N4RFFVRkRPMHRCUTJZN08wRkJla0pETEZsQlFWRXNWMEV5UWxZc1YwRkJWeXgzUWtGQlF5eE5RVUZOTEVWQlFWYzdNa05CUVU0c1NVRkJTVHRCUVVGS0xHZENRVUZKT3pzN1FVRkRka0lzV1VGQlRTeFJRVUZSTEVkQlFVY3NaMEpCUVdkQ0xHMUNRVUZETEUxQlFVMHNVMEZCU3l4SlFVRkpMRVZCUVVNc1EwRkJRenRCUVVOdVJDeFpRVUZOTEZkQlFWY3NSMEZCUnl4SlFVRkpMRkZCUVZFc1JVRkJSU3hEUVVGRE96dEJRVVZ1UXl4WlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZETEUxQlFVMDdiVUpCUVVzc1YwRkJWeXhEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1UwRkJRU3hEUVVGRExFTkJRVU03TzBGQlJYQkZMR1ZCUVU4c1YwRkJWeXhEUVVGRE8wdEJRM1JDT3p0QlFXeERReXhaUVVGUkxGZEJiME5XTEU5QlFVOHNiMEpCUVVNc1RVRkJUU3hGUVVGRkxFdEJRVXNzUlVGQlZ6dEJRVU0xUWl4WlFVRk5MRmRCUVZjc1IwRkJSeXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRCUVVOc1JDeFpRVUZOTEZWQlFWVXNSMEZCUnl4WFFVRlhMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRM1JETEZsQlFVMHNaVUZCWlN4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdRVUZETTBNc1dVRkJUU3hSUVVGUkxFZEJRVWNzWlVGQlpTeEhRVUZITEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNc1VVRkJVU3hKUVVGSkxFZEJRVWNzUTBGQlF6czdNa05CU2pORExFbEJRVWs3UVVGQlNpeG5Ra0ZCU1RzN08wRkJTekZDTEZsQlFVMHNVVUZCVVN4SFFVRkhMR2RDUVVGblFpeHRRa0ZCUXl4TlFVRk5MRk5CUVVzc1NVRkJTU3hGUVVGRExFTkJRVU03TzBGQlJXNUVMRmxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlExZ3NXVUZCU1N4WlFVRlpMRWRCUVVjc1JVRkJSU3hEUVVGRE96dEJRVVYwUWl4dlFrRkJXU3hEUVVGRExFMUJRVTBzUjBGQlJ6dEJRVU5zUWl4aFFVRkRMRVZCUVVVN1FVRkRReXgxUWtGQlR5eEZRVUZGTEVOQlFVTXNSMEZCUnp0QlFVTmlMSGRDUVVGUkxFVkJRVVVzVVVGQlVTeEhRVUZITEZWQlFWVTdRVUZETDBJc2IwSkJRVWtzUlVGQlJTeGxRVUZsTEVkQlFVY3NiMEpCUVc5Q0xFZEJRVWNzUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4dlFrRkJiMEk3UVVGRGFrWXNjVUpCUVVzc1JVRkJSU3hKUVVGSk8wRkJRMWdzYTBKQlFVVXNSVUZCUlN4VlFVRlZMRWRCUVVjc1IwRkJSenRoUVVOMlFqdFRRVU5LTEVOQlFVTTdPMEZCUlVZc2IwSkJRVmtzUTBGQlF5eFZRVUZWTEVkQlFVY3NaVUZCWlN4SFFVRkhMRk5CUVZNc1IwRkJSeXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZET3p0QlFVVjZSU3h2UWtGQldTeERRVUZETEZGQlFWRXNSMEZCUnl4VlFVRkRMRTFCUVUwc1JVRkJTenRCUVVOb1F5eG5Ra0ZCVFN4UlFVRlJMRWRCUVVjc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU14UWl4blFrRkJTU3hSUVVGUkxFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTTdPenRCUVVGRExFRkJSM0pDTEdkQ1FVRkpMRkZCUVZFc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTzBGQlEzQkNMSGRDUVVGUkxFTkJRVU1zVjBGQlZ5eERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZMRkZCUVZFc1EwRkJRenM3TzBGQlFVTXNZVUZITjBNc1RVRkJUVHRCUVVOSUxESkNRVUZQTEZGQlFWRXNTVUZCU1N4UlFVRlJMRVZCUVVVc1VVRkJVU3hGUVVGRkxFVkJRVVU3UVVGRGNrTXNaME5CUVZFc1EwRkJReXhYUVVGWExFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN2NVSkJRemRETzJsQ1FVTktPenRCUVVWRUxHRkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTTdVMEZEYUVJc1EwRkJRenM3UVVGRlJpeFpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFdEJRVXNzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRPenRCUVVVM1F5eGxRVUZQTEVsQlFVa3NRMEZCUXp0TFFVTm1PenM3T3pzN1FVRXZSVU1zV1VGQlVTeFhRVzlHVml4UFFVRlBMSE5DUVVGSE8wRkJRMDRzV1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRCUVVOMlFpeGxRVUZQTEVsQlFVa3NRMEZCUXp0TFFVTm1PenRYUVhaR1F5eFJRVUZST3pzN1FVRXdSbVFzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4UlFVRlJMRU5CUVVNaUxDSm1hV3hsSWpvaVNYUmxjbUYwYjNJdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpqYjI1emRDQkJZM1J2Y2lBOUlISmxjWFZwY21Vb0p5NHVMMkZqZEc5eUwwRmpkRzl5SnlrN1hHNWpiMjV6ZENCVWQyVmxiaUE5SUhKbGNYVnBjbVVvSnk0dUwyRmpkR2x2Ym5NdlZIZGxaVzRuS1R0Y2JtTnZibk4wSUhWMGFXeHpJRDBnY21WeGRXbHlaU2duTGk0dmFXNWpMM1YwYVd4ekp5azdYRzVjYm1OdmJuTjBJRVJGUmtGVlRGUmZVMVJCUjBkRlVsOUZRVk5GSUQwZ0oyeHBibVZoY2ljN1hHNWNibVoxYm1OMGFXOXVJR2RsYm1WeVlYUmxRMkZzYkdKaFkyc29iV1YwYUc5a0xDQXVMaTVoY21kektTQjdYRzRnSUNBZ2JHVjBJR05oYkd4aVlXTnJJRDBnYldWMGFHOWtPMXh1WEc0Z0lDQWdhV1lnS0hWMGFXeHpMbWx6VTNSeWFXNW5LRzFsZEdodlpDa3BJSHRjYmlBZ0lDQWdJQ0FnWTJGc2JHSmhZMnNnUFNBb2JXVnRZbVZ5S1NBOVBpQnRaVzFpWlhKYmJXVjBhRzlrWFNndUxpNWhjbWR6S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0NGMWRHbHNjeTVwYzBaMWJtTW9iV1YwYUc5a0tTa2dlMXh1SUNBZ0lDQWdJQ0JqWVd4c1ltRmpheUE5SUNodFpXMWlaWElwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUcxbGJXSmxjaTV6ZEdGeWRDaHRaWFJvYjJRc0lDNHVMbUZ5WjNNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUdOaGJHeGlZV05yTzF4dWZWeHVYRzVqYkdGemN5QkpkR1Z5WVhSdmNpQjdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9iV1Z0WW1WeWN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnNaV0Z5S0NrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0cxbGJXSmxjbk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlXUmtLRzFsYldKbGNuTXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSaFoyZGxjaUE5SUc1bGR5QkJZM1J2Y2lncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdGa1pDaHRaVzFpWlhKektTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXVnRZbVZ5Y3lBOUlIUm9hWE11YldWdFltVnljeTVqYjI1allYUW9iV1Z0WW1WeWN5azdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDFjYmx4dUlDQWdJR05zWldGeUtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMWxiV0psY25NZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWldGamFDaHRaWFJvYjJRc0lDNHVMbUZ5WjNNcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyRnNiR0poWTJzZ1BTQm5aVzVsY21GMFpVTmhiR3hpWVdOcktHMWxkR2h2WkN3Z0xpNHVZWEpuY3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YldWdFltVnljeTVtYjNKRllXTm9LR05oYkd4aVlXTnJLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWldGamFFbHVkRzlPWlhjb2JXVjBhRzlrTENBdUxpNWhjbWR6S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOaGJHeGlZV05ySUQwZ1oyVnVaWEpoZEdWRFlXeHNZbUZqYXlodFpYUm9iMlFzSUM0dUxtRnlaM01wTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J1WlhkSmRHVnlZWFJ2Y2lBOUlHNWxkeUJKZEdWeVlYUnZjaWdwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11YldWdFltVnljeTVtYjNKRllXTm9LQ2h0WlcxaVpYSXBJRDArSUc1bGQwbDBaWEpoZEc5eUxtRmtaQ2hqWVd4c1ltRmpheWh0WlcxaVpYSXBLU2s3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGQwbDBaWEpoZEc5eU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlXZG5aWElvYldWMGFHOWtMQ0J3Y205d2N5d2dMaTR1WVhKbmN5a2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjBaVzF3VFdWdFltVnljeUE5SUhWMGFXeHpMbU52Y0hsQmNuSmhlU2gwYUdsekxtMWxiV0psY25NcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdWRXMU5aVzFpWlhKeklEMGdkR1Z0Y0UxbGJXSmxjbk11YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQndjbTl3YzBselNXNTBaWEoyWVd3Z1BTQjFkR2xzY3k1cGMwNTFiU2h3Y205d2N5azdYRzRnSUNBZ0lDQWdJR052Ym5OMElHbHVkR1Z5ZG1Gc0lEMGdjSEp2Y0hOSmMwbHVkR1Z5ZG1Gc0lEOGdjSEp2Y0hNZ09pQndjbTl3Y3k1cGJuUmxjblpoYkNCOGZDQXhNREE3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR05oYkd4aVlXTnJJRDBnWjJWdVpYSmhkR1ZEWVd4c1ltRmpheWh0WlhSb2IyUXNJQzR1TG1GeVozTXBPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnBJRDBnTFRFN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J6ZEdGbloyVnlVSEp2Y0hNZ1BTQjdmVHRjYmx4dUlDQWdJQ0FnSUNCemRHRm5aMlZ5VUhKdmNITXVkbUZzZFdWeklEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FUb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUTZJQzB3TGpZc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pIVnlZWFJwYjI0NklHbHVkR1Z5ZG1Gc0lDb2diblZ0VFdWdFltVnljeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsWVhObE9pQndjbTl3YzBselNXNTBaWEoyWVd3Z1B5QkVSVVpCVlV4VVgxTlVRVWRIUlZKZlJVRlRSU0E2SUhCeWIzQnpMbVZoYzJVZ2ZId2dSRVZHUVZWTVZGOVRWRUZIUjBWU1gwVkJVMFVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY205MWJtUTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHODZJRzUxYlUxbGJXSmxjbk1nTFNBd0xqWmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0J6ZEdGbloyVnlVSEp2Y0hNdWIyNURiMjF3YkdWMFpTQTlJSEJ5YjNCelNYTkpiblJsY25aaGJDQS9JSFZ1WkdWbWFXNWxaQ0E2SUhCeWIzQnpMbTl1UTI5dGNHeGxkR1U3WEc1Y2JpQWdJQ0FnSUNBZ2MzUmhaMmRsY2xCeWIzQnpMbTl1VlhCa1lYUmxJRDBnS0c5MWRIQjFkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdibVYzU1c1a1pYZ2dQU0J2ZFhSd2RYUXVhVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JuWVhCSmJtUmxlQ0E5SUdrZ0t5QXhPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCdmRYSWdibVYzSUdsdVpHVjRJR2x6SUc5dWJIa2diMjVsSUcxdmNtVWdkR2hoYmlCMGFHVWdjSEpsZG1sdmRYTWdhVzVrWlhnc0lHWnBjbVVnYVcxdFpXUnBaWFJzZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c1bGQwbHVaR1Y0SUQwOVBTQnBJQ3NnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhiR3hpWVdOcktIUmxiWEJOWlcxaVpYSnpXMmRoY0VsdVpHVjRYU3dnWjJGd1NXNWtaWGdwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCUGNpQnNiMjl3SUhSb2NtOTFaMmdnZEdobElHUnBjM1JoYm1ObElIUnZJR1pwY21VZ1lXeHNJR2x1WkdWamFXVnpMaUJKYm1OeVpXRnpaU0JrWld4aGVTNWNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDZzdJR2RoY0VsdVpHVjRJRHc5SUc1bGQwbHVaR1Y0T3lCbllYQkpibVJsZUNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGJHeGlZV05yS0hSbGJYQk5aVzFpWlhKelcyZGhjRWx1WkdWNFhTd2daMkZ3U1c1a1pYZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FTQTlJRzVsZDBsdVpHVjRPMXh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOMFlXZG5aWEl1YzNSaGNuUW9ibVYzSUZSM1pXVnVLSE4wWVdkblpYSlFjbTl3Y3lrcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxWEc0Z0lDQWdJQ0FnSUVGeWNtRjVJRzFoYm1sd2RXeGhkR2x2Ymx4dUlDQWdJQ292WEc0Z0lDQWdjbVYyWlhKelpTZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXRaVzFpWlhKekxuSmxkbVZ5YzJVb0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFbDBaWEpoZEc5eU95SmRmUT09XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9pdGVyYXRvci9JdGVyYXRvci5qc1xuICoqIG1vZHVsZSBpZCA9IDI5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL2luYy91dGlscycpO1xudmFyIGVhY2ggPSB1dGlscy5lYWNoO1xuXG4vKlxuICAgIFJvbGUgY2xhc3MgY29uc3RydWN0b3JcblxuICAgIEBwYXJhbSBbb2JqZWN0XTogT3B0aW9uYWwgbWV0aG9kcyBhbmQgcHJvcHMgdG8gYWRkOlxuICAgICAgICBuYW1lIFtzdHJpbmddOiAgICAgIE5hbWUgb2YgZ2VuZXJhdGVkIGdldHRlci9zZXR0ZXIgbWV0aG9kIG9uIEFjdG9yXG4gICAgICAgIF9tYXAgW29iamVjdF06ICAgICAgTWFwIEFjdG9yIHZhbHVlcyB0byB0aGVzZSB2YWx1ZXMgZm9yIHRoaXMgUm9sZVxuICAgICAgICBfdHlwZU1hcCBbb2JqZWN0XTogIE1hcCB2YWx1ZXMgdG8gdmFsdWUgdHlwZXNcbiAgICAgICAgaW5pdCBbZnVuY3Rpb25dOiAgICBDYWxsYmFjayB0byBydW4gd2hlbiB0aGlzIFJvbGUgaXMgYWRkZWQgdG8gYW4gQWN0b3JcbiAgICAgICAgc3RhcnQgW2Z1bmN0aW9uXTogICBDYWxsYmFjayB0byBydW4gd2hlbiBob3N0IEFjdG9yIHN0YXJ0cyBhbiBhY3Rpb25cbiAgICAgICAgY29tcGxldGUgW2Z1bmN0aW9uXTogQ2FsbGJhY2sgdG8gcnVuIHdoZW4gYWN0aW9uIGNvbXBsZXRlc1xuICAgICAgICBmcmFtZSBbZnVuY3Rpb25dOiAgIENhbGxiYWNrIHRvIGZpcmUgb25jZSBwZXIgZnJhbWVcbiAgICAgICAgdXBkYXRlIFtmdW5jdGlvbl06ICBDYWxsYmFjayB0byBmaXJlIHdoZW4gdmFsdWVzIGNoYW5nZVxuICAgICAgICBnZXQgW2Z1bmN0aW9uXTogICAgIFJlYWQgdmFsdWUgZnJvbSBhY3R1YWwgZWxlbWVudFxuICAgICAgICBzZXQgW2Z1bmN0aW9uXTogICAgIFNldCB2YWx1ZSBvbiBhY3R1YWwgZWxlbWVudFxuKi9cbnZhciBSb2xlID0gZnVuY3Rpb24gKG1ldGhvZHMpIHtcbiAgICB2YXIgcm9sZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRzLCBwcm9wKSB7XG4gICAgICAgIHZhciB0eXBlT2ZPcHRzID0gdHlwZW9mIG9wdHM7XG5cbiAgICAgICAgLy8gU2V0IHNpbmdsZSwgaWYgdGhpcyBpcyBhIHN0cmluZyBhbmQgd2UgaGF2ZSBhIHByb3BlcnR5XG4gICAgICAgIGlmICh0eXBlT2ZPcHRzID09PSAnc3RyaW5nJyAmJiBwcm9wKSB7XG4gICAgICAgICAgICByb2xlLnNldChlbGVtZW50LCBvcHRzLCBwcm9wKTtcblxuICAgICAgICAgICAgLy8gU2V0IG11bHRpLCBpZiB0aGlzIGlzIGFuIG9iamVjdFxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVPZk9wdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgZWFjaChvcHRzLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByb2xlLnNldChlbGVtZW50LCBrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIE9yIHRoaXMgaXMgYSBnZXQgaWYgd2UgaGF2ZSBhIHN0cmluZyBhbmQgbm8gcHJvcHNcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByb2xlLmdldChlbGVtZW50LCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJvbGU7XG4gICAgfTtcblxuICAgIHJvbGUuX21hcCA9IHt9O1xuXG4gICAgZWFjaChtZXRob2RzLCBmdW5jdGlvbiAobmFtZSwgbWV0aG9kKSB7XG4gICAgICAgIHJvbGVbbmFtZV0gPSAhdXRpbHMuaXNPYmoobWV0aG9kKSA/IG1ldGhvZCA6IHV0aWxzLmNvcHkobWV0aG9kKTtcbiAgICB9KTtcblxuICAgIC8qXG4gICAgICAgIE1hcCB2YWx1ZSBrZXlzIG9yIGdlbmVyYXRlIG5ldyBSb2xlIHdpdGggdXBkYXRlZCBtYXBcbiAgICAgICAgIEdldHRlcjpcbiAgICAgICAgICAgIEBwYXJhbSBbc3RyaW5nXTogS2V5IHRvIG1hcFxuICAgICAgICAgICAgQHJldHVybiBbc3RyaW5nXTogTWFwcGVkIGtleSwgb3Iga2V5IGlmIG5vIG1hcHBlZCBrZXkgZm91bmRcbiAgICAgICAgIFNldHRlcjogXG4gICAgICAgICAgICBAcGFyYW0gW29iamVjdF06IE1hcCBvZiBBY3RvciBrZXlzIC0+IFJvbGUga2V5c1xuICAgICAgICAgICAgQHJldHVybiBbUm9sZV06IE5ldyBSb2xlIHdpdGggdW5pcXVlIG1hcFxuICAgICovXG4gICAgcm9sZS5tYXAgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSBzdHJpbmcsIGdldCBtYXBwZWQgdmFsdWVcbiAgICAgICAgLy8gT3RoZXJ3aXNlIHRoaXMgaXMgYSBtYXAsIGR1cGxpY2F0ZWQgcm9sZSB3aXRoIHVwZGF0ZWQgbWFwXG4gICAgICAgIHJldHVybiB1dGlscy5pc1N0cmluZyh2YWx1ZXMpID8gdGhpcy5fbWFwW3ZhbHVlc10gfHwgdmFsdWVzIDogY3JlYXRlUm9sZSh0aGlzLCB2YWx1ZXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gcm9sZTtcbn07XG5cbi8qXG4gICAgQ3JlYXRlIGEgbmV3IHJvbGVcblxuICAgIEBwYXJhbSBbb2JqZWN0XTogT3B0aW9uYWwgbWV0aG9kcyBhbmQgcHJvcHMgdG8gYWRkXG4gICAgQHBhcmFtIFt2YWx1ZXNUb01hcF06IE92ZXJyaWRlIGV4aXN0aW5nIG1hcCB3aXRoIHRoZXNlIHZhbHVlc1xuICAgIEByZXR1cm4gW1JvbGVdOiBOZXcgUm9sZVxuKi9cbnZhciBjcmVhdGVSb2xlID0gZnVuY3Rpb24gKG1ldGhvZHMsIHZhbHVlcykge1xuICAgIHZhciBuZXdSb2xlID0gbmV3IFJvbGUobWV0aG9kcyk7XG5cbiAgICBlYWNoKHZhbHVlcywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgbmV3Um9sZS5fbWFwW2tleV0gPSB2YWx1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXdSb2xlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSb2xlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSnZiR1V1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN1FVRkRjRU1zU1VGQlNTeEpRVUZKTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWxCUVVrN096czdPenM3T3pzN096czdPenM3TzBGQlFVTXNRVUZwUW5SQ0xFbEJRVWtzU1VGQlNTeEhRVUZITEZWQlFWVXNUMEZCVHl4RlFVRkZPMEZCUXpGQ0xGRkJRVWtzU1VGQlNTeEhRVUZITEZWQlFWVXNUMEZCVHl4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVU3UVVGRGRFTXNXVUZCU1N4VlFVRlZMRWRCUVVjc1QwRkJUeXhKUVVGSk96czdRVUZCUXl4QlFVYzNRaXhaUVVGSkxGVkJRVlVzUzBGQlN5eFJRVUZSTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTJwRExHZENRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZET3pzN1FVRkJReXhUUVVkcVF5eE5RVUZOTEVsQlFVa3NWVUZCVlN4TFFVRkxMRkZCUVZFc1JVRkJSVHRCUVVOb1F5eHZRa0ZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hWUVVGRExFZEJRVWNzUlVGQlJTeExRVUZMTEVWQlFVczdRVUZEZGtJc2QwSkJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RlFVRkZMRWRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dHBRa0ZEYWtNc1EwRkJRenM3TzBGQlFVTXNZVUZIVGl4TlFVRk5PMEZCUTBnc01rSkJRVThzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03YVVKQlEyeERPenRCUVVWRUxHVkJRVThzU1VGQlNTeERRVUZETzB0QlEyWXNRMEZCUXpzN1FVRkZSaXhSUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVWQlFVVXNRMEZCUXpzN1FVRkZaaXhSUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFWVXNTVUZCU1N4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVOc1F5eFpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1FVRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVrc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1MwRkRja1VzUTBGQlF6czdPenM3T3pzN096czdRVUZCUXl4QlFXTklMRkZCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzVlVGQlZTeE5RVUZOTEVWQlFVVTdPenRCUVVkNlFpeGxRVUZQTEVGQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFMUJRVTBzUjBGQlJ5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wdEJRelZHTEVOQlFVTTdPMEZCUlVZc1YwRkJUeXhKUVVGSkxFTkJRVU03UTBGRFpqczdPenM3T3pzN08wRkJRVU1zUVVGVFJpeEpRVUZKTEZWQlFWVXNSMEZCUnl4VlFVRlZMRTlCUVU4c1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGRGVFTXNVVUZCU1N4UFFVRlBMRWRCUVVjc1NVRkJTU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdPMEZCUldoRExGRkJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNWVUZCVlN4SFFVRkhMRVZCUVVVc1MwRkJTeXhGUVVGRk8wRkJReTlDTEdWQlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETzB0QlF6ZENMRU5CUVVNc1EwRkJRenM3UVVGRlNDeFhRVUZQTEU5QlFVOHNRMEZCUXp0RFFVTnNRaXhEUVVGRE96dEJRVVZHTEUxQlFVMHNRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRElpd2labWxzWlNJNklsSnZiR1V1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1TGk5cGJtTXZkWFJwYkhNbktUdGNiblpoY2lCbFlXTm9JRDBnZFhScGJITXVaV0ZqYUR0Y2JseHVMeXBjYmlBZ0lDQlNiMnhsSUdOc1lYTnpJR052Ym5OMGNuVmpkRzl5WEc1Y2JpQWdJQ0JBY0dGeVlXMGdXMjlpYW1WamRGMDZJRTl3ZEdsdmJtRnNJRzFsZEdodlpITWdZVzVrSUhCeWIzQnpJSFJ2SUdGa1pEcGNiaUFnSUNBZ0lDQWdibUZ0WlNCYmMzUnlhVzVuWFRvZ0lDQWdJQ0JPWVcxbElHOW1JR2RsYm1WeVlYUmxaQ0JuWlhSMFpYSXZjMlYwZEdWeUlHMWxkR2h2WkNCdmJpQkJZM1J2Y2x4dUlDQWdJQ0FnSUNCZmJXRndJRnR2WW1wbFkzUmRPaUFnSUNBZ0lFMWhjQ0JCWTNSdmNpQjJZV3gxWlhNZ2RHOGdkR2hsYzJVZ2RtRnNkV1Z6SUdadmNpQjBhR2x6SUZKdmJHVmNiaUFnSUNBZ0lDQWdYM1I1Y0dWTllYQWdXMjlpYW1WamRGMDZJQ0JOWVhBZ2RtRnNkV1Z6SUhSdklIWmhiSFZsSUhSNWNHVnpYRzRnSUNBZ0lDQWdJR2x1YVhRZ1cyWjFibU4wYVc5dVhUb2dJQ0FnUTJGc2JHSmhZMnNnZEc4Z2NuVnVJSGRvWlc0Z2RHaHBjeUJTYjJ4bElHbHpJR0ZrWkdWa0lIUnZJR0Z1SUVGamRHOXlYRzRnSUNBZ0lDQWdJSE4wWVhKMElGdG1kVzVqZEdsdmJsMDZJQ0FnUTJGc2JHSmhZMnNnZEc4Z2NuVnVJSGRvWlc0Z2FHOXpkQ0JCWTNSdmNpQnpkR0Z5ZEhNZ1lXNGdZV04wYVc5dVhHNGdJQ0FnSUNBZ0lHTnZiWEJzWlhSbElGdG1kVzVqZEdsdmJsMDZJRU5oYkd4aVlXTnJJSFJ2SUhKMWJpQjNhR1Z1SUdGamRHbHZiaUJqYjIxd2JHVjBaWE5jYmlBZ0lDQWdJQ0FnWm5KaGJXVWdXMloxYm1OMGFXOXVYVG9nSUNCRFlXeHNZbUZqYXlCMGJ5Qm1hWEpsSUc5dVkyVWdjR1Z5SUdaeVlXMWxYRzRnSUNBZ0lDQWdJSFZ3WkdGMFpTQmJablZ1WTNScGIyNWRPaUFnUTJGc2JHSmhZMnNnZEc4Z1ptbHlaU0IzYUdWdUlIWmhiSFZsY3lCamFHRnVaMlZjYmlBZ0lDQWdJQ0FnWjJWMElGdG1kVzVqZEdsdmJsMDZJQ0FnSUNCU1pXRmtJSFpoYkhWbElHWnliMjBnWVdOMGRXRnNJR1ZzWlcxbGJuUmNiaUFnSUNBZ0lDQWdjMlYwSUZ0bWRXNWpkR2x2YmwwNklDQWdJQ0JUWlhRZ2RtRnNkV1VnYjI0Z1lXTjBkV0ZzSUdWc1pXMWxiblJjYmlvdlhHNTJZWElnVW05c1pTQTlJR1oxYm1OMGFXOXVJQ2h0WlhSb2IyUnpLU0I3WEc0Z0lDQWdkbUZ5SUhKdmJHVWdQU0JtZFc1amRHbHZiaUFvWld4bGJXVnVkQ3dnYjNCMGN5d2djSEp2Y0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnZEhsd1pVOW1UM0IwY3lBOUlIUjVjR1Z2WmlCdmNIUnpPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGTmxkQ0J6YVc1bmJHVXNJR2xtSUhSb2FYTWdhWE1nWVNCemRISnBibWNnWVc1a0lIZGxJR2hoZG1VZ1lTQndjbTl3WlhKMGVWeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pVOW1UM0IwY3lBOVBUMGdKM04wY21sdVp5Y2dKaVlnY0hKdmNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtOXNaUzV6WlhRb1pXeGxiV1Z1ZEN3Z2IzQjBjeXdnY0hKdmNDazdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0F2THlCVFpYUWdiWFZzZEdrc0lHbG1JSFJvYVhNZ2FYTWdZVzRnYjJKcVpXTjBYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pVOW1UM0IwY3lBOVBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVmhZMmdvYjNCMGN5d2dLR3RsZVN3Z2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliMnhsTG5ObGRDaGxiR1Z0Wlc1MExDQnJaWGtzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnTHk4Z1QzSWdkR2hwY3lCcGN5QmhJR2RsZENCcFppQjNaU0JvWVhabElHRWdjM1J5YVc1bklHRnVaQ0J1YnlCd2NtOXdjMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKdmJHVXVaMlYwS0dWc1pXMWxiblFzSUc5d2RITXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKdmJHVTdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lISnZiR1V1WDIxaGNDQTlJSHQ5TzF4dVhHNGdJQ0FnWldGamFDaHRaWFJvYjJSekxDQm1kVzVqZEdsdmJpQW9ibUZ0WlN3Z2JXVjBhRzlrS1NCN1hHNGdJQ0FnSUNBZ0lISnZiR1ZiYm1GdFpWMGdQU0FvSVhWMGFXeHpMbWx6VDJKcUtHMWxkR2h2WkNrcElEOGdiV1YwYUc5a0lEb2dkWFJwYkhNdVkyOXdlU2h0WlhSb2IyUXBPMXh1SUNBZ0lIMHBPMXh1WEc1Y2JpQWdJQ0F2S2x4dUlDQWdJQ0FnSUNCTllYQWdkbUZzZFdVZ2EyVjVjeUJ2Y2lCblpXNWxjbUYwWlNCdVpYY2dVbTlzWlNCM2FYUm9JSFZ3WkdGMFpXUWdiV0Z3WEc1Y2JpQWdJQ0FnSUNBZ1IyVjBkR1Z5T2x4dUlDQWdJQ0FnSUNBZ0lDQWdRSEJoY21GdElGdHpkSEpwYm1kZE9pQkxaWGtnZEc4Z2JXRndYRzRnSUNBZ0lDQWdJQ0FnSUNCQWNtVjBkWEp1SUZ0emRISnBibWRkT2lCTllYQndaV1FnYTJWNUxDQnZjaUJyWlhrZ2FXWWdibThnYldGd2NHVmtJR3RsZVNCbWIzVnVaRnh1WEc0Z0lDQWdJQ0FnSUZObGRIUmxjam9nWEc0Z0lDQWdJQ0FnSUNBZ0lDQkFjR0Z5WVcwZ1cyOWlhbVZqZEYwNklFMWhjQ0J2WmlCQlkzUnZjaUJyWlhseklDMCtJRkp2YkdVZ2EyVjVjMXh1SUNBZ0lDQWdJQ0FnSUNBZ1FISmxkSFZ5YmlCYlVtOXNaVjA2SUU1bGR5QlNiMnhsSUhkcGRHZ2dkVzVwY1hWbElHMWhjRnh1SUNBZ0lDb3ZYRzRnSUNBZ2NtOXNaUzV0WVhBZ1BTQm1kVzVqZEdsdmJpQW9kbUZzZFdWektTQjdYRzRnSUNBZ0lDQWdJQzh2SUVsbUlIUm9hWE1nYVhNZ1lTQnpkSEpwYm1jc0lHZGxkQ0J0WVhCd1pXUWdkbUZzZFdWY2JpQWdJQ0FnSUNBZ0x5OGdUM1JvWlhKM2FYTmxJSFJvYVhNZ2FYTWdZU0J0WVhBc0lHUjFjR3hwWTJGMFpXUWdjbTlzWlNCM2FYUm9JSFZ3WkdGMFpXUWdiV0Z3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvZFhScGJITXVhWE5UZEhKcGJtY29kbUZzZFdWektTa2dQeUIwYUdsekxsOXRZWEJiZG1Gc2RXVnpYU0I4ZkNCMllXeDFaWE1nT2lCamNtVmhkR1ZTYjJ4bEtIUm9hWE1zSUhaaGJIVmxjeWs3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnliMnhsTzF4dWZUdGNibHh1THlwY2JpQWdJQ0JEY21WaGRHVWdZU0J1WlhjZ2NtOXNaVnh1WEc0Z0lDQWdRSEJoY21GdElGdHZZbXBsWTNSZE9pQlBjSFJwYjI1aGJDQnRaWFJvYjJSeklHRnVaQ0J3Y205d2N5QjBieUJoWkdSY2JpQWdJQ0JBY0dGeVlXMGdXM1poYkhWbGMxUnZUV0Z3WFRvZ1QzWmxjbkpwWkdVZ1pYaHBjM1JwYm1jZ2JXRndJSGRwZEdnZ2RHaGxjMlVnZG1Gc2RXVnpYRzRnSUNBZ1FISmxkSFZ5YmlCYlVtOXNaVjA2SUU1bGR5QlNiMnhsWEc0cUwxeHVkbUZ5SUdOeVpXRjBaVkp2YkdVZ1BTQm1kVzVqZEdsdmJpQW9iV1YwYUc5a2N5d2dkbUZzZFdWektTQjdYRzRnSUNBZ2RtRnlJRzVsZDFKdmJHVWdQU0J1WlhjZ1VtOXNaU2h0WlhSb2IyUnpLVHRjYmx4dUlDQWdJR1ZoWTJnb2RtRnNkV1Z6TENCbWRXNWpkR2x2YmlBb2EyVjVMQ0IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0J1WlhkU2IyeGxMbDl0WVhCYmEyVjVYU0E5SUhaaGJIVmxPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkMUp2YkdVN1hHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZKdmJHVTdJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9yb2xlcy9Sb2xlLmpzXG4gKiogbW9kdWxlIGlkID0gMzBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJlemllciA9IHJlcXVpcmUoJy4vQmV6aWVyJyksXG5cbi8qXG4gICAgTWlycm9yIGVhc2luZ1xuICAgIFxuICAgIE1pcnJvcnMgdGhlIHByb3ZpZGVkIGVhc2luZyBmdW5jdGlvbiwgdXNlZCBoZXJlIGZvciBtaXJyb3JpbmcgYW5cbiAgICBlYXNlSW4gaW50byBhbiBlYXNlSW5PdXRcbiAgICBcbiAgICBAcGFyYW0gW251bWJlcl06IFByb2dyZXNzLCBmcm9tIDAgLSAxLCBvZiBjdXJyZW50IHNoaWZ0XG4gICAgQHBhcmFtIFtmdW5jdGlvbl06IFRoZSBlYXNpbmcgZnVuY3Rpb24gdG8gbWlycm9yXG4gICAgQHJldHVybnMgW251bWJlcl06IFRoZSBlYXNpbmctYWRqdXN0ZWQgZGVsdGFcbiovXG5taXJyb3JFYXNpbmcgPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9ncmVzcywgc3RyZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHByb2dyZXNzIDw9IDAuNSA/IG1ldGhvZCgyICogcHJvZ3Jlc3MsIHN0cmVuZ3RoKSAvIDIgOiAoMiAtIG1ldGhvZCgyICogKDEgLSBwcm9ncmVzcyksIHN0cmVuZ3RoKSkgLyAyO1xuICAgIH07XG59LFxuXG4vKlxuICAgIFJldmVyc2UgZWFzaW5nXG4gICAgXG4gICAgUmV2ZXJzZXMgdGhlIG91dHB1dCBvZiB0aGUgcHJvdmlkZWQgZWFzaW5nIGZ1bmN0aW9uLCB1c2VkIGZvciBmbGlwcGluZyBlYXNlSW5cbiAgICBjdXJ2ZSB0byBhbiBlYXNlT3V0LlxuICAgIFxuICAgIEBwYXJhbSBbbnVtYmVyXTogUHJvZ3Jlc3MsIGZyb20gMCAtIDEsIG9mIGN1cnJlbnQgc2hpZnRcbiAgICBAcGFyYW0gW2Z1bmN0aW9uXTogVGhlIGVhc2luZyBmdW5jdGlvbiB0byByZXZlcnNlXG4gICAgQHJldHVybnMgW251bWJlcl06IFRoZSBlYXNpbmctYWRqdXN0ZWQgZGVsdGFcbiovXG5yZXZlcnNlRWFzaW5nID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocHJvZ3Jlc3MsIHN0cmVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAxIC0gbWV0aG9kKDEgLSBwcm9ncmVzcywgc3RyZW5ndGgpO1xuICAgIH07XG59O1xuXG4vKlxuICAgIEVhc2luZyBjbGFzc1xuXG4gICAgSWYgcHJvdmlkZWQgZWFzaW5nIGZ1bmN0aW9uLCByZXR1cm5zIGVhc2luZyBmdW5jdGlvbiB3aXRoIFxuICAgIGluL291dC9pbk91dCB2YXJpYXRpb25zXG5cbiAgICBJZiBwcm92aWRlZCBmb3VyIGFyZ3VtZW50cywgcmV0dXJucyBuZXcgQmV6aWVyIGNsYXNzIGluc3RlYWQuXG4qL1xudmFyIEVhc2luZyA9IGZ1bmN0aW9uICh4MSwgeTEsIHgyLCB5Mikge1xuICAgIHZhciBtZXRob2QgPSB4MSxcbiAgICAgICAgZWFzaW5nRnVuY3Rpb247XG5cbiAgICAvLyBJZiB0aGlzIGlzIGEgYmV6aWVyIGN1cnZlLCByZXR1cm4gYSBiZXppZXIgZnVuY3Rpb25cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZWFzaW5nRnVuY3Rpb24gPSBuZXcgQmV6aWVyKHgxLCB5MSwgeDIsIHkyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBlYXNpbmdGdW5jdGlvbiA9IGZ1bmN0aW9uIChwcm9ncmVzcywgc3RyZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXRob2QocHJvZ3Jlc3MsIHN0cmVuZ3RoKTtcbiAgICAgICAgfTtcbiAgICAgICAgZWFzaW5nRnVuY3Rpb24uaW4gPSBmdW5jdGlvbiAocHJvZ3Jlc3MsIHN0cmVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kKHByb2dyZXNzLCBzdHJlbmd0aCk7XG4gICAgICAgIH07XG4gICAgICAgIGVhc2luZ0Z1bmN0aW9uLm91dCA9IHJldmVyc2VFYXNpbmcobWV0aG9kKTtcbiAgICAgICAgZWFzaW5nRnVuY3Rpb24uaW5PdXQgPSBtaXJyb3JFYXNpbmcobWV0aG9kKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWFzaW5nRnVuY3Rpb247XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVhc2luZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa1ZoYzJsdVp5NXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFbEJRVWtzVFVGQlRTeEhRVUZITEU5QlFVOHNRMEZCUXl4VlFVRlZMRU5CUVVNN096czdPenM3T3pzN096dEJRVmsxUWl4WlFVRlpMRWRCUVVjc1ZVRkJRU3hOUVVGTk8xZEJRVWtzVlVGQlF5eFJRVUZSTEVWQlFVVXNVVUZCVVR0bFFVRkxMRUZCUVVNc1VVRkJVU3hKUVVGSkxFZEJRVWNzUjBGQlNTeE5RVUZOTEVOQlFVTXNRMEZCUXl4SFFVRkhMRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkJMRUZCUVVNc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlFTeEhRVUZKTEVOQlFVTTdTMEZCUVR0RFFVRkJPenM3T3pzN096czdPenM3UVVGWmVFb3NZVUZCWVN4SFFVRkhMRlZCUVVFc1RVRkJUVHRYUVVGSkxGVkJRVU1zVVVGQlVTeEZRVUZGTEZGQlFWRTdaVUZCU3l4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFTkJRVU1zUjBGQlJ5eFJRVUZSTEVWQlFVVXNVVUZCVVN4RFFVRkRPMHRCUVVFN1EwRkJRVHM3T3pzN096czdPenRCUVVGRExFRkJWWHBHTEVsQlFVa3NUVUZCVFN4SFFVRkhMRlZCUVZVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZPMEZCUTI1RExGRkJRVWtzVFVGQlRTeEhRVUZITEVWQlFVVTdVVUZEV0N4alFVRmpPenM3UVVGQlF5eEJRVWR1UWl4UlFVRkpMRk5CUVZNc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTzBGQlEzUkNMSE5DUVVGakxFZEJRVWNzU1VGQlNTeE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdTMEZGTDBNc1RVRkJUVHRCUVVOSUxITkNRVUZqTEVkQlFVY3NWVUZCUXl4UlFVRlJMRVZCUVVVc1VVRkJVVHR0UWtGQlN5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJRenRUUVVGQkxFTkJRVU03UVVGRGNFVXNjMEpCUVdNc1EwRkJReXhGUVVGRkxFZEJRVWNzVlVGQlF5eFJRVUZSTEVWQlFVVXNVVUZCVVR0dFFrRkJTeXhOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXp0VFFVRkJMRU5CUVVNN1FVRkRka1VzYzBKQlFXTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1lVRkJZU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlF6TkRMSE5DUVVGakxFTkJRVU1zUzBGQlN5eEhRVUZITEZsQlFWa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRMUVVNdlF6czdRVUZGUkN4WFFVRlBMR05CUVdNc1EwRkJRenREUVVONlFpeERRVUZET3p0QlFVVkdMRTFCUVUwc1EwRkJReXhQUVVGUExFZEJRVWNzVFVGQlRTeERRVUZESWl3aVptbHNaU0k2SWtWaGMybHVaeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJDWlhwcFpYSWdQU0J5WlhGMWFYSmxLQ2N1TDBKbGVtbGxjaWNwTEZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ1RXbHljbTl5SUdWaGMybHVaMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnVFdseWNtOXljeUIwYUdVZ2NISnZkbWxrWldRZ1pXRnphVzVuSUdaMWJtTjBhVzl1TENCMWMyVmtJR2hsY21VZ1ptOXlJRzFwY25KdmNtbHVaeUJoYmx4dUlDQWdJQ0FnSUNCbFlYTmxTVzRnYVc1MGJ5QmhiaUJsWVhObFNXNVBkWFJjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUVCd1lYSmhiU0JiYm5WdFltVnlYVG9nVUhKdlozSmxjM01zSUdaeWIyMGdNQ0F0SURFc0lHOW1JR04xY25KbGJuUWdjMmhwWm5SY2JpQWdJQ0FnSUNBZ1FIQmhjbUZ0SUZ0bWRXNWpkR2x2YmwwNklGUm9aU0JsWVhOcGJtY2dablZ1WTNScGIyNGdkRzhnYldseWNtOXlYRzRnSUNBZ0lDQWdJRUJ5WlhSMWNtNXpJRnR1ZFcxaVpYSmRPaUJVYUdVZ1pXRnphVzVuTFdGa2FuVnpkR1ZrSUdSbGJIUmhYRzRnSUNBZ0tpOWNiaUFnSUNCdGFYSnliM0pGWVhOcGJtY2dQU0J0WlhSb2IyUWdQVDRnS0hCeWIyZHlaWE56TENCemRISmxibWQwYUNrZ1BUNGdLSEJ5YjJkeVpYTnpJRHc5SURBdU5Ta2dQeUJ0WlhSb2IyUW9NaUFxSUhCeWIyZHlaWE56TENCemRISmxibWQwYUNrZ0x5QXlJRG9nS0RJZ0xTQnRaWFJvYjJRb01pQXFJQ2d4SUMwZ2NISnZaM0psYzNNcExDQnpkSEpsYm1kMGFDa3BJQzhnTWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRnh1SUNBZ0lDOHFYRzRnSUNBZ0lDQWdJRkpsZG1WeWMyVWdaV0Z6YVc1blhHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQlNaWFpsY25ObGN5QjBhR1VnYjNWMGNIVjBJRzltSUhSb1pTQndjbTkyYVdSbFpDQmxZWE5wYm1jZ1puVnVZM1JwYjI0c0lIVnpaV1FnWm05eUlHWnNhWEJ3YVc1bklHVmhjMlZKYmx4dUlDQWdJQ0FnSUNCamRYSjJaU0IwYnlCaGJpQmxZWE5sVDNWMExseHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdRSEJoY21GdElGdHVkVzFpWlhKZE9pQlFjbTluY21WemN5d2dabkp2YlNBd0lDMGdNU3dnYjJZZ1kzVnljbVZ1ZENCemFHbG1kRnh1SUNBZ0lDQWdJQ0JBY0dGeVlXMGdXMloxYm1OMGFXOXVYVG9nVkdobElHVmhjMmx1WnlCbWRXNWpkR2x2YmlCMGJ5QnlaWFpsY25ObFhHNGdJQ0FnSUNBZ0lFQnlaWFIxY201eklGdHVkVzFpWlhKZE9pQlVhR1VnWldGemFXNW5MV0ZrYW5WemRHVmtJR1JsYkhSaFhHNGdJQ0FnS2k5Y2JpQWdJQ0J5WlhabGNuTmxSV0Z6YVc1bklEMGdiV1YwYUc5a0lEMCtJQ2h3Y205bmNtVnpjeXdnYzNSeVpXNW5kR2dwSUQwK0lERWdMU0J0WlhSb2IyUW9NU0F0SUhCeWIyZHlaWE56TENCemRISmxibWQwYUNrN1hHNWNiaThxWEc0Z0lDQWdSV0Z6YVc1bklHTnNZWE56WEc1Y2JpQWdJQ0JKWmlCd2NtOTJhV1JsWkNCbFlYTnBibWNnWm5WdVkzUnBiMjRzSUhKbGRIVnlibk1nWldGemFXNW5JR1oxYm1OMGFXOXVJSGRwZEdnZ1hHNGdJQ0FnYVc0dmIzVjBMMmx1VDNWMElIWmhjbWxoZEdsdmJuTmNibHh1SUNBZ0lFbG1JSEJ5YjNacFpHVmtJR1p2ZFhJZ1lYSm5kVzFsYm5SekxDQnlaWFIxY201eklHNWxkeUJDWlhwcFpYSWdZMnhoYzNNZ2FXNXpkR1ZoWkM1Y2Jpb3ZYRzUyWVhJZ1JXRnphVzVuSUQwZ1puVnVZM1JwYjI0Z0tIZ3hMQ0I1TVN3Z2VESXNJSGt5S1NCN1hHNGdJQ0FnZG1GeUlHMWxkR2h2WkNBOUlIZ3hMRnh1SUNBZ0lDQWdJQ0JsWVhOcGJtZEdkVzVqZEdsdmJqdGNibHh1SUNBZ0lDOHZJRWxtSUhSb2FYTWdhWE1nWVNCaVpYcHBaWElnWTNWeWRtVXNJSEpsZEhWeWJpQmhJR0psZW1sbGNpQm1kVzVqZEdsdmJseHVJQ0FnSUdsbUlDaGhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU2tnZTF4dUlDQWdJQ0FnSUNCbFlYTnBibWRHZFc1amRHbHZiaUE5SUc1bGR5QkNaWHBwWlhJb2VERXNJSGt4TENCNE1pd2dlVElwTzF4dVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWldGemFXNW5SblZ1WTNScGIyNGdQU0FvY0hKdlozSmxjM01zSUhOMGNtVnVaM1JvS1NBOVBpQnRaWFJvYjJRb2NISnZaM0psYzNNc0lITjBjbVZ1WjNSb0tUdGNiaUFnSUNBZ0lDQWdaV0Z6YVc1blJuVnVZM1JwYjI0dWFXNGdQU0FvY0hKdlozSmxjM01zSUhOMGNtVnVaM1JvS1NBOVBpQnRaWFJvYjJRb2NISnZaM0psYzNNc0lITjBjbVZ1WjNSb0tUdGNiaUFnSUNBZ0lDQWdaV0Z6YVc1blJuVnVZM1JwYjI0dWIzVjBJRDBnY21WMlpYSnpaVVZoYzJsdVp5aHRaWFJvYjJRcE8xeHVJQ0FnSUNBZ0lDQmxZWE5wYm1kR2RXNWpkR2x2Ymk1cGJrOTFkQ0E5SUcxcGNuSnZja1ZoYzJsdVp5aHRaWFJvYjJRcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJsWVhOcGJtZEdkVzVqZEdsdmJqdGNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1JXRnphVzVuT3lKZGZRPT1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2FjdGlvbnMvdHdlZW4vRWFzaW5nLmpzXG4gKiogbW9kdWxlIGlkID0gMzFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLy8gSW1wb3J0c1xudmFyIGNhbGMgPSByZXF1aXJlKCcuLi9pbmMvY2FsYycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vaW5jL3V0aWxzJyk7XG52YXIgQ29udHJvbHMgPSByZXF1aXJlKCcuLi9jb250cm9scy9Db250cm9scycpO1xudmFyIGVhY2ggPSB1dGlscy5lYWNoO1xuXG4vLyBWYWx1ZXNcbnZhciBERUZBVUxUX1BST1AgPSAnY3VycmVudCc7XG52YXIgUFJJVkFURSA9IFsnb25TdGFydCcsICdvbkZyYW1lJywgJ29uVXBkYXRlJywgJ29uQ29tcGxldGUnXTtcblxudmFyIEFjdGlvbiA9IChmdW5jdGlvbiAoKSB7XG5cbiAgICAvKlxuICAgICAgICAjIEFjdGlvbiBjbGFzcyBjb25zdHJ1Y3RvclxuICAgICAgICAjIyBBc3NpZ24gZGVmYXVsdCBwcm9wZXJ0aWVzIG9mIEFjdGlvbiBvciBleHRlbmRlZCBjbGFzcyBhbmQgc2V0IHVzZXItZGVmaW5lZCBwcm9wc1xuICAgICAgICAgQHBhcmFtIFtvYmplY3RdXG4gICAgKi9cblxuICAgIGZ1bmN0aW9uIEFjdGlvbihwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBY3Rpb24pO1xuXG4gICAgICAgIGVhY2godGhpcy5nZXREZWZhdWx0UHJvcHMoKSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy52YWx1ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5zZXQocHJvcHMsIHRoaXMuZ2V0RGVmYXVsdFZhbHVlUHJvcCgpKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgICAjIFNldCBBY3Rpb24gcHJvcGVydGllc1xuICAgICAgICAjIyBTZXQgdXNlci1kZWZpbmVkIEFjdGlvbiBwcm9wZXJ0aWVzXG4gICAgICAgICBAcGFyYW0gW29iamVjdF1cbiAgICAgICAgQHBhcmFtIFtzdHJpbmddOiBOYW1lIG9mIGRlZmF1bHQgdmFsdWUgcHJvcGVydHkgKHNldCB3aGVuIGB2YWx1ZWAgaXMgKipub3QqKiBwcm92aWRlZCBhcyBvYmplY3QpXG4gICAgICAgIEByZXR1cm4gW0FjdGlvbl1cbiAgICAqL1xuXG4gICAgQWN0aW9uLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuICAgICAgICB2YXIgZGVmYXVsdFByb3AgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBERUZBVUxUX1BST1AgOiBhcmd1bWVudHNbMV07XG5cbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIG5vbi1gdmFsdWVgIHByb3BlcnRpZXMgYW5kIHNldFxuICAgICAgICBlYWNoKHByb3BzLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGtleSAhPT0gJ3ZhbHVlcycpIHtcbiAgICAgICAgICAgICAgICBfdGhpczJba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBNZXJnZSBgdmFsdWVgIHByb3BlcnRpZXMgd2l0aCBleGlzdGluZ1xuICAgICAgICBpZiAocHJvcHMudmFsdWVzKSB7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWVzID0gX3RoaXMyLnZhbHVlcztcblxuICAgICAgICAgICAgICAgIGVhY2gocHJvcHMudmFsdWVzLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmdWYWx1ZSA9IGN1cnJlbnRWYWx1ZXNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWxzLmlzT2JqKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlW2RlZmF1bHRQcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlc1trZXldID0gZXhpc3RpbmdWYWx1ZSA/IHV0aWxzLm1lcmdlKGV4aXN0aW5nVmFsdWUsIG5ld1ZhbHVlKSA6IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAgICAjIFByb2Nlc3MgbGF0ZXN0IGBjdXJyZW50YCB2YWx1ZVxuICAgICAgICAjIyBBY3Rpb25zIHBlcmZvcm1zIGV4aXN0aW5nIGBjdXJyZW50YCB2YWx1ZVxuICAgICAgICAgQHBhcmFtIFtBY3Rvcl1cbiAgICAgICAgQHBhcmFtIFtvYmplY3RdXG4gICAgICAgIEByZXR1cm4gW251bWJlcl1cbiAgICAqL1xuXG4gICAgQWN0aW9uLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcyhhY3RvciwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLmN1cnJlbnQ7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgICMgSGFzIEFjdGlvbiBlbmRlZD9cbiAgICAgICAgIyMgUmV0dXJucyBgdHJ1ZWAgdG8gZW5kIEFjdGlvbiAoQWN0aW9uIG9ubHkgZmlyZXMgb25jZSkuXG4gICAgICAgIFxuICAgICAgICBAcmV0dXJuIFtib29sZWFuXVxuICAgICovXG5cbiAgICBBY3Rpb24ucHJvdG90eXBlLmhhc0VuZGVkID0gZnVuY3Rpb24gaGFzRW5kZWQoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAgICAjIExpbWl0IHZhbHVlIHRvIHdpdGhpbiBzZXQgcGFyYW1ldGVyc1xuICAgICAgICAjIyBSZXR1cm4gdmFsdWUgd2l0aGluIG1pbi9tYXgsIHdpdGggb3V0bHlpbmcgdmFsdWVzIG11bHRpcGxpZWQgYnkgYGVzY2FwZUFtcGBcbiAgICAgICAgIEBwYXJhbSBbbnVtYmVyXVxuICAgICAgICBAcGFyYW0gW29iamVjdF0geyBtaW46IG51bWJlciwgbWF4OiBudW1iZXIsIGVzY2FwZUFtcDogZmFjdG9yIH1cbiAgICAgICAgQHJldHVybiBbbnVtYmVyXVxuICAgICovXG5cbiAgICBBY3Rpb24ucHJvdG90eXBlLmxpbWl0ID0gZnVuY3Rpb24gbGltaXQob3V0cHV0LCB2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdHJpY3RlZCA9IGNhbGMucmVzdHJpY3RlZChvdXRwdXQsIHZhbHVlLm1pbiwgdmFsdWUubWF4KTtcbiAgICAgICAgdmFyIGVzY2FwZUFtcCA9IHZhbHVlLmVzY2FwZUFtcCAhPT0gdW5kZWZpbmVkID8gdmFsdWUuZXNjYXBlQW1wIDogMDtcblxuICAgICAgICByZXR1cm4gcmVzdHJpY3RlZCArIChvdXRwdXQgLSByZXN0cmljdGVkKSAqIGVzY2FwZUFtcDtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgICAgIyBHZXQgQ29udHJvbHMgY2xhc3MgZm9yIHRoaXMgQWN0aW9uXG4gICAgICAgICMjIEluaGVyaXRlZCBBY3Rpb25zIG1heSByZXR1cm4gZGlmZmVyZW50IENvbnRyb2xzIGNsYXNzXG4gICAgICAgICBAcmV0dXJuIFtDb250cm9sc11cbiAgICAqL1xuXG4gICAgQWN0aW9uLnByb3RvdHlwZS5nZXRDb250cm9scyA9IGZ1bmN0aW9uIGdldENvbnRyb2xzKCkge1xuICAgICAgICByZXR1cm4gQ29udHJvbHM7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgICMgR2V0IGRlZmF1bHQgQWN0aW9uIHByb3BlcnRpZXNcbiAgICAgICAgIEByZXR1cm4gW29iamVjdF1cbiAgICAqL1xuXG4gICAgQWN0aW9uLnByb3RvdHlwZS5nZXREZWZhdWx0UHJvcHMgPSBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgICAgIyBHZXQgZGVmYXVsdCBBY3Rpb24gdmFsdWUgcHJvcGVydGllc1xuICAgICAgICAgQHJldHVybiBbb2JqZWN0XVxuICAgICovXG5cbiAgICBBY3Rpb24ucHJvdG90eXBlLmdldERlZmF1bHRWYWx1ZSA9IGZ1bmN0aW9uIGdldERlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH07XG5cbiAgICAvKlxuICAgICAgICAjIEdldCBkZWZhdWx0IEFjdGlvbiB2YWx1ZSBwcm9wZXJ0eSBuYW1lXG4gICAgICAgICMjIFNldCB0aGlzIGB2YWx1ZWAgcHJvcGVydHkgd2hlbiBzZXQgYXMgdmFsdWUgaW5zdGVhZCBvZiBvYmplY3RcbiAgICAgICAgIEByZXR1cm4gW3N0cmluZ11cbiAgICAqL1xuXG4gICAgQWN0aW9uLnByb3RvdHlwZS5nZXREZWZhdWx0VmFsdWVQcm9wID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlUHJvcCgpIHtcbiAgICAgICAgcmV0dXJuIERFRkFVTFRfUFJPUDtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgICAgIyBHZXQgc2V0IHByb3BlcnRpZXNcbiAgICAgICAgIyMgR2V0IHVzZXItc2V0IHByb3BlcnRpZXMgZm9yIHRoaXMgQWN0aW9uXG4gICAgICAgICBAcmV0dXJuIFtvYmplY3RdXG4gICAgKi9cblxuICAgIEFjdGlvbi5wcm90b3R5cGUuZ2V0U2V0ID0gZnVuY3Rpb24gZ2V0U2V0KCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICB2YXIgc2V0ID0geyB2YWx1ZXM6IHRoaXMudmFsdWVzIH07XG5cbiAgICAgICAgZWFjaCh0aGlzLCBmdW5jdGlvbiAoa2V5LCBwcm9wKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMzLmhhc093blByb3BlcnR5KGtleSkgJiYgUFJJVkFURS5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgc2V0W2tleV0gPSBwcm9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2V0O1xuICAgIH07XG5cbiAgICAvKlxuICAgICAgICAjIEV4dGVuZCB0aGlzIEFjdGlvbiB3aXRoIG5ldyBwcm9wZXJ0aWVzXG4gICAgICAgICMjIFJldHVybnMgbmV3IGluc3RhbmNlIG9mIHRoaXMgQWN0aW9uJ3MgYHByb3RvdHlwZWAgd2l0aCBleGlzdGluZyBhbmQgbmV3IHByb3BlcnRpZXNcbiAgICAgICAgIEBwYXJhbSBbb2JqZWN0XSAob3B0aW9uYWwpXG4gICAgICAgIEByZXR1cm4gW0FjdGlvbl1cbiAgICAqL1xuXG4gICAgQWN0aW9uLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiBleHRlbmQocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHV0aWxzLm1lcmdlKHRoaXMsIHByb3BzKSwgdGhpcy5nZXREZWZhdWx0VmFsdWVQcm9wKCkpO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAgICAjIEdldCBhIG5ldyBwbGF5YWJsZSB2ZXJzaW9uIG9mIHRoaXMgQWN0aW9uXG4gICAgICAgICBAcmV0dXJuIFtBY3Rpb25dXG4gICAgKi9cblxuICAgIEFjdGlvbi5wcm90b3R5cGUuZ2V0UGxheWFibGUgPSBmdW5jdGlvbiBnZXRQbGF5YWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5kKCk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgICMgQWN0aXZhdGUgdGhpcyBBY3Rpb25cbiAgICAgICAgIEByZXR1cm4gW0FjdGlvbl1cbiAgICAqL1xuXG4gICAgQWN0aW9uLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgICMgRGVhY3RpdmF0ZSB0aGlzIEFjdGlvblxuICAgICAgICAgQHJldHVybiBbQWN0aW9uXVxuICAgICovXG5cbiAgICBBY3Rpb24ucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbiBkZWFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICByZXR1cm4gQWN0aW9uO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtGamRHbHZiaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096dEJRVU5CTEVsQlFVMHNTVUZCU1N4SFFVRkhMRTlCUVU4c1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6dEJRVU53UXl4SlFVRk5MRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdRVUZEZEVNc1NVRkJUU3hSUVVGUkxFZEJRVWNzVDBGQlR5eERRVUZETEhOQ1FVRnpRaXhEUVVGRExFTkJRVU03UVVGRGFrUXNTVUZCVFN4SlFVRkpMRWRCUVVjc1MwRkJTeXhEUVVGRExFbEJRVWs3T3p0QlFVRkRMRUZCUjNoQ0xFbEJRVTBzV1VGQldTeEhRVUZITEZOQlFWTXNRMEZCUXp0QlFVTXZRaXhKUVVGTkxFOUJRVThzUjBGQlJ5eERRVUZETEZOQlFWTXNSVUZCUlN4VFFVRlRMRVZCUVVVc1ZVRkJWU3hGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZET3p0SlFVVXpSQ3hOUVVGTk96czdPenM3T3p0QlFWRlNMR0ZCVWtVc1RVRkJUU3hEUVZGSkxFdEJRVXNzUlVGQlJUczdPemhDUVZKcVFpeE5RVUZOT3p0QlFWTktMRmxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeEZRVUZGTEVWQlFVVXNWVUZCUXl4SFFVRkhMRVZCUVVVc1MwRkJTeXhGUVVGTE8wRkJRM3BETEd0Q1FVRkxMRWRCUVVjc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF6dFRRVU55UWl4RFFVRkRMRU5CUVVNN08wRkJSVWdzV1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRha0lzV1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RlFVRkZMRU5CUVVNc1EwRkJRenRMUVVNdlF6czdPenM3T3pzN08wRkJRVUU3UVVGbVF5eFZRVUZOTEZkQmVVSlNMRWRCUVVjc2EwSkJRWGxET3pzN1dVRkJlRU1zUzBGQlN5eDVSRUZCUnl4RlFVRkZPMWxCUVVVc1YwRkJWeXg1UkVGQlJ5eFpRVUZaT3pzN1FVRkZkRU1zV1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4VlFVRkRMRWRCUVVjc1JVRkJSU3hMUVVGTExFVkJRVXM3UVVGRGVFSXNaMEpCUVVrc1IwRkJSeXhMUVVGTExGRkJRVkVzUlVGQlJUdEJRVU5zUWl4MVFrRkJTeXhIUVVGSExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTTdZVUZEY2tJN1UwRkRTaXhEUVVGRE96czdRVUZCUXl4QlFVZElMRmxCUVVrc1MwRkJTeXhEUVVGRExFMUJRVTBzUlVGQlJUczdRVUZEWkN4dlFrRkJTU3hoUVVGaExFZEJRVWNzVDBGQlN5eE5RVUZOTEVOQlFVTTdPMEZCUldoRExHOUNRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSU3hWUVVGRExFZEJRVWNzUlVGQlJTeExRVUZMTEVWQlFVczdRVUZETDBJc2QwSkJRVTBzWVVGQllTeEhRVUZITEdGQlFXRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVONlF5eDNRa0ZCU1N4UlFVRlJMRWRCUVVjc1JVRkJSU3hEUVVGRE96dEJRVVZzUWl4M1FrRkJTU3hMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZPMEZCUTNCQ0xHZERRVUZSTEVkQlFVY3NTMEZCU3l4RFFVRkRPM0ZDUVVOd1FpeE5RVUZOTzBGQlEwZ3NaME5CUVZFc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTTdjVUpCUTJwRE96dEJRVVZFTEdsRFFVRmhMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUVVGQlF5eGhRVUZoTEVkQlFVa3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhoUVVGaExFVkJRVVVzVVVGQlVTeERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRPMmxDUVVNeFJpeERRVUZETEVOQlFVTTdPMU5CUTA0N08wRkJSVVFzWlVGQlR5eEpRVUZKTEVOQlFVTTdTMEZEWmpzN096czdPenM3T3p0QlFYQkVReXhWUVVGTkxGZEJPRVJTTEU5QlFVOHNiMEpCUVVNc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJUdEJRVU5zUWl4bFFVRlBMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU03UzBGRGVFSTdPenM3T3pzN096dEJRV2hGUXl4VlFVRk5MRmRCZDBWU0xGRkJRVkVzZFVKQlFVYzdRVUZEVUN4bFFVRlBMRWxCUVVrc1EwRkJRenRMUVVObU96czdPenM3T3pzN08wRkJNVVZETEZWQlFVMHNWMEZ2UmxJc1MwRkJTeXhyUWtGQlF5eE5RVUZOTEVWQlFVVXNTMEZCU3l4RlFVRkZPMEZCUTJwQ0xGbEJRVTBzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFdEJRVXNzUTBGQlF5eEhRVUZITEVWQlFVVXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMnBGTEZsQlFVMHNVMEZCVXl4SFFVRkhMRXRCUVVzc1EwRkJReXhUUVVGVExFdEJRVXNzVTBGQlV5eEhRVUZITEV0QlFVc3NRMEZCUXl4VFFVRlRMRWRCUVVjc1EwRkJReXhEUVVGRE96dEJRVVYwUlN4bFFVRlBMRlZCUVZVc1IwRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eFZRVUZWTEVOQlFVRXNSMEZCU1N4VFFVRlRMRUZCUVVNc1EwRkJRenRMUVVNelJEczdPenM3T3pzN1FVRjZSa01zVlVGQlRTeFhRV2xIVWl4WFFVRlhMREJDUVVGSE8wRkJRMVlzWlVGQlR5eFJRVUZSTEVOQlFVTTdTMEZEYmtJN096czdPenM3UVVGdVIwTXNWVUZCVFN4WFFUQkhVaXhsUVVGbExEaENRVUZITzBGQlEyUXNaVUZCVHl4RlFVRkZMRU5CUVVNN1MwRkRZanM3T3pzN096dEJRVFZIUXl4VlFVRk5MRmRCYlVoU0xHVkJRV1VzT0VKQlFVYzdRVUZEWkN4bFFVRlBMRVZCUVVVc1EwRkJRenRMUVVOaU96czdPenM3T3p0QlFYSklReXhWUVVGTkxGZEJOa2hTTEcxQ1FVRnRRaXhyUTBGQlJ6dEJRVU5zUWl4bFFVRlBMRmxCUVZrc1EwRkJRenRMUVVOMlFqczdPenM3T3pzN1FVRXZTRU1zVlVGQlRTeFhRWFZKVWl4TlFVRk5MSEZDUVVGSE96czdRVUZEVEN4WlFVRkpMRWRCUVVjc1IwRkJSeXhGUVVGRkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN08wRkJSV3hETEZsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1ZVRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeEZRVUZMTzBGQlEzUkNMR2RDUVVGSkxFOUJRVXNzWTBGQll5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVN1FVRkRla1FzYlVKQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU03WVVGRGJrSTdVMEZEU2l4RFFVRkRMRU5CUVVNN08wRkJSVWdzWlVGQlR5eEhRVUZITEVOQlFVTTdTMEZEWkRzN096czdPenM3TzBGQmFrcERMRlZCUVUwc1YwRXdTbElzVFVGQlRTeHRRa0ZCUXl4TFFVRkxMRVZCUVVVN1FVRkRWaXhsUVVGUExFbEJRVWtzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJTeExRVUZMTEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXl4RFFVRkRPMHRCUTNKR096czdPenM3TzBGQk5VcERMRlZCUVUwc1YwRnRTMUlzVjBGQlZ5d3dRa0ZCUnp0QlFVTldMR1ZCUVU4c1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETzB0QlEzaENPenM3T3pzN08wRkJja3RETEZWQlFVMHNWMEUwUzFJc1VVRkJVU3gxUWtGQlJ6dEJRVU5RTEZsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRM0pDTEdWQlFVOHNTVUZCU1N4RFFVRkRPMHRCUTJZN096czdPenM3UVVFdlMwTXNWVUZCVFN4WFFYTk1VaXhWUVVGVkxIbENRVUZITzBGQlExUXNXVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGRGRFSXNaVUZCVHl4SlFVRkpMRU5CUVVNN1MwRkRaanM3VjBGNlRFTXNUVUZCVFRzN08wRkJORXhhTEUxQlFVMHNRMEZCUXl4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGRElpd2labWxzWlNJNklrRmpkR2x2Ymk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2SUVsdGNHOXlkSE5jYm1OdmJuTjBJR05oYkdNZ1BTQnlaWEYxYVhKbEtDY3VMaTlwYm1NdlkyRnNZeWNwTzF4dVkyOXVjM1FnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1TGk5cGJtTXZkWFJwYkhNbktUdGNibU52Ym5OMElFTnZiblJ5YjJ4eklEMGdjbVZ4ZFdseVpTZ25MaTR2WTI5dWRISnZiSE12UTI5dWRISnZiSE1uS1R0Y2JtTnZibk4wSUdWaFkyZ2dQU0IxZEdsc2N5NWxZV05vTzF4dVhHNHZMeUJXWVd4MVpYTmNibU52Ym5OMElFUkZSa0ZWVEZSZlVGSlBVQ0E5SUNkamRYSnlaVzUwSnp0Y2JtTnZibk4wSUZCU1NWWkJWRVVnUFNCYkoyOXVVM1JoY25RbkxDQW5iMjVHY21GdFpTY3NJQ2R2YmxWd1pHRjBaU2NzSUNkdmJrTnZiWEJzWlhSbEoxMDdYRzVjYm1Oc1lYTnpJRUZqZEdsdmJpQjdYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQWdJQ0FqSUVGamRHbHZiaUJqYkdGemN5QmpiMjV6ZEhKMVkzUnZjbHh1SUNBZ0lDQWdJQ0FqSXlCQmMzTnBaMjRnWkdWbVlYVnNkQ0J3Y205d1pYSjBhV1Z6SUc5bUlFRmpkR2x2YmlCdmNpQmxlSFJsYm1SbFpDQmpiR0Z6Y3lCaGJtUWdjMlYwSUhWelpYSXRaR1ZtYVc1bFpDQndjbTl3YzF4dVhHNGdJQ0FnSUNBZ0lFQndZWEpoYlNCYmIySnFaV04wWFZ4dUlDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvY0hKdmNITXBJSHRjYmlBZ0lDQWdJQ0FnWldGamFDaDBhR2x6TG1kbGRFUmxabUYxYkhSUWNtOXdjeWdwTENBb2EyVjVMQ0IyWVd4MVpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwYzF0clpYbGRJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2RXVnpJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMEtIQnliM0J6TENCMGFHbHpMbWRsZEVSbFptRjFiSFJXWVd4MVpWQnliM0FvS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ0l5QlRaWFFnUVdOMGFXOXVJSEJ5YjNCbGNuUnBaWE5jYmlBZ0lDQWdJQ0FnSXlNZ1UyVjBJSFZ6WlhJdFpHVm1hVzVsWkNCQlkzUnBiMjRnY0hKdmNHVnlkR2xsYzF4dVhHNGdJQ0FnSUNBZ0lFQndZWEpoYlNCYmIySnFaV04wWFZ4dUlDQWdJQ0FnSUNCQWNHRnlZVzBnVzNOMGNtbHVaMTA2SUU1aGJXVWdiMllnWkdWbVlYVnNkQ0IyWVd4MVpTQndjbTl3WlhKMGVTQW9jMlYwSUhkb1pXNGdZSFpoYkhWbFlDQnBjeUFxS201dmRDb3FJSEJ5YjNacFpHVmtJR0Z6SUc5aWFtVmpkQ2xjYmlBZ0lDQWdJQ0FnUUhKbGRIVnliaUJiUVdOMGFXOXVYVnh1SUNBZ0lDb3ZYRzRnSUNBZ2MyVjBLSEJ5YjNCeklEMGdlMzBzSUdSbFptRjFiSFJRY205d0lEMGdSRVZHUVZWTVZGOVFVazlRS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRXh2YjNBZ2RHaHliM1ZuYUNCdWIyNHRZSFpoYkhWbFlDQndjbTl3WlhKMGFXVnpJR0Z1WkNCelpYUmNiaUFnSUNBZ0lDQWdaV0ZqYUNod2NtOXdjeXdnS0d0bGVTd2dkbUZzZFdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hyWlhrZ0lUMDlJQ2QyWVd4MVpYTW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGMxdHJaWGxkSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRTFsY21kbElHQjJZV3gxWldBZ2NISnZjR1Z5ZEdsbGN5QjNhWFJvSUdWNGFYTjBhVzVuWEc0Z0lDQWdJQ0FnSUdsbUlDaHdjbTl3Y3k1MllXeDFaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCamRYSnlaVzUwVm1Gc2RXVnpJRDBnZEdocGN5NTJZV3gxWlhNN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdWaFkyZ29jSEp2Y0hNdWRtRnNkV1Z6TENBb2EyVjVMQ0IyWVd4MVpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1Y0YVhOMGFXNW5WbUZzZFdVZ1BTQmpkWEp5Wlc1MFZtRnNkV1Z6VzJ0bGVWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc1bGQxWmhiSFZsSUQwZ2UzMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hWMGFXeHpMbWx6VDJKcUtIWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhkV1lXeDFaU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGQxWmhiSFZsVzJSbFptRjFiSFJRY205d1hTQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUldZV3gxWlhOYmEyVjVYU0E5SUNobGVHbHpkR2x1WjFaaGJIVmxLU0EvSUhWMGFXeHpMbTFsY21kbEtHVjRhWE4wYVc1blZtRnNkV1VzSUc1bGQxWmhiSFZsS1NBNklHNWxkMVpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2x4dUlDQWdJQ0FnSUNBaklGQnliMk5sYzNNZ2JHRjBaWE4wSUdCamRYSnlaVzUwWUNCMllXeDFaVnh1SUNBZ0lDQWdJQ0FqSXlCQlkzUnBiMjV6SUhCbGNtWnZjbTF6SUdWNGFYTjBhVzVuSUdCamRYSnlaVzUwWUNCMllXeDFaVnh1WEc0Z0lDQWdJQ0FnSUVCd1lYSmhiU0JiUVdOMGIzSmRYRzRnSUNBZ0lDQWdJRUJ3WVhKaGJTQmJiMkpxWldOMFhWeHVJQ0FnSUNBZ0lDQkFjbVYwZFhKdUlGdHVkVzFpWlhKZFhHNGdJQ0FnS2k5Y2JpQWdJQ0J3Y205alpYTnpLR0ZqZEc5eUxDQjJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1V1WTNWeWNtVnVkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQWdJQ0FqSUVoaGN5QkJZM1JwYjI0Z1pXNWtaV1EvWEc0Z0lDQWdJQ0FnSUNNaklGSmxkSFZ5Ym5NZ1lIUnlkV1ZnSUhSdklHVnVaQ0JCWTNScGIyNGdLRUZqZEdsdmJpQnZibXg1SUdacGNtVnpJRzl1WTJVcExseHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdRSEpsZEhWeWJpQmJZbTl2YkdWaGJsMWNiaUFnSUNBcUwxeHVJQ0FnSUdoaGMwVnVaR1ZrS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQWdJQ0FqSUV4cGJXbDBJSFpoYkhWbElIUnZJSGRwZEdocGJpQnpaWFFnY0dGeVlXMWxkR1Z5YzF4dUlDQWdJQ0FnSUNBakl5QlNaWFIxY200Z2RtRnNkV1VnZDJsMGFHbHVJRzFwYmk5dFlYZ3NJSGRwZEdnZ2IzVjBiSGxwYm1jZ2RtRnNkV1Z6SUcxMWJIUnBjR3hwWldRZ1lua2dZR1Z6WTJGd1pVRnRjR0JjYmx4dUlDQWdJQ0FnSUNCQWNHRnlZVzBnVzI1MWJXSmxjbDFjYmlBZ0lDQWdJQ0FnUUhCaGNtRnRJRnR2WW1wbFkzUmRJSHNnYldsdU9pQnVkVzFpWlhJc0lHMWhlRG9nYm5WdFltVnlMQ0JsYzJOaGNHVkJiWEE2SUdaaFkzUnZjaUI5WEc0Z0lDQWdJQ0FnSUVCeVpYUjFjbTRnVzI1MWJXSmxjbDFjYmlBZ0lDQXFMMXh1SUNBZ0lHeHBiV2wwS0c5MWRIQjFkQ3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjbVZ6ZEhKcFkzUmxaQ0E5SUdOaGJHTXVjbVZ6ZEhKcFkzUmxaQ2h2ZFhSd2RYUXNJSFpoYkhWbExtMXBiaXdnZG1Gc2RXVXViV0Y0S1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWlhOallYQmxRVzF3SUQwZ2RtRnNkV1V1WlhOallYQmxRVzF3SUNFOVBTQjFibVJsWm1sdVpXUWdQeUIyWVd4MVpTNWxjMk5oY0dWQmJYQWdPaUF3TzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYTjBjbWxqZEdWa0lDc2dLQ2h2ZFhSd2RYUWdMU0J5WlhOMGNtbGpkR1ZrS1NBcUlHVnpZMkZ3WlVGdGNDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQWdJeUJIWlhRZ1EyOXVkSEp2YkhNZ1kyeGhjM01nWm05eUlIUm9hWE1nUVdOMGFXOXVYRzRnSUNBZ0lDQWdJQ01qSUVsdWFHVnlhWFJsWkNCQlkzUnBiMjV6SUcxaGVTQnlaWFIxY200Z1pHbG1abVZ5Wlc1MElFTnZiblJ5YjJ4eklHTnNZWE56WEc1Y2JpQWdJQ0FnSUNBZ1FISmxkSFZ5YmlCYlEyOXVkSEp2YkhOZFhHNGdJQ0FnS2k5Y2JpQWdJQ0JuWlhSRGIyNTBjbTlzY3lncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFTnZiblJ5YjJ4ek8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cVhHNGdJQ0FnSUNBZ0lDTWdSMlYwSUdSbFptRjFiSFFnUVdOMGFXOXVJSEJ5YjNCbGNuUnBaWE5jYmx4dUlDQWdJQ0FnSUNCQWNtVjBkWEp1SUZ0dlltcGxZM1JkWEc0Z0lDQWdLaTljYmlBZ0lDQm5aWFJFWldaaGRXeDBVSEp2Y0hNb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQWdJQ0FqSUVkbGRDQmtaV1poZFd4MElFRmpkR2x2YmlCMllXeDFaU0J3Y205d1pYSjBhV1Z6WEc1Y2JpQWdJQ0FnSUNBZ1FISmxkSFZ5YmlCYmIySnFaV04wWFZ4dUlDQWdJQ292WEc0Z0lDQWdaMlYwUkdWbVlYVnNkRlpoYkhWbEtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMzA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdJQ0FnSXlCSFpYUWdaR1ZtWVhWc2RDQkJZM1JwYjI0Z2RtRnNkV1VnY0hKdmNHVnlkSGtnYm1GdFpWeHVJQ0FnSUNBZ0lDQWpJeUJUWlhRZ2RHaHBjeUJnZG1Gc2RXVmdJSEJ5YjNCbGNuUjVJSGRvWlc0Z2MyVjBJR0Z6SUhaaGJIVmxJR2x1YzNSbFlXUWdiMllnYjJKcVpXTjBYRzVjYmlBZ0lDQWdJQ0FnUUhKbGRIVnliaUJiYzNSeWFXNW5YVnh1SUNBZ0lDb3ZYRzRnSUNBZ1oyVjBSR1ZtWVhWc2RGWmhiSFZsVUhKdmNDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRVJGUmtGVlRGUmZVRkpQVUR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2x4dUlDQWdJQ0FnSUNBaklFZGxkQ0J6WlhRZ2NISnZjR1Z5ZEdsbGMxeHVJQ0FnSUNBZ0lDQWpJeUJIWlhRZ2RYTmxjaTF6WlhRZ2NISnZjR1Z5ZEdsbGN5Qm1iM0lnZEdocGN5QkJZM1JwYjI1Y2JseHVJQ0FnSUNBZ0lDQkFjbVYwZFhKdUlGdHZZbXBsWTNSZFhHNGdJQ0FnS2k5Y2JpQWdJQ0JuWlhSVFpYUW9LU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnpaWFFnUFNCN0lIWmhiSFZsY3pvZ2RHaHBjeTUyWVd4MVpYTWdmVHRjYmx4dUlDQWdJQ0FnSUNCbFlXTm9LSFJvYVhNc0lDaHJaWGtzSUhCeWIzQXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWhoYzA5M2JsQnliM0JsY25SNUtHdGxlU2tnSmlZZ1VGSkpWa0ZVUlM1cGJtUmxlRTltS0d0bGVTa2dQVDA5SUMweEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwVzJ0bGVWMGdQU0J3Y205d08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlYwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxWEc0Z0lDQWdJQ0FnSUNNZ1JYaDBaVzVrSUhSb2FYTWdRV04wYVc5dUlIZHBkR2dnYm1WM0lIQnliM0JsY25ScFpYTmNiaUFnSUNBZ0lDQWdJeU1nVW1WMGRYSnVjeUJ1WlhjZ2FXNXpkR0Z1WTJVZ2IyWWdkR2hwY3lCQlkzUnBiMjRuY3lCZ2NISnZkRzkwZVhCbFlDQjNhWFJvSUdWNGFYTjBhVzVuSUdGdVpDQnVaWGNnY0hKdmNHVnlkR2xsYzF4dVhHNGdJQ0FnSUNBZ0lFQndZWEpoYlNCYmIySnFaV04wWFNBb2IzQjBhVzl1WVd3cFhHNGdJQ0FnSUNBZ0lFQnlaWFIxY200Z1cwRmpkR2x2YmwxY2JpQWdJQ0FxTDF4dUlDQWdJR1Y0ZEdWdVpDaHdjbTl3Y3lrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSW9kWFJwYkhNdWJXVnlaMlVvZEdocGN5d2djSEp2Y0hNcExDQjBhR2x6TG1kbGRFUmxabUYxYkhSV1lXeDFaVkJ5YjNBb0tTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQWdJeUJIWlhRZ1lTQnVaWGNnY0d4aGVXRmliR1VnZG1WeWMybHZiaUJ2WmlCMGFHbHpJRUZqZEdsdmJseHVYRzRnSUNBZ0lDQWdJRUJ5WlhSMWNtNGdXMEZqZEdsdmJsMWNiaUFnSUNBcUwxeHVJQ0FnSUdkbGRGQnNZWGxoWW14bEtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bGVIUmxibVFvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2x4dUlDQWdJQ0FnSUNBaklFRmpkR2wyWVhSbElIUm9hWE1nUVdOMGFXOXVYRzVjYmlBZ0lDQWdJQ0FnUUhKbGRIVnliaUJiUVdOMGFXOXVYVnh1SUNBZ0lDb3ZYRzRnSUNBZ1lXTjBhWFpoZEdVb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFYTkJZM1JwZG1VZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdktseHVJQ0FnSUNBZ0lDQWpJRVJsWVdOMGFYWmhkR1VnZEdocGN5QkJZM1JwYjI1Y2JseHVJQ0FnSUNBZ0lDQkFjbVYwZFhKdUlGdEJZM1JwYjI1ZFhHNGdJQ0FnS2k5Y2JpQWdJQ0JrWldGamRHbDJZWFJsS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1selFXTjBhWFpsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgxY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JCWTNScGIyNDdJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9hY3Rpb25zL0FjdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDMyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEFjdGlvbiA9IHJlcXVpcmUoJy4vQWN0aW9uJyk7XG52YXIgY2FsYyA9IHJlcXVpcmUoJy4uL2luYy9jYWxjJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi9pbmMvdXRpbHMnKTtcbnZhciBwcmVzZXRFYXNpbmcgPSByZXF1aXJlKCcuL3R3ZWVuL3ByZXNldC1lYXNpbmcnKTtcbnZhciB2YWx1ZU9wcyA9IHJlcXVpcmUoJy4uL2FjdG9yL3ZhbHVlLW9wZXJhdGlvbnMnKTtcbnZhciBUd2VlbkNvbnRyb2xzID0gcmVxdWlyZSgnLi90d2Vlbi9Ud2VlbkNvbnRyb2xzJyk7XG52YXIgZWFjaCA9IHV0aWxzLmVhY2g7XG5cbnZhciBDT1VOVCA9ICdjb3VudCc7XG52YXIgTkVYVF9TVEVQUyA9IHtcbiAgICBsb29wOiAncmVzdGFydCcsXG4gICAgeW95bzogJ3JldmVyc2UnLFxuICAgIGZsaXA6ICdmbGlwVmFsdWVzJ1xufTtcblxuLypcbiAgICBFYXNlIHZhbHVlIHdpdGhpbiByYW5nZWQgcGFyYW1ldGVyc1xuICAgIFxuICAgIEBwYXJhbSBbbnVtYmVyXTogUHJvZ3Jlc3MgYmV0d2VlbiAwIGFuZCAxXG4gICAgQHBhcmFtIFtudW1iZXJdOiBWYWx1ZSBvZiAwIHByb2dyZXNzXG4gICAgQHBhcmFtIFtudW1iZXJdOiBWYWx1ZSBvZiAxIHByb2dyZXNzXG4gICAgQHBhcmFtIFtzdHJpbmcgfHwgZnVuY3Rpb25dOiBOYW1lIG9mIHByZXNldCBlYXNpbmdcbiAgICAgICAgdG8gdXNlIG9yIGdlbmVyYXRlZCBlYXNpbmcgZnVuY3Rpb25cbiAgICBAcmV0dXJuIFtudW1iZXJdOiBWYWx1ZSBvZiBlYXNlZCBwcm9ncmVzcyBpbiByYW5nZVxuKi9cbmZ1bmN0aW9uIGVhc2UocHJvZ3Jlc3MsIGZyb20sIHRvLCBlYXNlKSB7XG4gICAgdmFyIHByb2dyZXNzTGltaXRlZCA9IGNhbGMucmVzdHJpY3RlZChwcm9ncmVzcywgMCwgMSk7XG4gICAgdmFyIGVhc2luZ0Z1bmN0aW9uID0gdXRpbHMuaXNTdHJpbmcoZWFzZSkgPyBwcmVzZXRFYXNpbmdbZWFzZV0gOiBlYXNlO1xuXG4gICAgcmV0dXJuIGNhbGMudmFsdWVFYXNlZChwcm9ncmVzc0xpbWl0ZWQsIGZyb20sIHRvLCBlYXNpbmdGdW5jdGlvbik7XG59O1xuXG52YXIgVHdlZW4gPSAoZnVuY3Rpb24gKF9BY3Rpb24pIHtcbiAgICBfaW5oZXJpdHMoVHdlZW4sIF9BY3Rpb24pO1xuXG4gICAgZnVuY3Rpb24gVHdlZW4oKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUd2Vlbik7XG5cbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9BY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgVHdlZW4ucHJvdG90eXBlLmdldENvbnRyb2xzID0gZnVuY3Rpb24gZ2V0Q29udHJvbHMoKSB7XG4gICAgICAgIHJldHVybiBUd2VlbkNvbnRyb2xzO1xuICAgIH07XG5cbiAgICBUd2Vlbi5wcm90b3R5cGUuZ2V0RGVmYXVsdFByb3BzID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgICBkaWxhdGU6IDEsXG4gICAgICAgICAgICBkdXJhdGlvbjogMzAwLFxuICAgICAgICAgICAgbG9vcDogZmFsc2UsXG4gICAgICAgICAgICB5b3lvOiBmYWxzZSxcbiAgICAgICAgICAgIGZsaXA6IGZhbHNlLFxuICAgICAgICAgICAgcGxheURpcmVjdGlvbjogMSxcbiAgICAgICAgICAgIGVuZGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGVsYXBzZWQ6IDBcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgVHdlZW4ucHJvdG90eXBlLmdldERlZmF1bHRWYWx1ZSA9IGZ1bmN0aW9uIGdldERlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgICAgICAgIGVhc2U6ICdlYXNlT3V0JyxcbiAgICAgICAgICAgIHN0YWdnZXI6IDAsXG4gICAgICAgICAgICBzdGVwczogMCxcbiAgICAgICAgICAgIHRvOiAwLFxuICAgICAgICAgICAgcm91bmQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIFR3ZWVuLnByb3RvdHlwZS5nZXREZWZhdWx0VmFsdWVQcm9wID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlUHJvcCgpIHtcbiAgICAgICAgcmV0dXJuICd0byc7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgIFVwZGF0ZSBBY3Rpb24gZWxhcHNlZCB0aW1lXG4gICAgICAgIFxuICAgICAgICBAcGFyYW0gW29iamVjdF06IEFjdGlvbiBwcm9wZXJ0aWVzXG4gICAgICAgIEBwYXJhbSBbbnVtYmVyXTogVGltZXN0YW1wIG9mIGN1cnJlbnQgZnJhbWVcbiAgICAqL1xuXG4gICAgVHdlZW4ucHJvdG90eXBlLm9uRnJhbWVTdGFydCA9IGZ1bmN0aW9uIG9uRnJhbWVTdGFydChhY3RvciwgZnJhbWVEdXJhdGlvbikge1xuICAgICAgICB0aGlzLmVsYXBzZWQgPSB0aGlzLmVsYXBzZWQgfHwgMDtcblxuICAgICAgICBpZiAoZnJhbWVEdXJhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5lbGFwc2VkICs9IGZyYW1lRHVyYXRpb24gKiBhY3Rvci5kaWxhdGUgKiB0aGlzLnBsYXlEaXJlY3Rpb247XG4gICAgICAgICAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKlxuICAgICAgICBDYWxjdWxhdGUgcHJvZ3Jlc3Mgb2YgdmFsdWUgYmFzZWQgb24gdGltZSBlbGFwc2VkLFxuICAgICAgICB2YWx1ZSBkZWxheS9kdXJhdGlvbi9zdGFnZ2VyIHByb3BlcnRpZXNcbiAgICAgICAgIEBwYXJhbSBbQWN0b3JdXG4gICAgICAgIEBwYXJhbSBbb2JqZWN0XTogVmFsdWUgc3RhdGUgYW5kIHByb3BlcnRpZXNcbiAgICAgICAgQHJldHVybiBbbnVtYmVyXTogQ2FsY3VsYXRlZCB2YWx1ZVxuICAgICovXG5cbiAgICBUd2Vlbi5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uIHByb2Nlc3MoYWN0b3IsIHZhbHVlKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB2YWx1ZS50bztcbiAgICAgICAgdmFyIHByb2dyZXNzVGFyZ2V0ID0gdGhpcy5wbGF5RGlyZWN0aW9uID09PSAxID8gMSA6IDA7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlLmN1cnJlbnQ7XG5cbiAgICAgICAgLy8gSWYgdGhpcyB2YWx1ZSBoYXMgYSB0byBwcm9wZXJ0eSwgb3RoZXJ3aXNlIHdlIGp1c3QgcmV0dXJuIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgaWYgKHRhcmdldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBjYWxjLnJlc3RyaWN0ZWQoY2FsYy5wcm9ncmVzcyh0aGlzLmVsYXBzZWQgLSB2YWx1ZS5kZWxheSwgMCwgdmFsdWUuZHVyYXRpb24pIC0gdmFsdWUuc3RhZ2dlciwgMCwgMSk7XG5cbiAgICAgICAgICAgIC8vIE1hcmsgQWN0aW9uIGFzIE5PVCBlbmRlZCBpZiBzdGlsbCBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKHByb2dyZXNzICE9PSBwcm9ncmVzc1RhcmdldCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU3RlcCBwcm9ncmVzcyBpZiB3ZSdyZSBzdGVwcGluZ1xuICAgICAgICAgICAgaWYgKHZhbHVlLnN0ZXBzKSB7XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3MgPSB1dGlscy5zdGVwUHJvZ3Jlc3MocHJvZ3Jlc3MsIHZhbHVlLnN0ZXBzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRWFzZSB2YWx1ZVxuICAgICAgICAgICAgbmV3VmFsdWUgPSBlYXNlKHByb2dyZXNzLCB2YWx1ZS5vcmlnaW4sIHRhcmdldCwgdmFsdWUuZWFzZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgIElmIHRoaXMgdHdlZW4gaGFzIGVuZGVkLCBjaGVjayBpZiB3ZSBsb29wL3lveW8vZmxpcFxuICAgICAgICBcbiAgICAgICAgQHJldHVybiBbYm9vbGVhbl06IEhhcyB0aGlzIHR3ZWVuIHJlYWxseSByZWFsbHkgZW5kZWQ/XG4gICAgKi9cblxuICAgIFR3ZWVuLnByb3RvdHlwZS5oYXNFbmRlZCA9IGZ1bmN0aW9uIGhhc0VuZGVkKGFjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBlbmRlZCA9IHRoaXMuZW5kZWQ7XG5cbiAgICAgICAgaWYgKGVuZGVkKSB7XG4gICAgICAgICAgICBlYWNoKE5FWFRfU1RFUFMsIGZ1bmN0aW9uIChuYW1lLCBtZXRob2ROYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzMi5jaGVja05leHRTdGVwKGFjdG9yLCBuYW1lLCBfdGhpczJbbWV0aG9kTmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGFjdG9yLmhhc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXNldCBgZW5kZWRgXG4gICAgICAgIHRoaXMuZW5kZWQgPSBmYWxzZTtcblxuICAgICAgICByZXR1cm4gZW5kZWQ7XG4gICAgfTtcblxuICAgIFR3ZWVuLnByb3RvdHlwZS5jaGVja05leHRTdGVwID0gZnVuY3Rpb24gY2hlY2tOZXh0U3RlcChhY3RvciwgbmFtZSwgbWV0aG9kKSB7XG4gICAgICAgIHZhciBzdGVwID0gdGhpc1tuYW1lXTtcbiAgICAgICAgdmFyIGZvcmV2ZXIgPSBzdGVwID09PSB0cnVlO1xuICAgICAgICB2YXIgY291bnQgPSB0aGlzW25hbWUgKyBDT1VOVF0gfHwgMDtcbiAgICAgICAgdmFyIHN0ZXBUYWtlbiA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChmb3JldmVyIHx8IHV0aWxzLmlzTnVtKHN0ZXApKSB7XG4gICAgICAgICAgICArK2NvdW50O1xuICAgICAgICAgICAgdGhpc1tuYW1lICsgQ09VTlRdID0gY291bnQ7XG5cbiAgICAgICAgICAgIGlmIChmb3JldmVyIHx8IGNvdW50IDw9IHN0ZXApIHtcbiAgICAgICAgICAgICAgICBtZXRob2QuY2FsbCh0aGlzLCBhY3Rvcik7XG4gICAgICAgICAgICAgICAgc3RlcFRha2VuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdGVwVGFrZW47XG4gICAgfTtcblxuICAgIFR3ZWVuLnByb3RvdHlwZS5mbGlwVmFsdWVzID0gZnVuY3Rpb24gZmxpcFZhbHVlcyhhY3Rvcikge1xuICAgICAgICB2YXIgYWN0b3JWYWx1ZXMgPSBhY3Rvci52YWx1ZXM7XG4gICAgICAgIHRoaXMuZWxhcHNlZCA9IHRoaXMuZHVyYXRpb24gLSB0aGlzLmVsYXBzZWQ7XG5cbiAgICAgICAgZWFjaCh0aGlzLnZhbHVlcywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gYWN0b3JWYWx1ZXNba2V5XTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgZWFjaCh2YWx1ZS5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlT3BzLmZsaXAoYWN0b3JWYWx1ZXNba2V5ICsgY2hpbGRLZXldKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsdWVPcHMuZmxpcCh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBUd2Vlbi5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHRoaXMucGxheURpcmVjdGlvbiAqPSAtMTtcbiAgICB9O1xuXG4gICAgVHdlZW4ucHJvdG90eXBlLnJlc3RhcnQgPSBmdW5jdGlvbiByZXN0YXJ0KCkge1xuICAgICAgICB0aGlzLmVsYXBzZWQgPSB0aGlzLnBsYXlEaXJlY3Rpb24gPT09IDEgPyAwIDogdGhpcy5kdXJhdGlvbjtcbiAgICAgICAgdGhpcy5zdGFydGVkID0gdXRpbHMuY3VycmVudFRpbWUoKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFR3ZWVuO1xufSkoQWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUd2Vlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFIzWldWdUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN08wRkJRVUVzU1VGQlRTeE5RVUZOTEVkQlFVY3NUMEZCVHl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wRkJRMjVETEVsQlFVMHNTVUZCU1N4SFFVRkhMRTlCUVU4c1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6dEJRVU53UXl4SlFVRk5MRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdRVUZEZEVNc1NVRkJUU3haUVVGWkxFZEJRVWNzVDBGQlR5eERRVUZETEhWQ1FVRjFRaXhEUVVGRExFTkJRVU03UVVGRGRFUXNTVUZCVFN4UlFVRlJMRWRCUVVjc1QwRkJUeXhEUVVGRExESkNRVUV5UWl4RFFVRkRMRU5CUVVNN1FVRkRkRVFzU1VGQlRTeGhRVUZoTEVkQlFVY3NUMEZCVHl4RFFVRkRMSFZDUVVGMVFpeERRVUZETEVOQlFVTTdRVUZEZGtRc1NVRkJUU3hKUVVGSkxFZEJRVWNzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXpzN1FVRkZlRUlzU1VGQlRTeExRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRPMEZCUTNSQ0xFbEJRVTBzVlVGQlZTeEhRVUZITzBGQlEyWXNVVUZCU1N4RlFVRkZMRk5CUVZNN1FVRkRaaXhSUVVGSkxFVkJRVVVzVTBGQlV6dEJRVU5tTEZGQlFVa3NSVUZCUlN4WlFVRlpPME5CUTNKQ096czdPenM3T3pzN096czdRVUZCUXl4QlFWbEdMRk5CUVZNc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVWQlFVVXNSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSVHRCUVVOd1F5eFJRVUZOTEdWQlFXVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRlRVFzVVVGQlRTeGpRVUZqTEVkQlFVY3NTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRE96dEJRVVY0UlN4WFFVRlBMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zWlVGQlpTeEZRVUZGTEVsQlFVa3NSVUZCUlN4RlFVRkZMRVZCUVVVc1kwRkJZeXhEUVVGRExFTkJRVU03UTBGRGNrVXNRMEZCUXpzN1NVRkZTU3hMUVVGTE8yTkJRVXdzUzBGQlN6czdZVUZCVEN4TFFVRkxPemhDUVVGTUxFdEJRVXM3T3pzN08wRkJRVXdzVTBGQlN5eFhRVU5RTEZkQlFWY3NNRUpCUVVjN1FVRkRWaXhsUVVGUExHRkJRV0VzUTBGQlF6dExRVU40UWpzN1FVRklReXhUUVVGTExGZEJTMUFzWlVGQlpTdzRRa0ZCUnp0QlFVTmtMR1ZCUVU4N1FVRkRTQ3hwUWtGQlN5eEZRVUZGTEVOQlFVTTdRVUZEVWl4clFrRkJUU3hGUVVGRkxFTkJRVU03UVVGRFZDeHZRa0ZCVVN4RlFVRkZMRWRCUVVjN1FVRkRZaXhuUWtGQlNTeEZRVUZGTEV0QlFVczdRVUZEV0N4blFrRkJTU3hGUVVGRkxFdEJRVXM3UVVGRFdDeG5Ra0ZCU1N4RlFVRkZMRXRCUVVzN1FVRkRXQ3g1UWtGQllTeEZRVUZGTEVOQlFVTTdRVUZEYUVJc2FVSkJRVXNzUlVGQlJTeExRVUZMTzBGQlExb3NiVUpCUVU4c1JVRkJSU3hEUVVGRE8xTkJRMklzUTBGQlF6dExRVU5NT3p0QlFXcENReXhUUVVGTExGZEJiVUpRTEdWQlFXVXNPRUpCUVVjN1FVRkRaQ3hsUVVGUE8wRkJRMGdzYVVKQlFVc3NSVUZCUlN4RFFVRkRPMEZCUTFJc2IwSkJRVkVzUlVGQlJTeEhRVUZITzBGQlEySXNaMEpCUVVrc1JVRkJSU3hUUVVGVE8wRkJRMllzYlVKQlFVOHNSVUZCUlN4RFFVRkRPMEZCUTFZc2FVSkJRVXNzUlVGQlJTeERRVUZETzBGQlExSXNZMEZCUlN4RlFVRkZMRU5CUVVNN1FVRkRUQ3hwUWtGQlN5eEZRVUZGTEV0QlFVczdVMEZEWml4RFFVRkRPMHRCUTB3N08wRkJOMEpETEZOQlFVc3NWMEVyUWxBc2JVSkJRVzFDTEd0RFFVRkhPMEZCUTJ4Q0xHVkJRVThzU1VGQlNTeERRVUZETzB0QlEyWTdPenM3T3pzN096dEJRV3BEUXl4VFFVRkxMRmRCZVVOUUxGbEJRVmtzZVVKQlFVTXNTMEZCU3l4RlFVRkZMR0ZCUVdFc1JVRkJSVHRCUVVNdlFpeFpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFbEJRVWtzUTBGQlF5eERRVUZET3p0QlFVVnFReXhaUVVGSkxHRkJRV0VzUlVGQlJUdEJRVU5tTEdkQ1FVRkpMRU5CUVVNc1QwRkJUeXhKUVVGSkxFRkJRVU1zWVVGQllTeEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVrc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF6dEJRVU53UlN4blFrRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVMEZEY2tJN1MwRkRTanM3T3pzN096czdPenRCUVdoRVF5eFRRVUZMTEZkQk1FUlFMRTlCUVU4c2IwSkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlR0QlFVTnNRaXhaUVVGTkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNSVUZCUlN4RFFVRkRPMEZCUTNoQ0xGbEJRVTBzWTBGQll5eEhRVUZITEVGQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1MwRkJTeXhEUVVGRExFZEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTXhSQ3haUVVGSkxGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTXNUMEZCVHpzN08wRkJRVU1zUVVGSE4wSXNXVUZCU1N4TlFVRk5MRXRCUVVzc1UwRkJVeXhGUVVGRk8wRkJRM1JDTEdkQ1FVRkpMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eExRVUZMTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZET3pzN1FVRkJReXhCUVVkdVNDeG5Ra0ZCU1N4UlFVRlJMRXRCUVVzc1kwRkJZeXhGUVVGRk8wRkJRemRDTEc5Q1FVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dGhRVU4wUWpzN08wRkJRVUVzUVVGSFJDeG5Ra0ZCU1N4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJRMklzZDBKQlFWRXNSMEZCUnl4TFFVRkxMRU5CUVVNc1dVRkJXU3hEUVVGRExGRkJRVkVzUlVGQlJTeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1lVRkRlRVE3T3p0QlFVRkJMRUZCUjBRc2IwSkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzVFVGQlRTeEZRVUZGTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRUUVVNdlJEczdRVUZGUkN4bFFVRlBMRkZCUVZFc1EwRkJRenRMUVVOdVFqczdPenM3T3pzN1FVRnNSa01zVTBGQlN5eFhRWGxHVUN4UlFVRlJMSEZDUVVGRExFdEJRVXNzUlVGQlJUczdPMEZCUTFvc1dVRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXpzN1FVRkZka0lzV1VGQlNTeExRVUZMTEVWQlFVVTdRVUZEVUN4blFrRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJTeFZRVUZETEVsQlFVa3NSVUZCUlN4VlFVRlZMRVZCUVVzN1FVRkRia01zYjBKQlFVa3NUMEZCU3l4aFFVRmhMRU5CUVVNc1MwRkJTeXhGUVVGRkxFbEJRVWtzUlVGQlJTeFBRVUZMTEZWQlFWVXNRMEZCUXl4RFFVRkRMRVZCUVVVN1FVRkRia1FzZVVKQlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRaQ3g1UWtGQlN5eERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRlRUlzTWtKQlFVOHNTMEZCU3l4RFFVRkRPMmxDUVVOb1FqdGhRVU5LTEVOQlFVTXNRMEZCUXp0VFFVTk9PenM3UVVGQlFTeEJRVWRFTEZsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRE96dEJRVVZ1UWl4bFFVRlBMRXRCUVVzc1EwRkJRenRMUVVOb1FqczdRVUV4UjBNc1UwRkJTeXhYUVRSSFVDeGhRVUZoTERCQ1FVRkRMRXRCUVVzc1JVRkJSU3hKUVVGSkxFVkJRVVVzVFVGQlRTeEZRVUZGTzBGQlF5OUNMRmxCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTjRRaXhaUVVGTkxFOUJRVThzUjBGQlNTeEpRVUZKTEV0QlFVc3NTVUZCU1N4QlFVRkRMRU5CUVVNN1FVRkRhRU1zV1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEY0VNc1dVRkJTU3hUUVVGVExFZEJRVWNzUzBGQlN5eERRVUZET3p0QlFVVjBRaXhaUVVGSkxFOUJRVThzU1VGQlNTeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRemxDTEdOQlFVVXNTMEZCU3l4RFFVRkRPMEZCUTFJc1owSkJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRE96dEJRVVV6UWl4blFrRkJTU3hQUVVGUExFbEJRVWtzUzBGQlN5eEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTXhRaXh6UWtGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGVrSXNlVUpCUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU03WVVGRGNFSTdVMEZEU2pzN1FVRkZSQ3hsUVVGUExGTkJRVk1zUTBGQlF6dExRVU53UWpzN1FVRTNTRU1zVTBGQlN5eFhRU3RJVUN4VlFVRlZMSFZDUVVGRExFdEJRVXNzUlVGQlJUdEJRVU5rTEZsQlFVMHNWMEZCVnl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRGFrTXNXVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNN08wRkJSVFZETEZsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxGVkJRVU1zUjBGQlJ5eEZRVUZMTzBGQlEzWkNMR2RDUVVGTkxFdEJRVXNzUjBGQlJ5eFhRVUZYTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN08wRkJSUzlDTEdkQ1FVRkpMRXRCUVVzc1EwRkJReXhSUVVGUkxFVkJRVVU3UVVGRGFFSXNiMEpCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTEZWQlFVTXNVVUZCVVN4RlFVRkxPMEZCUXk5Q0xEUkNRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhIUVVGSExFZEJRVWNzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0cFFrRkRPVU1zUTBGQlF5eERRVUZETzJGQlEwNDdPMEZCUlVRc2IwSkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1UwRkRlRUlzUTBGQlF5eERRVUZETzB0QlEwNDdPMEZCT1VsRExGTkJRVXNzVjBGblNsQXNUMEZCVHl4elFrRkJSenRCUVVOT0xGbEJRVWtzUTBGQlF5eGhRVUZoTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkROVUk3TzBGQmJFcERMRk5CUVVzc1YwRnZTbEFzVDBGQlR5eHpRa0ZCUnp0QlFVTk9MRmxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzUVVGQlF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4TFFVRkxMRU5CUVVNc1IwRkJTU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXp0QlFVTTVSQ3haUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRenRMUVVOMFF6czdWMEYyU2tNc1MwRkJTenRIUVVGVExFMUJRVTA3TzBGQk1Fb3hRaXhOUVVGTkxFTkJRVU1zVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXlJc0ltWnBiR1VpT2lKVWQyVmxiaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltTnZibk4wSUVGamRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dlFXTjBhVzl1SnlrN1hHNWpiMjV6ZENCallXeGpJRDBnY21WeGRXbHlaU2duTGk0dmFXNWpMMk5oYkdNbktUdGNibU52Ym5OMElIVjBhV3h6SUQwZ2NtVnhkV2x5WlNnbkxpNHZhVzVqTDNWMGFXeHpKeWs3WEc1amIyNXpkQ0J3Y21WelpYUkZZWE5wYm1jZ1BTQnlaWEYxYVhKbEtDY3VMM1IzWldWdUwzQnlaWE5sZEMxbFlYTnBibWNuS1R0Y2JtTnZibk4wSUhaaGJIVmxUM0J6SUQwZ2NtVnhkV2x5WlNnbkxpNHZZV04wYjNJdmRtRnNkV1V0YjNCbGNtRjBhVzl1Y3ljcE8xeHVZMjl1YzNRZ1ZIZGxaVzVEYjI1MGNtOXNjeUE5SUhKbGNYVnBjbVVvSnk0dmRIZGxaVzR2VkhkbFpXNURiMjUwY205c2N5Y3BPMXh1WTI5dWMzUWdaV0ZqYUNBOUlIVjBhV3h6TG1WaFkyZzdYRzVjYm1OdmJuTjBJRU5QVlU1VUlEMGdKMk52ZFc1MEp6dGNibU52Ym5OMElFNUZXRlJmVTFSRlVGTWdQU0I3WEc0Z0lDQWdiRzl2Y0RvZ0ozSmxjM1JoY25RbkxGeHVJQ0FnSUhsdmVXODZJQ2R5WlhabGNuTmxKeXhjYmlBZ0lDQm1iR2x3T2lBblpteHBjRlpoYkhWbGN5ZGNibjA3WEc1Y2JpOHFYRzRnSUNBZ1JXRnpaU0IyWVd4MVpTQjNhWFJvYVc0Z2NtRnVaMlZrSUhCaGNtRnRaWFJsY25OY2JpQWdJQ0JjYmlBZ0lDQkFjR0Z5WVcwZ1cyNTFiV0psY2wwNklGQnliMmR5WlhOeklHSmxkSGRsWlc0Z01DQmhibVFnTVZ4dUlDQWdJRUJ3WVhKaGJTQmJiblZ0WW1WeVhUb2dWbUZzZFdVZ2IyWWdNQ0J3Y205bmNtVnpjMXh1SUNBZ0lFQndZWEpoYlNCYmJuVnRZbVZ5WFRvZ1ZtRnNkV1VnYjJZZ01TQndjbTluY21WemMxeHVJQ0FnSUVCd1lYSmhiU0JiYzNSeWFXNW5JSHg4SUdaMWJtTjBhVzl1WFRvZ1RtRnRaU0J2WmlCd2NtVnpaWFFnWldGemFXNW5YRzRnSUNBZ0lDQWdJSFJ2SUhWelpTQnZjaUJuWlc1bGNtRjBaV1FnWldGemFXNW5JR1oxYm1OMGFXOXVYRzRnSUNBZ1FISmxkSFZ5YmlCYmJuVnRZbVZ5WFRvZ1ZtRnNkV1VnYjJZZ1pXRnpaV1FnY0hKdlozSmxjM01nYVc0Z2NtRnVaMlZjYmlvdklGeHVablZ1WTNScGIyNGdaV0Z6WlNod2NtOW5jbVZ6Y3l3Z1puSnZiU3dnZEc4c0lHVmhjMlVwSUh0Y2JpQWdJQ0JqYjI1emRDQndjbTluY21WemMweHBiV2wwWldRZ1BTQmpZV3hqTG5KbGMzUnlhV04wWldRb2NISnZaM0psYzNNc0lEQXNJREVwTzF4dUlDQWdJR052Ym5OMElHVmhjMmx1WjBaMWJtTjBhVzl1SUQwZ2RYUnBiSE11YVhOVGRISnBibWNvWldGelpTa2dQeUJ3Y21WelpYUkZZWE5wYm1kYlpXRnpaVjBnT2lCbFlYTmxPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHTmhiR011ZG1Gc2RXVkZZWE5sWkNod2NtOW5jbVZ6YzB4cGJXbDBaV1FzSUdaeWIyMHNJSFJ2TENCbFlYTnBibWRHZFc1amRHbHZiaWs3WEc1OU8xeHVYRzVqYkdGemN5QlVkMlZsYmlCbGVIUmxibVJ6SUVGamRHbHZiaUI3WEc0Z0lDQWdaMlYwUTI5dWRISnZiSE1vS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCVWQyVmxia052Ym5SeWIyeHpPMXh1SUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0JuWlhSRVpXWmhkV3gwVUhKdmNITW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV3hoZVRvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUdScGJHRjBaVG9nTVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1IxY21GMGFXOXVPaUF6TURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzYjI5d09pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSGx2ZVc4NklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdabXhwY0RvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndiR0Y1UkdseVpXTjBhVzl1T2lBeExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWlc1a1pXUTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4aGNITmxaRG9nTUZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdkbGRFUmxabUYxYkhSV1lXeDFaU2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYkdGNU9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pIVnlZWFJwYjI0NklETXdNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHVmhjMlU2SUNkbFlYTmxUM1YwSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4wWVdkblpYSTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkR1Z3Y3pvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSdk9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtOTFibVE2SUdaaGJITmxYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaMlYwUkdWbVlYVnNkRlpoYkhWbFVISnZjQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNkMGJ5YzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQWdWWEJrWVhSbElFRmpkR2x2YmlCbGJHRndjMlZrSUhScGJXVmNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJRUJ3WVhKaGJTQmJiMkpxWldOMFhUb2dRV04wYVc5dUlIQnliM0JsY25ScFpYTmNiaUFnSUNBZ0lDQWdRSEJoY21GdElGdHVkVzFpWlhKZE9pQlVhVzFsYzNSaGJYQWdiMllnWTNWeWNtVnVkQ0JtY21GdFpWeHVJQ0FnSUNvdlhHNGdJQ0FnYjI1R2NtRnRaVk4wWVhKMEtHRmpkRzl5TENCbWNtRnRaVVIxY21GMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaV3hoY0hObFpDQTlJSFJvYVhNdVpXeGhjSE5sWkNCOGZDQXdPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaG1jbUZ0WlVSMWNtRjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnNZWEJ6WldRZ0t6MGdLR1p5WVcxbFJIVnlZWFJwYjI0Z0tpQmhZM1J2Y2k1a2FXeGhkR1VwSUNvZ2RHaHBjeTV3YkdGNVJHbHlaV04wYVc5dU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxibVJsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2x4dUlDQWdJQ0FnSUNCRFlXeGpkV3hoZEdVZ2NISnZaM0psYzNNZ2IyWWdkbUZzZFdVZ1ltRnpaV1FnYjI0Z2RHbHRaU0JsYkdGd2MyVmtMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpTQmtaV3hoZVM5a2RYSmhkR2x2Ymk5emRHRm5aMlZ5SUhCeWIzQmxjblJwWlhOY2JseHVJQ0FnSUNBZ0lDQkFjR0Z5WVcwZ1cwRmpkRzl5WFZ4dUlDQWdJQ0FnSUNCQWNHRnlZVzBnVzI5aWFtVmpkRjA2SUZaaGJIVmxJSE4wWVhSbElHRnVaQ0J3Y205d1pYSjBhV1Z6WEc0Z0lDQWdJQ0FnSUVCeVpYUjFjbTRnVzI1MWJXSmxjbDA2SUVOaGJHTjFiR0YwWldRZ2RtRnNkV1ZjYmlBZ0lDQXFMMXh1SUNBZ0lIQnliMk5sYzNNb1lXTjBiM0lzSUhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJoY21kbGRDQTlJSFpoYkhWbExuUnZPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQndjbTluY21WemMxUmhjbWRsZENBOUlDaDBhR2x6TG5Cc1lYbEVhWEpsWTNScGIyNGdQVDA5SURFcElEOGdNU0E2SURBN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J1WlhkV1lXeDFaU0E5SUhaaGJIVmxMbU4xY25KbGJuUTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1NXWWdkR2hwY3lCMllXeDFaU0JvWVhNZ1lTQjBieUJ3Y205d1pYSjBlU3dnYjNSb1pYSjNhWE5sSUhkbElHcDFjM1FnY21WMGRYSnVJR04xY25KbGJuUWdkbUZzZFdWY2JpQWdJQ0FnSUNBZ2FXWWdLSFJoY21kbGRDQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NISnZaM0psYzNNZ1BTQmpZV3hqTG5KbGMzUnlhV04wWldRb1kyRnNZeTV3Y205bmNtVnpjeWgwYUdsekxtVnNZWEJ6WldRZ0xTQjJZV3gxWlM1a1pXeGhlU3dnTUN3Z2RtRnNkV1V1WkhWeVlYUnBiMjRwSUMwZ2RtRnNkV1V1YzNSaFoyZGxjaXdnTUN3Z01TazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRTFoY21zZ1FXTjBhVzl1SUdGeklFNVBWQ0JsYm1SbFpDQnBaaUJ6ZEdsc2JDQnBiaUJ3Y205bmNtVnpjMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5YjJkeVpYTnpJQ0U5UFNCd2NtOW5jbVZ6YzFSaGNtZGxkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzVrWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVTNSbGNDQndjbTluY21WemN5QnBaaUIzWlNkeVpTQnpkR1Z3Y0dsdVoxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsTG5OMFpYQnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdlozSmxjM01nUFNCMWRHbHNjeTV6ZEdWd1VISnZaM0psYzNNb2NISnZaM0psYzNNc0lIWmhiSFZsTG5OMFpYQnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSV0Z6WlNCMllXeDFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNWbUZzZFdVZ1BTQmxZWE5sS0hCeWIyZHlaWE56TENCMllXeDFaUzV2Y21sbmFXNHNJSFJoY21kbGRDd2dkbUZzZFdVdVpXRnpaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNWbUZzZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ1NXWWdkR2hwY3lCMGQyVmxiaUJvWVhNZ1pXNWtaV1FzSUdOb1pXTnJJR2xtSUhkbElHeHZiM0F2ZVc5NWJ5OW1iR2x3WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCQWNtVjBkWEp1SUZ0aWIyOXNaV0Z1WFRvZ1NHRnpJSFJvYVhNZ2RIZGxaVzRnY21WaGJHeDVJSEpsWVd4c2VTQmxibVJsWkQ5Y2JpQWdJQ0FxTDF4dUlDQWdJR2hoYzBWdVpHVmtLR0ZqZEc5eUtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCbGJtUmxaQ0E5SUhSb2FYTXVaVzVrWldRN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dWdVpHVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxZV05vS0U1RldGUmZVMVJGVUZNc0lDaHVZVzFsTENCdFpYUm9iMlJPWVcxbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WTJobFkydE9aWGgwVTNSbGNDaGhZM1J2Y2l3Z2JtRnRaU3dnZEdocGMxdHRaWFJvYjJST1lXMWxYU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaVzVrWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV04wYjNJdWFHRnpRMmhoYm1kbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUZKbGMyVjBJR0JsYm1SbFpHQmNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJtUmxaQ0E5SUdaaGJITmxPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJsYm1SbFpEdGNiaUFnSUNCOVhHNWNiaUFnSUNCamFHVmphMDVsZUhSVGRHVndLR0ZqZEc5eUxDQnVZVzFsTENCdFpYUm9iMlFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzNSbGNDQTlJSFJvYVhOYmJtRnRaVjA3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1p2Y21WMlpYSWdQU0FvYzNSbGNDQTlQVDBnZEhKMVpTazdYRzRnSUNBZ0lDQWdJR3hsZENCamIzVnVkQ0E5SUhSb2FYTmJibUZ0WlNBcklFTlBWVTVVWFNCOGZDQXdPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2MzUmxjRlJoYTJWdUlEMGdabUZzYzJVN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dadmNtVjJaWElnZkh3Z2RYUnBiSE11YVhOT2RXMG9jM1JsY0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNzclkyOTFiblE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6VzI1aGJXVWdLeUJEVDFWT1ZGMGdQU0JqYjNWdWREdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1p2Y21WMlpYSWdmSHdnWTI5MWJuUWdQRDBnYzNSbGNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsZEdodlpDNWpZV3hzS0hSb2FYTXNJR0ZqZEc5eUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkR1Z3VkdGclpXNGdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjBaWEJVWVd0bGJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCbWJHbHdWbUZzZFdWektHRmpkRzl5S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdGamRHOXlWbUZzZFdWeklEMGdZV04wYjNJdWRtRnNkV1Z6TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZzWVhCelpXUWdQU0IwYUdsekxtUjFjbUYwYVc5dUlDMGdkR2hwY3k1bGJHRndjMlZrTzF4dVhHNGdJQ0FnSUNBZ0lHVmhZMmdvZEdocGN5NTJZV3gxWlhNc0lDaHJaWGtwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFpoYkhWbElEMGdZV04wYjNKV1lXeDFaWE5iYTJWNVhUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFpoYkhWbExtTm9hV3hrY21WdUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV0ZqYUNoMllXeDFaUzVqYUdsc1pISmxiaXdnS0dOb2FXeGtTMlY1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxUM0J6TG1ac2FYQW9ZV04wYjNKV1lXeDFaWE5iYTJWNUlDc2dZMmhwYkdSTFpYbGRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdWUGNITXVabXhwY0NoMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRtVnljMlVvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0d4aGVVUnBjbVZqZEdsdmJpQXFQU0F0TVR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhOMFlYSjBLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZzWVhCelpXUWdQU0FvZEdocGN5NXdiR0Y1UkdseVpXTjBhVzl1SUQwOVBTQXhLU0EvSURBZ09pQjBhR2x6TG1SMWNtRjBhVzl1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wWVhKMFpXUWdQU0IxZEdsc2N5NWpkWEp5Wlc1MFZHbHRaU2dwTzF4dUlDQWdJSDFjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlVkMlZsYmpzaVhYMD1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2FjdGlvbnMvVHdlZW4uanNcbiAqKiBtb2R1bGUgaWQgPSAzM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8vIEltcG9ydHNcbnZhciBBY3Rpb24gPSByZXF1aXJlKCcuL0FjdGlvbicpO1xudmFyIGNhbGMgPSByZXF1aXJlKCcuLi9pbmMvY2FsYycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vaW5jL3V0aWxzJyk7XG52YXIgc2ltdWxhdGlvbnMgPSByZXF1aXJlKCcuL3NpbXVsYXRlL3NpbXVsYXRpb25zJyk7XG5cbi8vIFZhbHVlc1xudmFyIERFRkFVTFRfUFJPUCA9ICd2ZWxvY2l0eSc7XG5cbnZhciBTaW11bGF0ZSA9IChmdW5jdGlvbiAoX0FjdGlvbikge1xuICAgIF9pbmhlcml0cyhTaW11bGF0ZSwgX0FjdGlvbik7XG5cbiAgICAvKlxuICAgICAgICAjIFNpbXVsYXRlIGNsYXNzIGNvbnN0cnVjdG9yXG4gICAgICAgICMjIFNldHMgcGFyZW50IEFjdGlvbiBjbGFzcyBhbmQgdGhlbiBkZWZhdWx0IFNpbXVsYXRlIHByb3BlcnRpZXNcbiAgICAgICAgIEBwYXJhbSBbb2JqZWN0XVxuICAgICovXG5cbiAgICBmdW5jdGlvbiBTaW11bGF0ZSgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpbXVsYXRlKTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9BY3Rpb24uY2FsbC5hcHBseShfQWN0aW9uLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICAgICAgX3RoaXMuY2FsY3VsYXRlc1ZlbG9jaXR5ID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuaW5hY3RpdmVGcmFtZXMgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICAgIyBHZXQgZGVmYXVsdCBTaW11bGF0ZSBwcm9wc1xuICAgICAgICAgQHJldHVybiBbb2JqZWN0XVxuICAgICovXG5cbiAgICBTaW11bGF0ZS5wcm90b3R5cGUuZ2V0RGVmYXVsdFByb3BzID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXV0b0VuZDogdHJ1ZSxcbiAgICAgICAgICAgIG1heEluYWN0aXZlRnJhbWVzOiAzXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgICMgR2V0IGRlZmF1bHQgU2ltdWxhdGUgdmFsdWUgcHJvcHNcbiAgICAgICAgIEByZXR1cm4gW29iamVjdF1cbiAgICAqL1xuXG4gICAgU2ltdWxhdGUucHJvdG90eXBlLmdldERlZmF1bHRWYWx1ZSA9IGZ1bmN0aW9uIGdldERlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vIFtzdHJpbmddOiBTaW11bGF0aW9uIHRvIC5ydW5cbiAgICAgICAgICAgIHNpbXVsYXRlOiBERUZBVUxUX1BST1AsXG5cbiAgICAgICAgICAgIC8vIFtudW1iZXJdOiBBY2NlbGVyYXRpb24gdG8gYXBwbHkgdG8gdmFsdWUsIGluIHVuaXRzIHBlciBzZWNvbmRcbiAgICAgICAgICAgIGFjY2VsZXJhdGlvbjogMCxcblxuICAgICAgICAgICAgLy8gW251bWJlcl06IEZhY3RvciB0byBtdWx0aXBseSB2ZWxvY2l0eSBieSBvbiBib3VuY2VcbiAgICAgICAgICAgIGJvdW5jZTogMCxcblxuICAgICAgICAgICAgLy8gW251bWJlcl06IFNwcmluZyBzdHJlbmd0aCBkdXJpbmcgJ3N0cmluZydcbiAgICAgICAgICAgIHNwcmluZzogODAsXG5cbiAgICAgICAgICAgIC8vIFtudW1iZXJdOiBUaW1lY29uc3RhbnQgb2YgZ2xpZGVcbiAgICAgICAgICAgIHRpbWVDb25zdGFudDogMzk1LFxuXG4gICAgICAgICAgICAvLyBbbnVtYmVyXTogU3RvcCBzaW11bGF0aW9uIHVuZGVyIHRoaXMgc3BlZWRcbiAgICAgICAgICAgIHN0b3BTcGVlZDogMC4wMDAxLFxuXG4gICAgICAgICAgICAvLyBbYm9vbGVhbl06IENhcHR1cmUgd2l0aCBzcHJpbmcgcGh5c2ljcyBvbiBsaW1pdCBicmVhY2hcbiAgICAgICAgICAgIGNhcHR1cmU6IGZhbHNlLFxuXG4gICAgICAgICAgICAvLyBbbnVtYmVyXTogRnJpY3Rpb24gdG8gYXBwbHkgcGVyIGZyYW1lXG4gICAgICAgICAgICBmcmljdGlvbjogMCxcblxuICAgICAgICAgICAgdG86IDAsXG4gICAgICAgICAgICByb3VuZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgICAgIyBHZXQgZGVmYXVsdCBTaW11bGF0ZSB2YWx1ZSBwcm9wZXJ0eSBuYW1lXG4gICAgICAgICMjIFNldCB2YWx1ZXMgdG8gdGhpcyB3aGVuIGEgYHZhbHVlYCBpcyBub3QgcHJvdmlkZWQgYXMgYW4gb2JqZWN0XG4gICAgICAgICBAcmV0dXJuIFtzdHJpbmddXG4gICAgKi9cblxuICAgIFNpbXVsYXRlLnByb3RvdHlwZS5nZXREZWZhdWx0VmFsdWVQcm9wID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlUHJvcCgpIHtcbiAgICAgICAgcmV0dXJuIERFRkFVTFRfUFJPUDtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgICAgIyBNZXRob2QgdG8gZmlyZSB3aGVuIEFjdGlvbiBzdGFydHNcbiAgICAgICAgIyMgU2V0IGBzdGFydGVkYCB0byBjdXJyZW50IHRpbWUuXG4gICAgKi9cblxuICAgIFNpbXVsYXRlLnByb3RvdHlwZS5vblN0YXJ0ID0gZnVuY3Rpb24gb25TdGFydCgpIHtcbiAgICAgICAgdGhpcy5zdGFydGVkID0gdXRpbHMuY3VycmVudFRpbWUoKTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgICAgIyBGaXJlIGF0IHN0YXJ0IG9mIGV2ZXJ5IGZyYW1lXG4gICAgICAgICMjIFNldCBgaGFzQ2hhbmdlZGAgdG8gZmFsc2VcbiAgICAqL1xuXG4gICAgU2ltdWxhdGUucHJvdG90eXBlLm9uRnJhbWVTdGFydCA9IGZ1bmN0aW9uIG9uRnJhbWVTdGFydCgpIHtcbiAgICAgICAgdGhpcy5oYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgICMgU2ltdWxhdGUgdGhlIGB2YWx1ZWBzIHBlci1mcmFtZSBtb3ZlbWVudFxuICAgICAgICBcbiAgICAgICAgQHBhcmFtIFtBY3Rvcl1cbiAgICAgICAgQHBhcmFtIFtWYWx1ZV06IEN1cnJlbnQgdmFsdWVcbiAgICAgICAgQHBhcmFtIFtzdHJpbmddOiBLZXkgb2YgY3VycmVudCB2YWx1ZVxuICAgICAgICBAcGFyYW0gW251bWJlcl06IER1cmF0aW9uIG9mIGZyYW1lIGluIG1zXG4gICAgICAgIEByZXR1cm4gW251bWJlcl06IENhbGN1bGF0ZWQgdmFsdWVcbiAgICAqL1xuXG4gICAgU2ltdWxhdGUucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiBwcm9jZXNzKGFjdG9yLCB2YWx1ZSwga2V5LCB0aW1lU2luY2VMYXN0RnJhbWUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB2YWx1ZS5jdXJyZW50O1xuICAgICAgICB2YXIgc2ltdWxhdGUgPSB2YWx1ZS5zaW11bGF0ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VycmVudDtcblxuICAgICAgICAvLyBJZiBzdHJpbmcsIHVzZSBpbi1idWlsdCBzaW11bGF0aW9uIG90aGVyd2lzZSB0cmVhdCBhcyBmdW5jdGlvblxuICAgICAgICB2YXIgc2ltdWxhdGlvbiA9IHV0aWxzLmlzU3RyaW5nKHNpbXVsYXRlKSA/IHNpbXVsYXRpb25zW3NpbXVsYXRlXSA6IHNpbXVsYXRlO1xuXG4gICAgICAgIHZhciBuZXdWZWxvY2l0eSA9IHNpbXVsYXRpb24gPyBzaW11bGF0aW9uKHZhbHVlLCB0aW1lU2luY2VMYXN0RnJhbWUsIHRoaXMuc3RhcnRlZCkgOiAwO1xuXG4gICAgICAgIHZhbHVlLnZlbG9jaXR5ID0gTWF0aC5hYnMobmV3VmVsb2NpdHkpID49IHZhbHVlLnN0b3BTcGVlZCA/IG5ld1ZlbG9jaXR5IDogMDtcblxuICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlLmN1cnJlbnQgKyBjYWxjLnNwZWVkUGVyRnJhbWUodmFsdWUudmVsb2NpdHksIHRpbWVTaW5jZUxhc3RGcmFtZSk7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBjdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLmhhc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAgICAjIEhhcyB0aGlzIGFjdGlvbiBlbmRlZD9cbiAgICAgICAgIyMgVXNlIGEgZnJhbWVjb3VudGVyIHRvIHNlZSBpZiBBY3Rpb24gaGFzIGNoYW5nZWQgaW4gdGhlIGxhc3QgeCBmcmFtZXNcbiAgICAgICAgYW5kIGRlY2xhcmUgZW5kZWQgaWYgbm90XG4gICAgICAgIFxuICAgICAgICBAcGFyYW0gW0FjdG9yXVxuICAgICAgICBAcmV0dXJuIFtib29sZWFuXTogSGFzIEFjdGlvbiBlbmRlZD9cbiAgICAqL1xuXG4gICAgU2ltdWxhdGUucHJvdG90eXBlLmhhc0VuZGVkID0gZnVuY3Rpb24gaGFzRW5kZWQoYWN0b3IpIHtcbiAgICAgICAgdmFyIGVuZGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHRoaXMuYXV0b0VuZCkge1xuICAgICAgICAgICAgdGhpcy5pbmFjdGl2ZUZyYW1lcyA9IHRoaXMuaGFzQ2hhbmdlZCA/IDAgOiB0aGlzLmluYWN0aXZlRnJhbWVzICsgMTtcbiAgICAgICAgICAgIGVuZGVkID0gdGhpcy5pbmFjdGl2ZUZyYW1lcyA+IGFjdG9yLm1heEluYWN0aXZlRnJhbWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVuZGVkO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAgICAjIExpbWl0IG91dHB1dCB0byB2YWx1ZSByYW5nZSwgaWYgYW55XG4gICAgICAgICMjIElmIHZlbG9jaXR5IGlzIGF0IG9yIG1vcmUgdGhhbiByYW5nZSwgYW5kIHZhbHVlIGhhcyBhIGJvdW5jZSBwcm9wZXJ0eSxcbiAgICAgICAgcnVuIHRoZSBib3VuY2Ugc2ltdWxhdGlvblxuICAgICAgICBcbiAgICAgICAgQHBhcmFtIFtudW1iZXJdOiBDYWxjdWxhdGVkIG91dHB1dFxuICAgICAgICBAcGFyYW0gW1ZhbHVlXTogQ3VycmVudCBWYWx1ZVxuICAgICAgICBAcmV0dXJuIFtudW1iZXJdOiBMaW1pdC1hZGp1c3RlZCBvdXRwdXRcbiAgICAqL1xuXG4gICAgU2ltdWxhdGUucHJvdG90eXBlLmxpbWl0ID0gZnVuY3Rpb24gbGltaXQob3V0cHV0LCB2YWx1ZSkge1xuICAgICAgICB2YXIgaXNPdXRzaWRlTWF4ID0gb3V0cHV0ID49IHZhbHVlLm1heDtcbiAgICAgICAgdmFyIGlzT3V0c2lkZU1pbiA9IG91dHB1dCA8PSB2YWx1ZS5taW47XG4gICAgICAgIHZhciBpc091dHNpZGVSYW5nZSA9IGlzT3V0c2lkZU1heCB8fCBpc091dHNpZGVNaW47XG5cbiAgICAgICAgaWYgKGlzT3V0c2lkZVJhbmdlKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBjYWxjLnJlc3RyaWN0ZWQob3V0cHV0LCB2YWx1ZS5taW4sIHZhbHVlLm1heCk7XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZS5ib3VuY2UpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZS52ZWxvY2l0eSA9IHNpbXVsYXRpb25zLmJvdW5jZSh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLmNhcHR1cmUpIHtcbiAgICAgICAgICAgICAgICBzaW11bGF0aW9ucy5jYXB0dXJlKHZhbHVlLCBpc091dHNpZGVNYXggPyB2YWx1ZS5tYXggOiB2YWx1ZS5taW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNpbXVsYXRlO1xufSkoQWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaW11bGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbE5wYlhWc1lYUmxMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenRCUVVOQkxFbEJRVTBzVFVGQlRTeEhRVUZITEU5QlFVOHNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVOdVF5eEpRVUZOTEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03UVVGRGNFTXNTVUZCVFN4TFFVRkxMRWRCUVVjc1QwRkJUeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETzBGQlEzUkRMRWxCUVUwc1YwRkJWeXhIUVVGSExFOUJRVThzUTBGQlF5eDNRa0ZCZDBJc1EwRkJRenM3TzBGQlFVTXNRVUZIZEVRc1NVRkJUU3haUVVGWkxFZEJRVWNzVlVGQlZTeERRVUZET3p0SlFVVXhRaXhSUVVGUk8yTkJRVklzVVVGQlVUczdPenM3T3pzN1FVRlBWaXhoUVZCRkxGRkJRVkVzUjBGUFZ6czRRa0ZRYmtJc1VVRkJVVHM3TUVOQlQwc3NTVUZCU1R0QlFVRktMR2RDUVVGSk96czdjVVJCUTJZc01FTkJRVk1zU1VGQlNTeEZRVUZET3p0QlFVTmtMR05CUVVzc2EwSkJRV3RDTEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUXk5Q0xHTkJRVXNzWTBGQll5eEhRVUZITEVOQlFVTXNRMEZCUXpzN1MwRkRNMEk3T3pzN096dEJRVUZCTzBGQldFTXNXVUZCVVN4WFFXdENWaXhsUVVGbExEaENRVUZITzBGQlEyUXNaVUZCVHp0QlFVTklMRzFDUVVGUExFVkJRVVVzU1VGQlNUdEJRVU5pTERaQ1FVRnBRaXhGUVVGRkxFTkJRVU03VTBGRGRrSXNRMEZCUXp0TFFVTk1PenM3T3pzN08wRkJka0pETEZsQlFWRXNWMEU0UWxZc1pVRkJaU3c0UWtGQlJ6dEJRVU5rTEdWQlFVODdPMEZCUlVnc2IwSkJRVkVzUlVGQlJTeFpRVUZaT3pzN1FVRkhkRUlzZDBKQlFWa3NSVUZCUlN4RFFVRkRPenM3UVVGSFppeHJRa0ZCVFN4RlFVRkZMRU5CUVVNN096dEJRVWRVTEd0Q1FVRk5MRVZCUVVVc1JVRkJSVHM3TzBGQlIxWXNkMEpCUVZrc1JVRkJSU3hIUVVGSE96czdRVUZIYWtJc2NVSkJRVk1zUlVGQlJTeE5RVUZOT3pzN1FVRkhha0lzYlVKQlFVOHNSVUZCUlN4TFFVRkxPenM3UVVGSFpDeHZRa0ZCVVN4RlFVRkZMRU5CUVVNN08wRkJSVmdzWTBGQlJTeEZRVUZGTEVOQlFVTTdRVUZEVEN4cFFrRkJTeXhGUVVGRkxFdEJRVXM3VTBGRFppeERRVUZETzB0QlEwdzdPenM3T3pzN08wRkJNMFJETEZsQlFWRXNWMEZ0UlZZc2JVSkJRVzFDTEd0RFFVRkhPMEZCUTJ4Q0xHVkJRVThzV1VGQldTeERRVUZETzB0QlEzWkNPenM3T3pzN08wRkJja1ZETEZsQlFWRXNWMEV5UlZZc1QwRkJUeXh6UWtGQlJ6dEJRVU5PTEZsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETzB0QlEzUkRPenM3T3pzN08wRkJOMFZETEZsQlFWRXNWMEZ0UmxZc1dVRkJXU3d5UWtGQlJ6dEJRVU5ZTEZsQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1MwRkJTeXhEUVVGRE8wdEJRek5DT3pzN096czdPenM3T3pzN1FVRnlSa01zV1VGQlVTeFhRV2RIVml4UFFVRlBMRzlDUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNSMEZCUnl4RlFVRkZMR3RDUVVGclFpeEZRVUZGTzBGQlF6TkRMRmxCUVUwc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTTdRVUZET1VJc1dVRkJUU3hSUVVGUkxFZEJRVWNzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXp0QlFVTm9ReXhaUVVGSkxGRkJRVkVzUjBGQlJ5eFBRVUZQT3pzN1FVRkJReXhCUVVkMlFpeFpRVUZOTEZWQlFWVXNSMEZCUnl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhSUVVGUkxFTkJRVU03TzBGQlJTOUZMRmxCUVUwc1YwRkJWeXhIUVVGSExGVkJRVlVzUjBGQlJ5eFZRVUZWTEVOQlFVTXNTMEZCU3l4RlFVRkZMR3RDUVVGclFpeEZRVUZGTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03TzBGQlJYcEdMR0ZCUVVzc1EwRkJReXhSUVVGUkxFZEJRVWNzUVVGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFdEJRVXNzUTBGQlF5eFRRVUZUTEVkQlFVa3NWMEZCVnl4SFFVRkhMRU5CUVVNc1EwRkJRenM3UVVGRk9VVXNaMEpCUVZFc1IwRkJSeXhMUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUlVGQlJTeHJRa0ZCYTBJc1EwRkJReXhEUVVGRE96dEJRVVZzUml4WlFVRkpMRkZCUVZFc1MwRkJTeXhQUVVGUExFVkJRVVU3UVVGRGRFSXNaMEpCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETzFOQlF6RkNPenRCUVVWRUxHVkJRVThzVVVGQlVTeERRVUZETzB0QlEyNUNPenM3T3pzN096czdPenRCUVc1SVF5eFpRVUZSTEZkQk5raFdMRkZCUVZFc2NVSkJRVU1zUzBGQlN5eEZRVUZGTzBGQlExb3NXVUZCU1N4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRE96dEJRVVZzUWl4WlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVU3UVVGRFpDeG5Ra0ZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU53UlN4cFFrRkJTeXhIUVVGSkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NTMEZCU3l4RFFVRkRMR2xDUVVGcFFpeEJRVUZETEVOQlFVTTdVMEZETTBRN08wRkJSVVFzWlVGQlR5eExRVUZMTEVOQlFVTTdTMEZEYUVJN096czdPenM3T3pzN096dEJRWFJKUXl4WlFVRlJMRmRCYVVwV0xFdEJRVXNzYTBKQlFVTXNUVUZCVFN4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVOcVFpeFpRVUZOTEZsQlFWa3NSMEZCU1N4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExFZEJRVWNzUVVGQlF5eERRVUZETzBGQlF6TkRMRmxCUVUwc1dVRkJXU3hIUVVGSkxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNSMEZCUnl4QlFVRkRMRU5CUVVNN1FVRkRNME1zV1VGQlRTeGpRVUZqTEVkQlFVY3NXVUZCV1N4SlFVRkpMRmxCUVZrc1EwRkJRenM3UVVGRmNFUXNXVUZCU1N4alFVRmpMRVZCUVVVN1FVRkRhRUlzYTBKQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFMUJRVTBzUlVGQlJTeExRVUZMTEVOQlFVTXNSMEZCUnl4RlFVRkZMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6czdRVUZGZGtRc1owSkJRVWtzUzBGQlN5eERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTmtMSEZDUVVGTExFTkJRVU1zVVVGQlVTeEhRVUZITEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03WVVGRE9VTXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVU3UVVGRGRFSXNNa0pCUVZjc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eEZRVUZGTEZsQlFWa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1IwRkJSeXhIUVVGSExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0aFFVTndSVHRUUVVOS096dEJRVVZFTEdWQlFVOHNUVUZCVFN4RFFVRkRPMHRCUTJwQ096dFhRV3BMUXl4UlFVRlJPMGRCUVZNc1RVRkJUVHM3UVVGdlN6ZENMRTFCUVUwc1EwRkJReXhQUVVGUExFZEJRVWNzVVVGQlVTeERRVUZESWl3aVptbHNaU0k2SWxOcGJYVnNZWFJsTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnU1cxd2IzSjBjMXh1WTI5dWMzUWdRV04wYVc5dUlEMGdjbVZ4ZFdseVpTZ25MaTlCWTNScGIyNG5LVHRjYm1OdmJuTjBJR05oYkdNZ1BTQnlaWEYxYVhKbEtDY3VMaTlwYm1NdlkyRnNZeWNwTzF4dVkyOXVjM1FnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1TGk5cGJtTXZkWFJwYkhNbktUdGNibU52Ym5OMElITnBiWFZzWVhScGIyNXpJRDBnY21WeGRXbHlaU2duTGk5emFXMTFiR0YwWlM5emFXMTFiR0YwYVc5dWN5Y3BPMXh1WEc0dkx5QldZV3gxWlhOY2JtTnZibk4wSUVSRlJrRlZURlJmVUZKUFVDQTlJQ2QyWld4dlkybDBlU2M3WEc1Y2JtTnNZWE56SUZOcGJYVnNZWFJsSUdWNGRHVnVaSE1nUVdOMGFXOXVJSHRjYmlBZ0lDQXZLbHh1SUNBZ0lDQWdJQ0FqSUZOcGJYVnNZWFJsSUdOc1lYTnpJR052Ym5OMGNuVmpkRzl5WEc0Z0lDQWdJQ0FnSUNNaklGTmxkSE1nY0dGeVpXNTBJRUZqZEdsdmJpQmpiR0Z6Y3lCaGJtUWdkR2hsYmlCa1pXWmhkV3gwSUZOcGJYVnNZWFJsSUhCeWIzQmxjblJwWlhOY2JseHVJQ0FnSUNBZ0lDQkFjR0Z5WVcwZ1cyOWlhbVZqZEYxY2JpQWdJQ0FxTDF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0M0dUxtRnlaM01wSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvTGk0dVlYSm5jeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMkZzWTNWc1lYUmxjMVpsYkc5amFYUjVJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cGJtRmpkR2wyWlVaeVlXMWxjeUE5SURBN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ0l5QkhaWFFnWkdWbVlYVnNkQ0JUYVcxMWJHRjBaU0J3Y205d2MxeHVYRzRnSUNBZ0lDQWdJRUJ5WlhSMWNtNGdXMjlpYW1WamRGMWNiaUFnSUNBcUwxeHVJQ0FnSUdkbGRFUmxabUYxYkhSUWNtOXdjeWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0YxZEc5RmJtUTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WVhoSmJtRmpkR2wyWlVaeVlXMWxjem9nTTF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cVhHNGdJQ0FnSUNBZ0lDTWdSMlYwSUdSbFptRjFiSFFnVTJsdGRXeGhkR1VnZG1Gc2RXVWdjSEp2Y0hOY2JseHVJQ0FnSUNBZ0lDQkFjbVYwZFhKdUlGdHZZbXBsWTNSZFhHNGdJQ0FnS2k5Y2JpQWdJQ0JuWlhSRVpXWmhkV3gwVm1Gc2RXVW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJiYzNSeWFXNW5YVG9nVTJsdGRXeGhkR2x2YmlCMGJ5QXVjblZ1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnphVzExYkdGMFpUb2dSRVZHUVZWTVZGOVFVazlRTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmJiblZ0WW1WeVhUb2dRV05qWld4bGNtRjBhVzl1SUhSdklHRndjR3g1SUhSdklIWmhiSFZsTENCcGJpQjFibWwwY3lCd1pYSWdjMlZqYjI1a1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoWTJObGJHVnlZWFJwYjI0NklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZ0dWRXMWlaWEpkT2lCR1lXTjBiM0lnZEc4Z2JYVnNkR2x3YkhrZ2RtVnNiMk5wZEhrZ1lua2diMjRnWW05MWJtTmxYRzRnSUNBZ0lDQWdJQ0FnSUNCaWIzVnVZMlU2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRnR1ZFcxaVpYSmRPaUJUY0hKcGJtY2djM1J5Wlc1bmRHZ2daSFZ5YVc1bklDZHpkSEpwYm1jblhHNGdJQ0FnSUNBZ0lDQWdJQ0J6Y0hKcGJtYzZJRGd3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmJiblZ0WW1WeVhUb2dWR2x0WldOdmJuTjBZVzUwSUc5bUlHZHNhV1JsWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhVzFsUTI5dWMzUmhiblE2SURNNU5TeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVzI1MWJXSmxjbDA2SUZOMGIzQWdjMmx0ZFd4aGRHbHZiaUIxYm1SbGNpQjBhR2x6SUhOd1pXVmtYRzRnSUNBZ0lDQWdJQ0FnSUNCemRHOXdVM0JsWldRNklEQXVNREF3TVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdXMkp2YjJ4bFlXNWRPaUJEWVhCMGRYSmxJSGRwZEdnZ2MzQnlhVzVuSUhCb2VYTnBZM01nYjI0Z2JHbHRhWFFnWW5KbFlXTm9YRzRnSUNBZ0lDQWdJQ0FnSUNCallYQjBkWEpsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1cyNTFiV0psY2wwNklFWnlhV04wYVc5dUlIUnZJR0Z3Y0d4NUlIQmxjaUJtY21GdFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnWm5KcFkzUnBiMjQ2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbTkxYm1RNklHWmhiSE5sWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ0l5QkhaWFFnWkdWbVlYVnNkQ0JUYVcxMWJHRjBaU0IyWVd4MVpTQndjbTl3WlhKMGVTQnVZVzFsWEc0Z0lDQWdJQ0FnSUNNaklGTmxkQ0IyWVd4MVpYTWdkRzhnZEdocGN5QjNhR1Z1SUdFZ1lIWmhiSFZsWUNCcGN5QnViM1FnY0hKdmRtbGtaV1FnWVhNZ1lXNGdiMkpxWldOMFhHNWNiaUFnSUNBZ0lDQWdRSEpsZEhWeWJpQmJjM1J5YVc1blhWeHVJQ0FnSUNvdlhHNGdJQ0FnWjJWMFJHVm1ZWFZzZEZaaGJIVmxVSEp2Y0NncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFUkZSa0ZWVEZSZlVGSlBVRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQWdJQ0FqSUUxbGRHaHZaQ0IwYnlCbWFYSmxJSGRvWlc0Z1FXTjBhVzl1SUhOMFlYSjBjMXh1SUNBZ0lDQWdJQ0FqSXlCVFpYUWdZSE4wWVhKMFpXUmdJSFJ2SUdOMWNuSmxiblFnZEdsdFpTNWNiaUFnSUNBcUwxeHVJQ0FnSUc5dVUzUmhjblFvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSaGNuUmxaQ0E5SUhWMGFXeHpMbU4xY25KbGJuUlVhVzFsS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ0l5QkdhWEpsSUdGMElITjBZWEowSUc5bUlHVjJaWEo1SUdaeVlXMWxYRzRnSUNBZ0lDQWdJQ01qSUZObGRDQmdhR0Z6UTJoaGJtZGxaR0FnZEc4Z1ptRnNjMlZjYmlBZ0lDQXFMMXh1SUNBZ0lHOXVSbkpoYldWVGRHRnlkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVvWVhORGFHRnVaMlZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUM4cVhHNGdJQ0FnSUNBZ0lDTWdVMmx0ZFd4aGRHVWdkR2hsSUdCMllXeDFaV0J6SUhCbGNpMW1jbUZ0WlNCdGIzWmxiV1Z1ZEZ4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ1FIQmhjbUZ0SUZ0QlkzUnZjbDFjYmlBZ0lDQWdJQ0FnUUhCaGNtRnRJRnRXWVd4MVpWMDZJRU4xY25KbGJuUWdkbUZzZFdWY2JpQWdJQ0FnSUNBZ1FIQmhjbUZ0SUZ0emRISnBibWRkT2lCTFpYa2diMllnWTNWeWNtVnVkQ0IyWVd4MVpWeHVJQ0FnSUNBZ0lDQkFjR0Z5WVcwZ1cyNTFiV0psY2wwNklFUjFjbUYwYVc5dUlHOW1JR1p5WVcxbElHbHVJRzF6WEc0Z0lDQWdJQ0FnSUVCeVpYUjFjbTRnVzI1MWJXSmxjbDA2SUVOaGJHTjFiR0YwWldRZ2RtRnNkV1ZjYmlBZ0lDQXFMMXh1SUNBZ0lIQnliMk5sYzNNb1lXTjBiM0lzSUhaaGJIVmxMQ0JyWlhrc0lIUnBiV1ZUYVc1alpVeGhjM1JHY21GdFpTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpkWEp5Wlc1MElEMGdkbUZzZFdVdVkzVnljbVZ1ZER0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJsdGRXeGhkR1VnUFNCMllXeDFaUzV6YVcxMWJHRjBaVHRjYmlBZ0lDQWdJQ0FnYkdWMElHNWxkMVpoYkhWbElEMGdZM1Z5Y21WdWREdGNibHh1SUNBZ0lDQWdJQ0F2THlCSlppQnpkSEpwYm1jc0lIVnpaU0JwYmkxaWRXbHNkQ0J6YVcxMWJHRjBhVzl1SUc5MGFHVnlkMmx6WlNCMGNtVmhkQ0JoY3lCbWRXNWpkR2x2Ymx4dUlDQWdJQ0FnSUNCamIyNXpkQ0J6YVcxMWJHRjBhVzl1SUQwZ2RYUnBiSE11YVhOVGRISnBibWNvYzJsdGRXeGhkR1VwSUQ4Z2MybHRkV3hoZEdsdmJuTmJjMmx0ZFd4aGRHVmRJRG9nYzJsdGRXeGhkR1U3WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYm1WM1ZtVnNiMk5wZEhrZ1BTQnphVzExYkdGMGFXOXVJRDhnYzJsdGRXeGhkR2x2YmloMllXeDFaU3dnZEdsdFpWTnBibU5sVEdGemRFWnlZVzFsTENCMGFHbHpMbk4wWVhKMFpXUXBJRG9nTUR0Y2JseHVJQ0FnSUNBZ0lDQjJZV3gxWlM1MlpXeHZZMmwwZVNBOUlDaE5ZWFJvTG1GaWN5aHVaWGRXWld4dlkybDBlU2tnUGowZ2RtRnNkV1V1YzNSdmNGTndaV1ZrS1NBL0lHNWxkMVpsYkc5amFYUjVJRG9nTUR0Y2JseHVJQ0FnSUNBZ0lDQnVaWGRXWVd4MVpTQTlJSFpoYkhWbExtTjFjbkpsYm5RZ0t5QmpZV3hqTG5Od1pXVmtVR1Z5Um5KaGJXVW9kbUZzZFdVdWRtVnNiMk5wZEhrc0lIUnBiV1ZUYVc1alpVeGhjM1JHY21GdFpTazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHNWxkMVpoYkhWbElDRTlQU0JqZFhKeVpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGMwTm9ZVzVuWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkMVpoYkhWbE8xeHVJQ0FnSUgxY2JpQWdJQ0JjYmlBZ0lDQXZLbHh1SUNBZ0lDQWdJQ0FqSUVoaGN5QjBhR2x6SUdGamRHbHZiaUJsYm1SbFpEOWNiaUFnSUNBZ0lDQWdJeU1nVlhObElHRWdabkpoYldWamIzVnVkR1Z5SUhSdklITmxaU0JwWmlCQlkzUnBiMjRnYUdGeklHTm9ZVzVuWldRZ2FXNGdkR2hsSUd4aGMzUWdlQ0JtY21GdFpYTmNiaUFnSUNBZ0lDQWdZVzVrSUdSbFkyeGhjbVVnWlc1a1pXUWdhV1lnYm05MFhHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQkFjR0Z5WVcwZ1cwRmpkRzl5WFZ4dUlDQWdJQ0FnSUNCQWNtVjBkWEp1SUZ0aWIyOXNaV0Z1WFRvZ1NHRnpJRUZqZEdsdmJpQmxibVJsWkQ5Y2JpQWdJQ0FxTDF4dUlDQWdJR2hoYzBWdVpHVmtLR0ZqZEc5eUtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCbGJtUmxaQ0E5SUdaaGJITmxPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1GMWRHOUZibVFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFXNWhZM1JwZG1WR2NtRnRaWE1nUFNCMGFHbHpMbWhoYzBOb1lXNW5aV1FnUHlBd0lEb2dkR2hwY3k1cGJtRmpkR2wyWlVaeVlXMWxjeUFySURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm1SbFpDQTlJQ2gwYUdsekxtbHVZV04wYVhabFJuSmhiV1Z6SUQ0Z1lXTjBiM0l1YldGNFNXNWhZM1JwZG1WR2NtRnRaWE1wTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVnVaR1ZrTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxWEc0Z0lDQWdJQ0FnSUNNZ1RHbHRhWFFnYjNWMGNIVjBJSFJ2SUhaaGJIVmxJSEpoYm1kbExDQnBaaUJoYm5sY2JpQWdJQ0FnSUNBZ0l5TWdTV1lnZG1Wc2IyTnBkSGtnYVhNZ1lYUWdiM0lnYlc5eVpTQjBhR0Z1SUhKaGJtZGxMQ0JoYm1RZ2RtRnNkV1VnYUdGeklHRWdZbTkxYm1ObElIQnliM0JsY25SNUxGeHVJQ0FnSUNBZ0lDQnlkVzRnZEdobElHSnZkVzVqWlNCemFXMTFiR0YwYVc5dVhHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQkFjR0Z5WVcwZ1cyNTFiV0psY2wwNklFTmhiR04xYkdGMFpXUWdiM1YwY0hWMFhHNGdJQ0FnSUNBZ0lFQndZWEpoYlNCYlZtRnNkV1ZkT2lCRGRYSnlaVzUwSUZaaGJIVmxYRzRnSUNBZ0lDQWdJRUJ5WlhSMWNtNGdXMjUxYldKbGNsMDZJRXhwYldsMExXRmthblZ6ZEdWa0lHOTFkSEIxZEZ4dUlDQWdJQ292WEc0Z0lDQWdiR2x0YVhRb2IzVjBjSFYwTENCMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JwYzA5MWRITnBaR1ZOWVhnZ1BTQW9iM1YwY0hWMElENDlJSFpoYkhWbExtMWhlQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2x6VDNWMGMybGtaVTFwYmlBOUlDaHZkWFJ3ZFhRZ1BEMGdkbUZzZFdVdWJXbHVLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhWE5QZFhSemFXUmxVbUZ1WjJVZ1BTQnBjMDkxZEhOcFpHVk5ZWGdnZkh3Z2FYTlBkWFJ6YVdSbFRXbHVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzA5MWRITnBaR1ZTWVc1blpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IzVjBjSFYwSUQwZ1kyRnNZeTV5WlhOMGNtbGpkR1ZrS0c5MWRIQjFkQ3dnZG1Gc2RXVXViV2x1TENCMllXeDFaUzV0WVhncE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kbUZzZFdVdVltOTFibU5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1V1ZG1Wc2IyTnBkSGtnUFNCemFXMTFiR0YwYVc5dWN5NWliM1Z1WTJVb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gyWVd4MVpTNWpZWEIwZFhKbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmx0ZFd4aGRHbHZibk11WTJGd2RIVnlaU2gyWVd4MVpTd2dhWE5QZFhSemFXUmxUV0Y0SUQ4Z2RtRnNkV1V1YldGNElEb2dkbUZzZFdVdWJXbHVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ2ZFhSd2RYUTdYRzRnSUNBZ2ZWeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZOcGJYVnNZWFJsT3lKZGZRPT1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2FjdGlvbnMvU2ltdWxhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSAzNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBBY3Rpb24gPSByZXF1aXJlKCcuL0FjdGlvbicpLFxuICAgIFBvaW50ZXIgPSByZXF1aXJlKCcuLi9pbnB1dC9Qb2ludGVyJyksXG4gICAgY2FsYyA9IHJlcXVpcmUoJy4uL2luYy9jYWxjJyk7XG5cbnZhciBUcmFjayA9IChmdW5jdGlvbiAoX0FjdGlvbikge1xuICAgIF9pbmhlcml0cyhUcmFjaywgX0FjdGlvbik7XG5cbiAgICBmdW5jdGlvbiBUcmFjaygpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYWNrKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0FjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgICBVcGRhdGUgaW5wdXQgb2Zmc2V0XG4gICAgKi9cblxuICAgIFRyYWNrLnByb3RvdHlwZS5vbkZyYW1lU3RhcnQgPSBmdW5jdGlvbiBvbkZyYW1lU3RhcnQoYWN0b3IsIGZyYW1lRHVyYXRpb24sIGZyYW1lc3RhbXApIHtcbiAgICAgICAgYWN0b3Iuc3RhdGUuaW5wdXQgPSB0aGlzLmlucHV0Lm9uRnJhbWUoZnJhbWVzdGFtcCk7XG4gICAgICAgIHRoaXMuaW5wdXRPZmZzZXQgPSBjYWxjLm9mZnNldCh0aGlzLmlucHV0T3JpZ2luLCB0aGlzLmlucHV0LmN1cnJlbnQpO1xuICAgICAgICB0aGlzLmZyYW1lRHVyYXRpb24gPSBmcmFtZUR1cmF0aW9uO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAgICBNb3ZlIFZhbHVlIHJlbGF0aXZlIHRvIElucHV0IG1vdmVtZW50XG4gICAgICAgIFxuICAgICAgICBAcGFyYW0gW1ZhbHVlXTogQ3VycmVudCB2YWx1ZVxuICAgICAgICBAcGFyYW0gW3N0cmluZ106IEtleSBvZiBjdXJyZW50IHZhbHVlXG4gICAgICAgIEByZXR1cm4gW251bWJlcl06IENhbGN1bGF0ZWQgdmFsdWVcbiAgICAqL1xuXG4gICAgVHJhY2sucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiBwcm9jZXNzKGFjdG9yLCB2YWx1ZSwga2V5KSB7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlLmN1cnJlbnQ7XG5cbiAgICAgICAgaWYgKHRoaXMuaW5wdXRPZmZzZXQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZS5kaXJlY3QgPyB0aGlzLmlucHV0LmN1cnJlbnRba2V5XSA6IHZhbHVlLm9yaWdpbiArIHRoaXMuaW5wdXRPZmZzZXRba2V5XSAqIHZhbHVlLmFtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgICAgSGFzIHRoaXMgQWN0aW9uIGVuZGVkPyBcbiAgICAgICAgXG4gICAgICAgIEByZXR1cm4gW2Jvb2xlYW5dOiBGYWxzZSB0byBtYWtlIHVzZXIgbWFudWFsbHkgZmluaXNoIC50cmFjaygpXG4gICAgKi9cblxuICAgIFRyYWNrLnByb3RvdHlwZS5oYXNFbmRlZCA9IGZ1bmN0aW9uIGhhc0VuZGVkKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIFRyYWNrLnByb3RvdHlwZS5kZWFjdGl2YXRlID0gZnVuY3Rpb24gZGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgX0FjdGlvbi5wcm90b3R5cGUuZGVhY3RpdmF0ZS5jYWxsKHRoaXMpO1xuXG4gICAgICAgIGlmICh0aGlzLmlucHV0ICYmIHRoaXMuaW5wdXQuc3RvcCkge1xuICAgICAgICAgICAgdGhpcy5pbnB1dC5zdG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVHJhY2sucHJvdG90eXBlLmJpbmRJbnB1dCA9IGZ1bmN0aW9uIGJpbmRJbnB1dChpbnB1dCkge1xuICAgICAgICB0aGlzLmlucHV0ID0gIWlucHV0LmN1cnJlbnQgPyBuZXcgUG9pbnRlcihpbnB1dCkgOiBpbnB1dDtcbiAgICAgICAgdGhpcy5pbnB1dE9yaWdpbiA9IHRoaXMuaW5wdXQuZ2V0KCk7XG4gICAgfTtcblxuICAgIFRyYWNrLnByb3RvdHlwZS5nZXREZWZhdWx0VmFsdWUgPSBmdW5jdGlvbiBnZXREZWZhdWx0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhbXA6IDEsXG4gICAgICAgICAgICBlc2NhcGVBbXA6IDAsXG4gICAgICAgICAgICBkaXJlY3Q6IGZhbHNlLFxuICAgICAgICAgICAgc21vb3RoOiAwXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHJldHVybiBUcmFjaztcbn0pKEFjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxSeVlXTnJMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPMEZCUVVFc1NVRkJTU3hOUVVGTkxFZEJRVWNzVDBGQlR5eERRVUZETEZWQlFWVXNRMEZCUXp0SlFVTTFRaXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEd0Q1FVRnJRaXhEUVVGRE8wbEJRM0pETEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03TzBsQlJUVkNMRXRCUVVzN1kwRkJUQ3hMUVVGTE96dGhRVUZNTEV0QlFVczdPRUpCUVV3c1MwRkJTenM3T3pzN096czdPMEZCUVV3c1UwRkJTeXhYUVVsUUxGbEJRVmtzZVVKQlFVTXNTMEZCU3l4RlFVRkZMR0ZCUVdFc1JVRkJSU3hWUVVGVkxFVkJRVVU3UVVGRE0wTXNZVUZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03UVVGRGJrUXNXVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTnlSU3haUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEdGQlFXRXNRMEZCUXp0TFFVTjBRenM3T3pzN096czdPenRCUVZKRExGTkJRVXNzVjBGcFFsQXNUMEZCVHl4dlFrRkJReXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlR0QlFVTjJRaXhaUVVGSkxGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRPenRCUVVVM1FpeFpRVUZKTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1kwRkJZeXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTzBGQlEzUkRMRzlDUVVGUkxFZEJRVWNzUVVGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkpMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVWtzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zUjBGQlJ5eEJRVUZETEVOQlFVTTdVMEZETlVjN08wRkJSVVFzWlVGQlR5eFJRVUZSTEVOQlFVTTdTMEZEYmtJN096czdPenM3TzBGQmVrSkRMRk5CUVVzc1YwRm5RMUFzVVVGQlVTeDFRa0ZCUnp0QlFVTlFMR1ZCUVU4c1MwRkJTeXhEUVVGRE8wdEJRMmhDT3p0QlFXeERReXhUUVVGTExGZEJiME5RTEZWQlFWVXNlVUpCUVVjN1FVRkRWQ3d3UWtGQlRTeFZRVUZWTEV0QlFVRXNUVUZCUlN4RFFVRkRPenRCUVVWdVFpeFpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVTdRVUZETDBJc1owSkJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1UwRkRja0k3TzBGQlJVUXNaVUZCVHl4SlFVRkpMRU5CUVVNN1MwRkRaanM3UVVFMVEwTXNVMEZCU3l4WFFUaERVQ3hUUVVGVExITkNRVUZETEV0QlFVc3NSVUZCUlR0QlFVTmlMRmxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUVVGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVrc1NVRkJTU3hQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUXpORUxGbEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dExRVU4yUXpzN1FVRnFSRU1zVTBGQlN5eFhRVzFFVUN4bFFVRmxMRGhDUVVGSE8wRkJRMlFzWlVGQlR6dEJRVU5JTEdWQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTA0c2NVSkJRVk1zUlVGQlJTeERRVUZETzBGQlExb3NhMEpCUVUwc1JVRkJSU3hMUVVGTE8wRkJRMklzYTBKQlFVMHNSVUZCUlN4RFFVRkRPMU5CUTFvc1EwRkJRenRMUVVOTU96dFhRVEZFUXl4TFFVRkxPMGRCUVZNc1RVRkJUVHM3UVVFMlJERkNMRTFCUVUwc1EwRkJReXhQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZESWl3aVptbHNaU0k2SWxSeVlXTnJMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWJHVjBJRUZqZEdsdmJpQTlJSEpsY1hWcGNtVW9KeTR2UVdOMGFXOXVKeWtzWEc0Z0lDQWdVRzlwYm5SbGNpQTlJSEpsY1hWcGNtVW9KeTR1TDJsdWNIVjBMMUJ2YVc1MFpYSW5LU3hjYmlBZ0lDQmpZV3hqSUQwZ2NtVnhkV2x5WlNnbkxpNHZhVzVqTDJOaGJHTW5LVHRjYmx4dVkyeGhjM01nVkhKaFkyc2daWGgwWlc1a2N5QkJZM1JwYjI0Z2UxeHVJQ0FnSUM4cVhHNGdJQ0FnSUNBZ0lGVndaR0YwWlNCcGJuQjFkQ0J2Wm1aelpYUmNiaUFnSUNBcUwxeHVJQ0FnSUc5dVJuSmhiV1ZUZEdGeWRDaGhZM1J2Y2l3Z1puSmhiV1ZFZFhKaGRHbHZiaXdnWm5KaGJXVnpkR0Z0Y0NrZ2UxeHVJQ0FnSUNBZ0lDQmhZM1J2Y2k1emRHRjBaUzVwYm5CMWRDQTlJSFJvYVhNdWFXNXdkWFF1YjI1R2NtRnRaU2htY21GdFpYTjBZVzF3S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYm5CMWRFOW1abk5sZENBOUlHTmhiR011YjJabWMyVjBLSFJvYVhNdWFXNXdkWFJQY21sbmFXNHNJSFJvYVhNdWFXNXdkWFF1WTNWeWNtVnVkQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabkpoYldWRWRYSmhkR2x2YmlBOUlHWnlZVzFsUkhWeVlYUnBiMjQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdJQ0FnVFc5MlpTQldZV3gxWlNCeVpXeGhkR2wyWlNCMGJ5QkpibkIxZENCdGIzWmxiV1Z1ZEZ4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ1FIQmhjbUZ0SUZ0V1lXeDFaVjA2SUVOMWNuSmxiblFnZG1Gc2RXVmNiaUFnSUNBZ0lDQWdRSEJoY21GdElGdHpkSEpwYm1kZE9pQkxaWGtnYjJZZ1kzVnljbVZ1ZENCMllXeDFaVnh1SUNBZ0lDQWdJQ0JBY21WMGRYSnVJRnR1ZFcxaVpYSmRPaUJEWVd4amRXeGhkR1ZrSUhaaGJIVmxYRzRnSUNBZ0tpOWNiaUFnSUNCd2NtOWpaWE56S0dGamRHOXlMQ0IyWVd4MVpTd2dhMlY1S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ1WlhkV1lXeDFaU0E5SUhaaGJIVmxMbU4xY25KbGJuUTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YVc1d2RYUlBabVp6WlhRdWFHRnpUM2R1VUhKdmNHVnlkSGtvYTJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNWbUZzZFdVZ1BTQW9kbUZzZFdVdVpHbHlaV04wS1NBL0lIUm9hWE11YVc1d2RYUXVZM1Z5Y21WdWRGdHJaWGxkSURvZ2RtRnNkV1V1YjNKcFoybHVJQ3NnS0hSb2FYTXVhVzV3ZFhSUFptWnpaWFJiYTJWNVhTQXFJSFpoYkhWbExtRnRjQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNWbUZzZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ1NHRnpJSFJvYVhNZ1FXTjBhVzl1SUdWdVpHVmtQeUJjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUVCeVpYUjFjbTRnVzJKdmIyeGxZVzVkT2lCR1lXeHpaU0IwYnlCdFlXdGxJSFZ6WlhJZ2JXRnVkV0ZzYkhrZ1ptbHVhWE5vSUM1MGNtRmpheWdwWEc0Z0lDQWdLaTljYmlBZ0lDQm9ZWE5GYm1SbFpDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdSbFlXTjBhWFpoZEdVb0tTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUxtUmxZV04wYVhaaGRHVW9LVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1cGJuQjFkQ0FtSmlCMGFHbHpMbWx1Y0hWMExuTjBiM0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFXNXdkWFF1YzNSdmNDZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ltbHVaRWx1Y0hWMEtHbHVjSFYwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YVc1d2RYUWdQU0FvSVdsdWNIVjBMbU4xY25KbGJuUXBJRDhnYm1WM0lGQnZhVzUwWlhJb2FXNXdkWFFwSURvZ2FXNXdkWFE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzV3ZFhSUGNtbG5hVzRnUFNCMGFHbHpMbWx1Y0hWMExtZGxkQ2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2RsZEVSbFptRjFiSFJXWVd4MVpTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnRjRG9nTVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z6WTJGd1pVRnRjRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JwY21WamREb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Ylc5dmRHZzZJREJjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdWSEpoWTJzN0lsMTlcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2FjdGlvbnMvVHJhY2suanNcbiAqKiBtb2R1bGUgaWQgPSAzNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQWN0b3IgPSByZXF1aXJlKCcuLi9hY3Rvci9BY3RvcicpLFxuICAgIEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaXRlcmF0b3IvSXRlcmF0b3InKSxcbiAgICBzZWxlY3REb20gPSByZXF1aXJlKCcuL3NlbGVjdC1kb20nKTtcblxudmFyIFNBVkVfUFJPUCA9ICdfX3BtX2FjdG9yXyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1sxXTtcblxuICAgIHZhciBkb20gPSBzZWxlY3REb20oc2VsZWN0b3IpLFxuICAgICAgICBhY3RvcnMgPSBbXTtcblxuICAgIGRvbS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciBhY3RvciA9IGVsZW1lbnRbU0FWRV9QUk9QXTtcblxuICAgICAgICBpZiAoIWFjdG9yKSB7XG4gICAgICAgICAgICBvcHRzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgYWN0b3IgPSBlbGVtZW50W1NBVkVfUFJPUF0gPSBuZXcgQWN0b3Iob3B0cyk7XG4gICAgICAgIH1cblxuICAgICAgICBhY3RvcnMucHVzaChhY3Rvcik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYWN0b3JzLmxlbmd0aCA+IDEgPyBuZXcgSXRlcmF0b3IoYWN0b3JzKSA6IGFjdG9yc1swXTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5ObGJHVmpkQzFoWTNSdmNpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFbEJRVWtzUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUTBGQlF6dEpRVU5xUXl4UlFVRlJMRWRCUVVjc1QwRkJUeXhEUVVGRExITkNRVUZ6UWl4RFFVRkRPMGxCUXpGRExGTkJRVk1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN08wRkJSWGhETEVsQlFVMHNVMEZCVXl4SFFVRkhMR0ZCUVdFc1EwRkJRenM3UVVGRmFFTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1IwRkJSeXhWUVVGVkxGRkJRVkVzUlVGQllUdFJRVUZZTEVsQlFVa3NlVVJCUVVjc1JVRkJSVHM3UVVGRE1VTXNVVUZCU1N4SFFVRkhMRWRCUVVjc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF6dFJRVU42UWl4TlFVRk5MRWRCUVVjc1JVRkJSU3hEUVVGRE96dEJRVVZvUWl4UFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVU1zVDBGQlR5eEZRVUZMTzBGQlEzSkNMRmxCUVVrc1MwRkJTeXhIUVVGSExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXpzN1FVRkZMMElzV1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTlNMR2RDUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXp0QlFVTjJRaXhwUWtGQlN5eEhRVUZITEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0VFFVTm9SRHM3UVVGRlJDeGpRVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wdEJRM1JDTEVOQlFVTXNRMEZCUXpzN1FVRkZTQ3hYUVVGUExFRkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRWRCUVVrc1NVRkJTU3hSUVVGUkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wTkJRMnBGTEVOQlFVTWlMQ0ptYVd4bElqb2ljMlZzWldOMExXRmpkRzl5TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUVGamRHOXlJRDBnY21WeGRXbHlaU2duTGk0dllXTjBiM0l2UVdOMGIzSW5LU3hjYmlBZ0lDQkpkR1Z5WVhSdmNpQTlJSEpsY1hWcGNtVW9KeTR1TDJsMFpYSmhkRzl5TDBsMFpYSmhkRzl5Snlrc1hHNGdJQ0FnYzJWc1pXTjBSRzl0SUQwZ2NtVnhkV2x5WlNnbkxpOXpaV3hsWTNRdFpHOXRKeWs3WEc1Y2JtTnZibk4wSUZOQlZrVmZVRkpQVUNBOUlDZGZYM0J0WDJGamRHOXlYeWM3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z0tITmxiR1ZqZEc5eUxDQnZjSFJ6SUQwZ2UzMHBJSHRjYmlBZ0lDQjJZWElnWkc5dElEMGdjMlZzWldOMFJHOXRLSE5sYkdWamRHOXlLU3hjYmlBZ0lDQWdJQ0FnWVdOMGIzSnpJRDBnVzEwN1hHNWNiaUFnSUNCa2IyMHVabTl5UldGamFDZ29aV3hsYldWdWRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCc1pYUWdZV04wYjNJZ1BTQmxiR1Z0Wlc1MFcxTkJWa1ZmVUZKUFVGMDdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmhZM1J2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGN5NWxiR1Z0Wlc1MElEMGdaV3hsYldWdWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGamRHOXlJRDBnWld4bGJXVnVkRnRUUVZaRlgxQlNUMUJkSUQwZ2JtVjNJRUZqZEc5eUtHOXdkSE1wTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdZV04wYjNKekxuQjFjMmdvWVdOMGIzSXBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlDaGhZM1J2Y25NdWJHVnVaM1JvSUQ0Z01Ta2dQeUJ1WlhjZ1NYUmxjbUYwYjNJb1lXTjBiM0p6S1NBNklHRmpkRzl5YzFzd1hUdGNibjA3WEc0aVhYMD1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2luYy9zZWxlY3QtYWN0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSAzNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKlxuICAgIEVhc2luZyBmdW5jdGlvbnNcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgXG4gICAgR2VuZXJhdGVzIGFuZCBwcm92aWRlcyBlYXNpbmcgZnVuY3Rpb25zIGJhc2VkIG9uIGJhc2VGdW5jdGlvbiBkZWZpbml0aW9uc1xuICAgIFxuICAgIEEgY2FsbCB0byBlYXNpbmdGdW5jdGlvbi5nZXQoJ2Z1bmN0aW9uTmFtZScpIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNhbiBiZSBwYXNzZWQ6XG4gICAgICAgIEBwYXJhbSBbbnVtYmVyXTogUHJvZ3Jlc3MgMC0xXG4gICAgICAgIEBwYXJhbSBbbnVtYmVyXSAob3B0aW9uYWwpOiBBbXAgbW9kaWZpZXIsIG9ubHkgYWNjZXB0ZWQgaW4gc29tZSBlYXNpbmcgZnVuY3Rpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgaXMgdXNlZCB0byBhZGp1c3Qgb3ZlcmFsbCBzdHJlbmd0aFxuICAgICAgICBAcmV0dXJuIFtudW1iZXJdOiBFYXNlZCBwcm9ncmVzc1xuICAgICAgICBcbiAgICBXZSBjYW4gZ2VuZXJhdGUgbmV3IGZ1bmN0aW9ucyBieSBzZW5kaW5nIGFuIGVhc2luZyBmdW5jdGlvbiB0aHJvdWdoIGVhc2luZ0Z1bmN0aW9uLmV4dGVuZChuYW1lLCBtZXRob2QpLlxuICAgIFdoaWNoIHdpbGwgbWFrZSBuYW1lSW4sIG5hbWVPdXQgYW5kIG5hbWVJbk91dCBmdW5jdGlvbnMgYXZhaWxhYmxlIHRvIHVzZS5cbiAgICAgICAgXG4gICAgRWFzaW5nIGZ1bmN0aW9ucyBmcm9tIFJvYmVydCBQZW5uZXJcbiAgICBodHRwOi8vd3d3LnJvYmVydHBlbm5lci5jb20vZWFzaW5nL1xuICAgICAgICBcbiAgICBCZXppZXIgY3VydmUgaW50ZXJwcmV0b3IgY3JlYXRlZCBmcm9tIEdhw6t0YW4gUmVuYXVkZWF1J3Mgb3JpZ2luYWwgQmV6aWVyRWFzaW5nICBcbiAgICBodHRwczovL2dpdGh1Yi5jb20vZ3JlL2Jlemllci1lYXNpbmcvYmxvYi9tYXN0ZXIvaW5kZXguanMgIFxuICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmUvYmV6aWVyLWVhc2luZy9ibG9iL21hc3Rlci9MSUNFTlNFXG5cbiAgICBBbnRpY2lwYXRlIGVhc2luZyBjcmVhdGVkIGJ5IEVsbGlvdCBHaW5vXG4gICAgaHR0cHM6Ly90d2l0dGVyLmNvbS9FbGxpb3RHZW5vXG4qL1xuLy8gSW1wb3J0c1xudmFyIEVhc2luZyA9IHJlcXVpcmUoJy4vRWFzaW5nJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi9pbmMvdXRpbHMnKTtcblxuLy8gVmFsdWVzXG52YXIgREVGQVVMVF9CQUNLX1NUUkVOR1RIID0gMS41MjU7XG52YXIgREVGQVVMVF9QT1dfU1RSRU5HVEggPSAyO1xuXG4vLyBVdGlsaXR5IGZ1bmN0aW9uc1xudmFyIGdlbmVyYXRlUG93ZXJFYXNpbmcgPSBmdW5jdGlvbiAoc3RyZW5ndGgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByb2dyZXNzLCBzdHJlbmd0aCkge1xuICAgICAgICByZXR1cm4gYmFzZUVhc2luZy5lYXNlKHByb2dyZXNzLCBzdHJlbmd0aCk7XG4gICAgfTtcbn07XG5cbi8qXG4gICAgRWFjaCBvZiB0aGVzZSBiYXNlIGZ1bmN0aW9ucyBpcyBhbiBlYXNlSW5cbiAgICBcbiAgICBPbiBpbml0LCB3ZSB1c2UgLm1pcnJvciBhbmQgLnJldmVyc2UgdG8gZ2VuZXJhdGUgZWFzZUluT3V0IGFuZFxuICAgIGVhc2VPdXQgZnVuY3Rpb25zIHJlc3BlY3RpdmVseS5cbiovXG52YXIgYmFzZUVhc2luZyA9IHtcbiAgICBlYXNlOiBmdW5jdGlvbiAocHJvZ3Jlc3MpIHtcbiAgICAgICAgdmFyIHN0cmVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gREVGQVVMVF9QT1dfU1RSRU5HVEggOiBhcmd1bWVudHNbMV07XG4gICAgICAgIHJldHVybiBNYXRoLnBvdyhwcm9ncmVzcywgc3RyZW5ndGgpO1xuICAgIH0sXG4gICAgY2lyYzogZnVuY3Rpb24gKHByb2dyZXNzKSB7XG4gICAgICAgIHJldHVybiAxIC0gTWF0aC5zaW4oTWF0aC5hY29zKHByb2dyZXNzKSk7XG4gICAgfSxcbiAgICBiYWNrOiBmdW5jdGlvbiAocHJvZ3Jlc3MpIHtcbiAgICAgICAgdmFyIHN0cmVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gREVGQVVMVF9CQUNLX1NUUkVOR1RIIDogYXJndW1lbnRzWzFdO1xuICAgICAgICByZXR1cm4gcHJvZ3Jlc3MgKiBwcm9ncmVzcyAqICgoc3RyZW5ndGggKyAxKSAqIHByb2dyZXNzIC0gc3RyZW5ndGgpO1xuICAgIH1cbn07XG5cblsnY3ViaWMnLCAncXVhcnQnLCAncXVpbnQnXS5mb3JFYWNoKGZ1bmN0aW9uIChlYXNpbmdOYW1lLCBpKSB7XG4gICAgYmFzZUVhc2luZ1tlYXNpbmdOYW1lXSA9IGdlbmVyYXRlUG93ZXJFYXNpbmcoaSArIDMpO1xufSk7XG5cbi8vIEdlbmVyYXRlIGluL291dC9pbk91dCB2YXJpYXRpb25zXG51dGlscy5lYWNoKGJhc2VFYXNpbmcsIGZ1bmN0aW9uIChrZXksIGJhc2VFYXNlKSB7XG4gICAgdmFyIGVhc2luZ0Z1bmN0aW9uID0gbmV3IEVhc2luZyhiYXNlRWFzZSk7XG4gICAgYmFzZUVhc2luZ1trZXkgKyAnSW4nXSA9IGVhc2luZ0Z1bmN0aW9uLmluO1xuICAgIGJhc2VFYXNpbmdba2V5ICsgJ091dCddID0gZWFzaW5nRnVuY3Rpb24ub3V0O1xuICAgIGJhc2VFYXNpbmdba2V5ICsgJ0luT3V0J10gPSBlYXNpbmdGdW5jdGlvbi5pbk91dDtcbn0pO1xuXG5iYXNlRWFzaW5nLmxpbmVhciA9IGZ1bmN0aW9uIChwcm9ncmVzcykge1xuICAgIHJldHVybiBwcm9ncmVzcztcbn07XG5iYXNlRWFzaW5nLmFudGljaXBhdGUgPSBmdW5jdGlvbiAocHJvZ3Jlc3MpIHtcbiAgICB2YXIgc3RyZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBERUZBVUxUX0JBQ0tfU1RSRU5HVEggOiBhcmd1bWVudHNbMV07XG4gICAgcmV0dXJuIChwcm9ncmVzcyAqPSAyKSA8IDEgPyAwLjUgKiBiYXNlRWFzaW5nLmJhY2tJbihwcm9ncmVzcywgc3RyZW5ndGgpIDogMC41ICogKDIgLSBNYXRoLnBvdygyLCAtMTAgKiAocHJvZ3Jlc3MgLSAxKSkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRWFzaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluQnlaWE5sZEMxbFlYTnBibWN1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFUQkNRU3hKUVVGTkxFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkRia01zU1VGQlRTeExRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRMR2xDUVVGcFFpeERRVUZET3pzN1FVRkJReXhCUVVkNlF5eEpRVUZOTEhGQ1FVRnhRaXhIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU53UXl4SlFVRk5MRzlDUVVGdlFpeEhRVUZITEVOQlFVTTdPenRCUVVGRExFRkJSeTlDTEVsQlFVMHNiVUpCUVcxQ0xFZEJRVWNzVlVGQlFTeFJRVUZSTzFkQlFVa3NWVUZCUXl4UlFVRlJMRVZCUVVVc1VVRkJVVHRsUVVGTExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJRenRMUVVGQk8wTkJRVUU3T3pzN096czdPMEZCUVVNc1FVRlJjRWNzU1VGQlNTeFZRVUZWTEVkQlFVYzdRVUZEWWl4UlFVRkpMRVZCUVVVc1ZVRkJReXhSUVVGUk8xbEJRVVVzVVVGQlVTeDVSRUZCUnl4dlFrRkJiMEk3ZDBKQlFVc3NVVUZCVVN4RlFVRkpMRkZCUVZFN1MwRkJRVHRCUVVONlJTeFJRVUZKTEVWQlFVVXNWVUZCUVN4UlFVRlJPMlZCUVVrc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dExRVUZCTzBGQlEyNUVMRkZCUVVrc1JVRkJSU3hWUVVGRExGRkJRVkU3V1VGQlJTeFJRVUZSTEhsRVFVRkhMSEZDUVVGeFFqdGxRVUZMTEVGQlFVTXNVVUZCVVN4SFFVRkhMRkZCUVZFc1NVRkJTeXhEUVVGRExGRkJRVkVzUjBGQlJ5eERRVUZETEVOQlFVRXNSMEZCU1N4UlFVRlJMRWRCUVVjc1VVRkJVU3hEUVVGQkxFRkJRVU03UzBGQlFUdERRVU4yU0N4RFFVRkRPenRCUVVWR0xFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeFZRVUZWTEVWQlFVVXNRMEZCUXl4RlFVRkZPMEZCUTNwRUxHTkJRVlVzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4dFFrRkJiVUlzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1EwRkRka1FzUTBGQlF6czdPMEZCUVVNc1FVRkhTQ3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlN4VlFVRkRMRWRCUVVjc1JVRkJSU3hSUVVGUkxFVkJRVXM3UVVGRGRFTXNVVUZCU1N4alFVRmpMRWRCUVVjc1NVRkJTU3hOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdRVUZETVVNc1kwRkJWU3hEUVVGSkxFZEJRVWNzVVVGQlN5eEhRVUZITEdOQlFXTXNRMEZCUXl4RlFVRkZMRU5CUVVNN1FVRkRNME1zWTBGQlZTeERRVUZKTEVkQlFVY3NVMEZCVFN4SFFVRkhMR05CUVdNc1EwRkJReXhIUVVGSExFTkJRVU03UVVGRE4wTXNZMEZCVlN4RFFVRkpMRWRCUVVjc1YwRkJVU3hIUVVGSExHTkJRV01zUTBGQlF5eExRVUZMTEVOQlFVTTdRMEZEY0VRc1EwRkJReXhEUVVGRE96dEJRVVZJTEZWQlFWVXNRMEZCUXl4TlFVRk5MRWRCUVVjc1ZVRkJRU3hSUVVGUk8xZEJRVWtzVVVGQlVUdERRVUZCTEVOQlFVTTdRVUZEZWtNc1ZVRkJWU3hEUVVGRExGVkJRVlVzUjBGQlJ5eFZRVUZETEZGQlFWRTdVVUZCUlN4UlFVRlJMSGxFUVVGSExIRkNRVUZ4UWp0WFFVTXZSQ3hCUVVGRExFTkJRVU1zVVVGQlVTeEpRVUZGTEVOQlFVTXNRMEZCUVN4SFFVRkpMRU5CUVVNc1IwRkJTU3hIUVVGSExFZEJRVWNzVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRVZCUVVVc1VVRkJVU3hEUVVGRExFZEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNTVUZCU1N4UlFVRlJMRWRCUVVjc1EwRkJReXhEUVVGQkxFRkJRVU1zUTBGQlF5eERRVUZCTEVGQlFVTTdRMEZCUVN4RFFVRkRPenRCUVVWMlNDeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhMRlZCUVZVc1EwRkJReUlzSW1acGJHVWlPaUp3Y21WelpYUXRaV0Z6YVc1bkxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlwY2JpQWdJQ0JGWVhOcGJtY2dablZ1WTNScGIyNXpYRzRnSUNBZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNBZ0lGeHVJQ0FnSUVkbGJtVnlZWFJsY3lCaGJtUWdjSEp2ZG1sa1pYTWdaV0Z6YVc1bklHWjFibU4wYVc5dWN5QmlZWE5sWkNCdmJpQmlZWE5sUm5WdVkzUnBiMjRnWkdWbWFXNXBkR2x2Ym5OY2JpQWdJQ0JjYmlBZ0lDQkJJR05oYkd3Z2RHOGdaV0Z6YVc1blJuVnVZM1JwYjI0dVoyVjBLQ2RtZFc1amRHbHZiazVoYldVbktTQnlaWFIxY201eklHRWdablZ1WTNScGIyNGdkR2hoZENCallXNGdZbVVnY0dGemMyVmtPbHh1SUNBZ0lDQWdJQ0JBY0dGeVlXMGdXMjUxYldKbGNsMDZJRkJ5YjJkeVpYTnpJREF0TVZ4dUlDQWdJQ0FnSUNCQWNHRnlZVzBnVzI1MWJXSmxjbDBnS0c5d2RHbHZibUZzS1RvZ1FXMXdJRzF2WkdsbWFXVnlMQ0J2Ym14NUlHRmpZMlZ3ZEdWa0lHbHVJSE52YldVZ1pXRnphVzVuSUdaMWJtTjBhVzl1YzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXNWtJR2x6SUhWelpXUWdkRzhnWVdScWRYTjBJRzkyWlhKaGJHd2djM1J5Wlc1bmRHaGNiaUFnSUNBZ0lDQWdRSEpsZEhWeWJpQmJiblZ0WW1WeVhUb2dSV0Z6WldRZ2NISnZaM0psYzNOY2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnVjJVZ1kyRnVJR2RsYm1WeVlYUmxJRzVsZHlCbWRXNWpkR2x2Ym5NZ1lua2djMlZ1WkdsdVp5QmhiaUJsWVhOcGJtY2dablZ1WTNScGIyNGdkR2h5YjNWbmFDQmxZWE5wYm1kR2RXNWpkR2x2Ymk1bGVIUmxibVFvYm1GdFpTd2diV1YwYUc5a0tTNWNiaUFnSUNCWGFHbGphQ0IzYVd4c0lHMWhhMlVnYm1GdFpVbHVMQ0J1WVcxbFQzVjBJR0Z1WkNCdVlXMWxTVzVQZFhRZ1puVnVZM1JwYjI1eklHRjJZV2xzWVdKc1pTQjBieUIxYzJVdVhHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUVWaGMybHVaeUJtZFc1amRHbHZibk1nWm5KdmJTQlNiMkpsY25RZ1VHVnVibVZ5WEc0Z0lDQWdhSFIwY0RvdkwzZDNkeTV5YjJKbGNuUndaVzV1WlhJdVkyOXRMMlZoYzJsdVp5OWNiaUFnSUNBZ0lDQWdYRzRnSUNBZ1FtVjZhV1Z5SUdOMWNuWmxJR2x1ZEdWeWNISmxkRzl5SUdOeVpXRjBaV1FnWm5KdmJTQkhZY09yZEdGdUlGSmxibUYxWkdWaGRTZHpJRzl5YVdkcGJtRnNJRUpsZW1sbGNrVmhjMmx1WnlBZ1hHNGdJQ0FnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJkeVpTOWlaWHBwWlhJdFpXRnphVzVuTDJKc2IySXZiV0Z6ZEdWeUwybHVaR1Y0TG1weklDQmNiaUFnSUNCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlozSmxMMkpsZW1sbGNpMWxZWE5wYm1jdllteHZZaTl0WVhOMFpYSXZURWxEUlU1VFJWeHVYRzRnSUNBZ1FXNTBhV05wY0dGMFpTQmxZWE5wYm1jZ1kzSmxZWFJsWkNCaWVTQkZiR3hwYjNRZ1IybHViMXh1SUNBZ0lHaDBkSEJ6T2k4dmRIZHBkSFJsY2k1amIyMHZSV3hzYVc5MFIyVnViMXh1S2k5Y2JpOHZJRWx0Y0c5eWRITmNibU52Ym5OMElFVmhjMmx1WnlBOUlISmxjWFZwY21Vb0p5NHZSV0Z6YVc1bkp5azdYRzVqYjI1emRDQjFkR2xzY3lBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDJsdVl5OTFkR2xzY3ljcE8xeHVYRzR2THlCV1lXeDFaWE5jYm1OdmJuTjBJRVJGUmtGVlRGUmZRa0ZEUzE5VFZGSkZUa2RVU0NBOUlERXVOVEkxTzF4dVkyOXVjM1FnUkVWR1FWVk1WRjlRVDFkZlUxUlNSVTVIVkVnZ1BTQXlPMXh1WEc0dkx5QlZkR2xzYVhSNUlHWjFibU4wYVc5dWMxeHVZMjl1YzNRZ1oyVnVaWEpoZEdWUWIzZGxja1ZoYzJsdVp5QTlJSE4wY21WdVozUm9JRDArSUNod2NtOW5jbVZ6Y3l3Z2MzUnlaVzVuZEdncElEMCtJR0poYzJWRllYTnBibWN1WldGelpTaHdjbTluY21WemN5d2djM1J5Wlc1bmRHZ3BPMXh1WEc0dktseHVJQ0FnSUVWaFkyZ2diMllnZEdobGMyVWdZbUZ6WlNCbWRXNWpkR2x2Ym5NZ2FYTWdZVzRnWldGelpVbHVYRzRnSUNBZ1hHNGdJQ0FnVDI0Z2FXNXBkQ3dnZDJVZ2RYTmxJQzV0YVhKeWIzSWdZVzVrSUM1eVpYWmxjbk5sSUhSdklHZGxibVZ5WVhSbElHVmhjMlZKYms5MWRDQmhibVJjYmlBZ0lDQmxZWE5sVDNWMElHWjFibU4wYVc5dWN5QnlaWE53WldOMGFYWmxiSGt1WEc0cUwxeHViR1YwSUdKaGMyVkZZWE5wYm1jZ1BTQjdYRzRnSUNBZ1pXRnpaVG9nS0hCeWIyZHlaWE56TENCemRISmxibWQwYUNBOUlFUkZSa0ZWVEZSZlVFOVhYMU5VVWtWT1IxUklLU0E5UGlCd2NtOW5jbVZ6Y3lBcUtpQnpkSEpsYm1kMGFDeGNiaUFnSUNCamFYSmpPaUJ3Y205bmNtVnpjeUE5UGlBeElDMGdUV0YwYUM1emFXNG9UV0YwYUM1aFkyOXpLSEJ5YjJkeVpYTnpLU2tzWEc0Z0lDQWdZbUZqYXpvZ0tIQnliMmR5WlhOekxDQnpkSEpsYm1kMGFDQTlJRVJGUmtGVlRGUmZRa0ZEUzE5VFZGSkZUa2RVU0NrZ1BUNGdLSEJ5YjJkeVpYTnpJQ29nY0hKdlozSmxjM01wSUNvZ0tDaHpkSEpsYm1kMGFDQXJJREVwSUNvZ2NISnZaM0psYzNNZ0xTQnpkSEpsYm1kMGFDbGNibjA3WEc1Y2Jsc25ZM1ZpYVdNbkxDQW5jWFZoY25RbkxDQW5jWFZwYm5RblhTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaGxZWE5wYm1kT1lXMWxMQ0JwS1NCN1hHNGdJQ0FnWW1GelpVVmhjMmx1WjF0bFlYTnBibWRPWVcxbFhTQTlJR2RsYm1WeVlYUmxVRzkzWlhKRllYTnBibWNvYVNBcklETXBPMXh1ZlNrN1hHNWNiaTh2SUVkbGJtVnlZWFJsSUdsdUwyOTFkQzlwYms5MWRDQjJZWEpwWVhScGIyNXpYRzUxZEdsc2N5NWxZV05vS0dKaGMyVkZZWE5wYm1jc0lDaHJaWGtzSUdKaGMyVkZZWE5sS1NBOVBpQjdYRzRnSUNBZ2JHVjBJR1ZoYzJsdVowWjFibU4wYVc5dUlEMGdibVYzSUVWaGMybHVaeWhpWVhObFJXRnpaU2s3WEc0Z0lDQWdZbUZ6WlVWaGMybHVaMXRnSkh0clpYbDlTVzVnWFNBOUlHVmhjMmx1WjBaMWJtTjBhVzl1TG1sdU8xeHVJQ0FnSUdKaGMyVkZZWE5wYm1kYllDUjdhMlY1ZlU5MWRHQmRJRDBnWldGemFXNW5SblZ1WTNScGIyNHViM1YwTzF4dUlDQWdJR0poYzJWRllYTnBibWRiWUNSN2EyVjVmVWx1VDNWMFlGMGdQU0JsWVhOcGJtZEdkVzVqZEdsdmJpNXBiazkxZER0Y2JuMHBPMXh1WEc1aVlYTmxSV0Z6YVc1bkxteHBibVZoY2lBOUlIQnliMmR5WlhOeklEMCtJSEJ5YjJkeVpYTnpPMXh1WW1GelpVVmhjMmx1Wnk1aGJuUnBZMmx3WVhSbElEMGdLSEJ5YjJkeVpYTnpMQ0J6ZEhKbGJtZDBhQ0E5SUVSRlJrRlZURlJmUWtGRFMxOVRWRkpGVGtkVVNDa2dQVDVjYmlBZ0lDQW9LSEJ5YjJkeVpYTnpLajB5S1NBOElERXBJRDhnTUM0MUlDb2dZbUZ6WlVWaGMybHVaeTVpWVdOclNXNG9jSEp2WjNKbGMzTXNJSE4wY21WdVozUm9LU0E2SUNBd0xqVWdLaUFvTWlBdElFMWhkR2d1Y0c5M0tESXNJQzB4TUNBcUlDaHdjbTluY21WemN5QXRJREVwS1NrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZbUZ6WlVWaGMybHVaenNpWFgwPVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvYWN0aW9ucy90d2Vlbi9wcmVzZXQtZWFzaW5nLmpzXG4gKiogbW9kdWxlIGlkID0gMzdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlYXNpbmcpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHByb2dyZXNzKSB7XG4gICAgcmV0dXJuIGVhc2luZy5hcHBseSh1bmRlZmluZWQsIFtwcm9ncmVzc10uY29uY2F0KGFyZ3MpKTtcbiAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW0xdlpHbG1lUzFsWVhObExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eFZRVUZETEUxQlFVMDdiME5CUVVzc1NVRkJTVHRCUVVGS0xGRkJRVWs3T3p0VFFVRkxMRlZCUVVNc1VVRkJVVHRYUVVGTExFMUJRVTBzYlVKQlFVTXNVVUZCVVN4VFFVRkxMRWxCUVVrc1JVRkJRenRIUVVGQk8wTkJRVUVzUTBGQlF5SXNJbVpwYkdVaU9pSnRiMlJwWm5rdFpXRnpaUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ0tHVmhjMmx1Wnl3Z0xpNHVZWEpuY3lrZ1BUNGdLSEJ5YjJkeVpYTnpLU0E5UGlCbFlYTnBibWNvY0hKdlozSmxjM01zSUM0dUxtRnlaM01wT3lKZGZRPT1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2FjdGlvbnMvdHdlZW4vbW9kaWZ5LWVhc2UuanNcbiAqKiBtb2R1bGUgaWQgPSAzOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBlYWNoID0gcmVxdWlyZSgnLi4vLi4vaW5jL3V0aWxzJykuZWFjaCxcbiAgICB0cmFuc2Zvcm1EaWN0aW9uYXJ5ID0gcmVxdWlyZSgnLi90cmFuc2Zvcm0tZGljdGlvbmFyeScpLFxuICAgIHRyYW5zZm9ybVByb3BzID0gdHJhbnNmb3JtRGljdGlvbmFyeS5wcm9wcyxcbiAgICBUUkFOU0xBVEVfWiA9ICd0cmFuc2xhdGVaJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3V0cHV0LCBjYWNoZSkge1xuICAgIHZhciBjc3MgPSB7fSxcbiAgICAgICAgdHJhbnNmb3JtID0gJycsXG4gICAgICAgIHRyYW5zZm9ybUhhc1ogPSBmYWxzZTtcblxuICAgIC8vIExvb3AgdGhyb3VnaCBvdXRwdXQsIGNoZWNrIGZvciB0cmFuc2Zvcm0gcHJvcGVydGllc1xuICAgIGVhY2gob3V0cHV0LCBmdW5jdGlvbiAoa2V5LCBydWxlKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSB0cmFuc2Zvcm0gcHJvcGVydHksIGFkZCB0byB0cmFuc2Zvcm0gc3RyaW5nXG4gICAgICAgIGlmICh0cmFuc2Zvcm1Qcm9wc1trZXldKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm0gKz0ga2V5ICsgJygnICsgcnVsZSArICcpJztcbiAgICAgICAgICAgIHRyYW5zZm9ybUhhc1ogPSBrZXkgPT09IFRSQU5TTEFURV9aID8gdHJ1ZSA6IHRyYW5zZm9ybUhhc1o7XG5cbiAgICAgICAgICAgIC8vIE9yIGp1c3QgYXNzaWduIGRpcmVjdGx5XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHJ1bGUgIT09IGNhY2hlW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVba2V5XSA9IGNzc1trZXldID0gcnVsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBJZiB3ZSBoYXZlIHRyYW5zZm9ybSBwcm9wZXJ0aWVzLCBhZGQgdHJhbnNsYXRlWlxuICAgIGlmICh0cmFuc2Zvcm0gIT09ICcnKSB7XG4gICAgICAgIGlmICghdHJhbnNmb3JtSGFzWikge1xuICAgICAgICAgICAgdHJhbnNmb3JtICs9ICcgJyArIFRSQU5TTEFURV9aICsgJygwcHgpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc2Zvcm0gIT09IGNhY2hlLnRyYW5zZm9ybSkge1xuICAgICAgICAgICAgY3NzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhY2hlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3NzO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUoxYVd4a0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEZsQlFWa3NRMEZCUXpzN1FVRkZZaXhKUVVGSkxFbEJRVWtzUjBGQlJ5eFBRVUZQTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF5eEpRVUZKTzBsQlEzUkRMRzFDUVVGdFFpeEhRVUZITEU5QlFVOHNRMEZCUXl4M1FrRkJkMElzUTBGQlF6dEpRVU4yUkN4alFVRmpMRWRCUVVjc2JVSkJRVzFDTEVOQlFVTXNTMEZCU3p0SlFVVXhReXhYUVVGWExFZEJRVWNzV1VGQldTeERRVUZET3p0QlFVVXZRaXhOUVVGTkxFTkJRVU1zVDBGQlR5eEhRVUZITEZWQlFWVXNUVUZCVFN4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVOMFF5eFJRVUZKTEVkQlFVY3NSMEZCUnl4RlFVRkZPMUZCUTFJc1UwRkJVeXhIUVVGSExFVkJRVVU3VVVGRFpDeGhRVUZoTEVkQlFVY3NTMEZCU3pzN08wRkJRVU1zUVVGSE1VSXNVVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hWUVVGVkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVTdPMEZCUlRsQ0xGbEJRVWtzWTBGQll5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMEZCUTNKQ0xIRkNRVUZUTEVsQlFVa3NSMEZCUnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhKUVVGSkxFZEJRVWNzUjBGQlJ5eERRVUZETzBGQlEzQkRMSGxDUVVGaExFZEJRVWNzUVVGQlF5eEhRVUZITEV0QlFVc3NWMEZCVnl4SFFVRkpMRWxCUVVrc1IwRkJSeXhoUVVGaE96czdRVUZCUXl4VFFVZG9SU3hOUVVGTk8wRkJRMGdzYjBKQlFVa3NTVUZCU1N4TFFVRkxMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJUdEJRVU55UWl4NVFrRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU03YVVKQlEyaERPMkZCUTBvN1MwRkRTaXhEUVVGRE96czdRVUZCUXl4QlFVZElMRkZCUVVrc1UwRkJVeXhMUVVGTExFVkJRVVVzUlVGQlJUdEJRVU5zUWl4WlFVRkpMRU5CUVVNc1lVRkJZU3hGUVVGRk8wRkJRMmhDTEhGQ1FVRlRMRWxCUVVrc1IwRkJSeXhIUVVGSExGZEJRVmNzUjBGQlJ5eFBRVUZQTEVOQlFVTTdVMEZETlVNN08wRkJSVVFzV1VGQlNTeFRRVUZUTEV0QlFVc3NTMEZCU3l4RFFVRkRMRk5CUVZNc1JVRkJSVHRCUVVNdlFpeGxRVUZITEVOQlFVTXNVMEZCVXl4SFFVRkhMRk5CUVZNc1EwRkJRenRUUVVNM1FqczdRVUZGUkN4aFFVRkxMRU5CUVVNc1UwRkJVeXhIUVVGSExGTkJRVk1zUTBGQlF6dExRVU12UWpzN1FVRkZSQ3hYUVVGUExFZEJRVWNzUTBGQlF6dERRVU5rTEVOQlFVTWlMQ0ptYVd4bElqb2lZblZwYkdRdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1ZG1GeUlHVmhZMmdnUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTlwYm1NdmRYUnBiSE1uS1M1bFlXTm9MRnh1SUNBZ0lIUnlZVzV6Wm05eWJVUnBZM1JwYjI1aGNua2dQU0J5WlhGMWFYSmxLQ2N1TDNSeVlXNXpabTl5YlMxa2FXTjBhVzl1WVhKNUp5a3NYRzRnSUNBZ2RISmhibk5tYjNKdFVISnZjSE1nUFNCMGNtRnVjMlp2Y20xRWFXTjBhVzl1WVhKNUxuQnliM0J6TEZ4dVhHNGdJQ0FnVkZKQlRsTk1RVlJGWDFvZ1BTQW5kSEpoYm5Oc1lYUmxXaWM3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z0tHOTFkSEIxZEN3Z1kyRmphR1VwSUh0Y2JpQWdJQ0IyWVhJZ1kzTnpJRDBnZTMwc1hHNGdJQ0FnSUNBZ0lIUnlZVzV6Wm05eWJTQTlJQ2NuTEZ4dUlDQWdJQ0FnSUNCMGNtRnVjMlp2Y20xSVlYTmFJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDOHZJRXh2YjNBZ2RHaHliM1ZuYUNCdmRYUndkWFFzSUdOb1pXTnJJR1p2Y2lCMGNtRnVjMlp2Y20wZ2NISnZjR1Z5ZEdsbGMxeHVJQ0FnSUdWaFkyZ29iM1YwY0hWMExDQm1kVzVqZEdsdmJpQW9hMlY1TENCeWRXeGxLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFbG1JSFJvYVhNZ2FYTWdZU0IwY21GdWMyWnZjbTBnY0hKdmNHVnlkSGtzSUdGa1pDQjBieUIwY21GdWMyWnZjbTBnYzNSeWFXNW5YRzRnSUNBZ0lDQWdJR2xtSUNoMGNtRnVjMlp2Y20xUWNtOXdjMXRyWlhsZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMlp2Y20wZ0t6MGdhMlY1SUNzZ0p5Z25JQ3NnY25Wc1pTQXJJQ2NwSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5WVc1elptOXliVWhoYzFvZ1BTQW9hMlY1SUQwOVBTQlVVa0ZPVTB4QlZFVmZXaWtnUHlCMGNuVmxJRG9nZEhKaGJuTm1iM0p0U0dGeldqdGNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQzh2SUU5eUlHcDFjM1FnWVhOemFXZHVJR1JwY21WamRHeDVYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jblZzWlNBaFBUMGdZMkZqYUdWYmEyVjVYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxXMnRsZVYwZ1BTQmpjM05iYTJWNVhTQTlJSEoxYkdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUM4dklFbG1JSGRsSUdoaGRtVWdkSEpoYm5ObWIzSnRJSEJ5YjNCbGNuUnBaWE1zSUdGa1pDQjBjbUZ1YzJ4aGRHVmFYRzRnSUNBZ2FXWWdLSFJ5WVc1elptOXliU0FoUFQwZ0p5Y3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBjbUZ1YzJadmNtMUlZWE5hS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTBnS3owZ0p5QW5JQ3NnVkZKQlRsTk1RVlJGWDFvZ0t5QW5LREJ3ZUNrbk8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUnlZVzV6Wm05eWJTQWhQVDBnWTJGamFHVXVkSEpoYm5ObWIzSnRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpjM011ZEhKaGJuTm1iM0p0SUQwZ2RISmhibk5tYjNKdE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0JqWVdOb1pTNTBjbUZ1YzJadmNtMGdQU0IwY21GdWMyWnZjbTA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHTnpjenRjYm4wN0lsMTlcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3JvbGVzL2Nzcy9idWlsZC5qc1xuICoqIG1vZHVsZSBpZCA9IDM5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUUkFOU0xBVEUgPSAndHJhbnNsYXRlJztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgeDogVFJBTlNMQVRFICsgJ1gnLFxuICAgIHk6IFRSQU5TTEFURSArICdZJyxcbiAgICB6OiBUUkFOU0xBVEUgKyAnWidcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW0xaGNDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFbEJRVWtzVTBGQlV5eEhRVUZITEZkQlFWY3NRMEZCUXpzN1FVRkZOVUlzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnp0QlFVTmlMRXRCUVVNc1JVRkJSU3hUUVVGVExFZEJRVWNzUjBGQlJ6dEJRVU5zUWl4TFFVRkRMRVZCUVVVc1UwRkJVeXhIUVVGSExFZEJRVWM3UVVGRGJFSXNTMEZCUXl4RlFVRkZMRk5CUVZNc1IwRkJSeXhIUVVGSE8wTkJRM0pDTEVOQlFVTWlMQ0ptYVd4bElqb2liV0Z3TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUZSU1FVNVRURUZVUlNBOUlDZDBjbUZ1YzJ4aGRHVW5PMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JpQWdJQ0I0T2lCVVVrRk9VMHhCVkVVZ0t5QW5XQ2NzWEc0Z0lDQWdlVG9nVkZKQlRsTk1RVlJGSUNzZ0oxa25MRnh1SUNBZ0lIbzZJRlJTUVU1VFRFRlVSU0FySUNkYUoxeHVmVHNpWFgwPVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvcm9sZXMvY3NzL21hcC5qc1xuICoqIG1vZHVsZSBpZCA9IDQwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDT0xPUiA9ICdjb2xvcicsXG4gICAgUE9TSVRJT05TID0gJ3Bvc2l0aW9ucycsXG4gICAgRElNRU5TSU9OUyA9ICdkaW1lbnNpb25zJyxcbiAgICBTQ0FMRSA9ICdzY2FsZScsXG4gICAgU0hBRE9XID0gJ3NoYWRvdycsXG4gICAgQU5HTEUgPSAnYW5nbGUnLFxuICAgIEFMUEhBID0gJ2FscGhhJyxcbiAgICBQWCA9ICdweCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8vIENvbG9yIHByb3BlcnRpZXNcbiAgICBjb2xvcjogQ09MT1IsXG4gICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUixcbiAgICBvdXRsaW5lQ29sb3I6IENPTE9SLFxuICAgIGZpbGw6IENPTE9SLFxuICAgIHN0cm9rZTogQ09MT1IsXG4gICAgLy8gQm9yZGVyXG4gICAgYm9yZGVyQ29sb3I6IENPTE9SLFxuICAgIGJvcmRlclRvcENvbG9yOiBDT0xPUixcbiAgICBib3JkZXJSaWdodENvbG9yOiBDT0xPUixcbiAgICBib3JkZXJCb3R0b21Db2xvcjogQ09MT1IsXG4gICAgYm9yZGVyTGVmdENvbG9yOiBDT0xPUixcbiAgICBib3JkZXJSYWRpdXM6IFBYLFxuICAgIC8vIERpbWVuc2lvbnNcbiAgICBtYXJnaW46IERJTUVOU0lPTlMsXG4gICAgcGFkZGluZzogRElNRU5TSU9OUyxcbiAgICB3aWR0aDogUFgsXG4gICAgaGVpZ2h0OiBQWCxcbiAgICAvLyBQb3NpdGlvbnNcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFBPU0lUSU9OUyxcbiAgICBwZXJzcGVjdGl2ZU9yaWdpbjogUE9TSVRJT05TLFxuICAgIHRyYW5zZm9ybU9yaWdpbjogUE9TSVRJT05TLFxuICAgIC8vIFNoYWRvd3NcbiAgICB0ZXh0U2hhZG93OiBTSEFET1csXG4gICAgYm94U2hhZG93OiBTSEFET1csXG4gICAgLy8gVHJhbnNmb3JtIHByb3BlcnRpZXNcbiAgICByb3RhdGU6IEFOR0xFLFxuICAgIHJvdGF0ZVg6IEFOR0xFLFxuICAgIHJvdGF0ZVk6IEFOR0xFLFxuICAgIHJvdGF0ZVo6IEFOR0xFLFxuICAgIHNjYWxlOiBTQ0FMRSxcbiAgICBzY2FsZVg6IFNDQUxFLFxuICAgIHNjYWxlWTogU0NBTEUsXG4gICAgc2NhbGVaOiBTQ0FMRSxcbiAgICBza2V3WDogQU5HTEUsXG4gICAgc2tld1k6IEFOR0xFLFxuICAgIGRpc3RhbmNlOiBQWCxcbiAgICB0cmFuc2xhdGVYOiBQWCxcbiAgICB0cmFuc2xhdGVZOiBQWCxcbiAgICB0cmFuc2xhdGVaOiBQWCxcbiAgICBwZXJzcGVjdGl2ZTogUFgsXG4gICAgb3BhY2l0eTogQUxQSEFcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5SNWNHVXRiV0Z3TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzU1VGQlNTeExRVUZMTEVkQlFVY3NUMEZCVHp0SlFVTm1MRk5CUVZNc1IwRkJSeXhYUVVGWE8wbEJRM1pDTEZWQlFWVXNSMEZCUnl4WlFVRlpPMGxCUTNwQ0xFdEJRVXNzUjBGQlJ5eFBRVUZQTzBsQlEyWXNUVUZCVFN4SFFVRkhMRkZCUVZFN1NVRkRha0lzUzBGQlN5eEhRVUZITEU5QlFVODdTVUZEWml4TFFVRkxMRWRCUVVjc1QwRkJUenRKUVVObUxFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTTdPMEZCUldRc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ6czdRVUZGWWl4VFFVRkxMRVZCUVVVc1MwRkJTenRCUVVOYUxHMUNRVUZsTEVWQlFVVXNTMEZCU3p0QlFVTjBRaXhuUWtGQldTeEZRVUZGTEV0QlFVczdRVUZEYmtJc1VVRkJTU3hGUVVGRkxFdEJRVXM3UVVGRFdDeFZRVUZOTEVWQlFVVXNTMEZCU3pzN1FVRkZZaXhsUVVGWExFVkJRVVVzUzBGQlN6dEJRVU5zUWl4clFrRkJZeXhGUVVGRkxFdEJRVXM3UVVGRGNrSXNiMEpCUVdkQ0xFVkJRVVVzUzBGQlN6dEJRVU4yUWl4eFFrRkJhVUlzUlVGQlJTeExRVUZMTzBGQlEzaENMRzFDUVVGbExFVkJRVVVzUzBGQlN6dEJRVU4wUWl4blFrRkJXU3hGUVVGRkxFVkJRVVU3TzBGQlJXaENMRlZCUVUwc1JVRkJSU3hWUVVGVk8wRkJRMnhDTEZkQlFVOHNSVUZCUlN4VlFVRlZPMEZCUTI1Q0xGTkJRVXNzUlVGQlJTeEZRVUZGTzBGQlExUXNWVUZCVFN4RlFVRkZMRVZCUVVVN08wRkJSVllzYzBKQlFXdENMRVZCUVVVc1UwRkJVenRCUVVNM1FpeHhRa0ZCYVVJc1JVRkJSU3hUUVVGVE8wRkJRelZDTEcxQ1FVRmxMRVZCUVVVc1UwRkJVenM3UVVGRk1VSXNZMEZCVlN4RlFVRkZMRTFCUVUwN1FVRkRiRUlzWVVGQlV5eEZRVUZGTEUxQlFVMDdPMEZCUldwQ0xGVkJRVTBzUlVGQlJTeExRVUZMTzBGQlEySXNWMEZCVHl4RlFVRkZMRXRCUVVzN1FVRkRaQ3hYUVVGUExFVkJRVVVzUzBGQlN6dEJRVU5rTEZkQlFVOHNSVUZCUlN4TFFVRkxPMEZCUTJRc1UwRkJTeXhGUVVGRkxFdEJRVXM3UVVGRFdpeFZRVUZOTEVWQlFVVXNTMEZCU3p0QlFVTmlMRlZCUVUwc1JVRkJSU3hMUVVGTE8wRkJRMklzVlVGQlRTeEZRVUZGTEV0QlFVczdRVUZEWWl4VFFVRkxMRVZCUVVVc1MwRkJTenRCUVVOYUxGTkJRVXNzUlVGQlJTeExRVUZMTzBGQlExb3NXVUZCVVN4RlFVRkZMRVZCUVVVN1FVRkRXaXhqUVVGVkxFVkJRVVVzUlVGQlJUdEJRVU5rTEdOQlFWVXNSVUZCUlN4RlFVRkZPMEZCUTJRc1kwRkJWU3hGUVVGRkxFVkJRVVU3UVVGRFpDeGxRVUZYTEVWQlFVVXNSVUZCUlR0QlFVTm1MRmRCUVU4c1JVRkJSU3hMUVVGTE8wTkJRMnBDTEVOQlFVTWlMQ0ptYVd4bElqb2lkSGx3WlMxdFlYQXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdRMDlNVDFJZ1BTQW5ZMjlzYjNJbkxGeHVJQ0FnSUZCUFUwbFVTVTlPVXlBOUlDZHdiM05wZEdsdmJuTW5MRnh1SUNBZ0lFUkpUVVZPVTBsUFRsTWdQU0FuWkdsdFpXNXphVzl1Y3ljc1hHNGdJQ0FnVTBOQlRFVWdQU0FuYzJOaGJHVW5MRnh1SUNBZ0lGTklRVVJQVnlBOUlDZHphR0ZrYjNjbkxGeHVJQ0FnSUVGT1IweEZJRDBnSjJGdVoyeGxKeXhjYmlBZ0lDQkJURkJJUVNBOUlDZGhiSEJvWVNjc1hHNGdJQ0FnVUZnZ1BTQW5jSGduTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNiaUFnSUNBdkx5QkRiMnh2Y2lCd2NtOXdaWEowYVdWelhHNGdJQ0FnWTI5c2IzSTZJRU5QVEU5U0xGeHVJQ0FnSUdKaFkydG5jbTkxYm1SRGIyeHZjam9nUTA5TVQxSXNYRzRnSUNBZ2IzVjBiR2x1WlVOdmJHOXlPaUJEVDB4UFVpeGNiaUFnSUNCbWFXeHNPaUJEVDB4UFVpeGNiaUFnSUNCemRISnZhMlU2SUVOUFRFOVNMRnh1SUNBZ0lDOHZJRUp2Y21SbGNseHVJQ0FnSUdKdmNtUmxja052Ykc5eU9pQkRUMHhQVWl4Y2JpQWdJQ0JpYjNKa1pYSlViM0JEYjJ4dmNqb2dRMDlNVDFJc1hHNGdJQ0FnWW05eVpHVnlVbWxuYUhSRGIyeHZjam9nUTA5TVQxSXNYRzRnSUNBZ1ltOXlaR1Z5UW05MGRHOXRRMjlzYjNJNklFTlBURTlTTEZ4dUlDQWdJR0p2Y21SbGNreGxablJEYjJ4dmNqb2dRMDlNVDFJc1hHNGdJQ0FnWW05eVpHVnlVbUZrYVhWek9pQlFXQ3hjYmlBZ0lDQXZMeUJFYVcxbGJuTnBiMjV6WEc0Z0lDQWdiV0Z5WjJsdU9pQkVTVTFGVGxOSlQwNVRMRnh1SUNBZ0lIQmhaR1JwYm1jNklFUkpUVVZPVTBsUFRsTXNYRzRnSUNBZ2QybGtkR2c2SUZCWUxGeHVJQ0FnSUdobGFXZG9kRG9nVUZnc0lDQWdJRnh1SUNBZ0lDOHZJRkJ2YzJsMGFXOXVjMXh1SUNBZ0lHSmhZMnRuY205MWJtUlFiM05wZEdsdmJqb2dVRTlUU1ZSSlQwNVRMRnh1SUNBZ0lIQmxjbk53WldOMGFYWmxUM0pwWjJsdU9pQlFUMU5KVkVsUFRsTXNYRzRnSUNBZ2RISmhibk5tYjNKdFQzSnBaMmx1T2lCUVQxTkpWRWxQVGxNc1hHNGdJQ0FnTHk4Z1UyaGhaRzkzYzF4dUlDQWdJSFJsZUhSVGFHRmtiM2M2SUZOSVFVUlBWeXhjYmlBZ0lDQmliM2hUYUdGa2IzYzZJRk5JUVVSUFZ5d2dJQ0FnWEc0Z0lDQWdMeThnVkhKaGJuTm1iM0p0SUhCeWIzQmxjblJwWlhOY2JpQWdJQ0J5YjNSaGRHVTZJRUZPUjB4RkxGeHVJQ0FnSUhKdmRHRjBaVmc2SUVGT1IweEZMRnh1SUNBZ0lISnZkR0YwWlZrNklFRk9SMHhGTEZ4dUlDQWdJSEp2ZEdGMFpWbzZJRUZPUjB4RkxGeHVJQ0FnSUhOallXeGxPaUJUUTBGTVJTeGNiaUFnSUNCelkyRnNaVmc2SUZORFFVeEZMRnh1SUNBZ0lITmpZV3hsV1RvZ1UwTkJURVVzWEc0Z0lDQWdjMk5oYkdWYU9pQlRRMEZNUlN4Y2JpQWdJQ0J6YTJWM1dEb2dRVTVIVEVVc1hHNGdJQ0FnYzJ0bGQxazZJRUZPUjB4RkxGeHVJQ0FnSUdScGMzUmhibU5sT2lCUVdDeGNiaUFnSUNCMGNtRnVjMnhoZEdWWU9pQlFXQ3hjYmlBZ0lDQjBjbUZ1YzJ4aGRHVlpPaUJRV0N4Y2JpQWdJQ0IwY21GdWMyeGhkR1ZhT2lCUVdDeGNiaUFnSUNCd1pYSnpjR1ZqZEdsMlpUb2dVRmdzWEc0Z0lDQWdiM0JoWTJsMGVUb2dRVXhRU0VGY2JuMDdJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9yb2xlcy9jc3MvdHlwZS1tYXAuanNcbiAqKiBtb2R1bGUgaWQgPSA0MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi9pbmMvdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EaWN0aW9uYXJ5ID0gcmVxdWlyZSgnLi4vY3NzL3RyYW5zZm9ybS1kaWN0aW9uYXJ5Jyk7XG5cbnZhciBlYWNoID0gdXRpbHMuZWFjaDtcbnZhciBjYW1lbFRvRGFzaCA9IHV0aWxzLmNhbWVsVG9EYXNoO1xudmFyIHRyYW5zZm9ybVByb3BzID0gdHJhbnNmb3JtRGljdGlvbmFyeS5wcm9wcztcbnZhciB6ZXJvTm90WmVybyA9IDAuMDAwMTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3V0cHV0LCBvcmlnaW4pIHtcbiAgICB2YXIgcHJvcHMgPSB7fSxcbiAgICAgICAgaGFzVHJhbnNmb3JtID0gZmFsc2UsXG4gICAgICAgIHNjYWxlID0gb3V0cHV0LnNjYWxlICE9PSB1bmRlZmluZWQgPyBvdXRwdXQuc2NhbGUgfHwgemVyb05vdFplcm8gOiBvdXRwdXQuc2NhbGVYIHx8IDEsXG4gICAgICAgIHNjYWxlWSA9IG91dHB1dC5zY2FsZVkgIT09IHVuZGVmaW5lZCA/IG91dHB1dC5zY2FsZVkgfHwgemVyb05vdFplcm8gOiBzY2FsZSB8fCAxLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW5YID0gb3JpZ2luLngsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpblkgPSBvcmlnaW4ueSxcbiAgICAgICAgc2NhbGVUcmFuc2Zvcm1YID0gLXRyYW5zZm9ybU9yaWdpblggKiAoc2NhbGUgKiAxKSxcbiAgICAgICAgc2NhbGVUcmFuc2Zvcm1ZID0gLXRyYW5zZm9ybU9yaWdpblkgKiAoc2NhbGVZICogMSksXG4gICAgICAgIHNjYWxlUmVwbGFjZVggPSB0cmFuc2Zvcm1PcmlnaW5YIC8gc2NhbGUsXG4gICAgICAgIHNjYWxlUmVwbGFjZVkgPSB0cmFuc2Zvcm1PcmlnaW5ZIC8gc2NhbGVZLFxuICAgICAgICB0cmFuc2Zvcm0gPSB7XG4gICAgICAgIHRyYW5zbGF0ZTogJ3RyYW5zbGF0ZSgnICsgb3V0cHV0LnRyYW5zbGF0ZVggKyAnLCAnICsgb3V0cHV0LnRyYW5zbGF0ZVkgKyAnKSAnLFxuICAgICAgICBzY2FsZTogJ3RyYW5zbGF0ZSgnICsgc2NhbGVUcmFuc2Zvcm1YICsgJywgJyArIHNjYWxlVHJhbnNmb3JtWSArICcpIHNjYWxlKCcgKyBzY2FsZSArICcsICcgKyBzY2FsZVkgKyAnKSB0cmFuc2xhdGUoJyArIHNjYWxlUmVwbGFjZVggKyAnLCAnICsgc2NhbGVSZXBsYWNlWSArICcpICcsXG4gICAgICAgIHJvdGF0ZTogJ3JvdGF0ZSgnICsgb3V0cHV0LnJvdGF0ZSArICcsICcgKyB0cmFuc2Zvcm1PcmlnaW5YICsgJywgJyArIHRyYW5zZm9ybU9yaWdpblkgKyAnKSAnLFxuICAgICAgICBza2V3WDogJ3NrZXdYKCcgKyBvdXRwdXQuc2tld1ggKyAnKSAnLFxuICAgICAgICBza2V3WTogJ3NrZXdZKCcgKyBvdXRwdXQuc2tld1kgKyAnKSAnXG4gICAgfTtcblxuICAgIGVhY2gob3V0cHV0LCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHJhbnNmb3JtUHJvcHNba2V5XSkge1xuICAgICAgICAgICAgaGFzVHJhbnNmb3JtID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzW2NhbWVsVG9EYXNoKGtleSldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChoYXNUcmFuc2Zvcm0pIHtcbiAgICAgICAgcHJvcHMudHJhbnNmb3JtID0gJyc7XG5cbiAgICAgICAgZWFjaCh0cmFuc2Zvcm0sIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0ga2V5ID09PSAnc2NhbGUnID8gJzEnIDogJzAnO1xuICAgICAgICAgICAgcHJvcHMudHJhbnNmb3JtICs9IHZhbHVlLnJlcGxhY2UoL3VuZGVmaW5lZC9nLCBkZWZhdWx0VmFsdWUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcHM7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltSjFhV3hrTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzU1VGQlRTeExRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdRVUZEZWtNc1NVRkJUU3h0UWtGQmJVSXNSMEZCUnl4UFFVRlBMRU5CUVVNc05rSkJRVFpDTEVOQlFVTXNRMEZCUXpzN1FVRkZia1VzU1VGQlRTeEpRVUZKTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVONFFpeEpRVUZOTEZkQlFWY3NSMEZCUnl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE8wRkJRM1JETEVsQlFVMHNZMEZCWXl4SFFVRkhMRzFDUVVGdFFpeERRVUZETEV0QlFVc3NRMEZCUXp0QlFVTnFSQ3hKUVVGTkxGZEJRVmNzUjBGQlJ5eE5RVUZOTEVOQlFVTTdPMEZCUlROQ0xFMUJRVTBzUTBGQlF5eFBRVUZQTEVkQlFVY3NWVUZCVlN4TlFVRk5MRVZCUVVVc1RVRkJUU3hGUVVGRk8wRkJRM1pETEZGQlFVa3NTMEZCU3l4SFFVRkhMRVZCUVVVN1VVRkRWaXhaUVVGWkxFZEJRVWNzUzBGQlN6dFJRVU53UWl4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExFdEJRVXNzUzBGQlN5eFRRVUZUTEVkQlFVY3NUVUZCVFN4RFFVRkRMRXRCUVVzc1NVRkJTU3hYUVVGWExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNTVUZCU1N4RFFVRkRPMUZCUTNKR0xFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4TFFVRkxMRk5CUVZNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeEpRVUZKTEZkQlFWY3NSMEZCUnl4TFFVRkxMRWxCUVVrc1EwRkJRenRSUVVOb1JpeG5Ra0ZCWjBJc1IwRkJSeXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU16UWl4blFrRkJaMElzUjBGQlJ5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTXpRaXhsUVVGbExFZEJRVWNzUTBGQlJTeG5Ra0ZCWjBJc1NVRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZCTEVGQlFVTTdVVUZEYkVRc1pVRkJaU3hIUVVGSExFTkJRVVVzWjBKQlFXZENMRWxCUVVrc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlFTeEJRVUZETzFGQlEyNUVMR0ZCUVdFc1IwRkJSeXhuUWtGQlowSXNSMEZCUnl4TFFVRkxPMUZCUTNoRExHRkJRV0VzUjBGQlJ5eG5Ra0ZCWjBJc1IwRkJSeXhOUVVGTk8xRkJRM3BETEZOQlFWTXNSMEZCUnp0QlFVTlNMR2xDUVVGVExHbENRVUZsTEUxQlFVMHNRMEZCUXl4VlFVRlZMRlZCUVVzc1RVRkJUU3hEUVVGRExGVkJRVlVzVDBGQlNUdEJRVU51UlN4aFFVRkxMR2xDUVVGbExHVkJRV1VzVlVGQlN5eGxRVUZsTEdkQ1FVRlhMRXRCUVVzc1ZVRkJTeXhOUVVGTkxHOUNRVUZsTEdGQlFXRXNWVUZCU3l4aFFVRmhMRTlCUVVrN1FVRkRjRWtzWTBGQlRTeGpRVUZaTEUxQlFVMHNRMEZCUXl4TlFVRk5MRlZCUVVzc1owSkJRV2RDTEZWQlFVc3NaMEpCUVdkQ0xFOUJRVWs3UVVGRE4wVXNZVUZCU3l4aFFVRlhMRTFCUVUwc1EwRkJReXhMUVVGTExFOUJRVWs3UVVGRGFFTXNZVUZCU3l4aFFVRlhMRTFCUVUwc1EwRkJReXhMUVVGTExFOUJRVWs3UzBGRGJrTXNRMEZCUXpzN1FVRkZUaXhSUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEZWQlFWVXNSMEZCUnl4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVNdlFpeFpRVUZKTEdOQlFXTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVHRCUVVOeVFpeDNRa0ZCV1N4SFFVRkhMRWxCUVVrc1EwRkJRenRUUVVOMlFpeE5RVUZOTzBGQlEwZ3NhVUpCUVVzc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1UwRkRia003UzBGRFNpeERRVUZETEVOQlFVTTdPMEZCUlVnc1VVRkJTU3haUVVGWkxFVkJRVVU3UVVGRFpDeGhRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRkhMRVZCUVVVc1EwRkJRenM3UVVGRmNrSXNXVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hWUVVGVkxFZEJRVWNzUlVGQlJTeExRVUZMTEVWQlFVVTdRVUZEYkVNc1owSkJRVWtzV1VGQldTeEhRVUZITEVGQlFVTXNSMEZCUnl4TFFVRkxMRTlCUVU4c1IwRkJTU3hIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETzBGQlEycEVMR2xDUVVGTExFTkJRVU1zVTBGQlV5eEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1dVRkJXU3hGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZETzFOQlEyaEZMRU5CUVVNc1EwRkJRenRMUVVOT096dEJRVVZFTEZkQlFVOHNTMEZCU3l4RFFVRkRPME5CUTJoQ0xFTkJRVU1pTENKbWFXeGxJam9pWW5WcGJHUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKamIyNXpkQ0IxZEdsc2N5QTlJSEpsY1hWcGNtVW9KeTR1THk0dUwybHVZeTkxZEdsc2N5Y3BPMXh1WTI5dWMzUWdkSEpoYm5ObWIzSnRSR2xqZEdsdmJtRnllU0E5SUhKbGNYVnBjbVVvSnk0dUwyTnpjeTkwY21GdWMyWnZjbTB0WkdsamRHbHZibUZ5ZVNjcE8xeHVYRzVqYjI1emRDQmxZV05vSUQwZ2RYUnBiSE11WldGamFEdGNibU52Ym5OMElHTmhiV1ZzVkc5RVlYTm9JRDBnZFhScGJITXVZMkZ0Wld4VWIwUmhjMmc3WEc1amIyNXpkQ0IwY21GdWMyWnZjbTFRY205d2N5QTlJSFJ5WVc1elptOXliVVJwWTNScGIyNWhjbmt1Y0hKdmNITTdYRzVqYjI1emRDQjZaWEp2VG05MFdtVnlieUE5SURBdU1EQXdNVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlBb2IzVjBjSFYwTENCdmNtbG5hVzRwSUh0Y2JpQWdJQ0JzWlhRZ2NISnZjSE1nUFNCN2ZTeGNiaUFnSUNBZ0lDQWdhR0Z6VkhKaGJuTm1iM0p0SUQwZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUhOallXeGxJRDBnYjNWMGNIVjBMbk5qWVd4bElDRTlQU0IxYm1SbFptbHVaV1FnUHlCdmRYUndkWFF1YzJOaGJHVWdmSHdnZW1WeWIwNXZkRnBsY204Z09pQnZkWFJ3ZFhRdWMyTmhiR1ZZSUh4OElERXNYRzRnSUNBZ0lDQWdJSE5qWVd4bFdTQTlJRzkxZEhCMWRDNXpZMkZzWlZrZ0lUMDlJSFZ1WkdWbWFXNWxaQ0EvSUc5MWRIQjFkQzV6WTJGc1pWa2dmSHdnZW1WeWIwNXZkRnBsY204Z09pQnpZMkZzWlNCOGZDQXhMRnh1SUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTFQY21sbmFXNVlJRDBnYjNKcFoybHVMbmdzWEc0Z0lDQWdJQ0FnSUhSeVlXNXpabTl5YlU5eWFXZHBibGtnUFNCdmNtbG5hVzR1ZVN4Y2JpQWdJQ0FnSUNBZ2MyTmhiR1ZVY21GdWMyWnZjbTFZSUQwZ0xTQjBjbUZ1YzJadmNtMVBjbWxuYVc1WUlDb2dLSE5qWVd4bElDb2dNU2tzWEc0Z0lDQWdJQ0FnSUhOallXeGxWSEpoYm5ObWIzSnRXU0E5SUMwZ2RISmhibk5tYjNKdFQzSnBaMmx1V1NBcUlDaHpZMkZzWlZrZ0tpQXhLU3hjYmlBZ0lDQWdJQ0FnYzJOaGJHVlNaWEJzWVdObFdDQTlJSFJ5WVc1elptOXliVTl5YVdkcGJsZ2dMeUJ6WTJGc1pTeGNiaUFnSUNBZ0lDQWdjMk5oYkdWU1pYQnNZV05sV1NBOUlIUnlZVzV6Wm05eWJVOXlhV2RwYmxrZ0x5QnpZMkZzWlZrc1hHNGdJQ0FnSUNBZ0lIUnlZVzV6Wm05eWJTQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6YkdGMFpUb2dZSFJ5WVc1emJHRjBaU2drZTI5MWRIQjFkQzUwY21GdWMyeGhkR1ZZZlN3Z0pIdHZkWFJ3ZFhRdWRISmhibk5zWVhSbFdYMHBJR0FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpZMkZzWlRvZ1lIUnlZVzV6YkdGMFpTZ2tlM05qWVd4bFZISmhibk5tYjNKdFdIMHNJQ1I3YzJOaGJHVlVjbUZ1YzJadmNtMVpmU2tnYzJOaGJHVW9KSHR6WTJGc1pYMHNJQ1I3YzJOaGJHVlpmU2tnZEhKaGJuTnNZWFJsS0NSN2MyTmhiR1ZTWlhCc1lXTmxXSDBzSUNSN2MyTmhiR1ZTWlhCc1lXTmxXWDBwSUdBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5YjNSaGRHVTZJR0J5YjNSaGRHVW9KSHR2ZFhSd2RYUXVjbTkwWVhSbGZTd2dKSHQwY21GdWMyWnZjbTFQY21sbmFXNVlmU3dnSkh0MGNtRnVjMlp2Y20xUGNtbG5hVzVaZlNrZ1lDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOclpYZFlPaUJnYzJ0bGQxZ29KSHR2ZFhSd2RYUXVjMnRsZDFoOUtTQmdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MydGxkMWs2SUdCemEyVjNXU2drZTI5MWRIQjFkQzV6YTJWM1dYMHBJR0JjYmlBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUdWaFkyZ29iM1YwY0hWMExDQm1kVzVqZEdsdmJpQW9hMlY1TENCMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kSEpoYm5ObWIzSnRVSEp2Y0hOYmEyVjVYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhR0Z6VkhKaGJuTm1iM0p0SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnliM0J6VzJOaGJXVnNWRzlFWVhOb0tHdGxlU2xkSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUdsbUlDaG9ZWE5VY21GdWMyWnZjbTBwSUh0Y2JpQWdJQ0FnSUNBZ2NISnZjSE11ZEhKaGJuTm1iM0p0SUQwZ0p5YzdYRzVjYmlBZ0lDQWdJQ0FnWldGamFDaDBjbUZ1YzJadmNtMHNJR1oxYm1OMGFXOXVJQ2hyWlhrc0lIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pHVm1ZWFZzZEZaaGJIVmxJRDBnS0d0bGVTQTlQVDBnSjNOallXeGxKeWtnUHlBbk1TY2dPaUFuTUNjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3Y205d2N5NTBjbUZ1YzJadmNtMGdLejBnZG1Gc2RXVXVjbVZ3YkdGalpTZ3ZkVzVrWldacGJtVmtMMmNzSUdSbFptRjFiSFJXWVd4MVpTazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQndjbTl3Y3p0Y2JuMDdJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9yb2xlcy9zdmcvYnVpbGQuanNcbiAqKiBtb2R1bGUgaWQgPSA0MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQUxQSEEgPSAnYWxwaGEnO1xudmFyIENPTE9SID0gJ2NvbG9yJztcbnZhciBTQ0FMRSA9ICdzY2FsZSc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZpbGw6IENPTE9SLFxuICAgIHN0cm9rZTogQ09MT1IsXG4gICAgc2NhbGU6IFNDQUxFLFxuICAgIHNjYWxlWDogU0NBTEUsXG4gICAgc2NhbGVZOiBTQ0FMRSxcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICdwb3NpdGlvbnMnLFxuICAgIGQ6ICdjb21wbGV4JyxcbiAgICBvcGFjaXR5OiBBTFBIQSxcbiAgICBmaWxsT3BhY2l0eTogQUxQSEEsXG4gICAgc3Ryb2tlT3BhY2l0eTogQUxQSEFcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5SNWNHVXRiV0Z3TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzU1VGQlRTeExRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRPMEZCUTNSQ0xFbEJRVTBzUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUXp0QlFVTjBRaXhKUVVGTkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTTdPMEZCUlhSQ0xFMUJRVTBzUTBGQlF5eFBRVUZQTEVkQlFVYzdRVUZEWWl4UlFVRkpMRVZCUVVVc1MwRkJTenRCUVVOWUxGVkJRVTBzUlVGQlJTeExRVUZMTzBGQlEySXNVMEZCU3l4RlFVRkZMRXRCUVVzN1FVRkRXaXhWUVVGTkxFVkJRVVVzUzBGQlN6dEJRVU5pTEZWQlFVMHNSVUZCUlN4TFFVRkxPMEZCUTJJc2JVSkJRV1VzUlVGQlJTeFhRVUZYTzBGQlF6VkNMRXRCUVVNc1JVRkJSU3hUUVVGVE8wRkJRMW9zVjBGQlR5eEZRVUZGTEV0QlFVczdRVUZEWkN4bFFVRlhMRVZCUVVVc1MwRkJTenRCUVVOc1FpeHBRa0ZCWVN4RlFVRkZMRXRCUVVzN1EwRkRka0lzUTBGQlF5SXNJbVpwYkdVaU9pSjBlWEJsTFcxaGNDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1OdmJuTjBJRUZNVUVoQklEMGdKMkZzY0doaEp6dGNibU52Ym5OMElFTlBURTlTSUQwZ0oyTnZiRzl5Snp0Y2JtTnZibk4wSUZORFFVeEZJRDBnSjNOallXeGxKenRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNGdJQ0FnWm1sc2JEb2dRMDlNVDFJc1hHNGdJQ0FnYzNSeWIydGxPaUJEVDB4UFVpeGNiaUFnSUNCelkyRnNaVG9nVTBOQlRFVXNYRzRnSUNBZ2MyTmhiR1ZZT2lCVFEwRk1SU3hjYmlBZ0lDQnpZMkZzWlZrNklGTkRRVXhGTEZ4dUlDQWdJSFJ5WVc1elptOXliVTl5YVdkcGJqb2dKM0J2YzJsMGFXOXVjeWNzWEc0Z0lDQWdaRG9nSjJOdmJYQnNaWGduTEZ4dUlDQWdJRzl3WVdOcGRIazZJRUZNVUVoQkxGeHVJQ0FnSUdacGJHeFBjR0ZqYVhSNU9pQkJURkJJUVN4Y2JpQWdJQ0J6ZEhKdmEyVlBjR0ZqYVhSNU9pQkJURkJJUVZ4dWZUc2lYWDA9XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9yb2xlcy9zdmcvdHlwZS1tYXAuanNcbiAqKiBtb2R1bGUgaWQgPSA0M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgU1RST0tFID0gJ3N0cm9rZSc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIG9wYWNpdHk6IFNUUk9LRSArICctb3BhY2l0eScsXG4gICAgd2lkdGg6IFNUUk9LRSArICctd2lkdGgnLFxuICAgIG1pdGVybGltaXQ6IFNUUk9LRSArICctbWl0ZXJsaW1pdCdcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW0xaGNDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFbEJRVWtzVFVGQlRTeEhRVUZITEZGQlFWRXNRMEZCUXpzN1FVRkZkRUlzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnp0QlFVTmlMRmRCUVU4c1JVRkJSU3hOUVVGTkxFZEJRVWNzVlVGQlZUdEJRVU0xUWl4VFFVRkxMRVZCUVVVc1RVRkJUU3hIUVVGSExGRkJRVkU3UVVGRGVFSXNZMEZCVlN4RlFVRkZMRTFCUVUwc1IwRkJSeXhoUVVGaE8wTkJRM0pETEVOQlFVTWlMQ0ptYVd4bElqb2liV0Z3TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lkbUZ5SUZOVVVrOUxSU0E5SUNkemRISnZhMlVuTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNiaUFnSUNCdmNHRmphWFI1T2lCVFZGSlBTMFVnS3lBbkxXOXdZV05wZEhrbkxGeHVJQ0FnSUhkcFpIUm9PaUJUVkZKUFMwVWdLeUFuTFhkcFpIUm9KeXhjYmlBZ0lDQnRhWFJsY214cGJXbDBPaUJUVkZKUFMwVWdLeUFuTFcxcGRHVnliR2x0YVhRblhHNTlPeUpkZlE9PVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvcm9sZXMvcGF0aC9tYXAuanNcbiAqKiBtb2R1bGUgaWQgPSA0NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBRdWV1ZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUXVldWUoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBRdWV1ZSk7XG5cbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgIEFkZCBhIHNldCBvZiBhcmd1bWVudHMgdG8gcXVldWVcbiAgICAqL1xuXG4gICAgUXVldWUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCgpIHtcbiAgICAgICAgdGhpcy5xdWV1ZS5wdXNoKFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgIEdldCBuZXh0IHNldCBvZiBhcmd1bWVudHMgZnJvbSBxdWV1ZVxuICAgICovXG5cbiAgICBRdWV1ZS5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyAxIDogYXJndW1lbnRzWzBdO1xuXG4gICAgICAgIHZhciBxdWV1ZSA9IHRoaXMucXVldWUsXG4gICAgICAgICAgICByZXR1cm5WYWwgPSBmYWxzZSxcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5pbmRleDtcblxuICAgICAgICAvLyBJZiBvdXIgaW5kZXggaXMgYmV0d2VlbiAwIGFuZCB0aGUgcXVldWUgbGVuZ3RoLCByZXR1cm4gdGhhdCBpdGVtXG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgcXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm5WYWwgPSBxdWV1ZVtpbmRleF07XG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXggKyBkaXJlY3Rpb247XG5cbiAgICAgICAgICAgIC8vIE9yIGNsZWFyXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXR1cm5WYWw7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICAgIFJlcGxhY2UgcXVldWUgd2l0aCBlbXB0eSBhcnJheVxuICAgICovXG5cbiAgICBRdWV1ZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFF1ZXVlO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBRdWV1ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEYxWlhWbExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3U1VGQlRTeExRVUZMTzBGQlExQXNZVUZFUlN4TFFVRkxMRWRCUTA4N09FSkJSRm9zUzBGQlN6czdRVUZGU0N4WlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03UzBGRGFFSTdPenM3TzBGQlFVRTdRVUZJUXl4VFFVRkxMRmRCVVZBc1IwRkJSeXhyUWtGQlJ6dEJRVU5HTEZsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU03UzBGRE4wTTdPenM3T3p0QlFWWkRMRk5CUVVzc1YwRmxVQ3hKUVVGSkxHMUNRVUZuUWp0WlFVRm1MRk5CUVZNc2VVUkJRVWNzUTBGQlF6czdRVUZEWkN4WlFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN6dFpRVU5zUWl4VFFVRlRMRWRCUVVjc1MwRkJTenRaUVVOcVFpeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzN096dEJRVUZETEVGQlIzWkNMRmxCUVVrc1MwRkJTeXhKUVVGSkxFTkJRVU1zU1VGQlNTeExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSVHRCUVVOd1F5eHhRa0ZCVXl4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU42UWl4blFrRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVkQlFVY3NVMEZCVXpzN08wRkJRVU1zVTBGSGJFTXNUVUZCVFR0QlFVTklMRzlDUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdZVUZEYUVJN08wRkJSVVFzWlVGQlR5eFRRVUZUTEVOQlFVTTdTMEZEY0VJN096czdPenRCUVM5Q1F5eFRRVUZMTEZkQmIwTlFMRXRCUVVzc2IwSkJRVWM3UVVGRFNpeFpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOb1FpeFpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRenRMUVVOc1FqczdWMEYyUTBNc1MwRkJTenM3TzBGQk1FTllMRTFCUVUwc1EwRkJReXhQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZESWl3aVptbHNaU0k2SWxGMVpYVmxMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVkyeGhjM01nVVhWbGRXVWdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5zWldGeUtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQWdRV1JrSUdFZ2MyVjBJRzltSUdGeVozVnRaVzUwY3lCMGJ5QnhkV1YxWlZ4dUlDQWdJQ292WEc0Z0lDQWdZV1JrS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5GMVpYVmxMbkIxYzJnb1cxMHVjMnhwWTJVdVkyRnNiQ2hoY21kMWJXVnVkSE1wS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2x4dUlDQWdJQ0FnSUNCSFpYUWdibVY0ZENCelpYUWdiMllnWVhKbmRXMWxiblJ6SUdaeWIyMGdjWFZsZFdWY2JpQWdJQ0FxTDF4dUlDQWdJRzVsZUhRb1pHbHlaV04wYVc5dUlEMGdNU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdjWFZsZFdVZ1BTQjBhR2x6TG5GMVpYVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1Vm1Gc0lEMGdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVDQTlJSFJvYVhNdWFXNWtaWGc3WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBdkx5QkpaaUJ2ZFhJZ2FXNWtaWGdnYVhNZ1ltVjBkMlZsYmlBd0lHRnVaQ0IwYUdVZ2NYVmxkV1VnYkdWdVozUm9MQ0J5WlhSMWNtNGdkR2hoZENCcGRHVnRYRzRnSUNBZ0lDQWdJR2xtSUNocGJtUmxlQ0ErUFNBd0lDWW1JR2x1WkdWNElEd2djWFZsZFdVdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNVdZV3dnUFNCeGRXVjFaVnRwYm1SbGVGMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx1WkdWNElEMGdhVzVrWlhnZ0t5QmthWEpsWTNScGIyNDdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0F2THlCUGNpQmpiR1ZoY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amJHVmhjaWdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVjBkWEp1Vm1Gc08xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cVhHNGdJQ0FnSUNBZ0lGSmxjR3hoWTJVZ2NYVmxkV1VnZDJsMGFDQmxiWEIwZVNCaGNuSmhlVnh1SUNBZ0lDb3ZYRzRnSUNBZ1kyeGxZWElvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y1hWbGRXVWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYm1SbGVDQTlJREE3WEc0Z0lDQWdmVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGRjFaWFZsT3lKZGZRPT1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2luYy9RdWV1ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDQ1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbi8qXG4gICAgQHBhcmFtIFtzdHJpbmcgfHwgTm9kZUxpc3QgfHwgalF1ZXJ5IG9iamVjdF06XG4gICAgICAgIElmIHN0cmluZywgdHJlYXRlZCBhcyBzZWxlY3Rvci5cbiAgICAgICAgSWYgbm90LCB0cmVhdGVkIGFzIHByZWV4aXN0aW5nIE5vZGVMaXN0IHx8IGpRdWVyeSBvYmplY3QuXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICB2YXIgbm9kZXMgPSB0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikgOiBzZWxlY3RvcixcbiAgICAgICAgZWxlbWVudHMgPSBbXTtcblxuICAgIC8vIElmIGpRdWVyeSBzZWxlY3Rpb24sIGdldCBhcnJheSBvZiBFbGVtZW50c1xuICAgIGlmIChub2Rlcy5nZXQpIHtcbiAgICAgICAgZWxlbWVudHMgPSBub2Rlcy5nZXQoKTtcblxuICAgICAgICAvLyBPciBjb252ZXJ0IE5vZGVMaXN0IHRvIGFycmF5XG4gICAgfSBlbHNlIGlmIChub2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChub2Rlcyk7XG5cbiAgICAgICAgICAgIC8vIE9yIGlmIGl0J3MganVzdCBhbiBFbGVtZW50LCBwdXQgaW50byBhcnJheVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2gobm9kZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnRzO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk5sYkdWamRDMWtiMjB1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenRCUVV0QkxFMUJRVTBzUTBGQlF5eFBRVUZQTEVkQlFVY3NWVUZCVlN4UlFVRlJMRVZCUVVVN1FVRkRha01zVVVGQlNTeExRVUZMTEVkQlFVY3NRVUZCUXl4UFFVRlBMRkZCUVZFc1MwRkJTeXhSUVVGUkxFZEJRVWtzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEZGQlFWRTdVVUZEZGtZc1VVRkJVU3hIUVVGSExFVkJRVVU3T3p0QlFVRkRMRUZCUjJ4Q0xGRkJRVWtzUzBGQlN5eERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTllMR2RDUVVGUkxFZEJRVWNzUzBGQlN5eERRVUZETEVkQlFVY3NSVUZCUlRzN08wRkJRVU1zUzBGSE1VSXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRGNrSXNiMEpCUVZFc1IwRkJSeXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN096dEJRVUZETEZOQlIyNURMRTFCUVUwN1FVRkRTQ3gzUWtGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRoUVVONFFqczdRVUZGUkN4WFFVRlBMRkZCUVZFc1EwRkJRenREUVVOdVFpeERRVUZESWl3aVptbHNaU0k2SW5ObGJHVmpkQzFrYjIwdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2x4dUlDQWdJRUJ3WVhKaGJTQmJjM1J5YVc1bklIeDhJRTV2WkdWTWFYTjBJSHg4SUdwUmRXVnllU0J2WW1wbFkzUmRPbHh1SUNBZ0lDQWdJQ0JKWmlCemRISnBibWNzSUhSeVpXRjBaV1FnWVhNZ2MyVnNaV04wYjNJdVhHNGdJQ0FnSUNBZ0lFbG1JRzV2ZEN3Z2RISmxZWFJsWkNCaGN5QndjbVZsZUdsemRHbHVaeUJPYjJSbFRHbHpkQ0I4ZkNCcVVYVmxjbmtnYjJKcVpXTjBMbHh1S2k5Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z0tITmxiR1ZqZEc5eUtTQjdYRzRnSUNBZ2RtRnlJRzV2WkdWeklEMGdLSFI1Y0dWdlppQnpaV3hsWTNSdmNpQTlQVDBnSjNOMGNtbHVaeWNwSUQ4Z1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNoelpXeGxZM1J2Y2lrZ09pQnpaV3hsWTNSdmNpeGNiaUFnSUNBZ0lDQWdaV3hsYldWdWRITWdQU0JiWFR0Y2JseHVJQ0FnSUM4dklFbG1JR3BSZFdWeWVTQnpaV3hsWTNScGIyNHNJR2RsZENCaGNuSmhlU0J2WmlCRmJHVnRaVzUwYzF4dUlDQWdJR2xtSUNodWIyUmxjeTVuWlhRcElIdGNiaUFnSUNBZ0lDQWdaV3hsYldWdWRITWdQU0J1YjJSbGN5NW5aWFFvS1R0Y2JseHVJQ0FnSUM4dklFOXlJR052Ym5abGNuUWdUbTlrWlV4cGMzUWdkRzhnWVhKeVlYbGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHNXZaR1Z6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNCbGJHVnRaVzUwY3lBOUlGdGRMbk5zYVdObExtTmhiR3dvYm05a1pYTXBPMXh1WEc0Z0lDQWdMeThnVDNJZ2FXWWdhWFFuY3lCcWRYTjBJR0Z1SUVWc1pXMWxiblFzSUhCMWRDQnBiblJ2SUdGeWNtRjVYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEhNdWNIVnphQ2h1YjJSbGN5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUdWc1pXMWxiblJ6TzF4dWZUc2lYWDA9XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9pbmMvc2VsZWN0LWRvbS5qc1xuICoqIG1vZHVsZSBpZCA9IDQ2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciB2YWx1ZVR5cGVzTWFuYWdlciA9IHJlcXVpcmUoJy4uL3ZhbHVlLXR5cGVzL21hbmFnZXInKSxcbiAgICBjYWxjID0gcmVxdWlyZSgnLi4vaW5jL2NhbGMnKSxcbiAgICB1dGlscyA9IHJlcXVpcmUoJy4uL2luYy91dGlscycpLFxuICAgIGlzTnVtID0gdXRpbHMuaXNOdW0sXG4gICAgZWFjaCA9IHV0aWxzLmVhY2g7XG5cbnZhciBudW1lcmljYWxWYWx1ZXMgPSBbJ2N1cnJlbnQnLCAndG8nLCAnbWluJywgJ21heCcsICd2ZWxvY2l0eScsICdmcmljdGlvbicsICdzcHJpbmcnLCAnYWNjZWxlcmF0aW9uJ10sXG4gICAgbnVtTnVtZXJpY2FsVmFsdWVzID0gbnVtZXJpY2FsVmFsdWVzLmxlbmd0aCxcbiAgICBkZWZhdWx0VmFsdWUgPSB7XG4gICAgY3VycmVudDogMCxcbiAgICB2ZWxvY2l0eTogMCxcbiAgICBzcGVlZDogMCxcbiAgICBmcmFtZUNoYW5nZTogMFxufTtcblxuZnVuY3Rpb24gY2hlY2tOdW1lcmljYWxWYWx1ZShuYW1lKSB7XG4gICAgcmV0dXJuIG51bWVyaWNhbFZhbHVlcy5pbmRleE9mKG5hbWUpID4gLTE7XG59XG5cbi8qXG4gICAgQ2hlY2sgUm9sZSB0eXBlTWFwcyB0byBzZWUgaWYgdGhpcyB2YWx1ZSBuYW1lIGhhcyBiZWVuIG1hcHBlZFxuICAgIHRvIGEgc3BlY2lmaWMgdmFsdWUgdHlwZVxuXG4gICAgQHBhcmFtIFtzdHJpbmddXG4gICAgQHBhcmFtIFthcnJheV1cbiAgICBAcmV0dXJucyBbc3RyaW5nXTogVmFsdWUgdHlwZVxuKi9cbmZ1bmN0aW9uIGNoZWNrUm9sZXMobmFtZSwgcm9sZXMpIHtcbiAgICB2YXIgdmFsdWVUeXBlO1xuXG4gICAgZWFjaChyb2xlcywgZnVuY3Rpb24gKGtleSwgcm9sZSkge1xuICAgICAgICBpZiAocm9sZS5fdHlwZU1hcCkge1xuICAgICAgICAgICAgdmFsdWVUeXBlID0gcm9sZS5fdHlwZU1hcFtyb2xlLm1hcChuYW1lKV0gfHwgdmFsdWVUeXBlO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdmFsdWVUeXBlO1xufVxuXG4vKlxuICAgIENoZWNrIHZhbHVlIGZvciBzcGVjaWFsIHR5cGVcblxuICAgIEBwYXJhbSBbb2JqZWN0XVxuICAgIEBwYXJhbSBbb2JqZWN0XVxuICAgIEBwYXJhbSBbb2JqZWN0XVxuICAgIEBwYXJhbSBbc3RyaW5nXVxuICAgIEByZXR1cm5zIFtzdHJpbmcgfHwgZmFsc2VdXG4qL1xuZnVuY3Rpb24gY2hlY2tWYWx1ZVR5cGUoZXhpc3RpbmdWYWx1ZSwgbmV3VmFsdWUsIHNjb3BlLCB2YWx1ZU5hbWUpIHtcbiAgICB2YXIgdmFsdWVUeXBlO1xuXG4gICAgLy8gQ2hlY2sgZXhpc3RpbmcgdmFsdWUgZm9yIHR5cGUgYWxyZWFkeSBzZXRcbiAgICBpZiAoZXhpc3RpbmdWYWx1ZSAmJiBleGlzdGluZ1ZhbHVlLnR5cGUpIHtcbiAgICAgICAgdmFsdWVUeXBlID0gZXhpc3RpbmdWYWx1ZS50eXBlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9yIGNoZWNrIFJvbGUgX3R5cGVNYXAgcHJvcGVydGllc1xuICAgICAgICBpZiAoc2NvcGUucm9sZXMpIHtcbiAgICAgICAgICAgIHZhbHVlVHlwZSA9IGNoZWNrUm9sZXModmFsdWVOYW1lLCBzY29wZS5yb2xlcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5hbGx5IHJ1biB0ZXN0c1xuICAgICAgICBpZiAoIXZhbHVlVHlwZSAmJiB1dGlscy5pc1N0cmluZyhuZXdWYWx1ZS5jdXJyZW50KSkge1xuICAgICAgICAgICAgdmFsdWVUeXBlID0gdmFsdWVUeXBlc01hbmFnZXIudGVzdChuZXdWYWx1ZS5jdXJyZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZVR5cGU7XG59XG5cbi8qXG4gICAgUmVzb2x2ZSBhIHByb3BlcnR5XG5cbiAgICBAcGFyYW0gW3N0cmluZ11cbiAgICBAcGFyYW0gW3N0cmluZyB8fCBmdW5jdGlvbiB8fCBudW1iZXJdXG4gICAgQHBhcmFtIFtvYmplY3RdXG4gICAgQHBhcmFtIFtvYmplY3RdXG4gICAgQHJldHVybnMgW251bWJlcl1cbiovXG5mdW5jdGlvbiByZXNvbHZlKG5hbWUsIHByb3AsIHZhbHVlLCBzY29wZSkge1xuICAgIHZhciBpc051bWVyaWNhbFZhbHVlID0gY2hlY2tOdW1lcmljYWxWYWx1ZShuYW1lKTtcblxuICAgIC8vIElmIGZ1bmN0aW9uLCByZXNvbHZlXG4gICAgaWYgKHV0aWxzLmlzRnVuYyhwcm9wKSAmJiBpc051bWVyaWNhbFZhbHVlKSB7XG4gICAgICAgIHByb3AgPSBwcm9wLmNhbGwoc2NvcGUsIHNjb3BlKTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdHJpbmcsIGNoZWNrIGZvciByZWxhdGl2ZSBudW1iZXJzIGFuZCB1bml0c1xuICAgIGlmICh1dGlscy5pc1N0cmluZyhwcm9wKSkge1xuICAgICAgICAvLyBJZiByZWxhdGl2ZSB2YWx1ZVxuICAgICAgICBpZiAocHJvcC5pbmRleE9mKCc9JykgPiAwKSB7XG4gICAgICAgICAgICBwcm9wID0gY2FsYy5yZWxhdGl2ZVZhbHVlKHZhbHVlLmN1cnJlbnQsIHByb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdW5pdFxuICAgICAgICBpZiAoaXNOdW1lcmljYWxWYWx1ZSkge1xuICAgICAgICAgICAgc3BsaXRVbml0KHByb3AsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc051bWVyaWNhbFZhbHVlKSB7XG4gICAgICAgIHByb3AgPSBwYXJzZUZsb2F0KHByb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xufVxuXG4vKlxuICAgIFNwbGl0IGEgdmFsdWUgaW50byBzdWItdmFsdWVzXG5cbiAgICBAcGFyYW0gW3N0cmluZ11cbiAgICBAcGFyYW0gW29iamVjdF1cbiAgICBAcGFyYW0gW29iamVjdF1cbiAgICBAcGFyYW0gW3ZhbHVlVHlwZUhhbmRsZXJdXG4gICAgQHJldHVybnMgW29iamVjdF1cbiovXG5mdW5jdGlvbiBzcGxpdChuYW1lLCB2YWx1ZSwgc2NvcGUsIHZhbHVlVHlwZUhhbmRsZXIpIHtcbiAgICB2YXIgc3BsaXRWYWx1ZXMgPSB7fSxcbiAgICAgICAgaSA9IDA7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IG51bWVyaWNhbFZhbHVlc1tpXTtcbiAgICAgICAgdmFyIHNwbGl0UHJvcCA9IHt9O1xuXG4gICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZVByb3AgPSB2YWx1ZVtwcm9wTmFtZV07XG5cbiAgICAgICAgICAgIC8vIElmIHdlIG5lZWQgdG8gZmlyc3QgcmVzb2x2ZSB0aGlzLCByZXNvbHZlXG4gICAgICAgICAgICBpZiAodXRpbHMuaXNGdW5jKHZhbHVlUHJvcCkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVByb3AgPSB2YWx1ZVByb3AuY2FsbChzY29wZSwgc2NvcGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXV0aWxzLmlzU3RyaW5nKHZhbHVlUHJvcCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2NvbnRpbnVlJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3BsaXRQcm9wID0gdmFsdWVUeXBlSGFuZGxlci5zcGxpdCh2YWx1ZVByb3ApO1xuXG4gICAgICAgICAgICAvLyBBc3NpZ24gc3BsaXQgcHJvcGVydGllcyB0byBlYWNoIGNoaWxkIHZhbHVlXG4gICAgICAgICAgICBlYWNoKHNwbGl0UHJvcCwgZnVuY3Rpb24gKGtleSwgcHJvcCkge1xuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgdmFsdWUgaWYgbm9uZSBleGlzdHNcbiAgICAgICAgICAgICAgICBzcGxpdFZhbHVlc1trZXldID0gc3BsaXRWYWx1ZXNba2V5XSB8fCB1dGlscy5jb3B5KHZhbHVlVHlwZXNNYW5hZ2VyLmRlZmF1bHRQcm9wcyh2YWx1ZS50eXBlLCBrZXkpKTtcbiAgICAgICAgICAgICAgICBzcGxpdFZhbHVlc1trZXldW3Byb3BOYW1lXSA9IHByb3A7XG5cbiAgICAgICAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoc3BsaXRQcm9wW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0VW5pdChzcGxpdFZhbHVlc1trZXldW3Byb3BOYW1lXSwgc3BsaXRWYWx1ZXNba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICg7IGkgPCBudW1OdW1lcmljYWxWYWx1ZXM7IGkrKykge1xuICAgICAgICB2YXIgX3JldCA9IF9sb29wKCk7XG5cbiAgICAgICAgaWYgKF9yZXQgPT09ICdjb250aW51ZScpIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHJldHVybiBzcGxpdFZhbHVlcztcbn1cblxuLypcbiAgICBTcGxpdCB2YWx1ZSBpbnRvIG51bWJlciBhbmQgdW5pdCwgYW5kIHNldCB1bml0IHRvIHZhbHVlXG5cbiAgICBAcGFyYW0gW3N0cmluZ11cbiAgICBAcGFyYW0gW29iamVjdF1cbiovXG5mdW5jdGlvbiBzcGxpdFVuaXQocHJvcGVydHksIGhvc3RWYWx1ZSkge1xuICAgIGlmICh1dGlscy5pc051bShwcm9wZXJ0eSkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgIH1cbiAgICB2YXIgcmV0dXJuVmFsID0gcHJvcGVydHk7XG5cbiAgICB2YXIgX3V0aWxzJHNwbGl0VmFsVW5pdCA9IHV0aWxzLnNwbGl0VmFsVW5pdChwcm9wZXJ0eSk7XG5cbiAgICB2YXIgdmFsdWUgPSBfdXRpbHMkc3BsaXRWYWxVbml0LnZhbHVlO1xuICAgIHZhciB1bml0ID0gX3V0aWxzJHNwbGl0VmFsVW5pdC51bml0O1xuXG4gICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuVmFsID0gdmFsdWU7XG4gICAgICAgIGlmICh1bml0KSB7XG4gICAgICAgICAgICBob3N0VmFsdWUudW5pdCA9IHVuaXQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmV0dXJuVmFsO1xufVxuXG4vKlxuICAgIFByZXByb2Nlc3MgaW5jb21pbmcgdmFsdWVzLCBzcGxpdHRpbmcgbm9uLW51bWVyaWNhbCB2YWx1ZXNcbiAgICBpbnRvIHN1Yi12YWx1ZXMgaWUgaGV4XG5cbiAgICBAcGFyYW0gW29iamVjdF1cbiAgICBAcGFyYW0gW29iamVjdF1cbiAgICBAcGFyYW0gW29iamVjdF1cbiAgICBAcGFyYW0gW3N0cmluZ11cbiovXG5mdW5jdGlvbiBwcmVwcm9jZXNzKGV4aXN0aW5nLCBpbmNvbWluZywgc2NvcGUsIGRlZmF1bHRQcm9wKSB7XG4gICAgdmFyIHZhbHVlcyA9IHt9O1xuXG4gICAgZWFjaChpbmNvbWluZywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nVmFsdWUgPSBleGlzdGluZ1trZXldLFxuICAgICAgICAgICAgbmV3VmFsdWUgPSB7fTtcblxuICAgICAgICBpZiAodXRpbHMuaXNPYmoodmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3VmFsdWVbZGVmYXVsdFByb3BdID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB2YWx1ZSBkb2Vzbid0IGhhdmUgYSBzcGVjaWFsIHR5cGUsIGNoZWNrIGZvciBvbmVcbiAgICAgICAgbmV3VmFsdWUudHlwZSA9IGNoZWNrVmFsdWVUeXBlKGV4aXN0aW5nVmFsdWUsIG5ld1ZhbHVlLCBzY29wZSwga2V5KTtcblxuICAgICAgICB2YWx1ZXNba2V5XSA9IG5ld1ZhbHVlO1xuXG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSB0eXBlIHByb3BlcnR5LCBzcGxpdC9hc3NpZ24gZGVmYXVsdCBwcm9wc1xuICAgICAgICBpZiAobmV3VmFsdWUudHlwZSkge1xuICAgICAgICAgICAgdmFyIHR5cGVIYW5kbGVyID0gdmFsdWVUeXBlc01hbmFnZXJbbmV3VmFsdWUudHlwZV07XG5cbiAgICAgICAgICAgIC8vIElmIHZhbHVlVHlwZSBoYW5kbGVyIGhhcyBhIHNwbGl0IGZ1bmN0aW9uLCBzcGxpdCB0aGlzIHZhbHVlXG4gICAgICAgICAgICBpZiAodHlwZUhhbmRsZXIuc3BsaXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3BsaXRWYWx1ZXMgPSBzcGxpdChrZXksIG5ld1ZhbHVlLCBzY29wZSwgdHlwZUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlLmNoaWxkcmVuID0ge307XG5cbiAgICAgICAgICAgICAgICBlYWNoKHNwbGl0VmFsdWVzLCBmdW5jdGlvbiAoY2hpbGROYW1lLCBjaGlsZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVhY2gobmV3VmFsdWUsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgZ3JlYXQgaXMgaXRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgIT09ICdjaGlsZHJlbicgJiYga2V5ICE9PSAnYWN0aW9uJyAmJiBjaGlsZFZhbHVlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkVmFsdWVba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjaGlsZFZhbHVlLnBhcmVudCA9IGNoaWxkVmFsdWUubmFtZSA9IGtleTtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRWYWx1ZS5wcm9wTmFtZSA9IGNoaWxkTmFtZTtcblxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY2hpbGRWYWx1ZS50eXBlO1xuXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLmNoaWxkcmVuW2NoaWxkTmFtZV0gPSB2YWx1ZXNba2V5ICsgY2hpbGROYW1lXSA9IGNoaWxkVmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZUhhbmRsZXIudGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUudGVtcGxhdGUgPSBleGlzdGluZ1ZhbHVlID8gZXhpc3RpbmdWYWx1ZS50ZW1wbGF0ZSA6IHR5cGVIYW5kbGVyLnRlbXBsYXRlKG5ld1ZhbHVlLmN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE9yIGp1c3QgYXNzaWduIGRlZmF1bHQgcHJvcGVydGllcyBmb3IgdGhpcyB2YWx1ZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2tleV0gPSB1dGlscy5tZXJnZSh2YWx1ZVR5cGVzTWFuYWdlci5kZWZhdWx0UHJvcHMobmV3VmFsdWUudHlwZSwga2V5KSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZhbHVlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvKlxuICAgICAgICBGbGlwIHZhbHVlIHRhcmdldC9vcmlnaW5cbiAgICAqL1xuICAgIGZsaXA6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdmFsdWUudGFyZ2V0ICE9PSB1bmRlZmluZWQgPyB2YWx1ZS50YXJnZXQgOiB2YWx1ZS5jdXJyZW50O1xuICAgICAgICB2YWx1ZS50YXJnZXQgPSB2YWx1ZS50byA9IHZhbHVlLm9yaWdpbjtcbiAgICAgICAgdmFsdWUub3JpZ2luID0gdGFyZ2V0O1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAgICBNZXJnZSBleGlzdGluZyBhbmQgaW5jb21pbmcgdmFsdWVzLCByZXNvbHZpbmcgcHJvcGVydGllc1xuICAgICAgICBzZXQgYXMgZnVuY3Rpb25zIGFuZCBzcGxpdHRpbmcgbm9uLW51bWVyaWNhbCB2YWx1ZXMgaWUgaGV4XG4gICAgICAgICBAcGFyYW0gW29iamVjdF1cbiAgICAgICAgQHBhcmFtIFtvYmplY3RdXG4gICAgICAgIEBwYXJhbSBbb2JqZWN0XVxuICAgICAgICBAcGFyYW0gW3N0cmluZ10gKG9wdGlvbmFsKVxuICAgICAgICBAcGFyYW0gW29iamVjdF1cbiAgICAgICAgQHJldHVybnMgW29iamVjdF06IE5ldyB2YWx1ZXMgb2JqZWN0XG4gICAgKi9cbiAgICBwcm9jZXNzOiBmdW5jdGlvbiAoZXhpc3RpbmcsIGluY29taW5nLCBpbmhlcml0LCBkZWZhdWx0UHJvcCwgc2NvcGUpIHtcbiAgICAgICAgZXhpc3RpbmcgPSBleGlzdGluZyB8fCB7fTtcbiAgICAgICAgZGVmYXVsdFByb3AgPSBkZWZhdWx0UHJvcCB8fCAnY3VycmVudCc7XG4gICAgICAgIHZhciBwcmVwcm9jZXNzZWQgPSBwcmVwcm9jZXNzKGV4aXN0aW5nLCBpbmNvbWluZywgc2NvcGUsIGRlZmF1bHRQcm9wKTtcblxuICAgICAgICBlYWNoKHByZXByb2Nlc3NlZCwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGV4aXN0aW5nW2tleV0gfHwgdXRpbHMuY29weShkZWZhdWx0VmFsdWUpLFxuICAgICAgICAgICAgICAgIGhhc0NoaWxkcmVuID0gdmFsdWUuY2hpbGRyZW4gIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0QWN0aW9uVmFsdWUgPSBpbmhlcml0LmFjdGlvbiA/IGluaGVyaXQuYWN0aW9uLmdldERlZmF1bHRWYWx1ZSgpIDoge307XG5cbiAgICAgICAgICAgIHZhbHVlLmFjdGlvbiA9IGluaGVyaXQuYWN0aW9uO1xuXG4gICAgICAgICAgICBlYWNoKGRlZmF1bHRBY3Rpb25WYWx1ZSwgZnVuY3Rpb24gKHByb3BOYW1lLCBkZWZhdWx0QWN0aW9uUHJvcCkge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlW3Byb3BOYW1lXSA9IGluaGVyaXQuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmICF2YWx1ZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgPyBpbmhlcml0W3Byb3BOYW1lXSA6IGRlZmF1bHRBY3Rpb25Qcm9wO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGVhY2godmFsdWUsIGZ1bmN0aW9uICh2YWx1ZU5hbWUsIHZhbHVlUHJvcCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHByb3BlcnR5IGlzIG5vdCB1bmRlZmluZWQgb3IgYSBudW1iZXIsIHJlc29sdmVcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVQcm9wICE9PSB1bmRlZmluZWQgJiYgIWlzTnVtKHZhbHVlUHJvcCkgJiYgIWhhc0NoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlUHJvcCA9IHJlc29sdmUodmFsdWVOYW1lLCB2YWx1ZVByb3AsIG5ld1ZhbHVlLCBzY29wZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbmV3VmFsdWVbdmFsdWVOYW1lXSA9IHZhbHVlUHJvcDtcblxuICAgICAgICAgICAgICAgIC8vIFNldCBpbnRlcm5hbCB0YXJnZXQgaWYgdGhpcyBwcm9wZXJ0eSBpcyAndG8nXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlTmFtZSA9PT0gJ3RvJykge1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZS50YXJnZXQgPSBuZXdWYWx1ZS50bztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbmV3VmFsdWUub3JpZ2luID0gbmV3VmFsdWUuY3VycmVudDtcbiAgICAgICAgICAgIG5ld1ZhbHVlLmhhc1JhbmdlID0gaXNOdW0obmV3VmFsdWUubWluKSB8fCBpc051bShuZXdWYWx1ZS5tYXgpID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgICAgICBleGlzdGluZ1trZXldID0gbmV3VmFsdWU7XG4gICAgICAgICAgICBzY29wZS51cGRhdGVPcmRlcihrZXksIHV0aWxzLmhhcyhuZXdWYWx1ZSwgJ3dhdGNoJyksIGhhc0NoaWxkcmVuKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5aaGJIVmxMVzl3WlhKaGRHbHZibk11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3hKUVVGSkxHbENRVUZwUWl4SFFVRkhMRTlCUVU4c1EwRkJReXgzUWtGQmQwSXNRMEZCUXp0SlFVTnlSQ3hKUVVGSkxFZEJRVWNzVDBGQlR5eERRVUZETEdGQlFXRXNRMEZCUXp0SlFVTTNRaXhMUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEdOQlFXTXNRMEZCUXp0SlFVTXZRaXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVczdTVUZEYmtJc1NVRkJTU3hIUVVGSExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTTdPMEZCUlhSQ0xFbEJRVTBzWlVGQlpTeEhRVUZITEVOQlFVTXNVMEZCVXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEZWQlFWVXNSVUZCUlN4VlFVRlZMRVZCUVVVc1VVRkJVU3hGUVVGRkxHTkJRV01zUTBGQlF6dEpRVU55Unl4clFrRkJhMElzUjBGQlJ5eGxRVUZsTEVOQlFVTXNUVUZCVFR0SlFVTXpReXhaUVVGWkxFZEJRVWM3UVVGRFdDeFhRVUZQTEVWQlFVVXNRMEZCUXp0QlFVTldMRmxCUVZFc1JVRkJSU3hEUVVGRE8wRkJRMWdzVTBGQlN5eEZRVUZGTEVOQlFVTTdRVUZEVWl4bFFVRlhMRVZCUVVVc1EwRkJRenREUVVOcVFpeERRVUZET3p0QlFVVk9MRk5CUVZNc2JVSkJRVzFDTEVOQlFVTXNTVUZCU1N4RlFVRkZPMEZCUXk5Q0xGZEJRVkVzWlVGQlpTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlJUdERRVU12UXpzN096czdPenM3T3p0QlFVRkJMRUZCVlVRc1UwRkJVeXhWUVVGVkxFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlR0QlFVTTNRaXhSUVVGSkxGTkJRVk1zUTBGQlF6czdRVUZGWkN4UlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxGVkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCU3p0QlFVTjJRaXhaUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVTdRVUZEWml4eFFrRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEpRVUZKTEZOQlFWTXNRMEZCUXp0VFFVTXhSRHRMUVVOS0xFTkJRVU1zUTBGQlF6czdRVUZGU0N4WFFVRlBMRk5CUVZNc1EwRkJRenREUVVOd1FqczdPenM3T3pzN096czdRVUZCUVN4QlFWZEVMRk5CUVZNc1kwRkJZeXhEUVVGRExHRkJRV0VzUlVGQlJTeFJRVUZSTEVWQlFVVXNTMEZCU3l4RlFVRkZMRk5CUVZNc1JVRkJSVHRCUVVNdlJDeFJRVUZKTEZOQlFWTTdPenRCUVVGRExFRkJSMlFzVVVGQlNTeGhRVUZoTEVsQlFVa3NZVUZCWVN4RFFVRkRMRWxCUVVrc1JVRkJSVHRCUVVOeVF5eHBRa0ZCVXl4SFFVRkhMR0ZCUVdFc1EwRkJReXhKUVVGSkxFTkJRVU03UzBGRmJFTXNUVUZCVFRzN1FVRkZTQ3haUVVGSkxFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZEWWl4eFFrRkJVeXhIUVVGSExGVkJRVlVzUTBGQlF5eFRRVUZUTEVWQlFVVXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xTkJRMnhFT3pzN1FVRkJRU3hCUVVkRUxGbEJRVWtzUTBGQlF5eFRRVUZUTEVsQlFVa3NTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVTdRVUZEYUVRc2NVSkJRVk1zUjBGQlJ5eHBRa0ZCYVVJc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMU5CUTNoRU8wdEJRMG83TzBGQlJVUXNWMEZCVHl4VFFVRlRMRU5CUVVNN1EwRkRjRUk3T3pzN096czdPenM3TzBGQlFVRXNRVUZYUkN4VFFVRlRMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVN1FVRkRka01zVVVGQlNTeG5Ra0ZCWjBJc1IwRkJSeXh0UWtGQmJVSXNRMEZCUXl4SlFVRkpMRU5CUVVNN096dEJRVUZETEVGQlIycEVMRkZCUVVrc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4blFrRkJaMElzUlVGQlJUdEJRVU40UXl4WlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1MwRkRiRU03T3p0QlFVRkJMRUZCUjBRc1VVRkJTU3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPenRCUVVWMFFpeFpRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTzBGQlEzWkNMR2RDUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzFOQlEyeEVPenM3UVVGQlFTeEJRVWRFTEZsQlFVa3NaMEpCUVdkQ0xFVkJRVVU3UVVGRGJFSXNjVUpCUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdVMEZETVVJN1MwRkRTanM3UVVGRlJDeFJRVUZKTEdkQ1FVRm5RaXhGUVVGRk8wRkJRMnhDTEZsQlFVa3NSMEZCUnl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRE0wSTdPMEZCUlVRc1YwRkJUeXhKUVVGSkxFTkJRVU03UTBGRFpqczdPenM3T3pzN096czdRVUZCUVN4QlFWZEVMRk5CUVZNc1MwRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMR2RDUVVGblFpeEZRVUZGTzBGQlEycEVMRkZCUVVrc1YwRkJWeXhIUVVGSExFVkJRVVU3VVVGRGFFSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenM3TzBGQlIwNHNXVUZCU1N4UlFVRlJMRWRCUVVjc1pVRkJaU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEyeERMRmxCUVVrc1UwRkJVeXhIUVVGSExFVkJRVVVzUTBGQlF6czdRVUZGYmtJc1dVRkJTU3hMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZPMEZCUTJoRExHZENRVUZKTEZOQlFWTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRE96czdRVUZCUXl4QlFVZG9ReXhuUWtGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhGUVVGRk8wRkJRM3BDTEhsQ1FVRlRMRWRCUVVjc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1lVRkROVU03TzBGQlJVUXNaMEpCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4RlFVRkZPMEZCUXpWQ0xHdERRVUZUTzJGQlExbzdPMEZCUlVRc2NVSkJRVk1zUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZET3pzN1FVRkJReXhCUVVjNVF5eG5Ra0ZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hWUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVczdPMEZCUlROQ0xESkNRVUZYTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1YwRkJWeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNXVUZCV1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTnVSeXd5UWtGQlZ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF6czdRVUZGYkVNc2IwSkJRVWtzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJUdEJRVU5vUXl3MlFrRkJVeXhEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSU3hYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0cFFrRkRNMFE3WVVGRFNpeERRVUZETEVOQlFVTTdVMEZEVGpzN08wRkJOVUpNTEZkQlFVOHNRMEZCUXl4SFFVRkhMR3RDUVVGclFpeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPenM3YVVOQllYaENMRk5CUVZNN1MwRm5RbkJDT3p0QlFVVkVMRmRCUVU4c1YwRkJWeXhEUVVGRE8wTkJRM1JDT3pzN096czdPenRCUVVGQkxFRkJVVVFzVTBGQlV5eFRRVUZUTEVOQlFVTXNVVUZCVVN4RlFVRkZMRk5CUVZNc1JVRkJSVHRCUVVOd1F5eFJRVUZKTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVU3UVVGQlJTeGxRVUZQTEZGQlFWRXNRMEZCUXp0TFFVRkZPMEZCUXpORExGRkJRVUVzVTBGQlV5eEhRVUZITEZGQlFWRXNRMEZCUVRzN09FSkJRMFlzUzBGQlN5eERRVUZETEZsQlFWa3NRMEZCUXl4UlFVRlJMRU5CUVVNN08xRkJRVFZETEV0QlFVc3NkVUpCUVV3c1MwRkJTenRSUVVGRkxFbEJRVWtzZFVKQlFVb3NTVUZCU1RzN1FVRkZha0lzVVVGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSVHRCUVVObUxHbENRVUZUTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUTJ4Q0xGbEJRVWtzU1VGQlNTeEZRVUZGTzBGQlEwNHNjVUpCUVZNc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETzFOQlEzcENPMHRCUTBvN08wRkJSVVFzVjBGQlR5eFRRVUZUTEVOQlFVTTdRMEZEY0VJN096czdPenM3T3pzN08wRkJRVUVzUVVGWFJDeFRRVUZUTEZWQlFWVXNRMEZCUXl4UlFVRlJMRVZCUVVVc1VVRkJVU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFhRVUZYTEVWQlFVVTdRVUZEZUVRc1VVRkJTU3hOUVVGTkxFZEJRVWNzUlVGQlJTeERRVUZET3p0QlFVVm9RaXhSUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEZWQlFVTXNSMEZCUnl4RlFVRkZMRXRCUVVzc1JVRkJTenRCUVVNelFpeFpRVUZKTEdGQlFXRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRE8xbEJRemRDTEZGQlFWRXNSMEZCUnl4RlFVRkZMRU5CUVVNN08wRkJSV3hDTEZsQlFVa3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU53UWl4dlFrRkJVU3hIUVVGSExFdEJRVXNzUTBGQlF6dFRRVU53UWl4TlFVRk5PMEZCUTBnc2IwSkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1UwRkRha003T3p0QlFVRkJMRUZCUjBRc1owSkJRVkVzUTBGQlF5eEpRVUZKTEVkQlFVY3NZMEZCWXl4RFFVRkRMR0ZCUVdFc1JVRkJSU3hSUVVGUkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPenRCUVVWd1JTeGpRVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1VVRkJVVHM3TzBGQlFVTXNRVUZIZGtJc1dVRkJTU3hSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTzBGQlEyWXNaMEpCUVVrc1YwRkJWeXhIUVVGSExHbENRVUZwUWl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU03T3p0QlFVRkRMRUZCUjI1RUxHZENRVUZKTEZkQlFWY3NRMEZCUXl4TFFVRkxMRVZCUVVVN1FVRkRia0lzYjBKQlFVa3NWMEZCVnl4SFFVRkhMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVVzVVVGQlVTeEZRVUZGTEV0QlFVc3NSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRenRCUVVNelJDeDNRa0ZCVVN4RFFVRkRMRkZCUVZFc1IwRkJSeXhGUVVGRkxFTkJRVU03TzBGQlJYWkNMRzlDUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEZWQlFVTXNVMEZCVXl4RlFVRkZMRlZCUVZVc1JVRkJTenRCUVVONlF5eDNRa0ZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hWUVVGRExFZEJRVWNzUlVGQlJTeExRVUZMTEVWQlFVczdPMEZCUlROQ0xEUkNRVUZKTEVkQlFVY3NTMEZCU3l4VlFVRlZMRWxCUVVrc1IwRkJSeXhMUVVGTExGRkJRVkVzU1VGQlNTeFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1UwRkJVeXhGUVVGRk8wRkJRM3BGTEhORFFVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETzNsQ1FVTXpRanR4UWtGRFNpeERRVUZETEVOQlFVTTdPMEZCUlVnc09FSkJRVlVzUTBGQlF5eE5RVUZOTEVkQlFVY3NWVUZCVlN4RFFVRkRMRWxCUVVrc1IwRkJSeXhIUVVGSExFTkJRVU03UVVGRE1VTXNPRUpCUVZVc1EwRkJReXhSUVVGUkxFZEJRVWNzVTBGQlV5eERRVUZET3p0QlFVVm9ReXd5UWtGQlR5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRPenRCUVVWMlFpdzBRa0ZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNSMEZCUnl4SFFVRkhMRk5CUVZNc1EwRkJReXhIUVVGSExGVkJRVlVzUTBGQlF6dHBRa0ZEZGtVc1EwRkJReXhEUVVGRE96dEJRVVZJTEc5Q1FVRkpMRmRCUVZjc1EwRkJReXhSUVVGUkxFVkJRVVU3UVVGRGRFSXNORUpCUVZFc1EwRkJReXhSUVVGUkxFZEJRVWNzWVVGQllTeEhRVUZITEdGQlFXRXNRMEZCUXl4UlFVRlJMRWRCUVVjc1YwRkJWeXhEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN2FVSkJRM1pIT3pzN1FVRkJRU3hoUVVkS0xFMUJRVTA3UVVGRFNDd3dRa0ZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zV1VGQldTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdhVUpCUXpOR08xTkJRMG83UzBGRFNpeERRVUZETEVOQlFVTTdPMEZCUlVnc1YwRkJUeXhOUVVGTkxFTkJRVU03UTBGRGFrSTdPMEZCUlVRc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ6czdPenM3UVVGTFlpeFJRVUZKTEVWQlFVVXNWVUZCVlN4TFFVRkxMRVZCUVVVN1FVRkRia0lzV1VGQlNTeE5RVUZOTEVkQlFVY3NRVUZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hMUVVGTExGTkJRVk1zUjBGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU03UVVGRGVrVXNZVUZCU3l4RFFVRkRMRTFCUVUwc1IwRkJSeXhMUVVGTExFTkJRVU1zUlVGQlJTeEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRka01zWVVGQlN5eERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1MwRkRla0k3T3pzN096czdPenM3T3p0QlFXRkVMRmRCUVU4c1JVRkJSU3hWUVVGVkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVWQlFVVXNUMEZCVHl4RlFVRkZMRmRCUVZjc1JVRkJSU3hMUVVGTExFVkJRVVU3UVVGRGFFVXNaMEpCUVZFc1IwRkJSeXhSUVVGUkxFbEJRVWtzUlVGQlJTeERRVUZETzBGQlF6RkNMRzFDUVVGWExFZEJRVWNzVjBGQlZ5eEpRVUZKTEZOQlFWTXNRMEZCUXp0QlFVTjJReXhaUVVGSkxGbEJRVmtzUjBGQlJ5eFZRVUZWTEVOQlFVTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1JVRkJSU3hMUVVGTExFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVTTdPMEZCUlhSRkxGbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVXNWVUZCUXl4SFFVRkhMRVZCUVVVc1MwRkJTeXhGUVVGTE8wRkJReTlDTEdkQ1FVRkpMRkZCUVZFc1IwRkJSeXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU03WjBKQlEzQkVMRmRCUVZjc1IwRkJTU3hMUVVGTExFTkJRVU1zVVVGQlVTeExRVUZMTEZOQlFWTXNRVUZCUXp0blFrRkROVU1zYTBKQlFXdENMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMR1ZCUVdVc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF6czdRVUZGYUVZc2FVSkJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJRenM3UVVGRk9VSXNaMEpCUVVrc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4VlFVRkRMRkZCUVZFc1JVRkJSU3hwUWtGQmFVSXNSVUZCU3p0QlFVTjBSQ3gzUWtGQlVTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRUZCUVVNc1QwRkJUeXhEUVVGRExHTkJRV01zUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhqUVVGakxFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVa3NUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExHbENRVUZwUWl4RFFVRkRPMkZCUTNSSkxFTkJRVU1zUTBGQlF6czdRVUZGU0N4blFrRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeFZRVUZETEZOQlFWTXNSVUZCUlN4VFFVRlRMRVZCUVVzN08wRkJSV3hETEc5Q1FVRkpMRk5CUVZNc1MwRkJTeXhUUVVGVExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVU3UVVGRE9VUXNOa0pCUVZNc1IwRkJSeXhQUVVGUExFTkJRVU1zVTBGQlV5eEZRVUZGTEZOQlFWTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03YVVKQlF6bEVPenRCUVVWRUxIZENRVUZSTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1UwRkJVenM3TzBGQlFVTXNRVUZIYUVNc2IwSkJRVWtzVTBGQlV5eExRVUZMTEVsQlFVa3NSVUZCUlR0QlFVTndRaXcwUWtGQlVTeERRVUZETEUxQlFVMHNSMEZCUnl4UlFVRlJMRU5CUVVNc1JVRkJSU3hEUVVGRE8ybENRVU5xUXp0aFFVTktMRU5CUVVNc1EwRkJRenM3UVVGRlNDeHZRa0ZCVVN4RFFVRkRMRTFCUVUwc1IwRkJSeXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETzBGQlEyNURMRzlDUVVGUkxFTkJRVU1zVVVGQlVTeEhRVUZITEVGQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSkxFbEJRVWtzUjBGQlJ5eExRVUZMTEVOQlFVTTdPMEZCUldoR0xHOUNRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRE8wRkJRM3BDTEdsQ1FVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRExFZEJRVWNzUlVGQlJTeExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hQUVVGUExFTkJRVU1zUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXp0VFFVTnlSU3hEUVVGRExFTkJRVU03TzBGQlJVZ3NaVUZCVHl4UlFVRlJMRU5CUVVNN1MwRkRia0k3UTBGRFNpeERRVUZESWl3aVptbHNaU0k2SW5aaGJIVmxMVzl3WlhKaGRHbHZibk11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnZG1Gc2RXVlVlWEJsYzAxaGJtRm5aWElnUFNCeVpYRjFhWEpsS0NjdUxpOTJZV3gxWlMxMGVYQmxjeTl0WVc1aFoyVnlKeWtzWEc0Z0lDQWdZMkZzWXlBOUlISmxjWFZwY21Vb0p5NHVMMmx1WXk5allXeGpKeWtzWEc0Z0lDQWdkWFJwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMaTlwYm1NdmRYUnBiSE1uS1N4Y2JpQWdJQ0JwYzA1MWJTQTlJSFYwYVd4ekxtbHpUblZ0TEZ4dUlDQWdJR1ZoWTJnZ1BTQjFkR2xzY3k1bFlXTm9PMXh1WEc1amIyNXpkQ0J1ZFcxbGNtbGpZV3hXWVd4MVpYTWdQU0JiSjJOMWNuSmxiblFuTENBbmRHOG5MQ0FuYldsdUp5d2dKMjFoZUNjc0lDZDJaV3h2WTJsMGVTY3NJQ2RtY21samRHbHZiaWNzSUNkemNISnBibWNuTENBbllXTmpaV3hsY21GMGFXOXVKMTBzWEc0Z0lDQWdiblZ0VG5WdFpYSnBZMkZzVm1Gc2RXVnpJRDBnYm5WdFpYSnBZMkZzVm1Gc2RXVnpMbXhsYm1kMGFDeGNiaUFnSUNCa1pXWmhkV3gwVm1Gc2RXVWdQU0I3WEc0Z0lDQWdJQ0FnSUdOMWNuSmxiblE2SURBc1hHNGdJQ0FnSUNBZ0lIWmxiRzlqYVhSNU9pQXdMRnh1SUNBZ0lDQWdJQ0J6Y0dWbFpEb2dNQ3hjYmlBZ0lDQWdJQ0FnWm5KaGJXVkRhR0Z1WjJVNklEQmNiaUFnSUNCOU8xeHVYRzVtZFc1amRHbHZiaUJqYUdWamEwNTFiV1Z5YVdOaGJGWmhiSFZsS0c1aGJXVXBJSHRjYmlBZ0lDQnlaWFIxY200Z0tHNTFiV1Z5YVdOaGJGWmhiSFZsY3k1cGJtUmxlRTltS0c1aGJXVXBJRDRnTFRFcE8xeHVmVnh1WEc0dktseHVJQ0FnSUVOb1pXTnJJRkp2YkdVZ2RIbHdaVTFoY0hNZ2RHOGdjMlZsSUdsbUlIUm9hWE1nZG1Gc2RXVWdibUZ0WlNCb1lYTWdZbVZsYmlCdFlYQndaV1JjYmlBZ0lDQjBieUJoSUhOd1pXTnBabWxqSUhaaGJIVmxJSFI1Y0dWY2JseHVJQ0FnSUVCd1lYSmhiU0JiYzNSeWFXNW5YVnh1SUNBZ0lFQndZWEpoYlNCYllYSnlZWGxkWEc0Z0lDQWdRSEpsZEhWeWJuTWdXM04wY21sdVoxMDZJRlpoYkhWbElIUjVjR1ZjYmlvdlhHNW1kVzVqZEdsdmJpQmphR1ZqYTFKdmJHVnpLRzVoYldVc0lISnZiR1Z6S1NCN1hHNGdJQ0FnZG1GeUlIWmhiSFZsVkhsd1pUdGNibHh1SUNBZ0lHVmhZMmdvY205c1pYTXNJQ2hyWlhrc0lISnZiR1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hKdmJHVXVYM1I1Y0dWTllYQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsVkhsd1pTQTlJSEp2YkdVdVgzUjVjR1ZOWVhCYmNtOXNaUzV0WVhBb2JtRnRaU2xkSUh4OElIWmhiSFZsVkhsd1pUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIWmhiSFZsVkhsd1pUdGNibjFjYmx4dUx5cGNiaUFnSUNCRGFHVmpheUIyWVd4MVpTQm1iM0lnYzNCbFkybGhiQ0IwZVhCbFhHNWNiaUFnSUNCQWNHRnlZVzBnVzI5aWFtVmpkRjFjYmlBZ0lDQkFjR0Z5WVcwZ1cyOWlhbVZqZEYxY2JpQWdJQ0JBY0dGeVlXMGdXMjlpYW1WamRGMWNiaUFnSUNCQWNHRnlZVzBnVzNOMGNtbHVaMTFjYmlBZ0lDQkFjbVYwZFhKdWN5QmJjM1J5YVc1bklIeDhJR1poYkhObFhWeHVLaTljYm1aMWJtTjBhVzl1SUdOb1pXTnJWbUZzZFdWVWVYQmxLR1Y0YVhOMGFXNW5WbUZzZFdVc0lHNWxkMVpoYkhWbExDQnpZMjl3WlN3Z2RtRnNkV1ZPWVcxbEtTQjdYRzRnSUNBZ2RtRnlJSFpoYkhWbFZIbHdaVHRjYmx4dUlDQWdJQzh2SUVOb1pXTnJJR1Y0YVhOMGFXNW5JSFpoYkhWbElHWnZjaUIwZVhCbElHRnNjbVZoWkhrZ2MyVjBYRzRnSUNBZ2FXWWdLR1Y0YVhOMGFXNW5WbUZzZFdVZ0ppWWdaWGhwYzNScGJtZFdZV3gxWlM1MGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUhaaGJIVmxWSGx3WlNBOUlHVjRhWE4wYVc1blZtRnNkV1V1ZEhsd1pUdGNiaUFnSUNCY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0F2THlCUGNpQmphR1ZqYXlCU2IyeGxJRjkwZVhCbFRXRndJSEJ5YjNCbGNuUnBaWE5jYmlBZ0lDQWdJQ0FnYVdZZ0tITmpiM0JsTG5KdmJHVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlZSNWNHVWdQU0JqYUdWamExSnZiR1Z6S0haaGJIVmxUbUZ0WlN3Z2MyTnZjR1V1Y205c1pYTXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdSbWx1WVd4c2VTQnlkVzRnZEdWemRITmNiaUFnSUNBZ0lDQWdhV1lnS0NGMllXeDFaVlI1Y0dVZ0ppWWdkWFJwYkhNdWFYTlRkSEpwYm1jb2JtVjNWbUZzZFdVdVkzVnljbVZ1ZENrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxWSGx3WlNBOUlIWmhiSFZsVkhsd1pYTk5ZVzVoWjJWeUxuUmxjM1FvYm1WM1ZtRnNkV1V1WTNWeWNtVnVkQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkbUZzZFdWVWVYQmxPMXh1ZlZ4dVhHNHZLbHh1SUNBZ0lGSmxjMjlzZG1VZ1lTQndjbTl3WlhKMGVWeHVYRzRnSUNBZ1FIQmhjbUZ0SUZ0emRISnBibWRkWEc0Z0lDQWdRSEJoY21GdElGdHpkSEpwYm1jZ2ZId2dablZ1WTNScGIyNGdmSHdnYm5WdFltVnlYVnh1SUNBZ0lFQndZWEpoYlNCYmIySnFaV04wWFZ4dUlDQWdJRUJ3WVhKaGJTQmJiMkpxWldOMFhWeHVJQ0FnSUVCeVpYUjFjbTV6SUZ0dWRXMWlaWEpkWEc0cUwxeHVablZ1WTNScGIyNGdjbVZ6YjJ4MlpTaHVZVzFsTENCd2NtOXdMQ0IyWVd4MVpTd2djMk52Y0dVcElIdGNiaUFnSUNCc1pYUWdhWE5PZFcxbGNtbGpZV3hXWVd4MVpTQTlJR05vWldOclRuVnRaWEpwWTJGc1ZtRnNkV1VvYm1GdFpTazdYRzVjYmlBZ0lDQXZMeUJKWmlCbWRXNWpkR2x2Yml3Z2NtVnpiMngyWlZ4dUlDQWdJR2xtSUNoMWRHbHNjeTVwYzBaMWJtTW9jSEp2Y0NrZ0ppWWdhWE5PZFcxbGNtbGpZV3hXWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0J3Y205d0lEMGdjSEp2Y0M1allXeHNLSE5qYjNCbExDQnpZMjl3WlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1NXWWdjM1J5YVc1bkxDQmphR1ZqYXlCbWIzSWdjbVZzWVhScGRtVWdiblZ0WW1WeWN5QmhibVFnZFc1cGRITmNiaUFnSUNCcFppQW9kWFJwYkhNdWFYTlRkSEpwYm1jb2NISnZjQ2twSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdTV1lnY21Wc1lYUnBkbVVnZG1Gc2RXVmNiaUFnSUNBZ0lDQWdhV1lnS0hCeWIzQXVhVzVrWlhoUFppZ25QU2NwSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZjQ0E5SUdOaGJHTXVjbVZzWVhScGRtVldZV3gxWlNoMllXeDFaUzVqZFhKeVpXNTBMQ0J3Y205d0tUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklFbG1JSFZ1YVhSY2JpQWdJQ0FnSUNBZ2FXWWdLR2x6VG5WdFpYSnBZMkZzVm1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITndiR2wwVlc1cGRDaHdjbTl3TENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2FYTk9kVzFsY21sallXeFdZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQndjbTl3SUQwZ2NHRnljMlZHYkc5aGRDaHdjbTl3S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjSEp2Y0R0Y2JuMWNibHh1THlwY2JpQWdJQ0JUY0d4cGRDQmhJSFpoYkhWbElHbHVkRzhnYzNWaUxYWmhiSFZsYzF4dVhHNGdJQ0FnUUhCaGNtRnRJRnR6ZEhKcGJtZGRYRzRnSUNBZ1FIQmhjbUZ0SUZ0dlltcGxZM1JkWEc0Z0lDQWdRSEJoY21GdElGdHZZbXBsWTNSZFhHNGdJQ0FnUUhCaGNtRnRJRnQyWVd4MVpWUjVjR1ZJWVc1a2JHVnlYVnh1SUNBZ0lFQnlaWFIxY201eklGdHZZbXBsWTNSZFhHNHFMMXh1Wm5WdVkzUnBiMjRnYzNCc2FYUW9ibUZ0WlN3Z2RtRnNkV1VzSUhOamIzQmxMQ0IyWVd4MVpWUjVjR1ZJWVc1a2JHVnlLU0I3WEc0Z0lDQWdkbUZ5SUhOd2JHbDBWbUZzZFdWeklEMGdlMzBzWEc0Z0lDQWdJQ0FnSUdrZ1BTQXdPMXh1WEc0Z0lDQWdabTl5SUNnN0lHa2dQQ0J1ZFcxT2RXMWxjbWxqWVd4V1lXeDFaWE03SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2NISnZjRTVoYldVZ1BTQnVkVzFsY21sallXeFdZV3gxWlhOYmFWMDdYRzRnSUNBZ0lDQWdJR3hsZENCemNHeHBkRkJ5YjNBZ1BTQjdmVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kbUZzZFdVdWFHRnpUM2R1VUhKdmNHVnlkSGtvY0hKdmNFNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RtRnNkV1ZRY205d0lEMGdkbUZzZFdWYmNISnZjRTVoYldWZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpaaUIzWlNCdVpXVmtJSFJ2SUdacGNuTjBJSEpsYzI5c2RtVWdkR2hwY3l3Z2NtVnpiMngyWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hWMGFXeHpMbWx6Um5WdVl5aDJZV3gxWlZCeWIzQXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVlFjbTl3SUQwZ2RtRnNkV1ZRY205d0xtTmhiR3dvYzJOdmNHVXNJSE5qYjNCbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjFkR2xzY3k1cGMxTjBjbWx1WnloMllXeDFaVkJ5YjNBcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhOd2JHbDBVSEp2Y0NBOUlIWmhiSFZsVkhsd1pVaGhibVJzWlhJdWMzQnNhWFFvZG1Gc2RXVlFjbTl3S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1FYTnphV2R1SUhOd2JHbDBJSEJ5YjNCbGNuUnBaWE1nZEc4Z1pXRmphQ0JqYUdsc1pDQjJZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV0ZqYUNoemNHeHBkRkJ5YjNBc0lDaHJaWGtzSUhCeWIzQXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkRjbVZoZEdVZ2JtVjNJSFpoYkhWbElHbG1JRzV2Ym1VZ1pYaHBjM1J6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCc2FYUldZV3gxWlhOYmEyVjVYU0E5SUhOd2JHbDBWbUZzZFdWelcydGxlVjBnZkh3Z2RYUnBiSE11WTI5d2VTaDJZV3gxWlZSNWNHVnpUV0Z1WVdkbGNpNWtaV1poZFd4MFVISnZjSE1vZG1Gc2RXVXVkSGx3WlN3Z2EyVjVLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCc2FYUldZV3gxWlhOYmEyVjVYVnR3Y205d1RtRnRaVjBnUFNCd2NtOXdPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIVjBhV3h6TG1selUzUnlhVzVuS0hOd2JHbDBVSEp2Y0Z0clpYbGRLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpjR3hwZEZWdWFYUW9jM0JzYVhSV1lXeDFaWE5iYTJWNVhWdHdjbTl3VG1GdFpWMHNJSE53YkdsMFZtRnNkV1Z6VzJ0bGVWMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlITndiR2wwVm1Gc2RXVnpPMXh1ZlZ4dVhHNHZLbHh1SUNBZ0lGTndiR2wwSUhaaGJIVmxJR2x1ZEc4Z2JuVnRZbVZ5SUdGdVpDQjFibWwwTENCaGJtUWdjMlYwSUhWdWFYUWdkRzhnZG1Gc2RXVmNibHh1SUNBZ0lFQndZWEpoYlNCYmMzUnlhVzVuWFZ4dUlDQWdJRUJ3WVhKaGJTQmJiMkpxWldOMFhWeHVLaTljYm1aMWJtTjBhVzl1SUhOd2JHbDBWVzVwZENod2NtOXdaWEowZVN3Z2FHOXpkRlpoYkhWbEtTQjdYRzRnSUNBZ2FXWWdLSFYwYVd4ekxtbHpUblZ0S0hCeWIzQmxjblI1S1NrZ2V5QnlaWFIxY200Z2NISnZjR1Z5ZEhrN0lIMWNiaUFnSUNCc1pYUWdjbVYwZFhKdVZtRnNJRDBnY0hKdmNHVnlkSGtzWEc0Z0lDQWdJQ0FnSUhzZ2RtRnNkV1VzSUhWdWFYUWdmU0E5SUhWMGFXeHpMbk53YkdsMFZtRnNWVzVwZENod2NtOXdaWEowZVNrN1hHNWNiaUFnSUNCcFppQW9JV2x6VG1GT0tIWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY201V1lXd2dQU0IyWVd4MVpUdGNiaUFnSUNBZ0lDQWdhV1lnS0hWdWFYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHaHZjM1JXWVd4MVpTNTFibWwwSUQwZ2RXNXBkRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnlaWFIxY201V1lXdzdYRzU5WEc1Y2JpOHFYRzRnSUNBZ1VISmxjSEp2WTJWemN5QnBibU52YldsdVp5QjJZV3gxWlhNc0lITndiR2wwZEdsdVp5QnViMjR0Ym5WdFpYSnBZMkZzSUhaaGJIVmxjMXh1SUNBZ0lHbHVkRzhnYzNWaUxYWmhiSFZsY3lCcFpTQm9aWGhjYmx4dUlDQWdJRUJ3WVhKaGJTQmJiMkpxWldOMFhWeHVJQ0FnSUVCd1lYSmhiU0JiYjJKcVpXTjBYVnh1SUNBZ0lFQndZWEpoYlNCYmIySnFaV04wWFZ4dUlDQWdJRUJ3WVhKaGJTQmJjM1J5YVc1blhWeHVLaTljYm1aMWJtTjBhVzl1SUhCeVpYQnliMk5sYzNNb1pYaHBjM1JwYm1jc0lHbHVZMjl0YVc1bkxDQnpZMjl3WlN3Z1pHVm1ZWFZzZEZCeWIzQXBJSHRjYmlBZ0lDQjJZWElnZG1Gc2RXVnpJRDBnZTMwN1hHNWNiaUFnSUNCbFlXTm9LR2x1WTI5dGFXNW5MQ0FvYTJWNUxDQjJZV3gxWlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1pYaHBjM1JwYm1kV1lXeDFaU0E5SUdWNGFYTjBhVzVuVzJ0bGVWMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYZFdZV3gxWlNBOUlIdDlPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDFkR2xzY3k1cGMwOWlhaWgyWVd4MVpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkMVpoYkhWbElEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhkV1lXeDFaVnRrWldaaGRXeDBVSEp2Y0YwZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUVsbUlIWmhiSFZsSUdSdlpYTnVKM1FnYUdGMlpTQmhJSE53WldOcFlXd2dkSGx3WlN3Z1kyaGxZMnNnWm05eUlHOXVaVnh1SUNBZ0lDQWdJQ0J1WlhkV1lXeDFaUzUwZVhCbElEMGdZMmhsWTJ0V1lXeDFaVlI1Y0dVb1pYaHBjM1JwYm1kV1lXeDFaU3dnYm1WM1ZtRnNkV1VzSUhOamIzQmxMQ0JyWlhrcE8xeHVYRzRnSUNBZ0lDQWdJSFpoYkhWbGMxdHJaWGxkSUQwZ2JtVjNWbUZzZFdVN1hHNWNiaUFnSUNBZ0lDQWdMeThnU1dZZ2QyVWdhR0YyWlNCaElIUjVjR1VnY0hKdmNHVnlkSGtzSUhOd2JHbDBMMkZ6YzJsbmJpQmtaV1poZFd4MElIQnliM0J6WEc0Z0lDQWdJQ0FnSUdsbUlDaHVaWGRXWVd4MVpTNTBlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RIbHdaVWhoYm1Sc1pYSWdQU0IyWVd4MVpWUjVjR1Z6VFdGdVlXZGxjbHR1WlhkV1lXeDFaUzUwZVhCbFhUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTV1lnZG1Gc2RXVlVlWEJsSUdoaGJtUnNaWElnYUdGeklHRWdjM0JzYVhRZ1puVnVZM1JwYjI0c0lITndiR2wwSUhSb2FYTWdkbUZzZFdWY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxTR0Z1Wkd4bGNpNXpjR3hwZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J6Y0d4cGRGWmhiSFZsY3lBOUlITndiR2wwS0d0bGVTd2dibVYzVm1Gc2RXVXNJSE5qYjNCbExDQjBlWEJsU0dGdVpHeGxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM1ZtRnNkV1V1WTJocGJHUnlaVzRnUFNCN2ZUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZoWTJnb2MzQnNhWFJXWVd4MVpYTXNJQ2hqYUdsc1pFNWhiV1VzSUdOb2FXeGtWbUZzZFdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXRmphQ2h1WlhkV1lXeDFaU3dnS0d0bGVTQXNkbUZzZFdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUU1dmRDQm5jbVZoZENCcGN5QnBkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d0bGVTQWhQVDBnSjJOb2FXeGtjbVZ1SnlBbUppQnJaWGtnSVQwOUlDZGhZM1JwYjI0bklDWW1JR05vYVd4a1ZtRnNkV1ZiYTJWNVhTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMmhwYkdSV1lXeDFaVnRyWlhsZElEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05vYVd4a1ZtRnNkV1V1Y0dGeVpXNTBJRDBnWTJocGJHUldZV3gxWlM1dVlXMWxJRDBnYTJWNU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYUdsc1pGWmhiSFZsTG5CeWIzQk9ZVzFsSUQwZ1kyaHBiR1JPWVcxbE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0JqYUdsc1pGWmhiSFZsTG5SNWNHVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNWbUZzZFdVdVkyaHBiR1J5Wlc1YlkyaHBiR1JPWVcxbFhTQTlJSFpoYkhWbGMxdHJaWGtnS3lCamFHbHNaRTVoYldWZElEMGdZMmhwYkdSV1lXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbFNHRnVaR3hsY2k1MFpXMXdiR0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhkV1lXeDFaUzUwWlcxd2JHRjBaU0E5SUdWNGFYTjBhVzVuVm1Gc2RXVWdQeUJsZUdsemRHbHVaMVpoYkhWbExuUmxiWEJzWVhSbElEb2dkSGx3WlVoaGJtUnNaWEl1ZEdWdGNHeGhkR1VvYm1WM1ZtRnNkV1V1WTNWeWNtVnVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCUGNpQnFkWE4wSUdGemMybG5iaUJrWldaaGRXeDBJSEJ5YjNCbGNuUnBaWE1nWm05eUlIUm9hWE1nZG1Gc2RXVmNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVnpXMnRsZVYwZ1BTQjFkR2xzY3k1dFpYSm5aU2gyWVd4MVpWUjVjR1Z6VFdGdVlXZGxjaTVrWldaaGRXeDBVSEp2Y0hNb2JtVjNWbUZzZFdVdWRIbHdaU3dnYTJWNUtTd2dibVYzVm1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQnlaWFIxY200Z2RtRnNkV1Z6TzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmx4dUlDQWdJQzhxWEc0Z0lDQWdJQ0FnSUVac2FYQWdkbUZzZFdVZ2RHRnlaMlYwTDI5eWFXZHBibHh1SUNBZ0lDb3ZYRzRnSUNBZ1pteHBjRG9nWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQjBZWEpuWlhRZ1BTQW9kbUZzZFdVdWRHRnlaMlYwSUNFOVBTQjFibVJsWm1sdVpXUXBJRDhnZG1Gc2RXVXVkR0Z5WjJWMElEb2dkbUZzZFdVdVkzVnljbVZ1ZER0Y2JpQWdJQ0FnSUNBZ2RtRnNkV1V1ZEdGeVoyVjBJRDBnZG1Gc2RXVXVkRzhnUFNCMllXeDFaUzV2Y21sbmFXNDdYRzRnSUNBZ0lDQWdJSFpoYkhWbExtOXlhV2RwYmlBOUlIUmhjbWRsZER0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnSUNBZ1RXVnlaMlVnWlhocGMzUnBibWNnWVc1a0lHbHVZMjl0YVc1bklIWmhiSFZsY3l3Z2NtVnpiMngyYVc1bklIQnliM0JsY25ScFpYTmNiaUFnSUNBZ0lDQWdjMlYwSUdGeklHWjFibU4wYVc5dWN5QmhibVFnYzNCc2FYUjBhVzVuSUc1dmJpMXVkVzFsY21sallXd2dkbUZzZFdWeklHbGxJR2hsZUZ4dVhHNGdJQ0FnSUNBZ0lFQndZWEpoYlNCYmIySnFaV04wWFZ4dUlDQWdJQ0FnSUNCQWNHRnlZVzBnVzI5aWFtVmpkRjFjYmlBZ0lDQWdJQ0FnUUhCaGNtRnRJRnR2WW1wbFkzUmRYRzRnSUNBZ0lDQWdJRUJ3WVhKaGJTQmJjM1J5YVc1blhTQW9iM0IwYVc5dVlXd3BYRzRnSUNBZ0lDQWdJRUJ3WVhKaGJTQmJiMkpxWldOMFhWeHVJQ0FnSUNBZ0lDQkFjbVYwZFhKdWN5QmJiMkpxWldOMFhUb2dUbVYzSUhaaGJIVmxjeUJ2WW1wbFkzUmNiaUFnSUNBcUwxeHVJQ0FnSUhCeWIyTmxjM002SUdaMWJtTjBhVzl1SUNobGVHbHpkR2x1Wnl3Z2FXNWpiMjFwYm1jc0lHbHVhR1Z5YVhRc0lHUmxabUYxYkhSUWNtOXdMQ0J6WTI5d1pTa2dlMXh1SUNBZ0lDQWdJQ0JsZUdsemRHbHVaeUE5SUdWNGFYTjBhVzVuSUh4OElIdDlPMXh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBVSEp2Y0NBOUlHUmxabUYxYkhSUWNtOXdJSHg4SUNkamRYSnlaVzUwSnp0Y2JpQWdJQ0FnSUNBZ2JHVjBJSEJ5WlhCeWIyTmxjM05sWkNBOUlIQnlaWEJ5YjJObGMzTW9aWGhwYzNScGJtY3NJR2x1WTI5dGFXNW5MQ0J6WTI5d1pTd2daR1ZtWVhWc2RGQnliM0FwTzF4dVhHNGdJQ0FnSUNBZ0lHVmhZMmdvY0hKbGNISnZZMlZ6YzJWa0xDQW9hMlY1TENCMllXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHNWxkMVpoYkhWbElEMGdaWGhwYzNScGJtZGJhMlY1WFNCOGZDQjFkR2xzY3k1amIzQjVLR1JsWm1GMWJIUldZV3gxWlNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnpRMmhwYkdSeVpXNGdQU0FvZG1Gc2RXVXVZMmhwYkdSeVpXNGdJVDA5SUhWdVpHVm1hVzVsWkNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZEVGamRHbHZibFpoYkhWbElEMGdhVzVvWlhKcGRDNWhZM1JwYjI0Z1B5QnBibWhsY21sMExtRmpkR2x2Ymk1blpYUkVaV1poZFd4MFZtRnNkV1VvS1NBNklIdDlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlM1aFkzUnBiMjRnUFNCcGJtaGxjbWwwTG1GamRHbHZianRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdaV0ZqYUNoa1pXWmhkV3gwUVdOMGFXOXVWbUZzZFdVc0lDaHdjbTl3VG1GdFpTd2daR1ZtWVhWc2RFRmpkR2x2YmxCeWIzQXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYZFdZV3gxWlZ0d2NtOXdUbUZ0WlYwZ1BTQW9hVzVvWlhKcGRDNW9ZWE5QZDI1UWNtOXdaWEowZVNod2NtOXdUbUZ0WlNrZ0ppWWdJWFpoYkhWbExtaGhjMDkzYmxCeWIzQmxjblI1S0hCeWIzQk9ZVzFsS1NrZ1B5QnBibWhsY21sMFczQnliM0JPWVcxbFhTQTZJR1JsWm1GMWJIUkJZM1JwYjI1UWNtOXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHVmhZMmdvZG1Gc2RXVXNJQ2gyWVd4MVpVNWhiV1VzSUhaaGJIVmxVSEp2Y0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlIQnliM0JsY25SNUlHbHpJRzV2ZENCMWJtUmxabWx1WldRZ2IzSWdZU0J1ZFcxaVpYSXNJSEpsYzI5c2RtVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVlFjbTl3SUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnSVdselRuVnRLSFpoYkhWbFVISnZjQ2tnSmlZZ0lXaGhjME5vYVd4a2NtVnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsVUhKdmNDQTlJSEpsYzI5c2RtVW9kbUZzZFdWT1lXMWxMQ0IyWVd4MVpWQnliM0FzSUc1bGQxWmhiSFZsTENCelkyOXdaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNWbUZzZFdWYmRtRnNkV1ZPWVcxbFhTQTlJSFpoYkhWbFVISnZjRHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGTmxkQ0JwYm5SbGNtNWhiQ0IwWVhKblpYUWdhV1lnZEdocGN5QndjbTl3WlhKMGVTQnBjeUFuZEc4blhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFpoYkhWbFRtRnRaU0E5UFQwZ0ozUnZKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGRXWVd4MVpTNTBZWEpuWlhRZ1BTQnVaWGRXWVd4MVpTNTBienRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzVm1Gc2RXVXViM0pwWjJsdUlEMGdibVYzVm1Gc2RXVXVZM1Z5Y21WdWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGQxWmhiSFZsTG1oaGMxSmhibWRsSUQwZ0tHbHpUblZ0S0c1bGQxWmhiSFZsTG0xcGJpa2dmSHdnYVhOT2RXMG9ibVYzVm1Gc2RXVXViV0Y0S1NrZ1B5QjBjblZsSURvZ1ptRnNjMlU3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Y0YVhOMGFXNW5XMnRsZVYwZ1BTQnVaWGRXWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOamIzQmxMblZ3WkdGMFpVOXlaR1Z5S0d0bGVTd2dkWFJwYkhNdWFHRnpLRzVsZDFaaGJIVmxMQ0FuZDJGMFkyZ25LU3dnYUdGelEyaHBiR1J5Wlc0cE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWlhocGMzUnBibWM3WEc0Z0lDQWdmVnh1ZlRzaVhYMD1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2FjdG9yL3ZhbHVlLW9wZXJhdGlvbnMuanNcbiAqKiBtb2R1bGUgaWQgPSA0N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsYyA9IHJlcXVpcmUoJy4uL2luYy9jYWxjJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi9pbmMvdXRpbHMnKTtcbnZhciBBY3Rpb24gPSByZXF1aXJlKCcuLi9hY3Rpb25zL0FjdGlvbicpO1xudmFyIGRlZmF1bHRBY3Rpb24gPSBuZXcgQWN0aW9uKCk7XG52YXIgV2F0Y2ggPSByZXF1aXJlKCcuLi9hY3Rpb25zL1dhdGNoJyk7XG52YXIgd2F0Y2hlciA9IG5ldyBXYXRjaCgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhY3RvciwgZnJhbWVzdGFtcCwgZnJhbWVEdXJhdGlvbikge1xuICAgIHZhciBudW1BY3RpdmVWYWx1ZXMgPSBhY3Rvci5hY3RpdmVWYWx1ZXMubGVuZ3RoO1xuICAgIHZhciBzdGF0ZSA9IGFjdG9yLnN0YXRlO1xuXG4gICAgYWN0b3IuaGFzQ2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1BY3RpdmVWYWx1ZXM7IGkrKykge1xuICAgICAgICAvLyBHZXQgdmFsdWUgYW5kIGtleVxuICAgICAgICB2YXIga2V5ID0gYWN0b3IuYWN0aXZlVmFsdWVzW2ldO1xuICAgICAgICB2YXIgdmFsdWUgPSBhY3Rvci52YWx1ZXNba2V5XTtcbiAgICAgICAgdmFyIGFjdGlvbiA9ICF2YWx1ZS5hY3Rpb24gfHwgdmFsdWUuYWN0aW9uICYmICF2YWx1ZS5hY3Rpb24uaXNBY3RpdmUgPyBkZWZhdWx0QWN0aW9uIDogdmFsdWUuYWN0aW9uO1xuXG4gICAgICAgIC8vIEZpcmUgYWN0aW9uIG9uRnJhbWVTdGFydCBpZiBub3QgYWxyZWFkeSBmaXJlZFxuICAgICAgICBpZiAoYWN0aW9uLm9uRnJhbWVTdGFydCAmJiBhY3Rpb24ubGFzdFVwZGF0ZSAhPT0gZnJhbWVzdGFtcCkge1xuICAgICAgICAgICAgYWN0aW9uLm9uRnJhbWVTdGFydChhY3RvciwgZnJhbWVEdXJhdGlvbiwgZnJhbWVzdGFtcCk7XG4gICAgICAgICAgICBhY3Rpb24ubGFzdFVwZGF0ZSA9IGZyYW1lc3RhbXA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWxjdWxhdGUgbmV3IHZhbHVlXG4gICAgICAgIHZhciB1cGRhdGVkVmFsdWUgPSB1dGlscy5oYXModmFsdWUsICd3YXRjaCcpID8gd2F0Y2hlci5wcm9jZXNzKGFjdG9yLCB2YWx1ZSkgOiBhY3Rpb24ucHJvY2VzcyhhY3RvciwgdmFsdWUsIGtleSwgZnJhbWVEdXJhdGlvbik7XG5cbiAgICAgICAgLy8gVXNlci1kZWZpbmVkIHRyYW5zZm9ybSBmdW5jdGlvblxuICAgICAgICBpZiAodmFsdWUudHJhbnNmb3JtKSB7XG4gICAgICAgICAgICB1cGRhdGVkVmFsdWUgPSB2YWx1ZS50cmFuc2Zvcm0odXBkYXRlZFZhbHVlLCBrZXksIGFjdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExpbWl0IGlmIGFjdG9yIGFjdGlvbiBkb2VzIHRoYXQga2luZCBvZiB0aGluZ1xuICAgICAgICBpZiAoYWN0aW9uLmxpbWl0ICYmIHZhbHVlLmhhc1JhbmdlKSB7XG4gICAgICAgICAgICB1cGRhdGVkVmFsdWUgPSBhY3Rpb24ubGltaXQodXBkYXRlZFZhbHVlLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTbW9vdGggdmFsdWUgaWYgd2UgaGF2ZSBzbW9vdGhpbmdcbiAgICAgICAgaWYgKHZhbHVlLnNtb290aCkge1xuICAgICAgICAgICAgdXBkYXRlZFZhbHVlID0gY2FsYy5zbW9vdGgodXBkYXRlZFZhbHVlLCB2YWx1ZS5jdXJyZW50LCBmcmFtZUR1cmF0aW9uLCB2YWx1ZS5zbW9vdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUm91bmQgdmFsdWUgaWYgcm91bmQgaXMgdHJ1ZVxuICAgICAgICBpZiAodmFsdWUucm91bmQpIHtcbiAgICAgICAgICAgIHVwZGF0ZWRWYWx1ZSA9IE1hdGgucm91bmQodXBkYXRlZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBmcmFtZUNoYW5nZVxuICAgICAgICB2YWx1ZS5mcmFtZUNoYW5nZSA9IHVwZGF0ZWRWYWx1ZSAtIHZhbHVlLmN1cnJlbnQ7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHZlbG9jaXR5IGlmIEFjdGlvbiBoYXNuJ3RcbiAgICAgICAgaWYgKCFhY3Rpb24uY2FsY3VsYXRlc1ZlbG9jaXR5KSB7XG4gICAgICAgICAgICB2YWx1ZS52ZWxvY2l0eSA9IGNhbGMuc3BlZWRQZXJTZWNvbmQodmFsdWUuZnJhbWVDaGFuZ2UsIGZyYW1lRHVyYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGN1cnJlbnQgc3BlZWRcbiAgICAgICAgdmFsdWUuc3BlZWQgPSBNYXRoLmFicyh2YWx1ZS52ZWxvY2l0eSk7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdmFsdWUncyBjaGFuZ2VkXG4gICAgICAgIGlmICh2YWx1ZS5jdXJyZW50ICE9PSB1cGRhdGVkVmFsdWUgfHwgYWN0b3IuZmlyc3RGcmFtZSkge1xuICAgICAgICAgICAgYWN0b3IuaGFzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgbmV3IGN1cnJlbnRcbiAgICAgICAgdmFsdWUuY3VycmVudCA9IHVwZGF0ZWRWYWx1ZTtcbiAgICAgICAgdmFyIHZhbHVlU3RhdGUgPSB2YWx1ZS51bml0ID8gdXBkYXRlZFZhbHVlICsgdmFsdWUudW5pdCA6IHVwZGF0ZWRWYWx1ZTtcblxuICAgICAgICAvLyBQdXQgdmFsdWUgaW4gc3RhdGUgaWYgbm8gcGFyZW50XG4gICAgICAgIGlmICghdmFsdWUucGFyZW50KSB7XG4gICAgICAgICAgICBzdGF0ZS52YWx1ZXNba2V5XSA9IHZhbHVlU3RhdGU7XG5cbiAgICAgICAgICAgIC8vIE9yLCBhZGQgdG8gcGFyZW50IHN0YXRlIHRvIGJlIGNvbWJpbmVkIGxhdGVyXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhdGVbdmFsdWUucGFyZW50XSA9IHN0YXRlW3ZhbHVlLnBhcmVudF0gfHwge307XG4gICAgICAgICAgICAgICAgc3RhdGVbdmFsdWUucGFyZW50XVt2YWx1ZS5wcm9wTmFtZV0gPSB2YWx1ZVN0YXRlO1xuICAgICAgICAgICAgfVxuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5Wd1pHRjBaUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRWxCUVUwc1NVRkJTU3hIUVVGSExFOUJRVThzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0QlFVTndReXhKUVVGTkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN1FVRkRkRU1zU1VGQlRTeE5RVUZOTEVkQlFVY3NUMEZCVHl4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdRVUZETlVNc1NVRkJUU3hoUVVGaExFZEJRVWNzU1VGQlNTeE5RVUZOTEVWQlFVVXNRMEZCUXp0QlFVTnVReXhKUVVGTkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF6dEJRVU14UXl4SlFVRk5MRTlCUVU4c1IwRkJSeXhKUVVGSkxFdEJRVXNzUlVGQlJTeERRVUZET3p0QlFVVTFRaXhOUVVGTkxFTkJRVU1zVDBGQlR5eEhRVUZITEZWQlFVTXNTMEZCU3l4RlFVRkZMRlZCUVZVc1JVRkJSU3hoUVVGaExFVkJRVXM3UVVGRGJrUXNVVUZCVFN4bFFVRmxMRWRCUVVjc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZEYkVRc1VVRkJTU3hMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXpzN1FVRkZlRUlzVTBGQlN5eERRVUZETEZWQlFWVXNSMEZCUnl4TFFVRkxMRU5CUVVNN08wRkJSWHBDTEZOQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eGxRVUZsTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN08wRkJSWFJETEZsQlFVa3NSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEYUVNc1dVRkJTU3hMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVNNVFpeFpRVUZKTEUxQlFVMHNSMEZCUnl4QlFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVkQlFVa3NZVUZCWVN4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTk96czdRVUZCUXl4QlFVZDBSeXhaUVVGSkxFMUJRVTBzUTBGQlF5eFpRVUZaTEVsQlFVa3NUVUZCVFN4RFFVRkRMRlZCUVZVc1MwRkJTeXhWUVVGVkxFVkJRVVU3UVVGRGVrUXNhMEpCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zUzBGQlN5eEZRVUZGTEdGQlFXRXNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVOMFJDeHJRa0ZCVFN4RFFVRkRMRlZCUVZVc1IwRkJSeXhWUVVGVkxFTkJRVU03VTBGRGJFTTdPenRCUVVGQkxFRkJSMFFzV1VGQlNTeFpRVUZaTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFVkJRVVVzVDBGQlR5eERRVUZETEVkQlFVY3NUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETEVkQlFVY3NUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlN4aFFVRmhMRU5CUVVNN096dEJRVUZETEVGQlIyaEpMRmxCUVVrc1MwRkJTeXhEUVVGRExGTkJRVk1zUlVGQlJUdEJRVU5xUWl4M1FrRkJXU3hIUVVGSExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNXVUZCV1N4RlFVRkZMRWRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dFRRVU0xUkRzN08wRkJRVUVzUVVGSFJDeFpRVUZKTEUxQlFVMHNRMEZCUXl4TFFVRkxMRWxCUVVrc1MwRkJTeXhEUVVGRExGRkJRVkVzUlVGQlJUdEJRVU5vUXl4M1FrRkJXU3hIUVVGSExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNXVUZCV1N4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8xTkJRM0JFT3pzN1FVRkJRU3hCUVVkRUxGbEJRVWtzUzBGQlN5eERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTmtMSGRDUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4WlFVRlpMRVZCUVVVc1MwRkJTeXhEUVVGRExFOUJRVThzUlVGQlJTeGhRVUZoTEVWQlFVVXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xTkJRM2hHT3pzN1FVRkJRU3hCUVVkRUxGbEJRVWtzUzBGQlN5eERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTmlMSGRDUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenRUUVVNelF6czdPMEZCUVVFc1FVRkhSQ3hoUVVGTExFTkJRVU1zVjBGQlZ5eEhRVUZITEZsQlFWa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1QwRkJUenM3TzBGQlFVTXNRVUZIYWtRc1dVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSVHRCUVVNMVFpeHBRa0ZCU3l4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRVZCUVVVc1lVRkJZU3hEUVVGRExFTkJRVU03VTBGRE1VVTdPenRCUVVGQkxFRkJSMFFzWVVGQlN5eERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTTdPenRCUVVGRExFRkJSM1pETEZsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1MwRkJTeXhaUVVGWkxFbEJRVWtzUzBGQlN5eERRVUZETEZWQlFWVXNSVUZCUlR0QlFVTndSQ3hwUWtGQlN5eERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNN1UwRkRNMEk3T3p0QlFVRkJMRUZCUjBRc1lVRkJTeXhEUVVGRExFOUJRVThzUjBGQlJ5eFpRVUZaTEVOQlFVTTdRVUZETjBJc1dVRkJTU3hWUVVGVkxFZEJRVWNzUVVGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4SFFVRkpMRmxCUVZrc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeEhRVUZITEZsQlFWazdPenRCUVVGRExFRkJSM3BGTEZsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRMllzYVVKQlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzVlVGQlZUczdPMEZCUVVNc1UwRkhiRU1zVFVGQlRUdEJRVU5JTEhGQ1FVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzBGQlEyaEVMSEZDUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eFZRVUZWTEVOQlFVTTdZVUZEY0VRN1MwRkRTanREUVVOS0xFTkJRVUVpTENKbWFXeGxJam9pZFhCa1lYUmxMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVkyOXVjM1FnWTJGc1l5QTlJSEpsY1hWcGNtVW9KeTR1TDJsdVl5OWpZV3hqSnlrN1hHNWpiMjV6ZENCMWRHbHNjeUE5SUhKbGNYVnBjbVVvSnk0dUwybHVZeTkxZEdsc2N5Y3BPMXh1WTI5dWMzUWdRV04wYVc5dUlEMGdjbVZ4ZFdseVpTZ25MaTR2WVdOMGFXOXVjeTlCWTNScGIyNG5LVHRjYm1OdmJuTjBJR1JsWm1GMWJIUkJZM1JwYjI0Z1BTQnVaWGNnUVdOMGFXOXVLQ2s3WEc1amIyNXpkQ0JYWVhSamFDQTlJSEpsY1hWcGNtVW9KeTR1TDJGamRHbHZibk12VjJGMFkyZ25LVHRjYm1OdmJuTjBJSGRoZEdOb1pYSWdQU0J1WlhjZ1YyRjBZMmdvS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQW9ZV04wYjNJc0lHWnlZVzFsYzNSaGJYQXNJR1p5WVcxbFJIVnlZWFJwYjI0cElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCdWRXMUJZM1JwZG1WV1lXeDFaWE1nUFNCaFkzUnZjaTVoWTNScGRtVldZV3gxWlhNdWJHVnVaM1JvTzF4dUlDQWdJR3hsZENCemRHRjBaU0E5SUdGamRHOXlMbk4wWVhSbE8xeHVYRzRnSUNBZ1lXTjBiM0l1YUdGelEyaGhibWRsWkNBOUlHWmhiSE5sTzF4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCdWRXMUJZM1JwZG1WV1lXeDFaWE03SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0F2THlCSFpYUWdkbUZzZFdVZ1lXNWtJR3RsZVZ4dUlDQWdJQ0FnSUNCc1pYUWdhMlY1SUQwZ1lXTjBiM0l1WVdOMGFYWmxWbUZzZFdWelcybGRPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2RtRnNkV1VnUFNCaFkzUnZjaTUyWVd4MVpYTmJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ2JHVjBJR0ZqZEdsdmJpQTlJQ2doZG1Gc2RXVXVZV04wYVc5dUlIeDhJSFpoYkhWbExtRmpkR2x2YmlBbUppQWhkbUZzZFdVdVlXTjBhVzl1TG1selFXTjBhWFpsS1NBL0lHUmxabUYxYkhSQlkzUnBiMjRnT2lCMllXeDFaUzVoWTNScGIyNDdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1JtbHlaU0JoWTNScGIyNGdiMjVHY21GdFpWTjBZWEowSUdsbUlHNXZkQ0JoYkhKbFlXUjVJR1pwY21Wa1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoWTNScGIyNHViMjVHY21GdFpWTjBZWEowSUNZbUlHRmpkR2x2Ymk1c1lYTjBWWEJrWVhSbElDRTlQU0JtY21GdFpYTjBZVzF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoWTNScGIyNHViMjVHY21GdFpWTjBZWEowS0dGamRHOXlMQ0JtY21GdFpVUjFjbUYwYVc5dUxDQm1jbUZ0WlhOMFlXMXdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmpkR2x2Ymk1c1lYTjBWWEJrWVhSbElEMGdabkpoYldWemRHRnRjRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lDQWdJQ0F2THlCRFlXeGpkV3hoZEdVZ2JtVjNJSFpoYkhWbFhHNGdJQ0FnSUNBZ0lHeGxkQ0IxY0dSaGRHVmtWbUZzZFdVZ1BTQjFkR2xzY3k1b1lYTW9kbUZzZFdVc0lDZDNZWFJqYUNjcElEOGdkMkYwWTJobGNpNXdjbTlqWlhOektHRmpkRzl5TENCMllXeDFaU2tnT2lCaFkzUnBiMjR1Y0hKdlkyVnpjeWhoWTNSdmNpd2dkbUZzZFdVc0lHdGxlU3dnWm5KaGJXVkVkWEpoZEdsdmJpazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1ZYTmxjaTFrWldacGJtVmtJSFJ5WVc1elptOXliU0JtZFc1amRHbHZibHh1SUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1V1ZEhKaGJuTm1iM0p0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxY0dSaGRHVmtWbUZzZFdVZ1BTQjJZV3gxWlM1MGNtRnVjMlp2Y20wb2RYQmtZWFJsWkZaaGJIVmxMQ0JyWlhrc0lHRmpkRzl5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUV4cGJXbDBJR2xtSUdGamRHOXlJR0ZqZEdsdmJpQmtiMlZ6SUhSb1lYUWdhMmx1WkNCdlppQjBhR2x1WjF4dUlDQWdJQ0FnSUNCcFppQW9ZV04wYVc5dUxteHBiV2wwSUNZbUlIWmhiSFZsTG1oaGMxSmhibWRsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxY0dSaGRHVmtWbUZzZFdVZ1BTQmhZM1JwYjI0dWJHbHRhWFFvZFhCa1lYUmxaRlpoYkhWbExDQjJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCVGJXOXZkR2dnZG1Gc2RXVWdhV1lnZDJVZ2FHRjJaU0J6Ylc5dmRHaHBibWRjYmlBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsTG5OdGIyOTBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkWEJrWVhSbFpGWmhiSFZsSUQwZ1kyRnNZeTV6Ylc5dmRHZ29kWEJrWVhSbFpGWmhiSFZsTENCMllXeDFaUzVqZFhKeVpXNTBMQ0JtY21GdFpVUjFjbUYwYVc5dUxDQjJZV3gxWlM1emJXOXZkR2dwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnVW05MWJtUWdkbUZzZFdVZ2FXWWdjbTkxYm1RZ2FYTWdkSEoxWlZ4dUlDQWdJQ0FnSUNCcFppQW9kbUZzZFdVdWNtOTFibVFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFZ3WkdGMFpXUldZV3gxWlNBOUlFMWhkR2d1Y205MWJtUW9kWEJrWVhSbFpGWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUZWd1pHRjBaU0JtY21GdFpVTm9ZVzVuWlZ4dUlDQWdJQ0FnSUNCMllXeDFaUzVtY21GdFpVTm9ZVzVuWlNBOUlIVndaR0YwWldSV1lXeDFaU0F0SUhaaGJIVmxMbU4xY25KbGJuUTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1EyRnNZM1ZzWVhSbElIWmxiRzlqYVhSNUlHbG1JRUZqZEdsdmJpQm9ZWE51SjNSY2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZoWTNScGIyNHVZMkZzWTNWc1lYUmxjMVpsYkc5amFYUjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlM1MlpXeHZZMmwwZVNBOUlHTmhiR011YzNCbFpXUlFaWEpUWldOdmJtUW9kbUZzZFdVdVpuSmhiV1ZEYUdGdVoyVXNJR1p5WVcxbFJIVnlZWFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1ZYQmtZWFJsSUdOMWNuSmxiblFnYzNCbFpXUmNiaUFnSUNBZ0lDQWdkbUZzZFdVdWMzQmxaV1FnUFNCTllYUm9MbUZpY3loMllXeDFaUzUyWld4dlkybDBlU2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdRMmhsWTJzZ2FXWWdkbUZzZFdVbmN5QmphR0Z1WjJWa1hHNGdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpTNWpkWEp5Wlc1MElDRTlQU0IxY0dSaGRHVmtWbUZzZFdVZ2ZId2dZV04wYjNJdVptbHljM1JHY21GdFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXTjBiM0l1YUdGelEyaGhibWRsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJUWlhRZ2JtVjNJR04xY25KbGJuUWdYRzRnSUNBZ0lDQWdJSFpoYkhWbExtTjFjbkpsYm5RZ1BTQjFjR1JoZEdWa1ZtRnNkV1U3WEc0Z0lDQWdJQ0FnSUd4bGRDQjJZV3gxWlZOMFlYUmxJRDBnS0haaGJIVmxMblZ1YVhRcElEOGdkWEJrWVhSbFpGWmhiSFZsSUNzZ2RtRnNkV1V1ZFc1cGRDQTZJSFZ3WkdGMFpXUldZV3gxWlR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJRZFhRZ2RtRnNkV1VnYVc0Z2MzUmhkR1VnYVdZZ2JtOGdjR0Z5Wlc1MFhHNGdJQ0FnSUNBZ0lHbG1JQ2doZG1Gc2RXVXVjR0Z5Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemRHRjBaUzUyWVd4MVpYTmJhMlY1WFNBOUlIWmhiSFZsVTNSaGRHVTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1QzSXNJR0ZrWkNCMGJ5QndZWEpsYm5RZ2MzUmhkR1VnZEc4Z1ltVWdZMjl0WW1sdVpXUWdiR0YwWlhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4wWVhSbFczWmhiSFZsTG5CaGNtVnVkRjBnUFNCemRHRjBaVnQyWVd4MVpTNXdZWEpsYm5SZElIeDhJSHQ5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1JoZEdWYmRtRnNkV1V1Y0dGeVpXNTBYVnQyWVd4MVpTNXdjbTl3VG1GdFpWMGdQU0IyWVd4MVpWTjBZWFJsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dWZTSmRmUT09XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9hY3Rvci91cGRhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSA0OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdmFsdWVUeXBlTWFuYWdlciA9IHJlcXVpcmUoJy4uL3ZhbHVlLXR5cGVzL21hbmFnZXInKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi4vaW5jL3V0aWxzJykuZWFjaDtcblxudmFyIGNyZWF0ZU1hcHBlciA9IGZ1bmN0aW9uIChyb2xlLCBtYXBwZWRWYWx1ZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5hbWUsIHZhbCkge1xuICAgICAgICByZXR1cm4gbWFwcGVkVmFsdWVzW3JvbGUubWFwKG5hbWUpXSA9IHZhbDtcbiAgICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYWN0b3IpIHtcbiAgICB2YXIgbnVtQWN0aXZlUGFyZW50cyA9IGFjdG9yLmFjdGl2ZVBhcmVudHMubGVuZ3RoO1xuICAgIHZhciBudW1Sb2xlcyA9IGFjdG9yLnJvbGVzLmxlbmd0aDtcblxuICAgIC8vIFVwZGF0ZSBwYXJlbnQgdmFsdWVzIGZyb20gY2FsY3VsYXRlZCBjaGlsZHJlblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtQWN0aXZlUGFyZW50czsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBhY3Rvci5hY3RpdmVQYXJlbnRzW2ldO1xuICAgICAgICB2YXIgdmFsdWUgPSBhY3Rvci52YWx1ZXNba2V5XTtcblxuICAgICAgICAvLyBVcGRhdGUgcGFyZW50IHZhbHVlIGN1cnJlbnQgcHJvcGVydHlcbiAgICAgICAgdmFsdWUuY3VycmVudCA9IHZhbHVlVHlwZU1hbmFnZXJbdmFsdWUudHlwZV0uY29tYmluZShhY3Rvci5zdGF0ZVtrZXldLCB2YWx1ZS50ZW1wbGF0ZSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIHN0YXRlXG4gICAgICAgIGFjdG9yLnN0YXRlLnZhbHVlc1trZXldID0gdmFsdWUuY3VycmVudDtcbiAgICB9XG5cbiAgICAvLyBGaXJlIGBmcmFtZWAgYW5kIGB1cGRhdGVgIGNhbGxiYWNrcyBvbiBhbGwgUm9sZXNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVJvbGVzOyBpKyspIHtcbiAgICAgICAgdmFyIHJvbGUgPSBhY3Rvci5yb2xlc1tpXTtcbiAgICAgICAgdmFyIG1hcHBlZFZhbHVlcyA9IHt9O1xuXG4gICAgICAgIGVhY2goYWN0b3Iuc3RhdGUudmFsdWVzLCBjcmVhdGVNYXBwZXIocm9sZSwgbWFwcGVkVmFsdWVzKSk7XG5cbiAgICAgICAgaWYgKHJvbGUuZnJhbWUpIHtcbiAgICAgICAgICAgIHJvbGUuZnJhbWUuY2FsbChhY3RvciwgbWFwcGVkVmFsdWVzLCBhY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocm9sZS51cGRhdGUgJiYgYWN0b3IuaGFzQ2hhbmdlZCkge1xuICAgICAgICAgICAgcm9sZS51cGRhdGUuY2FsbChhY3RvciwgbWFwcGVkVmFsdWVzLCBhY3Rvcik7XG4gICAgICAgIH1cbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluSmxibVJsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTEVsQlFVMHNaMEpCUVdkQ0xFZEJRVWNzVDBGQlR5eERRVUZETEhkQ1FVRjNRaXhEUVVGRExFTkJRVU03UVVGRE0wUXNTVUZCVFN4SlFVRkpMRWRCUVVjc1QwRkJUeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXpzN1FVRkZNVU1zU1VGQlRTeFpRVUZaTEVkQlFVY3NWVUZCUXl4SlFVRkpMRVZCUVVVc1dVRkJXVHRYUVVGTExGVkJRVU1zU1VGQlNTeEZRVUZGTEVkQlFVYzdaVUZCU3l4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRWRCUVVjN1MwRkJRVHREUVVGQkxFTkJRVU03TzBGQlJTOUdMRTFCUVUwc1EwRkJReXhQUVVGUExFZEJRVWNzVlVGQlF5eExRVUZMTEVWQlFVczdRVUZEZUVJc1VVRkJUU3huUWtGQlowSXNSMEZCUnl4TFFVRkxMRU5CUVVNc1lVRkJZU3hEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU53UkN4UlFVRk5MRkZCUVZFc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMDdPenRCUVVGRExFRkJSM0JETEZOQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU4yUXl4WlFVRkpMRWRCUVVjc1IwRkJSeXhMUVVGTExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTJwRExGbEJRVWtzUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRE96czdRVUZCUXl4QlFVYzVRaXhoUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEdkQ1FVRm5RaXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRE96czdRVUZCUXl4QlFVZDJSaXhoUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETzB0QlF6TkRPenM3UVVGQlFTeEJRVWRFTEZOQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eFJRVUZSTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkRMMElzV1VGQlNTeEpRVUZKTEVkQlFVY3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU14UWl4WlFVRkpMRmxCUVZrc1IwRkJSeXhGUVVGRkxFTkJRVU03TzBGQlJYUkNMRmxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSVUZCUlN4WlFVRlpMRU5CUVVNc1NVRkJTU3hGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTTdPMEZCUlRORUxGbEJRVWtzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTmFMR2RDUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1dVRkJXU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzFOQlF5OURPenRCUVVWRUxGbEJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRMnBETEdkQ1FVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNXVUZCV1N4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8xTkJRMmhFTzB0QlEwbzdRMEZEU2l4RFFVRkJJaXdpWm1sc1pTSTZJbkpsYm1SbGNpNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1OdmJuTjBJSFpoYkhWbFZIbHdaVTFoYm1GblpYSWdQU0J5WlhGMWFYSmxLQ2N1TGk5MllXeDFaUzEwZVhCbGN5OXRZVzVoWjJWeUp5azdYRzVqYjI1emRDQmxZV05vSUQwZ2NtVnhkV2x5WlNnbkxpNHZhVzVqTDNWMGFXeHpKeWt1WldGamFEdGNibHh1WTI5dWMzUWdZM0psWVhSbFRXRndjR1Z5SUQwZ0tISnZiR1VzSUcxaGNIQmxaRlpoYkhWbGN5a2dQVDRnS0c1aGJXVXNJSFpoYkNrZ1BUNGdiV0Z3Y0dWa1ZtRnNkV1Z6VzNKdmJHVXViV0Z3S0c1aGJXVXBYU0E5SUhaaGJEdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FvWVdOMGIzSXBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnVkVzFCWTNScGRtVlFZWEpsYm5SeklEMGdZV04wYjNJdVlXTjBhWFpsVUdGeVpXNTBjeTVzWlc1bmRHZzdYRzRnSUNBZ1kyOXVjM1FnYm5WdFVtOXNaWE1nUFNCaFkzUnZjaTV5YjJ4bGN5NXNaVzVuZEdnN1hHNWNiaUFnSUNBdkx5QlZjR1JoZEdVZ2NHRnlaVzUwSUhaaGJIVmxjeUJtY205dElHTmhiR04xYkdGMFpXUWdZMmhwYkdSeVpXNWNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHNTFiVUZqZEdsMlpWQmhjbVZ1ZEhNN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCc1pYUWdhMlY1SUQwZ1lXTjBiM0l1WVdOMGFYWmxVR0Z5Wlc1MGMxdHBYVHRjYmlBZ0lDQWdJQ0FnYkdWMElIWmhiSFZsSUQwZ1lXTjBiM0l1ZG1Gc2RXVnpXMnRsZVYwN1hHNWNiaUFnSUNBZ0lDQWdMeThnVlhCa1lYUmxJSEJoY21WdWRDQjJZV3gxWlNCamRYSnlaVzUwSUhCeWIzQmxjblI1WEc0Z0lDQWdJQ0FnSUhaaGJIVmxMbU4xY25KbGJuUWdQU0IyWVd4MVpWUjVjR1ZOWVc1aFoyVnlXM1poYkhWbExuUjVjR1ZkTG1OdmJXSnBibVVvWVdOMGIzSXVjM1JoZEdWYmEyVjVYU3dnZG1Gc2RXVXVkR1Z0Y0d4aGRHVXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGVndaR0YwWlNCemRHRjBaVnh1SUNBZ0lDQWdJQ0JoWTNSdmNpNXpkR0YwWlM1MllXeDFaWE5iYTJWNVhTQTlJSFpoYkhWbExtTjFjbkpsYm5RN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1JtbHlaU0JnWm5KaGJXVmdJR0Z1WkNCZ2RYQmtZWFJsWUNCallXeHNZbUZqYTNNZ2IyNGdZV3hzSUZKdmJHVnpYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQnVkVzFTYjJ4bGN6c2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J5YjJ4bElEMGdZV04wYjNJdWNtOXNaWE5iYVYwN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J0WVhCd1pXUldZV3gxWlhNZ1BTQjdmVHRjYmx4dUlDQWdJQ0FnSUNCbFlXTm9LR0ZqZEc5eUxuTjBZWFJsTG5aaGJIVmxjeXdnWTNKbFlYUmxUV0Z3Y0dWeUtISnZiR1VzSUcxaGNIQmxaRlpoYkhWbGN5a3BPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHliMnhsTG1aeVlXMWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnliMnhsTG1aeVlXMWxMbU5oYkd3b1lXTjBiM0lzSUcxaGNIQmxaRlpoYkhWbGN5d2dZV04wYjNJcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tISnZiR1V1ZFhCa1lYUmxJQ1ltSUdGamRHOXlMbWhoYzBOb1lXNW5aV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEp2YkdVdWRYQmtZWFJsTG1OaGJHd29ZV04wYjNJc0lHMWhjSEJsWkZaaGJIVmxjeXdnWVdOMGIzSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlNKZGZRPT1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2FjdG9yL3JlbmRlci5qc1xuICoqIG1vZHVsZSBpZCA9IDQ5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL2luYy91dGlscycpO1xudmFyIGVhY2ggPSB1dGlscy5lYWNoO1xuXG4vKlxuICAgIENoZWNrIGFsbCBBY3Rpb25zIGZvciBgb25FbmRgLCByZXR1cm4gdHJ1ZSBpZiBhbGwgYXJlIHRydWVcblxuICAgIEBwYXJhbSBbQWN0b3JdXG4gICAgQHBhcmFtIFtib29sZWFuXVxuICAgIEByZXR1cm5zIFtib29sZWFuXVxuKi9cbnZhciBjaGVja0FsbEFjdGlvbnNIYXZlRW5kZWQgPSBmdW5jdGlvbiAoYWN0b3IsIGhhc0NoYW5nZWQpIHtcbiAgICB2YXIgaGFzRW5kZWQgPSB0cnVlO1xuICAgIHZhciB2YWx1ZXMgPSBhY3Rvci5zdGF0ZS52YWx1ZXM7XG5cbiAgICBlYWNoKGFjdG9yLmFjdGl2ZUFjdGlvbnMsIGZ1bmN0aW9uIChrZXksIGFjdGlvbikge1xuICAgICAgICAvLyBSZXR1cm4gaWYgYWN0aW9uIGhhcyBiZWVuIGRlbGV0ZWQgZWxzZXdoZXJlXG4gICAgICAgIGlmICghYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uLm9uRnJhbWUpIHtcbiAgICAgICAgICAgIGFjdGlvbi5vbkZyYW1lLmNhbGwoYWN0b3IsIHZhbHVlcywgYWN0b3IsIGFjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uLm9uVXBkYXRlICYmIGhhc0NoYW5nZWQpIHtcbiAgICAgICAgICAgIGFjdGlvbi5vblVwZGF0ZS5jYWxsKGFjdG9yLCB2YWx1ZXMsIGFjdG9yLCBhY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbi5oYXNFbmRlZCAmJiBhY3Rpb24uaGFzRW5kZWQoYWN0b3IpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaGFzRW5kZWQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhY3Rpb24ub25Db21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi5vbkNvbXBsZXRlLmNhbGwoYWN0b3IsIGFjdG9yLCBhY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWN0b3IudW5iaW5kQWN0aW9uKGtleSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBoYXNFbmRlZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFjdG9yLCBmcmFtZXN0YW1wKSB7XG4gICAgaWYgKGFjdG9yLmlzQWN0aXZlKSB7XG4gICAgICAgIGFjdG9yLmlzQWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGNoZWNrQWxsQWN0aW9uc0hhdmVFbmRlZChhY3RvciwgYWN0b3IuaGFzQ2hhbmdlZCkpIHtcbiAgICAgICAgICAgIHZhciBudW1Sb2xlcyA9IGFjdG9yLnJvbGVzLmxlbmd0aDtcblxuICAgICAgICAgICAgLy8gRmlyZSBgY29tcGxldGVgIGNhbGxiYWNrc1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1Sb2xlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJvbGUgPSBhY3Rvci5yb2xlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAocm9sZS5jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICByb2xlLmNvbXBsZXRlLmNhbGwoYWN0b3IsIGFjdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghYWN0b3IuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBhY3Rvci5uZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3Rvci5pc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBhY3Rvci5maXJzdEZyYW1lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhY3Rvci5mcmFtZXN0YW1wID0gZnJhbWVzdGFtcDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5CdmMzUXRjbVZ1WkdWeUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc1NVRkJUU3hMUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPMEZCUTNSRExFbEJRVTBzU1VGQlNTeEhRVUZITEV0QlFVc3NRMEZCUXl4SlFVRkpPenM3T3pzN096czdRVUZCUXl4QlFWTjRRaXhKUVVGTkxIZENRVUYzUWl4SFFVRkhMRlZCUVVNc1MwRkJTeXhGUVVGRkxGVkJRVlVzUlVGQlN6dEJRVU53UkN4UlFVRkpMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGNFSXNVVUZCU1N4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTTdPMEZCUldoRExGRkJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNZVUZCWVN4RlFVRkZMRlZCUVVNc1IwRkJSeXhGUVVGRkxFMUJRVTBzUlVGQlN6czdRVUZGZGtNc1dVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJUdEJRVUZGTEcxQ1FVRlBPMU5CUVVVN08wRkJSWGhDTEZsQlFVa3NUVUZCVFN4RFFVRkRMRTlCUVU4c1JVRkJSVHRCUVVOb1FpeHJRa0ZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEUxQlFVMHNSVUZCUlN4TFFVRkxMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03VTBGRGNrUTdPMEZCUlVRc1dVRkJTU3hOUVVGTkxFTkJRVU1zVVVGQlVTeEpRVUZKTEZWQlFWVXNSVUZCUlR0QlFVTXZRaXhyUWtGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFMUJRVTBzUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1UwRkRkRVE3TzBGQlJVUXNXVUZCU1N4TlFVRk5MRU5CUVVNc1VVRkJVU3hKUVVGSkxFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1MwRkJTeXhGUVVGRk8wRkJRM0pFTEc5Q1FVRlJMRWRCUVVjc1MwRkJTeXhEUVVGRE8xTkJRM0JDTEUxQlFVMDdRVUZEU0N4blFrRkJTU3hOUVVGTkxFTkJRVU1zVlVGQlZTeEZRVUZGTzBGQlEyNUNMSE5DUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzJGQlEyaEVPMEZCUTBRc2FVSkJRVXNzUTBGQlF5eFpRVUZaTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1UwRkRNMEk3UzBGRFNpeERRVUZETEVOQlFVTTdPMEZCUlVnc1YwRkJUeXhSUVVGUkxFTkJRVU03UTBGRGJrSXNRMEZCUXpzN1FVRkZSaXhOUVVGTkxFTkJRVU1zVDBGQlR5eEhRVUZITEZWQlFVTXNTMEZCU3l4RlFVRkZMRlZCUVZVc1JVRkJTenRCUVVOd1F5eFJRVUZKTEV0QlFVc3NRMEZCUXl4UlFVRlJMRVZCUVVVN1FVRkRhRUlzWVVGQlN5eERRVUZETEZGQlFWRXNSMEZCUnl4TFFVRkxMRU5CUVVNN08wRkJSWFpDTEZsQlFVa3NkMEpCUVhkQ0xFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSVHRCUVVOdVJDeG5Ra0ZCVFN4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOT3pzN1FVRkJReXhCUVVkd1F5eHBRa0ZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEZGQlFWRXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVNdlFpeHZRa0ZCU1N4SlFVRkpMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXhRaXh2UWtGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMEZCUTJZc2QwSkJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dHBRa0ZEY0VNN1lVRkRTanM3UVVGRlJDeG5Ra0ZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFVkJRVVU3UVVGRGFrSXNjVUpCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dGhRVU5vUWp0VFFVTktMRTFCUVUwN1FVRkRTQ3hwUWtGQlN5eERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRkRUlzYVVKQlFVc3NRMEZCUXl4VlFVRlZMRWRCUVVjc1MwRkJTeXhEUVVGRE8xTkJRelZDTzB0QlEwbzdPMEZCUlVRc1UwRkJTeXhEUVVGRExGVkJRVlVzUjBGQlJ5eFZRVUZWTEVOQlFVTTdRMEZEYWtNc1EwRkJReUlzSW1acGJHVWlPaUp3YjNOMExYSmxibVJsY2k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbU52Ym5OMElIVjBhV3h6SUQwZ2NtVnhkV2x5WlNnbkxpNHZhVzVqTDNWMGFXeHpKeWs3WEc1amIyNXpkQ0JsWVdOb0lEMGdkWFJwYkhNdVpXRmphRHRjYmx4dUx5cGNiaUFnSUNCRGFHVmpheUJoYkd3Z1FXTjBhVzl1Y3lCbWIzSWdZRzl1Ulc1a1lDd2djbVYwZFhKdUlIUnlkV1VnYVdZZ1lXeHNJR0Z5WlNCMGNuVmxYRzVjYmlBZ0lDQkFjR0Z5WVcwZ1cwRmpkRzl5WFZ4dUlDQWdJRUJ3WVhKaGJTQmJZbTl2YkdWaGJsMWNiaUFnSUNCQWNtVjBkWEp1Y3lCYlltOXZiR1ZoYmwxY2Jpb3ZYRzVqYjI1emRDQmphR1ZqYTBGc2JFRmpkR2x2Ym5OSVlYWmxSVzVrWldRZ1BTQW9ZV04wYjNJc0lHaGhjME5vWVc1blpXUXBJRDArSUh0Y2JpQWdJQ0JzWlhRZ2FHRnpSVzVrWldRZ1BTQjBjblZsTzF4dUlDQWdJR3hsZENCMllXeDFaWE1nUFNCaFkzUnZjaTV6ZEdGMFpTNTJZV3gxWlhNN1hHNWNiaUFnSUNCbFlXTm9LR0ZqZEc5eUxtRmpkR2wyWlVGamRHbHZibk1zSUNoclpYa3NJR0ZqZEdsdmJpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBdkx5QlNaWFIxY200Z2FXWWdZV04wYVc5dUlHaGhjeUJpWldWdUlHUmxiR1YwWldRZ1pXeHpaWGRvWlhKbFhHNGdJQ0FnSUNBZ0lHbG1JQ2doWVdOMGFXOXVLU0I3SUhKbGRIVnlianNnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hoWTNScGIyNHViMjVHY21GdFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXTjBhVzl1TG05dVJuSmhiV1V1WTJGc2JDaGhZM1J2Y2l3Z2RtRnNkV1Z6TENCaFkzUnZjaXdnWVdOMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hoWTNScGIyNHViMjVWY0dSaGRHVWdKaVlnYUdGelEyaGhibWRsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdOMGFXOXVMbTl1VlhCa1lYUmxMbU5oYkd3b1lXTjBiM0lzSUhaaGJIVmxjeXdnWVdOMGIzSXNJR0ZqZEdsdmJpazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9ZV04wYVc5dUxtaGhjMFZ1WkdWa0lDWW1JR0ZqZEdsdmJpNW9ZWE5GYm1SbFpDaGhZM1J2Y2lrZ1BUMDlJR1poYkhObEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCb1lYTkZibVJsWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGamRHbHZiaTV2YmtOdmJYQnNaWFJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXTjBhVzl1TG05dVEyOXRjR3hsZEdVdVkyRnNiQ2hoWTNSdmNpd2dZV04wYjNJc0lHRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhZM1J2Y2k1MWJtSnBibVJCWTNScGIyNG9hMlY1S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdoaGMwVnVaR1ZrTzF4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FvWVdOMGIzSXNJR1p5WVcxbGMzUmhiWEFwSUQwK0lIdGNiaUFnSUNCcFppQW9ZV04wYjNJdWFYTkJZM1JwZG1VcElIdGNiaUFnSUNBZ0lDQWdZV04wYjNJdWFYTkJZM1JwZG1VZ1BTQm1ZV3h6WlR0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvWTJobFkydEJiR3hCWTNScGIyNXpTR0YyWlVWdVpHVmtLR0ZqZEc5eUxDQmhZM1J2Y2k1b1lYTkRhR0Z1WjJWa0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYm5WdFVtOXNaWE1nUFNCaFkzUnZjaTV5YjJ4bGN5NXNaVzVuZEdnN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFWnBjbVVnWUdOdmJYQnNaWFJsWUNCallXeHNZbUZqYTNOY2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYm5WdFVtOXNaWE03SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeWIyeGxJRDBnWVdOMGIzSXVjbTlzWlhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKdmJHVXVZMjl0Y0d4bGRHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtOXNaUzVqYjIxd2JHVjBaUzVqWVd4c0tHRmpkRzl5TENCaFkzUnZjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdGamRHOXlMbWx6UVdOMGFYWmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdOMGIzSXVibVY0ZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZV04wYjNJdWFYTkJZM1JwZG1VZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZV04wYjNJdVptbHljM1JHY21GdFpTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWEc0Z0lDQWdZV04wYjNJdVpuSmhiV1Z6ZEdGdGNDQTlJR1p5WVcxbGMzUmhiWEE3WEc1OU95SmRmUT09XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9hY3Rvci9wb3N0LXJlbmRlci5qc1xuICoqIG1vZHVsZSBpZCA9IDUwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciBSb2xlID0gcmVxdWlyZSgnLi9Sb2xlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFJvbGUoe1xuICAgIGluaXQ6IGZ1bmN0aW9uIChhY3Rvcikge1xuICAgICAgICBpZiAoYWN0b3IuaW5pdCkge1xuICAgICAgICAgICAgYWN0b3IuaW5pdChhY3Rvcik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIChhY3Rvcikge1xuICAgICAgICBpZiAoYWN0b3Iub25TdGFydCkge1xuICAgICAgICAgICAgYWN0b3Iub25TdGFydChhY3Rvcik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZnJhbWU6IGZ1bmN0aW9uIChzdGF0ZSwgYWN0b3IpIHtcbiAgICAgICAgaWYgKGFjdG9yLm9uRnJhbWUpIHtcbiAgICAgICAgICAgIGFjdG9yLm9uRnJhbWUoc3RhdGUsIGFjdG9yKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIChzdGF0ZSwgYWN0b3IpIHtcbiAgICAgICAgaWYgKGFjdG9yLm9uVXBkYXRlKSB7XG4gICAgICAgICAgICBhY3Rvci5vblVwZGF0ZShzdGF0ZSwgYWN0b3IpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoYWN0b3IpIHtcbiAgICAgICAgaWYgKGFjdG9yLm9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgIGFjdG9yLm9uQ29tcGxldGUoYWN0b3IpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1SbFptRjFiSFJTYjJ4bExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc1NVRkJTU3hKUVVGSkxFZEJRVWNzVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPenRCUVVVM1FpeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhMRWxCUVVrc1NVRkJTU3hEUVVGRE8wRkJRM1JDTEZGQlFVa3NSVUZCUlN4VlFVRlZMRXRCUVVzc1JVRkJSVHRCUVVOdVFpeFpRVUZKTEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVN1FVRkRXaXhwUWtGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRUUVVOeVFqdExRVU5LT3p0QlFVVkVMRk5CUVVzc1JVRkJSU3hWUVVGVkxFdEJRVXNzUlVGQlJUdEJRVU53UWl4WlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVU3UVVGRFppeHBRa0ZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dFRRVU40UWp0TFFVTktPenRCUVVWRUxGTkJRVXNzUlVGQlJTeFZRVUZWTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVN1FVRkRNMElzV1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZPMEZCUTJZc2FVSkJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8xTkJReTlDTzB0QlEwbzdPMEZCUlVRc1ZVRkJUU3hGUVVGRkxGVkJRVlVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlR0QlFVTTFRaXhaUVVGSkxFdEJRVXNzUTBGQlF5eFJRVUZSTEVWQlFVVTdRVUZEYUVJc2FVSkJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8xTkJRMmhETzB0QlEwbzdPMEZCUlVRc1dVRkJVU3hGUVVGRkxGVkJRVlVzUzBGQlN5eEZRVUZGTzBGQlEzWkNMRmxCUVVrc1MwRkJTeXhEUVVGRExGVkJRVlVzUlVGQlJUdEJRVU5zUWl4cFFrRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0VFFVTXpRanRMUVVOS08wTkJRMG9zUTBGQlF5eERRVUZESWl3aVptbHNaU0k2SW1SbFptRjFiSFJTYjJ4bExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlGSnZiR1VnUFNCeVpYRjFhWEpsS0NjdUwxSnZiR1VuS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnVaWGNnVW05c1pTaDdYRzRnSUNBZ2FXNXBkRG9nWm5WdVkzUnBiMjRnS0dGamRHOXlLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGhZM1J2Y2k1cGJtbDBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhZM1J2Y2k1cGJtbDBLR0ZqZEc5eUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnpkR0Z5ZERvZ1puVnVZM1JwYjI0Z0tHRmpkRzl5S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoWTNSdmNpNXZibE4wWVhKMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaFkzUnZjaTV2YmxOMFlYSjBLR0ZqZEc5eUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQm1jbUZ0WlRvZ1puVnVZM1JwYjI0Z0tITjBZWFJsTENCaFkzUnZjaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZV04wYjNJdWIyNUdjbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdOMGIzSXViMjVHY21GdFpTaHpkR0YwWlN3Z1lXTjBiM0lwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhWd1pHRjBaVG9nWm5WdVkzUnBiMjRnS0hOMFlYUmxMQ0JoWTNSdmNpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1lXTjBiM0l1YjI1VmNHUmhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ZqZEc5eUxtOXVWWEJrWVhSbEtITjBZWFJsTENCaFkzUnZjaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWTI5dGNHeGxkR1U2SUdaMWJtTjBhVzl1SUNoaFkzUnZjaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZV04wYjNJdWIyNURiMjF3YkdWMFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXTjBiM0l1YjI1RGIyMXdiR1YwWlNoaFkzUnZjaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OUtUc2lYWDA9XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9yb2xlcy9kZWZhdWx0Um9sZS5qc1xuICoqIG1vZHVsZSBpZCA9IDUxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBlYWNoID0gcmVxdWlyZSgnLi4vaW5jL3V0aWxzJykuZWFjaDtcblxudmFyIENvbnRyb2xzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb250cm9scyhhY3RvciwgYWN0aW9uLCBoYXNTdGFydGVkKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb250cm9scyk7XG5cbiAgICAgICAgdGhpcy5hY3RvciA9IGFjdG9yO1xuICAgICAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgdGhpcy5zYXZlT3JpZ2lucygpO1xuXG4gICAgICAgIGlmIChoYXNTdGFydGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5iaW5kQWN0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbi5hY3RpdmF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQ29udHJvbHMucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gc3RhcnQoaW5wdXQpIHtcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuYmluZEFjdGlvbigpO1xuICAgICAgICB0aGlzLmFjdG9yLnN0YXJ0KHRoaXMuaWQsIGlucHV0KTtcbiAgICAgICAgdGhpcy5hY3Rpb24uYWN0aXZhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIENvbnRyb2xzLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgdGhpcy5hY3Rvci51bmJpbmRBY3Rpb24odGhpcy5pZCk7XG4gICAgICAgIHRoaXMuYWN0aW9uLmRlYWN0aXZhdGUoKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgQ29udHJvbHMucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICAgIHRoaXMuYWN0aW9uLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIENvbnRyb2xzLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiByZXN1bWUoKSB7XG4gICAgICAgIHRoaXMuYWN0aW9uLmFjdGl2YXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBDb250cm9scy5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgICB2YXIgcmVzdW1lID0gdGhpcy5hY3Rvci5oYXNBY3Rpb24odGhpcy5pZCkgPyB0aGlzLnJlc3VtZSA6IHRoaXMuc3RhcnQ7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi5pc0FjdGl2ZSA/IHRoaXMucGF1c2UoKSA6IHJlc3VtZS5jYWxsKHRoaXMpO1xuICAgIH07XG5cbiAgICBDb250cm9scy5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIHRoZW4oKSB7XG4gICAgICAgIHZhciBfYWN0b3I7XG5cbiAgICAgICAgKF9hY3RvciA9IHRoaXMuYWN0b3IpLnRoZW4uYXBwbHkoX2FjdG9yLCBhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgQ29udHJvbHMucHJvdG90eXBlLmJpbmRBY3Rpb24gPSBmdW5jdGlvbiBiaW5kQWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3Rvci5iaW5kQWN0aW9uKHRoaXMuYWN0aW9uLCB0aGlzLmlkKTtcbiAgICB9O1xuXG4gICAgQ29udHJvbHMucHJvdG90eXBlLnNhdmVPcmlnaW5zID0gZnVuY3Rpb24gc2F2ZU9yaWdpbnMoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5vcmlnaW5zID0ge307XG5cbiAgICAgICAgZWFjaCh0aGlzLmFjdGlvbi52YWx1ZXMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgYWN0b3JWYWx1ZSA9IF90aGlzLmFjdG9yLnZhbHVlc1trZXldO1xuXG4gICAgICAgICAgICBfdGhpcy5vcmlnaW5zW2tleV0gPSBhY3RvclZhbHVlLmN1cnJlbnQ7XG5cbiAgICAgICAgICAgIGlmIChhY3RvclZhbHVlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgZWFjaChhY3RvclZhbHVlLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGRLZXksIGNoaWxkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3JpZ2luc1trZXkgKyBjaGlsZEtleV0gPSBfdGhpcy5hY3Rvci52YWx1ZXNba2V5ICsgY2hpbGRLZXldLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBDb250cm9scy5wcm90b3R5cGUucmVzdG9yZU9yaWdpbnMgPSBmdW5jdGlvbiByZXN0b3JlT3JpZ2lucygpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgZWFjaCh0aGlzLm9yaWdpbnMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpczIuYWN0b3IudmFsdWVzW2tleV0ub3JpZ2luID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29udHJvbHM7XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRyb2xzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTnZiblJ5YjJ4ekxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3UVVGQlFTeEpRVUZOTEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZET3p0SlFVVndReXhSUVVGUk8wRkJRMVlzWVVGRVJTeFJRVUZSTEVOQlEwVXNTMEZCU3l4RlFVRkZMRTFCUVUwc1JVRkJSU3hWUVVGVkxFVkJRVVU3T0VKQlJISkRMRkZCUVZFN08wRkJSVTRzV1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRia0lzV1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkRja0lzV1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRPenRCUVVWdVFpeFpRVUZKTEZWQlFWVXNSVUZCUlR0QlFVTmFMR2RDUVVGSkxFTkJRVU1zUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRCUVVNMVFpeG5Ra0ZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dFRRVU14UWp0TFFVTktPenRCUVZaRExGbEJRVkVzVjBGWlZpeExRVUZMTEd0Q1FVRkRMRXRCUVVzc1JVRkJSVHRCUVVOVUxGbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8wRkJRelZDTEZsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRha01zV1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenRCUVVOMlFpeGxRVUZQTEVsQlFVa3NRMEZCUXp0TFFVTm1PenRCUVdwQ1F5eFpRVUZSTEZkQmJVSldMRWxCUVVrc2JVSkJRVWM3UVVGRFNDeFpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEYWtNc1dVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXpzN1FVRkZla0lzWlVGQlR5eEpRVUZKTEVOQlFVTTdTMEZEWmpzN1FVRjRRa01zV1VGQlVTeFhRVEJDVml4TFFVRkxMRzlDUVVGSE8wRkJRMG9zV1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRCUVVONlFpeGxRVUZQTEVsQlFVa3NRMEZCUXp0TFFVTm1PenRCUVRkQ1F5eFpRVUZSTEZkQkswSldMRTFCUVUwc2NVSkJRVWM3UVVGRFRDeFpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8wRkJRM1pDTEdWQlFVOHNTVUZCU1N4RFFVRkRPMHRCUTJZN08wRkJiRU5ETEZsQlFWRXNWMEZ2UTFZc1RVRkJUU3h4UWtGQlJ6dEJRVU5NTEZsQlFVa3NUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1FVRkRkRVVzWlVGQlR5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dExRVU5zUlRzN1FVRjJRME1zV1VGQlVTeFhRWGxEVml4SlFVRkpMRzFDUVVGVk96czdRVUZEVml4clFrRkJRU3hKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZETEVsQlFVa3NUVUZCUVN4dFFrRkJVeXhEUVVGRE8wRkJRM3BDTEdWQlFVOHNTVUZCU1N4RFFVRkRPMHRCUTJZN08wRkJOVU5ETEZsQlFWRXNWMEU0UTFZc1ZVRkJWU3g1UWtGQlJ6dEJRVU5VTEdWQlFVOHNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UzBGRGRFUTdPMEZCYUVSRExGbEJRVkVzVjBGclJGWXNWMEZCVnl3d1FrRkJSenM3TzBGQlExWXNXVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhGUVVGRkxFTkJRVU03TzBGQlJXeENMRmxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNSVUZCUlN4VlFVRkRMRWRCUVVjc1JVRkJSU3hMUVVGTExFVkJRVXM3UVVGRGNrTXNaMEpCUVVrc1ZVRkJWU3hIUVVGSExFMUJRVXNzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenM3UVVGRmVFTXNhMEpCUVVzc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNN08wRkJSWFpETEdkQ1FVRkpMRlZCUVZVc1EwRkJReXhSUVVGUkxFVkJRVVU3UVVGRGNrSXNiMEpCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVVVGQlVTeEZRVUZGTEZWQlFVTXNVVUZCVVN4RlFVRkZMRlZCUVZVc1JVRkJTenRCUVVOb1JDd3dRa0ZCU3l4UFFVRlBMRU5CUVVNc1IwRkJSeXhIUVVGSExGRkJRVkVzUTBGQlF5eEhRVUZITEUxQlFVc3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFZEJRVWNzVVVGQlVTeERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRPMmxDUVVNMVJTeERRVUZETEVOQlFVTTdZVUZEVGp0VFFVTktMRU5CUVVNc1EwRkJRenRMUVVOT096dEJRV2hGUXl4WlFVRlJMRmRCYTBWV0xHTkJRV01zTmtKQlFVYzdPenRCUVVOaUxGbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUlVGQlN6dEJRVU12UWl4dFFrRkJTeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1IwRkJSeXhMUVVGTExFTkJRVU03VTBGRGVrTXNRMEZCUXl4RFFVRkRPMHRCUTA0N08xZEJkRVZETEZGQlFWRTdPenRCUVhsRlpDeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhMRkZCUVZFc1EwRkJReUlzSW1acGJHVWlPaUpEYjI1MGNtOXNjeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltTnZibk4wSUdWaFkyZ2dQU0J5WlhGMWFYSmxLQ2N1TGk5cGJtTXZkWFJwYkhNbktTNWxZV05vTzF4dVhHNWpiR0Z6Y3lCRGIyNTBjbTlzY3lCN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1lXTjBiM0lzSUdGamRHbHZiaXdnYUdGelUzUmhjblJsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GamRHOXlJRDBnWVdOMGIzSTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVlXTjBhVzl1SUQwZ1lXTjBhVzl1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5oZG1WUGNtbG5hVzV6S0NrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0doaGMxTjBZWEowWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhV1FnUFNCMGFHbHpMbUpwYm1SQlkzUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlXTjBhVzl1TG1GamRHbDJZWFJsS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCemRHRnlkQ2hwYm5CMWRDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbGtJRDBnZEdocGN5NWlhVzVrUVdOMGFXOXVLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZV04wYjNJdWMzUmhjblFvZEdocGN5NXBaQ3dnYVc1d2RYUXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtRmpkR2x2Ymk1aFkzUnBkbUYwWlNncE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpkRzl3S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GamRHOXlMblZ1WW1sdVpFRmpkR2x2YmloMGFHbHpMbWxrS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoWTNScGIyNHVaR1ZoWTNScGRtRjBaU2dwTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIQmhkWE5sS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GamRHbHZiaTVrWldGamRHbDJZWFJsS0NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxjM1Z0WlNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aFkzUnBiMjR1WVdOMGFYWmhkR1VvS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHOW5aMnhsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnY21WemRXMWxJRDBnZEdocGN5NWhZM1J2Y2k1b1lYTkJZM1JwYjI0b2RHaHBjeTVwWkNrZ1B5QjBhR2x6TG5KbGMzVnRaU0E2SUhSb2FYTXVjM1JoY25RN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZqZEdsdmJpNXBjMEZqZEdsMlpTQS9JSFJvYVhNdWNHRjFjMlVvS1NBNklISmxjM1Z0WlM1allXeHNLSFJvYVhNcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb1pXNG9MaTR1WVhKbmN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtRmpkRzl5TG5Sb1pXNG9MaTR1WVhKbmN5azdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDFjYmx4dUlDQWdJR0pwYm1SQlkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZqZEc5eUxtSnBibVJCWTNScGIyNG9kR2hwY3k1aFkzUnBiMjRzSUhSb2FYTXVhV1FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE5oZG1WUGNtbG5hVzV6S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG05eWFXZHBibk1nUFNCN2ZUdGNibHh1SUNBZ0lDQWdJQ0JsWVdOb0tIUm9hWE11WVdOMGFXOXVMblpoYkhWbGN5d2dLR3RsZVN3Z2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhZM1J2Y2xaaGJIVmxJRDBnZEdocGN5NWhZM1J2Y2k1MllXeDFaWE5iYTJWNVhUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2Y21sbmFXNXpXMnRsZVYwZ1BTQmhZM1J2Y2xaaGJIVmxMbU4xY25KbGJuUTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoWTNSdmNsWmhiSFZsTG1Ob2FXeGtjbVZ1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXRmphQ2hoWTNSdmNsWmhiSFZsTG1Ob2FXeGtjbVZ1TENBb1kyaHBiR1JMWlhrc0lHTm9hV3hrVm1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmNtbG5hVzV6VzJ0bGVTQXJJR05vYVd4a1MyVjVYU0E5SUhSb2FYTXVZV04wYjNJdWRtRnNkV1Z6VzJ0bGVTQXJJR05vYVd4a1MyVjVYUzVqZFhKeVpXNTBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhOMGIzSmxUM0pwWjJsdWN5Z3BJSHRjYmlBZ0lDQWdJQ0FnWldGamFDaDBhR2x6TG05eWFXZHBibk1zSUNoclpYa3NJSFpoYkhWbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GamRHOXlMblpoYkhWbGMxdHJaWGxkTG05eWFXZHBiaUE5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdRMjl1ZEhKdmJITTdJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9jb250cm9scy9Db250cm9scy5qc1xuICoqIG1vZHVsZSBpZCA9IDUyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGNhbGMgPSByZXF1aXJlKCcuLi8uLi9pbmMvY2FsYycpLFxuICAgIHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vaW5jL3V0aWxzJyksXG4gICAgc3BlZWRQZXJGcmFtZSA9IGNhbGMuc3BlZWRQZXJGcmFtZTtcblxuLypcbiAgICBBZGQgY29yZSBwaHlzaWNzIHNpbXVsYXRpb25zXG4qL1xudmFyIHNpbXVsYXRpb25zID0ge1xuICAgIC8qXG4gICAgICAgIFZlbG9jaXR5XG4gICAgICAgIFxuICAgICAgICBUaGUgZGVmYXVsdCAucnVuKCkgc2ltdWxhdGlvbi5cbiAgICAgICAgXG4gICAgICAgIEFwcGxpZXMgYW55IHNldCBkZWNlbGVyYXRpb24gYW5kIGFjY2VsZXJhdGlvbiB0byBleGlzdGluZyB2ZWxvY2l0eVxuICAgICovXG4gICAgdmVsb2NpdHk6IGZ1bmN0aW9uICh2YWx1ZSwgZHVyYXRpb24pIHtcbiAgICAgICAgdmFsdWUudmVsb2NpdHkgPSB2YWx1ZS52ZWxvY2l0eSArIHNwZWVkUGVyRnJhbWUodmFsdWUuYWNjZWxlcmF0aW9uLCBkdXJhdGlvbik7XG5cbiAgICAgICAgcmV0dXJuIHNpbXVsYXRpb25zLmZyaWN0aW9uKHZhbHVlLCBkdXJhdGlvbik7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICAgIEdsaWRlXG4gICAgICAgIFxuICAgICAgICBFbXVsYXRlcyB0b3VjaCBkZXZpY2Ugc2Nyb2xsaW5nIGVmZmVjdHMgd2l0aCBleHBvbmVudGlhbCBkZWNheVxuICAgICAgICBodHRwOi8vYXJpeWEub2ZpbGFicy5jb20vMjAxMy8xMS9qYXZhc2NyaXB0LWtpbmV0aWMtc2Nyb2xsaW5nLXBhcnQtMi5odG1sXG4gICAgKi9cbiAgICBnbGlkZTogZnVuY3Rpb24gKHZhbHVlLCBkdXJhdGlvbiwgc3RhcnRlZCkge1xuICAgICAgICB2YXIgdGltZVVudGlsRmluaXNoZWQgPSAtdXRpbHMuY3VycmVudFRpbWUoKSAtIHN0YXJ0ZWQsXG4gICAgICAgICAgICBkZWx0YSA9IC12YWx1ZS50byAqIE1hdGguZXhwKHRpbWVVbnRpbEZpbmlzaGVkIC8gdmFsdWUudGltZUNvbnN0YW50KTtcblxuICAgICAgICByZXR1cm4gdmFsdWUudG8gKyBkZWx0YSAtIHZhbHVlLmN1cnJlbnQ7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICAgIEZyaWN0aW9uXG4gICAgICAgICBBcHBseSBmcmljdGlvbiB0byB0aGUgY3VycmVudCB2YWx1ZVxuICAgICAgICBUT0RPOiBNYWtlIHRoaXMgZnJhbWVyYXRlLWluZGVwZW5kZW50XG4gICAgKi9cbiAgICBmcmljdGlvbjogZnVuY3Rpb24gKHZhbHVlLCBkdXJhdGlvbikge1xuICAgICAgICB2YXIgbmV3VmVsb2NpdHkgPSBzcGVlZFBlckZyYW1lKHZhbHVlLnZlbG9jaXR5LCBkdXJhdGlvbikgKiAoMSAtIHZhbHVlLmZyaWN0aW9uKTtcblxuICAgICAgICByZXR1cm4gY2FsYy5zcGVlZFBlclNlY29uZChuZXdWZWxvY2l0eSwgZHVyYXRpb24pO1xuICAgIH0sXG5cbiAgICBzcHJpbmc6IGZ1bmN0aW9uICh2YWx1ZSwgZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gdmFsdWUudG8gLSB2YWx1ZS5jdXJyZW50O1xuXG4gICAgICAgIHZhbHVlLnZlbG9jaXR5ICs9IGRpc3RhbmNlICogc3BlZWRQZXJGcmFtZSh2YWx1ZS5zcHJpbmcsIGR1cmF0aW9uKTtcblxuICAgICAgICByZXR1cm4gc2ltdWxhdGlvbnMuZnJpY3Rpb24odmFsdWUsIGR1cmF0aW9uKTtcbiAgICB9LFxuXG4gICAgYm91bmNlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gMCxcbiAgICAgICAgICAgIHRvID0gdmFsdWUudG8sXG4gICAgICAgICAgICBjdXJyZW50ID0gdmFsdWUuY3VycmVudCxcbiAgICAgICAgICAgIGJvdW5jZSA9IHZhbHVlLmJvdW5jZTtcblxuICAgICAgICAvLyBJZiB3ZSdyZSB1c2luZyBnbGlkZSBzaW11bGF0aW9uIHdlIGhhdmUgdG8gZmxpcCBvdXIgdGFyZ2V0IHRvb1xuICAgICAgICBpZiAodmFsdWUuc2ltdWxhdGUgPT09ICdnbGlkZScpIHtcbiAgICAgICAgICAgIGRpc3RhbmNlID0gdG8gLSBjdXJyZW50O1xuICAgICAgICAgICAgdmFsdWUudG8gPSBjdXJyZW50IC0gZGlzdGFuY2UgKiBib3VuY2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWUudmVsb2NpdHkgKj0gLWJvdW5jZTtcbiAgICB9LFxuXG4gICAgY2FwdHVyZTogZnVuY3Rpb24gKHZhbHVlLCB0YXJnZXQpIHtcbiAgICAgICAgdmFsdWUudG8gPSB0YXJnZXQ7XG4gICAgICAgIHZhbHVlLnNpbXVsYXRlID0gJ3NwcmluZyc7XG4gICAgICAgIHZhbHVlLmNhcHR1cmUgPSB2YWx1ZS5taW4gPSB2YWx1ZS5tYXggPSB1bmRlZmluZWQ7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzaW11bGF0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk5wYlhWc1lYUnBiMjV6TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRmxCUVZrc1EwRkJRenM3UVVGRllpeEpRVUZKTEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1owSkJRV2RDTEVOQlFVTTdTVUZEYUVNc1MwRkJTeXhIUVVGSExFOUJRVThzUTBGQlF5eHBRa0ZCYVVJc1EwRkJRenRKUVVOc1F5eGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRMR0ZCUVdFN096czdPMEZCUVVNc1FVRkxka01zU1VGQlNTeFhRVUZYTEVkQlFVYzdPenM3T3pzN08wRkJVV1FzV1VGQlVTeEZRVUZGTEZWQlFWVXNTMEZCU3l4RlFVRkZMRkZCUVZFc1JVRkJSVHRCUVVOcVF5eGhRVUZMTEVOQlFVTXNVVUZCVVN4SFFVRkhMRXRCUVVzc1EwRkJReXhSUVVGUkxFZEJRVWNzWVVGQllTeERRVUZETEV0QlFVc3NRMEZCUXl4WlFVRlpMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03TzBGQlJUbEZMR1ZCUVU4c1YwRkJWeXhEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1MwRkRhRVE3T3pzN096czdPMEZCVVVRc1UwRkJTeXhGUVVGRkxGVkJRVlVzUzBGQlN5eEZRVUZGTEZGQlFWRXNSVUZCUlN4UFFVRlBMRVZCUVVVN1FVRkRka01zV1VGQlNTeHBRa0ZCYVVJc1IwRkJSeXhEUVVGRkxFdEJRVXNzUTBGQlF5eFhRVUZYTEVWQlFVVXNSMEZCUnl4UFFVRlBPMWxCUTI1RUxFdEJRVXNzUjBGQlJ5eERRVUZGTEV0QlFVc3NRMEZCUXl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhMUVVGTExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdPMEZCUlRGRkxHVkJRVThzUVVGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlN4SFFVRkhMRXRCUVVzc1IwRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETzB0QlF6ZERPenM3T3pzN08wRkJVVVFzV1VGQlVTeEZRVUZGTEZWQlFWVXNTMEZCU3l4RlFVRkZMRkZCUVZFc1JVRkJSVHRCUVVOcVF5eFpRVUZKTEZkQlFWY3NSMEZCUnl4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUlVGQlJTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlFTeEJRVUZETEVOQlFVTTdPMEZCUldwR0xHVkJRVThzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4WFFVRlhMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03UzBGRGNrUTdPMEZCUlVRc1ZVRkJUU3hGUVVGRkxGVkJRVlVzUzBGQlN5eEZRVUZGTEZGQlFWRXNSVUZCUlR0QlFVTXZRaXhaUVVGSkxGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTXNSVUZCUlN4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU03TzBGQlJYaERMR0ZCUVVzc1EwRkJReXhSUVVGUkxFbEJRVWtzVVVGQlVTeEhRVUZITEdGQlFXRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZET3p0QlFVVnVSU3hsUVVGUExGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8wdEJRMmhFT3p0QlFVVkVMRlZCUVUwc1JVRkJSU3hWUVVGVkxFdEJRVXNzUlVGQlJUdEJRVU55UWl4WlFVRkpMRkZCUVZFc1IwRkJSeXhEUVVGRE8xbEJRMW9zUlVGQlJTeEhRVUZITEV0QlFVc3NRMEZCUXl4RlFVRkZPMWxCUTJJc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlF5eFBRVUZQTzFsQlEzWkNMRTFCUVUwc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRUczdPMEZCUVVNc1FVRkhNVUlzV1VGQlNTeExRVUZMTEVOQlFVTXNVVUZCVVN4TFFVRkxMRTlCUVU4c1JVRkJSVHRCUVVNMVFpeHZRa0ZCVVN4SFFVRkhMRVZCUVVVc1IwRkJSeXhQUVVGUExFTkJRVU03UVVGRGVFSXNhVUpCUVVzc1EwRkJReXhGUVVGRkxFZEJRVWNzVDBGQlR5eEhRVUZKTEZGQlFWRXNSMEZCUnl4TlFVRk5MRUZCUVVNc1EwRkJRenRUUVVNMVF6czdRVUZGUkN4bFFVRlBMRXRCUVVzc1EwRkJReXhSUVVGUkxFbEJRVWtzUTBGQlJTeE5RVUZOTEVOQlFVTTdTMEZEY2tNN08wRkJSVVFzVjBGQlR5eEZRVUZGTEZWQlFWVXNTMEZCU3l4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVNNVFpeGhRVUZMTEVOQlFVTXNSVUZCUlN4SFFVRkhMRTFCUVUwc1EwRkJRenRCUVVOc1FpeGhRVUZMTEVOQlFVTXNVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJRenRCUVVNeFFpeGhRVUZMTEVOQlFVTXNUMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJReXhIUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEVkQlFVY3NSMEZCUnl4VFFVRlRMRU5CUVVNN1MwRkRja1E3UTBGRFNpeERRVUZET3p0QlFVVkdMRTFCUVUwc1EwRkJReXhQUVVGUExFZEJRVWNzVjBGQlZ5eERRVUZESWl3aVptbHNaU0k2SW5OcGJYVnNZWFJwYjI1ekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYm5aaGNpQmpZV3hqSUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2YVc1akwyTmhiR01uS1N4Y2JpQWdJQ0IxZEdsc2N5QTlJSEpsY1hWcGNtVW9KeTR1THk0dUwybHVZeTkxZEdsc2N5Y3BMRnh1SUNBZ0lITndaV1ZrVUdWeVJuSmhiV1VnUFNCallXeGpMbk53WldWa1VHVnlSbkpoYldVN1hHNWNiaThxWEc0Z0lDQWdRV1JrSUdOdmNtVWdjR2g1YzJsamN5QnphVzExYkdGMGFXOXVjMXh1S2k5Y2JuWmhjaUJ6YVcxMWJHRjBhVzl1Y3lBOUlIdGNiaUFnSUNBdktseHVJQ0FnSUNBZ0lDQldaV3h2WTJsMGVWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdWR2hsSUdSbFptRjFiSFFnTG5KMWJpZ3BJSE5wYlhWc1lYUnBiMjR1WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCQmNIQnNhV1Z6SUdGdWVTQnpaWFFnWkdWalpXeGxjbUYwYVc5dUlHRnVaQ0JoWTJObGJHVnlZWFJwYjI0Z2RHOGdaWGhwYzNScGJtY2dkbVZzYjJOcGRIbGNiaUFnSUNBcUwxeHVJQ0FnSUhabGJHOWphWFI1T2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VzSUdSMWNtRjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lIWmhiSFZsTG5abGJHOWphWFI1SUQwZ2RtRnNkV1V1ZG1Wc2IyTnBkSGtnS3lCemNHVmxaRkJsY2taeVlXMWxLSFpoYkhWbExtRmpZMlZzWlhKaGRHbHZiaXdnWkhWeVlYUnBiMjRwTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCemFXMTFiR0YwYVc5dWN5NW1jbWxqZEdsdmJpaDJZV3gxWlN3Z1pIVnlZWFJwYjI0cE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktseHVJQ0FnSUNBZ0lDQkhiR2xrWlZ4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ1JXMTFiR0YwWlhNZ2RHOTFZMmdnWkdWMmFXTmxJSE5qY205c2JHbHVaeUJsWm1abFkzUnpJSGRwZEdnZ1pYaHdiMjVsYm5ScFlXd2daR1ZqWVhsY2JpQWdJQ0FnSUNBZ2FIUjBjRG92TDJGeWFYbGhMbTltYVd4aFluTXVZMjl0THpJd01UTXZNVEV2YW1GMllYTmpjbWx3ZEMxcmFXNWxkR2xqTFhOamNtOXNiR2x1Wnkxd1lYSjBMVEl1YUhSdGJGeHVJQ0FnSUNvdlhHNGdJQ0FnWjJ4cFpHVTZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTd2daSFZ5WVhScGIyNHNJSE4wWVhKMFpXUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIUnBiV1ZWYm5ScGJFWnBibWx6YUdWa0lEMGdMU0IxZEdsc2N5NWpkWEp5Wlc1MFZHbHRaU2dwSUMwZ2MzUmhjblJsWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYkhSaElEMGdMU0IyWVd4MVpTNTBieUFxSUUxaGRHZ3VaWGh3S0hScGJXVlZiblJwYkVacGJtbHphR1ZrSUM4Z2RtRnNkV1V1ZEdsdFpVTnZibk4wWVc1MEtUdGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLSFpoYkhWbExuUnZJQ3NnWkdWc2RHRXBJQzBnZG1Gc2RXVXVZM1Z5Y21WdWREdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQWdSbkpwWTNScGIyNWNibHh1SUNBZ0lDQWdJQ0JCY0hCc2VTQm1jbWxqZEdsdmJpQjBieUIwYUdVZ1kzVnljbVZ1ZENCMllXeDFaVnh1SUNBZ0lDQWdJQ0JVVDBSUE9pQk5ZV3RsSUhSb2FYTWdabkpoYldWeVlYUmxMV2x1WkdWd1pXNWtaVzUwWEc0Z0lDQWdLaTljYmlBZ0lDQm1jbWxqZEdsdmJqb2dablZ1WTNScGIyNGdLSFpoYkhWbExDQmtkWEpoZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JtVjNWbVZzYjJOcGRIa2dQU0J6Y0dWbFpGQmxja1p5WVcxbEtIWmhiSFZsTG5abGJHOWphWFI1TENCa2RYSmhkR2x2YmlrZ0tpQW9NU0F0SUhaaGJIVmxMbVp5YVdOMGFXOXVLVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGc1l5NXpjR1ZsWkZCbGNsTmxZMjl1WkNodVpYZFdaV3h2WTJsMGVTd2daSFZ5WVhScGIyNHBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnpjSEpwYm1jNklHWjFibU4wYVc5dUlDaDJZV3gxWlN3Z1pIVnlZWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdScGMzUmhibU5sSUQwZ2RtRnNkV1V1ZEc4Z0xTQjJZV3gxWlM1amRYSnlaVzUwTzF4dVhHNGdJQ0FnSUNBZ0lIWmhiSFZsTG5abGJHOWphWFI1SUNzOUlHUnBjM1JoYm1ObElDb2djM0JsWldSUVpYSkdjbUZ0WlNoMllXeDFaUzV6Y0hKcGJtY3NJR1IxY21GMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6YVcxMWJHRjBhVzl1Y3k1bWNtbGpkR2x2YmloMllXeDFaU3dnWkhWeVlYUnBiMjRwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JpYjNWdVkyVTZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pHbHpkR0Z1WTJVZ1BTQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOGdQU0IyWVd4MVpTNTBieXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHTjFjbkpsYm5RZ1BTQjJZV3gxWlM1amRYSnlaVzUwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbTkxYm1ObElEMGdkbUZzZFdVdVltOTFibU5sTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0x5OGdTV1lnZDJVbmNtVWdkWE5wYm1jZ1oyeHBaR1VnYzJsdGRXeGhkR2x2YmlCM1pTQm9ZWFpsSUhSdklHWnNhWEFnYjNWeUlIUmhjbWRsZENCMGIyOWNiaUFnSUNBZ0lDQWdhV1lnS0haaGJIVmxMbk5wYlhWc1lYUmxJRDA5UFNBbloyeHBaR1VuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrYVhOMFlXNWpaU0E5SUhSdklDMGdZM1Z5Y21WdWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxMblJ2SUQwZ1kzVnljbVZ1ZENBdElDaGthWE4wWVc1alpTQXFJR0p2ZFc1alpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpTNTJaV3h2WTJsMGVTQXFQU0F0SUdKdmRXNWpaVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdZMkZ3ZEhWeVpUb2dablZ1WTNScGIyNGdLSFpoYkhWbExDQjBZWEpuWlhRcElIdGNiaUFnSUNBZ0lDQWdkbUZzZFdVdWRHOGdQU0IwWVhKblpYUTdYRzRnSUNBZ0lDQWdJSFpoYkhWbExuTnBiWFZzWVhSbElEMGdKM053Y21sdVp5YzdYRzRnSUNBZ0lDQWdJSFpoYkhWbExtTmhjSFIxY21VZ1BTQjJZV3gxWlM1dGFXNGdQU0IyWVd4MVpTNXRZWGdnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlZ4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J6YVcxMWJHRjBhVzl1Y3p0Y2JpSmRmUT09XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9hY3Rpb25zL3NpbXVsYXRlL3NpbXVsYXRpb25zLmpzXG4gKiogbW9kdWxlIGlkID0gNTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXG4gICAgQmV6aWVyIGZ1bmN0aW9uIGdlbmVyYXRvclxuICAgICAgICBcbiAgICBHYcOrdGFuIFJlbmF1ZGVhdSdzIEJlemllckVhc2luZ1xuICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmUvYmV6aWVyLWVhc2luZy9ibG9iL21hc3Rlci9pbmRleC5qcyAgXG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2dyZS9iZXppZXItZWFzaW5nL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICBZb3UncmUgYSBoZXJvXG4gICAgXG4gICAgVXNlXG4gICAgXG4gICAgICAgIHZhciBlYXNlT3V0ID0gbmV3IEJlemllciguMTcsLjY3LC44MywuNjcpLFxuICAgICAgICAgICAgeCA9IGVhc2VPdXQoMC41KTsgLy8gcmV0dXJucyAwLjYyNy4uLlxuKi9cblwidXNlIHN0cmljdFwiO1xuXG52YXIgTkVXVE9OX0lURVJBVElPTlMgPSA4LFxuICAgIE5FV1RPTl9NSU5fU0xPUEUgPSAwLjAwMSxcbiAgICBTVUJESVZJU0lPTl9QUkVDSVNJT04gPSAwLjAwMDAwMDEsXG4gICAgU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlMgPSAxMCxcbiAgICBLX1NQTElORV9UQUJMRV9TSVpFID0gMTEsXG4gICAgS19TQU1QTEVfU1RFUF9TSVpFID0gMS4wIC8gKEtfU1BMSU5FX1RBQkxFX1NJWkUgLSAxLjApLFxuICAgIEZMT0FUXzMyX1NVUFBPUlRFRCA9IHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09ICd1bmRlZmluZWQnLFxuICAgIGEgPSBmdW5jdGlvbiAoYTEsIGEyKSB7XG4gICAgcmV0dXJuIDEuMCAtIDMuMCAqIGEyICsgMy4wICogYTE7XG59LFxuICAgIGIgPSBmdW5jdGlvbiAoYTEsIGEyKSB7XG4gICAgcmV0dXJuIDMuMCAqIGEyIC0gNi4wICogYTE7XG59LFxuICAgIGMgPSBmdW5jdGlvbiAoYTEpIHtcbiAgICByZXR1cm4gMy4wICogYTE7XG59LFxuICAgIGdldFNsb3BlID0gZnVuY3Rpb24gKHQsIGExLCBhMikge1xuICAgIHJldHVybiAzLjAgKiBhKGExLCBhMikgKiB0ICogdCArIDIuMCAqIGIoYTEsIGEyKSAqIHQgKyBjKGExKTtcbn0sXG4gICAgY2FsY0JlemllciA9IGZ1bmN0aW9uICh0LCBhMSwgYTIpIHtcbiAgICByZXR1cm4gKChhKGExLCBhMikgKiB0ICsgYihhMSwgYTIpKSAqIHQgKyBjKGExKSkgKiB0O1xufSxcblxuLypcbiAgICBCZXppZXIgY29uc3RydWN0b3JcbiovXG5CZXppZXIgPSBmdW5jdGlvbiAobVgxLCBtWTEsIG1YMiwgbVkyKSB7XG4gICAgdmFyIHNhbXBsZVZhbHVlcyA9IEZMT0FUXzMyX1NVUFBPUlRFRCA/IG5ldyBGbG9hdDMyQXJyYXkoS19TUExJTkVfVEFCTEVfU0laRSkgOiBuZXcgQXJyYXkoS19TUExJTkVfVEFCTEVfU0laRSksXG4gICAgICAgIF9wcmVjb21wdXRlZCA9IGZhbHNlLFxuICAgICAgICBiaW5hcnlTdWJkaXZpZGUgPSBmdW5jdGlvbiAoYVgsIGFBLCBhQikge1xuICAgICAgICB2YXIgY3VycmVudFgsXG4gICAgICAgICAgICBjdXJyZW50VCxcbiAgICAgICAgICAgIGkgPSAwO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGN1cnJlbnRUID0gYUEgKyAoYUIgLSBhQSkgLyAyLjA7XG4gICAgICAgICAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIGFYO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRYID4gMC4wKSB7XG4gICAgICAgICAgICAgICAgYUIgPSBjdXJyZW50VDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYUEgPSBjdXJyZW50VDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoTWF0aC5hYnMoY3VycmVudFgpID4gU1VCRElWSVNJT05fUFJFQ0lTSU9OICYmICsraSA8IFNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TKTtcblxuICAgICAgICByZXR1cm4gY3VycmVudFQ7XG4gICAgfSxcbiAgICAgICAgbmV3dG9uUmFwaHNvbkl0ZXJhdGUgPSBmdW5jdGlvbiAoYVgsIGFHdWVzc1QpIHtcbiAgICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgICAgY3VycmVudFNsb3BlID0gMC4wLFxuICAgICAgICAgICAgY3VycmVudFg7XG5cbiAgICAgICAgZm9yICg7IGkgPCBORVdUT05fSVRFUkFUSU9OUzsgKytpKSB7XG4gICAgICAgICAgICBjdXJyZW50U2xvcGUgPSBnZXRTbG9wZShhR3Vlc3NULCBtWDEsIG1YMik7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50U2xvcGUgPT09IDAuMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhR3Vlc3NUO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgICAgICAgICBhR3Vlc3NUIC09IGN1cnJlbnRYIC8gY3VycmVudFNsb3BlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFHdWVzc1Q7XG4gICAgfSxcbiAgICAgICAgY2FsY1NhbXBsZVZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBLX1NQTElORV9UQUJMRV9TSVpFOyArK2kpIHtcbiAgICAgICAgICAgIHNhbXBsZVZhbHVlc1tpXSA9IGNhbGNCZXppZXIoaSAqIEtfU0FNUExFX1NURVBfU0laRSwgbVgxLCBtWDIpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAgICAgZ2V0VEZvclggPSBmdW5jdGlvbiAoYVgpIHtcbiAgICAgICAgdmFyIGludGVydmFsU3RhcnQgPSAwLjAsXG4gICAgICAgICAgICBjdXJyZW50U2FtcGxlID0gMSxcbiAgICAgICAgICAgIGxhc3RTYW1wbGUgPSBLX1NQTElORV9UQUJMRV9TSVpFIC0gMSxcbiAgICAgICAgICAgIGRpc3QgPSAwLjAsXG4gICAgICAgICAgICBndWVzc0ZvclQgPSAwLjAsXG4gICAgICAgICAgICBpbml0aWFsU2xvcGUgPSAwLjA7XG5cbiAgICAgICAgZm9yICg7IGN1cnJlbnRTYW1wbGUgIT0gbGFzdFNhbXBsZSAmJiBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0gPD0gYVg7ICsrY3VycmVudFNhbXBsZSkge1xuICAgICAgICAgICAgaW50ZXJ2YWxTdGFydCArPSBLX1NBTVBMRV9TVEVQX1NJWkU7XG4gICAgICAgIH1cblxuICAgICAgICAtLWN1cnJlbnRTYW1wbGU7XG5cbiAgICAgICAgZGlzdCA9IChhWCAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgLyAoc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUgKyAxXSAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7XG4gICAgICAgIGd1ZXNzRm9yVCA9IGludGVydmFsU3RhcnQgKyBkaXN0ICogS19TQU1QTEVfU1RFUF9TSVpFO1xuXG4gICAgICAgIGluaXRpYWxTbG9wZSA9IGdldFNsb3BlKGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuXG4gICAgICAgIC8vIElmIHNsb3BlIGlzIGdyZWF0ZXIgdGhhbiBtaW5cbiAgICAgICAgaWYgKGluaXRpYWxTbG9wZSA+PSBORVdUT05fTUlOX1NMT1BFKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsIGd1ZXNzRm9yVCk7XG4gICAgICAgICAgICAvLyBTbG9wZSBpcyBlcXVhbCB0byBtaW5cbiAgICAgICAgfSBlbHNlIGlmIChpbml0aWFsU2xvcGUgPT09IDAuMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBndWVzc0ZvclQ7XG4gICAgICAgICAgICAgICAgLy8gU2xvcGUgaXMgbGVzcyB0aGFuIG1pblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJpbmFyeVN1YmRpdmlkZShhWCwgaW50ZXJ2YWxTdGFydCwgaW50ZXJ2YWxTdGFydCArIEtfU0FNUExFX1NURVBfU0laRSk7XG4gICAgICAgICAgICAgICAgfVxuICAgIH0sXG4gICAgICAgIHByZWNvbXB1dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9wcmVjb21wdXRlZCA9IHRydWU7XG4gICAgICAgIGlmIChtWDEgIT0gbVkxIHx8IG1YMiAhPSBtWTIpIHtcbiAgICAgICAgICAgIGNhbGNTYW1wbGVWYWx1ZXMoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKlxuICAgICAgICBHZW5lcmF0ZWQgZnVuY3Rpb25cbiAgICAgICAgXG4gICAgICAgIFJldHVybnMgdmFsdWUgMC0xIGJhc2VkIG9uIFhcbiAgICAqL1xuICAgIGYgPSBmdW5jdGlvbiAoYVgpIHtcbiAgICAgICAgdmFyIHJldHVyblZhbHVlO1xuXG4gICAgICAgIGlmICghX3ByZWNvbXB1dGVkKSB7XG4gICAgICAgICAgICBwcmVjb21wdXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBsaW5lYXIgZ3JhZGllbnQsIHJldHVybiBYIGFzIFRcbiAgICAgICAgaWYgKG1YMSA9PT0gbVkxICYmIG1YMiA9PT0gbVkyKSB7XG4gICAgICAgICAgICByZXR1cm5WYWx1ZSA9IGFYO1xuXG4gICAgICAgICAgICAvLyBJZiBhdCBzdGFydCwgcmV0dXJuIDBcbiAgICAgICAgfSBlbHNlIGlmIChhWCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gMDtcblxuICAgICAgICAgICAgICAgIC8vIElmIGF0IGVuZCwgcmV0dXJuIDFcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYVggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gY2FsY0JlemllcihnZXRURm9yWChhWCksIG1ZMSwgbVkyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gZjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQmV6aWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrSmxlbWxsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdPMEZCWVVFc1dVRkJXU3hEUVVGRE96dEJRVVZpTEVsQlFVa3NhVUpCUVdsQ0xFZEJRVWNzUTBGQlF6dEpRVU55UWl4blFrRkJaMElzUjBGQlJ5eExRVUZMTzBsQlEzaENMSEZDUVVGeFFpeEhRVUZITEZOQlFWTTdTVUZEYWtNc01FSkJRVEJDTEVkQlFVY3NSVUZCUlR0SlFVTXZRaXh0UWtGQmJVSXNSMEZCUnl4RlFVRkZPMGxCUTNoQ0xHdENRVUZyUWl4SFFVRkhMRWRCUVVjc1NVRkJTU3h0UWtGQmJVSXNSMEZCUnl4SFFVRkhMRU5CUVVFc1FVRkJRenRKUVVOMFJDeHJRa0ZCYTBJc1IwRkJTU3hQUVVGUExGbEJRVmtzUzBGQlN5eFhRVUZYTEVGQlFVTTdTVUZGTVVRc1EwRkJReXhIUVVGSExGVkJRVlVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlR0QlFVTnNRaXhYUVVGUExFZEJRVWNzUjBGQlJ5eEhRVUZITEVkQlFVY3NSVUZCUlN4SFFVRkhMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVU03UTBGRGNFTTdTVUZGUkN4RFFVRkRMRWRCUVVjc1ZVRkJWU3hGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTzBGQlEyeENMRmRCUVU4c1IwRkJSeXhIUVVGSExFVkJRVVVzUjBGQlJ5eEhRVUZITEVkQlFVY3NSVUZCUlN4RFFVRkRPME5CUXpsQ08wbEJSVVFzUTBGQlF5eEhRVUZITEZWQlFWVXNSVUZCUlN4RlFVRkZPMEZCUTJRc1YwRkJUeXhIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZETzBOQlEyNUNPMGxCUlVRc1VVRkJVU3hIUVVGSExGVkJRVlVzUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRVZCUVVVN1FVRkROVUlzVjBGQlR5eEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdRMEZEYUVVN1NVRkZSQ3hWUVVGVkxFZEJRVWNzVlVGQlZTeERRVUZETEVWQlFVVXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSVHRCUVVNNVFpeFhRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZCTEVkQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlFTeEhRVUZKTEVOQlFVTXNRMEZCUXp0RFFVTjRSRHM3T3pzN1FVRkxSQ3hOUVVGTkxFZEJRVWNzVlVGQlZTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVU3UVVGRGJrTXNVVUZCU1N4WlFVRlpMRWRCUVVjc2EwSkJRV3RDTEVkQlFVY3NTVUZCU1N4WlFVRlpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXh0UWtGQmJVSXNRMEZCUXp0UlFVTXhSeXhaUVVGWkxFZEJRVWNzUzBGQlN6dFJRVVZ3UWl4bFFVRmxMRWRCUVVjc1ZVRkJWU3hGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlR0QlFVTndReXhaUVVGSkxGRkJRVkU3V1VGQlJTeFJRVUZSTzFsQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenM3UVVGRk9VSXNWMEZCUnp0QlFVTkRMRzlDUVVGUkxFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJRU3hIUVVGSkxFZEJRVWNzUTBGQlF6dEJRVU5vUXl4dlFrRkJVU3hIUVVGSExGVkJRVlVzUTBGQlF5eFJRVUZSTEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU12UXl4blFrRkJTU3hSUVVGUkxFZEJRVWNzUjBGQlJ5eEZRVUZGTzBGQlEyaENMR3RDUVVGRkxFZEJRVWNzVVVGQlVTeERRVUZETzJGQlEycENMRTFCUVUwN1FVRkRTQ3hyUWtGQlJTeEhRVUZITEZGQlFWRXNRMEZCUXp0aFFVTnFRanRUUVVOS0xGRkJRVkVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXh4UWtGQmNVSXNTVUZCU1N4RlFVRkZMRU5CUVVNc1IwRkJSeXd3UWtGQk1FSXNSVUZCUlRzN1FVRkZla1lzWlVGQlR5eFJRVUZSTEVOQlFVTTdTMEZEYmtJN1VVRkZSQ3h2UWtGQmIwSXNSMEZCUnl4VlFVRlZMRVZCUVVVc1JVRkJSU3hQUVVGUExFVkJRVVU3UVVGRE1VTXNXVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJRenRaUVVOTUxGbEJRVmtzUjBGQlJ5eEhRVUZITzFsQlEyeENMRkZCUVZFc1EwRkJRenM3UVVGRllpeGxRVUZQTEVOQlFVTXNSMEZCUnl4cFFrRkJhVUlzUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlR0QlFVTXZRaXgzUWtGQldTeEhRVUZITEZGQlFWRXNRMEZCUXl4UFFVRlBMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZET3p0QlFVVXpReXhuUWtGQlNTeFpRVUZaTEV0QlFVc3NSMEZCUnl4RlFVRkZPMEZCUTNSQ0xIVkNRVUZQTEU5QlFVOHNRMEZCUXp0aFFVTnNRanM3UVVGRlJDeHZRa0ZCVVN4SFFVRkhMRlZCUVZVc1EwRkJReXhQUVVGUExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVNNVF5eHRRa0ZCVHl4SlFVRkpMRkZCUVZFc1IwRkJSeXhaUVVGWkxFTkJRVU03VTBGRGRFTTdPMEZCUlVRc1pVRkJUeXhQUVVGUExFTkJRVU03UzBGRGJFSTdVVUZIUkN4blFrRkJaMElzUjBGQlJ5eFpRVUZaTzBGQlF6TkNMR0ZCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4dFFrRkJiVUlzUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlR0QlFVTXhReXgzUWtGQldTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRlZCUVZVc1EwRkJReXhEUVVGRExFZEJRVWNzYTBKQlFXdENMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzFOQlEyeEZPMHRCUTBvN1VVRkhSQ3hSUVVGUkxFZEJRVWNzVlVGQlZTeEZRVUZGTEVWQlFVVTdRVUZEY2tJc1dVRkJTU3hoUVVGaExFZEJRVWNzUjBGQlJ6dFpRVU51UWl4aFFVRmhMRWRCUVVjc1EwRkJRenRaUVVOcVFpeFZRVUZWTEVkQlFVY3NiVUpCUVcxQ0xFZEJRVWNzUTBGQlF6dFpRVU53UXl4SlFVRkpMRWRCUVVjc1IwRkJSenRaUVVOV0xGTkJRVk1zUjBGQlJ5eEhRVUZITzFsQlEyWXNXVUZCV1N4SFFVRkhMRWRCUVVjc1EwRkJRenM3UVVGRmRrSXNaVUZCVHl4aFFVRmhMRWxCUVVrc1ZVRkJWU3hKUVVGSkxGbEJRVmtzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1JVRkJSU3hoUVVGaExFVkJRVVU3UVVGRGRFWXNlVUpCUVdFc1NVRkJTU3hyUWtGQmEwSXNRMEZCUXp0VFFVTjJRenM3UVVGRlJDeFZRVUZGTEdGQlFXRXNRMEZCUXpzN1FVRkZhRUlzV1VGQlNTeEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhMRmxCUVZrc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlFTeEpRVUZMTEZsQlFWa3NRMEZCUXl4aFFVRmhMRWRCUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzV1VGQldTeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkJMRUZCUVVNc1EwRkJRenRCUVVNeFJ5eHBRa0ZCVXl4SFFVRkhMR0ZCUVdFc1IwRkJSeXhKUVVGSkxFZEJRVWNzYTBKQlFXdENMRU5CUVVNN08wRkJSWFJFTEc5Q1FVRlpMRWRCUVVjc1VVRkJVU3hEUVVGRExGTkJRVk1zUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RFFVRkRPenM3UVVGQlF5eEJRVWMzUXl4WlFVRkpMRmxCUVZrc1NVRkJTU3huUWtGQlowSXNSVUZCUlR0QlFVTnNReXh0UWtGQlR5eHZRa0ZCYjBJc1EwRkJReXhGUVVGRkxFVkJRVVVzVTBGQlV5eERRVUZET3p0QlFVRkRMRk5CUlRsRExFMUJRVTBzU1VGQlNTeFpRVUZaTEV0QlFVc3NSMEZCUnl4RlFVRkZPMEZCUXpkQ0xIVkNRVUZQTEZOQlFWTTdPMEZCUVVNc1lVRkZjRUlzVFVGQlRUdEJRVU5JTERKQ1FVRlBMR1ZCUVdVc1EwRkJReXhGUVVGRkxFVkJRVVVzWVVGQllTeEZRVUZGTEdGQlFXRXNSMEZCUnl4clFrRkJhMElzUTBGQlF5eERRVUZETzJsQ1FVTnFSanRMUVVOS08xRkJSVVFzVlVGQlZTeEhRVUZITEZsQlFWazdRVUZEY2tJc2IwSkJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEY0VJc1dVRkJTU3hIUVVGSExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVVVN1FVRkRNVUlzTkVKQlFXZENMRVZCUVVVc1EwRkJRenRUUVVOMFFqdExRVU5LT3pzN096czdPMEZCVDBRc1MwRkJReXhIUVVGSExGVkJRVlVzUlVGQlJTeEZRVUZGTzBGQlEyUXNXVUZCU1N4WFFVRlhMRU5CUVVNN08wRkJSV2hDTEZsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVN1FVRkRaaXh6UWtGQlZTeEZRVUZGTEVOQlFVTTdVMEZEYUVJN096dEJRVUZCTEVGQlIwUXNXVUZCU1N4SFFVRkhMRXRCUVVzc1IwRkJSeXhKUVVGSkxFZEJRVWNzUzBGQlN5eEhRVUZITEVWQlFVVTdRVUZETlVJc2RVSkJRVmNzUjBGQlJ5eEZRVUZGT3pzN1FVRkJReXhUUVVkd1FpeE5RVUZOTEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1JVRkJSVHRCUVVOcVFpd3lRa0ZCVnl4SFFVRkhMRU5CUVVNN096dEJRVUZETEdGQlIyNUNMRTFCUVUwc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eEZRVUZGTzBGQlEycENMQ3RDUVVGWExFZEJRVWNzUTBGQlF5eERRVUZETzJsQ1FVVnVRaXhOUVVGTk8wRkJRMGdzSzBKQlFWY3NSMEZCUnl4VlFVRlZMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRenRwUWtGRGNFUTdPMEZCUlVRc1pVRkJUeXhYUVVGWExFTkJRVU03UzBGRGRFSXNRMEZCUXpzN1FVRkZSaXhYUVVGUExFTkJRVU1zUTBGQlF6dERRVU5vUWl4RFFVRkRPenRCUVVWT0xFMUJRVTBzUTBGQlF5eFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRJaXdpWm1sc1pTSTZJa0psZW1sbGNpNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cVhHNGdJQ0FnUW1WNmFXVnlJR1oxYm1OMGFXOXVJR2RsYm1WeVlYUnZjbHh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQkhZY09yZEdGdUlGSmxibUYxWkdWaGRTZHpJRUpsZW1sbGNrVmhjMmx1WjF4dUlDQWdJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzluY21VdlltVjZhV1Z5TFdWaGMybHVaeTlpYkc5aUwyMWhjM1JsY2k5cGJtUmxlQzVxY3lBZ1hHNGdJQ0FnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJkeVpTOWlaWHBwWlhJdFpXRnphVzVuTDJKc2IySXZiV0Z6ZEdWeUwweEpRMFZPVTBWY2JpQWdJQ0JaYjNVbmNtVWdZU0JvWlhKdlhHNGdJQ0FnWEc0Z0lDQWdWWE5sWEc0Z0lDQWdYRzRnSUNBZ0lDQWdJSFpoY2lCbFlYTmxUM1YwSUQwZ2JtVjNJRUpsZW1sbGNpZ3VNVGNzTGpZM0xDNDRNeXd1TmpjcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZUNBOUlHVmhjMlZQZFhRb01DNDFLVHNnTHk4Z2NtVjBkWEp1Y3lBd0xqWXlOeTR1TGx4dUtpOWNibHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzUyWVhJZ1RrVlhWRTlPWDBsVVJWSkJWRWxQVGxNZ1BTQTRMRnh1SUNBZ0lFNUZWMVJQVGw5TlNVNWZVMHhQVUVVZ1BTQXdMakF3TVN4Y2JpQWdJQ0JUVlVKRVNWWkpVMGxQVGw5UVVrVkRTVk5KVDA0Z1BTQXdMakF3TURBd01ERXNYRzRnSUNBZ1UxVkNSRWxXU1ZOSlQwNWZUVUZZWDBsVVJWSkJWRWxQVGxNZ1BTQXhNQ3hjYmlBZ0lDQkxYMU5RVEVsT1JWOVVRVUpNUlY5VFNWcEZJRDBnTVRFc1hHNGdJQ0FnUzE5VFFVMVFURVZmVTFSRlVGOVRTVnBGSUQwZ01TNHdJQzhnS0V0ZlUxQk1TVTVGWDFSQlFreEZYMU5KV2tVZ0xTQXhMakFwTEZ4dUlDQWdJRVpNVDBGVVh6TXlYMU5WVUZCUFVsUkZSQ0E5SUNoMGVYQmxiMllnUm14dllYUXpNa0Z5Y21GNUlDRTlQU0FuZFc1a1pXWnBibVZrSnlrc1hHNGdJQ0FnWEc0Z0lDQWdZU0E5SUdaMWJtTjBhVzl1SUNoaE1Td2dZVElwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SURFdU1DQXRJRE11TUNBcUlHRXlJQ3NnTXk0d0lDb2dZVEU3WEc0Z0lDQWdmU3hjYmlBZ0lDQmNiaUFnSUNCaUlEMGdablZ1WTNScGIyNGdLR0V4TENCaE1pa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdNeTR3SUNvZ1lUSWdMU0EyTGpBZ0tpQmhNVHRjYmlBZ0lDQjlMRnh1SUNBZ0lGeHVJQ0FnSUdNZ1BTQm1kVzVqZEdsdmJpQW9ZVEVwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SURNdU1DQXFJR0V4TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JuWlhSVGJHOXdaU0E5SUdaMWJtTjBhVzl1SUNoMExDQmhNU3dnWVRJcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlETXVNQ0FxSUdFb1lURXNJR0V5S1NBcUlIUWdLaUIwSUNzZ01pNHdJQ29nWWloaE1Td2dZVElwSUNvZ2RDQXJJR01vWVRFcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCallXeGpRbVY2YVdWeUlEMGdablZ1WTNScGIyNGdLSFFzSUdFeExDQmhNaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0NoaEtHRXhMQ0JoTWlrZ0tpQjBJQ3NnWWloaE1Td2dZVElwS1NBcUlIUWdLeUJqS0dFeEtTa2dLaUIwTzF4dUlDQWdJSDBzWEc0Z0lDQWdYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQWdRbVY2YVdWeUlHTnZibk4wY25WamRHOXlYRzRnSUNBZ0tpOWNiaUFnSUNCQ1pYcHBaWElnUFNCbWRXNWpkR2x2YmlBb2JWZ3hMQ0J0V1RFc0lHMVlNaXdnYlZreUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCellXMXdiR1ZXWVd4MVpYTWdQU0JHVEU5QlZGOHpNbDlUVlZCUVQxSlVSVVFnUHlCdVpYY2dSbXh2WVhRek1rRnljbUY1S0V0ZlUxQk1TVTVGWDFSQlFreEZYMU5KV2tVcElEb2dibVYzSUVGeWNtRjVLRXRmVTFCTVNVNUZYMVJCUWt4RlgxTkpXa1VwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYM0J5WldOdmJYQjFkR1ZrSUQwZ1ptRnNjMlVzWEc0Z0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWFXNWhjbmxUZFdKa2FYWnBaR1VnUFNCbWRXNWpkR2x2YmlBb1lWZ3NJR0ZCTENCaFFpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCamRYSnlaVzUwV0N3Z1kzVnljbVZ1ZEZRc0lHa2dQU0F3TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRYSnlaVzUwVkNBOUlHRkJJQ3NnS0dGQ0lDMGdZVUVwSUM4Z01pNHdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRYSnlaVzUwV0NBOUlHTmhiR05DWlhwcFpYSW9ZM1Z5Y21WdWRGUXNJRzFZTVN3Z2JWZ3lLU0F0SUdGWU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kzVnljbVZ1ZEZnZ1BpQXdMakFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGQ0lEMGdZM1Z5Y21WdWRGUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoUVNBOUlHTjFjbkpsYm5SVU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCM2FHbHNaU0FvVFdGMGFDNWhZbk1vWTNWeWNtVnVkRmdwSUQ0Z1UxVkNSRWxXU1ZOSlQwNWZVRkpGUTBsVFNVOU9JQ1ltSUNzcmFTQThJRk5WUWtSSlZrbFRTVTlPWDAxQldGOUpWRVZTUVZSSlQwNVRLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqZFhKeVpXNTBWRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNkRzl1VW1Gd2FITnZia2wwWlhKaGRHVWdQU0JtZFc1amRHbHZiaUFvWVZnc0lHRkhkV1Z6YzFRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYVNBOUlEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJUYkc5d1pTQTlJREF1TUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRGZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNnN0lHa2dQQ0JPUlZkVVQwNWZTVlJGVWtGVVNVOU9VenNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJUYkc5d1pTQTlJR2RsZEZOc2IzQmxLR0ZIZFdWemMxUXNJRzFZTVN3Z2JWZ3lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamRYSnlaVzUwVTJ4dmNHVWdQVDA5SURBdU1Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHRkhkV1Z6YzFRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUllJRDBnWTJGc1kwSmxlbWxsY2loaFIzVmxjM05VTENCdFdERXNJRzFZTWlrZ0xTQmhXRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lVZDFaWE56VkNBdFBTQmpkWEp5Wlc1MFdDQXZJR04xY25KbGJuUlRiRzl3WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGSGRXVnpjMVE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhiR05UWVcxd2JHVldZV3gxWlhNZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCTFgxTlFURWxPUlY5VVFVSk1SVjlUU1ZwRk95QXJLMmtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMkZ0Y0d4bFZtRnNkV1Z6VzJsZElEMGdZMkZzWTBKbGVtbGxjaWhwSUNvZ1MxOVRRVTFRVEVWZlUxUkZVRjlUU1ZwRkxDQnRXREVzSUcxWU1pazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNCblpYUlVSbTl5V0NBOUlHWjFibU4wYVc5dUlDaGhXQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBiblJsY25aaGJGTjBZWEowSUQwZ01DNHdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRYSnlaVzUwVTJGdGNHeGxJRDBnTVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0Z6ZEZOaGJYQnNaU0E5SUV0ZlUxQk1TVTVGWDFSQlFreEZYMU5KV2tVZ0xTQXhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTjBJRDBnTUM0d0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuZFdWemMwWnZjbFFnUFNBd0xqQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWFYUnBZV3hUYkc5d1pTQTlJREF1TUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNnN0lHTjFjbkpsYm5SVFlXMXdiR1VnSVQwZ2JHRnpkRk5oYlhCc1pTQW1KaUJ6WVcxd2JHVldZV3gxWlhOYlkzVnljbVZ1ZEZOaGJYQnNaVjBnUEQwZ1lWZzdJQ3NyWTNWeWNtVnVkRk5oYlhCc1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuUmxjblpoYkZOMFlYSjBJQ3M5SUV0ZlUwRk5VRXhGWDFOVVJWQmZVMGxhUlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xTMWpkWEp5Wlc1MFUyRnRjR3hsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGMzUWdQU0FvWVZnZ0xTQnpZVzF3YkdWV1lXeDFaWE5iWTNWeWNtVnVkRk5oYlhCc1pWMHBJQzhnS0hOaGJYQnNaVlpoYkhWbGMxdGpkWEp5Wlc1MFUyRnRjR3hsS3pGZElDMGdjMkZ0Y0d4bFZtRnNkV1Z6VzJOMWNuSmxiblJUWVcxd2JHVmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuZFdWemMwWnZjbFFnUFNCcGJuUmxjblpoYkZOMFlYSjBJQ3NnWkdsemRDQXFJRXRmVTBGTlVFeEZYMU5VUlZCZlUwbGFSVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1sMGFXRnNVMnh2Y0dVZ1BTQm5aWFJUYkc5d1pTaG5kV1Z6YzBadmNsUXNJRzFZTVN3Z2JWZ3lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQnpiRzl3WlNCcGN5Qm5jbVZoZEdWeUlIUm9ZVzRnYldsdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x1YVhScFlXeFRiRzl3WlNBK1BTQk9SVmRVVDA1ZlRVbE9YMU5NVDFCRktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhkMGIyNVNZWEJvYzI5dVNYUmxjbUYwWlNoaFdDd2daM1ZsYzNOR2IzSlVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVGJHOXdaU0JwY3lCbGNYVmhiQ0IwYnlCdGFXNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2x1YVhScFlXeFRiRzl3WlNBOVBUMGdNQzR3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm5kV1Z6YzBadmNsUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVTJ4dmNHVWdhWE1nYkdWemN5QjBhR0Z1SUcxcGJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmlhVzVoY25sVGRXSmthWFpwWkdVb1lWZ3NJR2x1ZEdWeWRtRnNVM1JoY25Rc0lHbHVkR1Z5ZG1Gc1UzUmhjblFnS3lCTFgxTkJUVkJNUlY5VFZFVlFYMU5KV2tVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnlaV052YlhCMWRHVWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzQnlaV052YlhCMWRHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYlZneElDRTlJRzFaTVNCOGZDQnRXRElnSVQwZ2JWa3lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhiR05UWVcxd2JHVldZV3gxWlhNb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZLbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRWRsYm1WeVlYUmxaQ0JtZFc1amRHbHZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkpsZEhWeWJuTWdkbUZzZFdVZ01DMHhJR0poYzJWa0lHOXVJRmhjYmlBZ0lDQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJQ0FnSUNCbUlEMGdablZ1WTNScGIyNGdLR0ZZS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsZEhWeWJsWmhiSFZsTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZmY0hKbFkyOXRjSFYwWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKbFkyOXRjSFYwWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCc2FXNWxZWElnWjNKaFpHbGxiblFzSUhKbGRIVnliaUJZSUdGeklGUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYlZneElEMDlQU0J0V1RFZ0ppWWdiVmd5SUQwOVBTQnRXVElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdVZtRnNkV1VnUFNCaFdEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdZWFFnYzNSaGNuUXNJSEpsZEhWeWJpQXdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hoV0NBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY201V1lXeDFaU0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlHRjBJR1Z1WkN3Z2NtVjBkWEp1SURGY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHRllJRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlibFpoYkhWbElEMGdNVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmxaaGJIVmxJRDBnWTJGc1kwSmxlbWxsY2loblpYUlVSbTl5V0NoaFdDa3NJRzFaTVN3Z2JWa3lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsZEhWeWJsWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1k3WEc0Z0lDQWdmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCQ1pYcHBaWEk3SWwxOVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvYWN0aW9ucy90d2Vlbi9CZXppZXIuanNcbiAqKiBtb2R1bGUgaWQgPSA1NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDb250cm9scyA9IHJlcXVpcmUoJy4uLy4uL2NvbnRyb2xzL0NvbnRyb2xzJyk7XG5cbnZhciBUd2VlbkNvbnRyb2xzID0gKGZ1bmN0aW9uIChfQ29udHJvbHMpIHtcbiAgICBfaW5oZXJpdHMoVHdlZW5Db250cm9scywgX0NvbnRyb2xzKTtcblxuICAgIGZ1bmN0aW9uIFR3ZWVuQ29udHJvbHMoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUd2VlbkNvbnRyb2xzKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbnRyb2xzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIFR3ZWVuQ29udHJvbHMucHJvdG90eXBlLnJlc3RhcnQgPSBmdW5jdGlvbiByZXN0YXJ0KCkge1xuICAgICAgICB0aGlzLnJlc3RvcmVPcmlnaW5zKCk7XG4gICAgICAgIHRoaXMuYWN0aW9uLnJlc3RhcnQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFR3ZWVuQ29udHJvbHMucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICB0aGlzLnJlc3RvcmVPcmlnaW5zKCk7XG4gICAgICAgIHRoaXMuYWN0aW9uLnJldmVyc2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFR3ZWVuQ29udHJvbHMucHJvdG90eXBlLnNlZWsgPSBmdW5jdGlvbiBzZWVrKHByb2dyZXNzKSB7XG4gICAgICAgIGlmICghdGhpcy5hY3Rvci5oYXNBY3Rpb24odGhpcy5pZCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQoKS5wYXVzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hY3Rpb24uZWxhcHNlZCA9IHRoaXMuYWN0aW9uLmR1cmF0aW9uICogcHJvZ3Jlc3M7XG5cbiAgICAgICAgaWYgKCF0aGlzLmFjdGlvbi5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb24uYWN0aXZhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuYWN0b3IucHJvY2Vzcy5maXJlKCk7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbi5kZWFjdGl2YXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFR3ZWVuQ29udHJvbHM7XG59KShDb250cm9scyk7XG5cbm1vZHVsZS5leHBvcnRzID0gVHdlZW5Db250cm9scztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFIzWldWdVEyOXVkSEp2YkhNdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN1FVRkJRU3hKUVVGTkxGRkJRVkVzUjBGQlJ5eFBRVUZQTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zUTBGQlF6czdTVUZGT1VNc1lVRkJZVHRqUVVGaUxHRkJRV0U3TzJGQlFXSXNZVUZCWVRzNFFrRkJZaXhoUVVGaE96czdPenRCUVVGaUxHbENRVUZoTEZkQlEyWXNUMEZCVHl4elFrRkJSenRCUVVOT0xGbEJRVWtzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXp0QlFVTjBRaXhaUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMEZCUTNSQ0xHVkJRVThzU1VGQlNTeERRVUZETzB0QlEyWTdPMEZCVEVNc2FVSkJRV0VzVjBGUFppeFBRVUZQTEhOQ1FVRkhPMEZCUTA0c1dVRkJTU3hEUVVGRExHTkJRV01zUlVGQlJTeERRVUZETzBGQlEzUkNMRmxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdRVUZEZEVJc1pVRkJUeXhKUVVGSkxFTkJRVU03UzBGRFpqczdRVUZZUXl4cFFrRkJZU3hYUVdGbUxFbEJRVWtzYVVKQlFVTXNVVUZCVVN4RlFVRkZPMEZCUTFnc1dVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJUdEJRVU5vUXl4blFrRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMU5CUTNoQ096dEJRVVZFTEZsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJRenM3UVVGRmRFUXNXVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTzBGQlEzWkNMR2RDUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMEZCUTNaQ0xHZENRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dEJRVU14UWl4blFrRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXp0VFFVTTFRanM3UVVGRlJDeGxRVUZQTEVsQlFVa3NRMEZCUXp0TFFVTm1PenRYUVROQ1F5eGhRVUZoTzBkQlFWTXNVVUZCVVRzN1FVRTRRbkJETEUxQlFVMHNRMEZCUXl4UFFVRlBMRWRCUVVjc1lVRkJZU3hEUVVGRElpd2labWxzWlNJNklsUjNaV1Z1UTI5dWRISnZiSE11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmpiMjV6ZENCRGIyNTBjbTlzY3lBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDJOdmJuUnliMnh6TDBOdmJuUnliMnh6SnlrN1hHNWNibU5zWVhOeklGUjNaV1Z1UTI5dWRISnZiSE1nWlhoMFpXNWtjeUJEYjI1MGNtOXNjeUI3WEc0Z0lDQWdjbVZ6ZEdGeWRDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaWE4wYjNKbFQzSnBaMmx1Y3lncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GamRHbHZiaTV5WlhOMFlYSjBLQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRtVnljMlVvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WemRHOXlaVTl5YVdkcGJuTW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWhZM1JwYjI0dWNtVjJaWEp6WlNncE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpaV1ZyS0hCeWIyZHlaWE56S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWhZM1J2Y2k1b1lYTkJZM1JwYjI0b2RHaHBjeTVwWkNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1JoY25Rb0tTNXdZWFZ6WlNncE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWhZM1JwYjI0dVpXeGhjSE5sWkNBOUlIUm9hWE11WVdOMGFXOXVMbVIxY21GMGFXOXVJQ29nY0hKdlozSmxjM003WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtRmpkR2x2Ymk1cGMwRmpkR2wyWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhZM1JwYjI0dVlXTjBhWFpoZEdVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZV04wYjNJdWNISnZZMlZ6Y3k1bWFYSmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GamRHbHZiaTVrWldGamRHbDJZWFJsS0NrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdWSGRsWlc1RGIyNTBjbTlzY3pzaVhYMD1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2FjdGlvbnMvdHdlZW4vVHdlZW5Db250cm9scy5qc1xuICoqIG1vZHVsZSBpZCA9IDU1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIElucHV0ID0gcmVxdWlyZSgnLi9JbnB1dC5qcycpLFxuICAgIGN1cnJlbnRQb2ludGVyLFxuICAgIC8vIFNvcnQgdGhpcyBvdXQgZm9yIG11bHRpdG91Y2hcblxuVE9VQ0hNT1ZFID0gJ3RvdWNobW92ZScsXG4gICAgTU9VU0VNT1ZFID0gJ21vdXNlbW92ZScsXG5cbi8qXG4gICAgQ29udmVydCBldmVudCBpbnRvIHBvaW50XG4gICAgXG4gICAgU2NyYXBlIHRoZSB4L3kgY29vcmRpbmF0ZXMgZnJvbSB0aGUgcHJvdmlkZWQgZXZlbnRcbiAgICBcbiAgICBAcGFyYW0gW2V2ZW50XTogT3JpZ2luYWwgcG9pbnRlciBldmVudFxuICAgIEBwYXJhbSBbYm9vbGVhbl06IFRydWUgaWYgdG91Y2ggZXZlbnRcbiAgICBAcmV0dXJuIFtvYmplY3RdOiB4L3kgY29vcmRpbmF0ZXMgb2YgZXZlbnRcbiovXG5ldmVudFRvUG9pbnQgPSBmdW5jdGlvbiAoZXZlbnQsIGlzVG91Y2hFdmVudCkge1xuICAgIHZhciB0b3VjaENoYW5nZWQgPSBpc1RvdWNoRXZlbnQgPyBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IGZhbHNlO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogdG91Y2hDaGFuZ2VkID8gdG91Y2hDaGFuZ2VkLmNsaWVudFggOiBldmVudC5wYWdlWCxcbiAgICAgICAgeTogdG91Y2hDaGFuZ2VkID8gdG91Y2hDaGFuZ2VkLmNsaWVudFkgOiBldmVudC5wYWdlWVxuICAgIH07XG59LFxuXG4vKlxuICAgIEdldCBhY3R1YWwgZXZlbnRcbiAgICBcbiAgICBDaGVja3MgZm9yIGpRdWVyeSdzIC5vcmlnaW5hbEV2ZW50IGlmIHByZXNlbnRcbiAgICBcbiAgICBAcGFyYW0gW2V2ZW50IHwgalF1ZXJ5IGV2ZW50XVxuICAgIEByZXR1cm4gW2V2ZW50XTogVGhlIGFjdHVhbCBKUyBldmVudCAgXG4qL1xuZ2V0QWN0dWFsRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudDtcbn0sXG5cbi8qXG4gICAgUG9pbnRlciBjb25zdHJ1Y3RvclxuKi9cblBvaW50ZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBldmVudCA9IGdldEFjdHVhbEV2ZW50KGUpLFxuICAgICAgICAvLyBJbiBjYXNlIG9mIGpRdWVyeSBldmVudFxuICAgIGlzVG91Y2ggPSBldmVudC50b3VjaGVzID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICBzdGFydFBvaW50ID0gZXZlbnRUb1BvaW50KGV2ZW50LCBpc1RvdWNoKTtcblxuICAgIHRoaXMudXBkYXRlKHN0YXJ0UG9pbnQpO1xuICAgIHRoaXMuaXNUb3VjaCA9IGlzVG91Y2g7XG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG59LFxuICAgIHByb3RvID0gUG9pbnRlci5wcm90b3R5cGUgPSBuZXcgSW5wdXQoKTtcblxuLypcbiAgICBCaW5kIG1vdmUgZXZlbnRcbiovXG5wcm90by5iaW5kRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubW92ZUV2ZW50ID0gdGhpcy5pc1RvdWNoID8gVE9VQ0hNT1ZFIDogTU9VU0VNT1ZFO1xuICAgIHRoaXMuYXV0b1N0b3AgPSB0cnVlO1xuXG4gICAgY3VycmVudFBvaW50ZXIgPSB0aGlzO1xuXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5tb3ZlRXZlbnQsIHRoaXMub25Nb3ZlKTtcbn07XG5cbi8qXG4gICAgVW5iaW5kIG1vdmUgZXZlbnRcbiovXG5wcm90by51bmJpbmRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5tb3ZlRXZlbnQsIHRoaXMub25Nb3ZlKTtcbn07XG5cbi8qXG4gICAgUG9pbnRlciBvbk1vdmUgZXZlbnQgaGFuZGxlclxuICAgIFxuICAgIEBwYXJhbSBbZXZlbnRdOiBQb2ludGVyIG1vdmUgZXZlbnRcbiovXG5wcm90by5vbk1vdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBuZXdQb2ludCA9IGV2ZW50VG9Qb2ludChlLCBjdXJyZW50UG9pbnRlci5pc1RvdWNoKTtcbiAgICBlID0gZ2V0QWN0dWFsRXZlbnQoZSk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGN1cnJlbnRQb2ludGVyLnVwZGF0ZShuZXdQb2ludCk7XG59O1xuXG5wcm90by5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvaW50ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxCdmFXNTBaWEl1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNXVUZCV1N4RFFVRkRPenRCUVVWaUxFbEJRVWtzUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNN1NVRkROMElzWTBGQll6czdPMEZCUldRc1UwRkJVeXhIUVVGSExGZEJRVmM3U1VGRGRrSXNVMEZCVXl4SFFVRkhMRmRCUVZjN096czdPenM3T3pzN08wRkJWM1pDTEZsQlFWa3NSMEZCUnl4VlFVRlZMRXRCUVVzc1JVRkJSU3haUVVGWkxFVkJRVVU3UVVGRE1VTXNVVUZCU1N4WlFVRlpMRWRCUVVjc1dVRkJXU3hIUVVGSExFdEJRVXNzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRE96dEJRVVZzUlN4WFFVRlBPMEZCUTBnc1UwRkJReXhGUVVGRkxGbEJRVmtzUjBGQlJ5eFpRVUZaTEVOQlFVTXNUMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTE8wRkJRM0JFTEZOQlFVTXNSVUZCUlN4WlFVRlpMRWRCUVVjc1dVRkJXU3hEUVVGRExFOUJRVThzUjBGQlJ5eExRVUZMTEVOQlFVTXNTMEZCU3p0TFFVTjJSQ3hEUVVGRE8wTkJRMHc3T3pzN096czdPenM3UVVGVlJDeGpRVUZqTEVkQlFVY3NWVUZCVlN4TFFVRkxMRVZCUVVVN1FVRkRPVUlzVjBGQlR5eExRVUZMTEVOQlFVTXNZVUZCWVN4SlFVRkpMRXRCUVVzc1EwRkJRenREUVVOMlF6czdPenM3UVVGTlJDeFBRVUZQTEVkQlFVY3NWVUZCVlN4RFFVRkRMRVZCUVVVN1FVRkRia0lzVVVGQlNTeExRVUZMTEVkQlFVY3NZMEZCWXl4RFFVRkRMRU5CUVVNc1EwRkJRenM3UVVGRGVrSXNWMEZCVHl4SFFVRkhMRUZCUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUjBGQlNTeEpRVUZKTEVkQlFVY3NTMEZCU3p0UlFVTjRReXhWUVVGVkxFZEJRVWNzV1VGQldTeERRVUZETEV0QlFVc3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenM3UVVGRk9VTXNVVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dEJRVU40UWl4UlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF6dEJRVU4yUWl4UlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU03UTBGRGNrSTdTVUZGUkN4TFFVRkxMRWRCUVVjc1QwRkJUeXhEUVVGRExGTkJRVk1zUjBGQlJ5eEpRVUZKTEV0QlFVc3NSVUZCUlRzN096czdRVUZCUXl4QlFVczFReXhMUVVGTExFTkJRVU1zVlVGQlZTeEhRVUZITEZsQlFWazdRVUZETTBJc1VVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRk5CUVZNc1IwRkJSeXhUUVVGVExFTkJRVU03UVVGRGRFUXNVVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU03TzBGQlJYSkNMR3RDUVVGakxFZEJRVWNzU1VGQlNTeERRVUZET3p0QlFVVjBRaXhaUVVGUkxFTkJRVU1zWlVGQlpTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wTkJRekZGT3pzN096dEJRVUZETEVGQlMwWXNTMEZCU3l4RFFVRkRMRmxCUVZrc1IwRkJSeXhaUVVGWk8wRkJRemRDTEZsQlFWRXNRMEZCUXl4bFFVRmxMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdRMEZETjBVN096czdPenM3UVVGQlF5eEJRVTlHTEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVjc1ZVRkJWU3hEUVVGRExFVkJRVVU3UVVGRGVFSXNVVUZCU1N4UlFVRlJMRWRCUVVjc1dVRkJXU3hEUVVGRExFTkJRVU1zUlVGQlJTeGpRVUZqTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRka1FzUzBGQlF5eEhRVUZITEdOQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOMFFpeExRVUZETEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1FVRkRia0lzYTBKQlFXTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03UTBGRGJrTXNRMEZCUXpzN1FVRkZSaXhMUVVGTExFTkJRVU1zU1VGQlNTeEhRVUZITEZsQlFWazdRVUZEY2tJc1VVRkJTU3hEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZETzBOQlEzWkNMRU5CUVVNN08wRkJSVVlzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNaUxDSm1hV3hsSWpvaVVHOXBiblJsY2k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzUyWVhJZ1NXNXdkWFFnUFNCeVpYRjFhWEpsS0NjdUwwbHVjSFYwTG1wekp5a3NYRzRnSUNBZ1kzVnljbVZ1ZEZCdmFXNTBaWElzSUM4dklGTnZjblFnZEdocGN5QnZkWFFnWm05eUlHMTFiSFJwZEc5MVkyaGNiaUFnSUNCY2JpQWdJQ0JVVDFWRFNFMVBWa1VnUFNBbmRHOTFZMmh0YjNabEp5eGNiaUFnSUNCTlQxVlRSVTFQVmtVZ1BTQW5iVzkxYzJWdGIzWmxKeXhjYmx4dUlDQWdJQzhxWEc0Z0lDQWdJQ0FnSUVOdmJuWmxjblFnWlhabGJuUWdhVzUwYnlCd2IybHVkRnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnVTJOeVlYQmxJSFJvWlNCNEwza2dZMjl2Y21ScGJtRjBaWE1nWm5KdmJTQjBhR1VnY0hKdmRtbGtaV1FnWlhabGJuUmNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJRUJ3WVhKaGJTQmJaWFpsYm5SZE9pQlBjbWxuYVc1aGJDQndiMmx1ZEdWeUlHVjJaVzUwWEc0Z0lDQWdJQ0FnSUVCd1lYSmhiU0JiWW05dmJHVmhibDA2SUZSeWRXVWdhV1lnZEc5MVkyZ2daWFpsYm5SY2JpQWdJQ0FnSUNBZ1FISmxkSFZ5YmlCYmIySnFaV04wWFRvZ2VDOTVJR052YjNKa2FXNWhkR1Z6SUc5bUlHVjJaVzUwWEc0Z0lDQWdLaTljYmlBZ0lDQmxkbVZ1ZEZSdlVHOXBiblFnUFNCbWRXNWpkR2x2YmlBb1pYWmxiblFzSUdselZHOTFZMmhGZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RHOTFZMmhEYUdGdVoyVmtJRDBnYVhOVWIzVmphRVYyWlc1MElEOGdaWFpsYm5RdVkyaGhibWRsWkZSdmRXTm9aWE5iTUYwZ09pQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I0T2lCMGIzVmphRU5vWVc1blpXUWdQeUIwYjNWamFFTm9ZVzVuWldRdVkyeHBaVzUwV0NBNklHVjJaVzUwTG5CaFoyVllMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2VUb2dkRzkxWTJoRGFHRnVaMlZrSUQ4Z2RHOTFZMmhEYUdGdVoyVmtMbU5zYVdWdWRGa2dPaUJsZG1WdWRDNXdZV2RsV1Z4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgwc1hHNGdJQ0FnWEc0Z0lDQWdMeXBjYmlBZ0lDQWdJQ0FnUjJWMElHRmpkSFZoYkNCbGRtVnVkRnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnUTJobFkydHpJR1p2Y2lCcVVYVmxjbmtuY3lBdWIzSnBaMmx1WVd4RmRtVnVkQ0JwWmlCd2NtVnpaVzUwWEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCQWNHRnlZVzBnVzJWMlpXNTBJSHdnYWxGMVpYSjVJR1YyWlc1MFhWeHVJQ0FnSUNBZ0lDQkFjbVYwZFhKdUlGdGxkbVZ1ZEYwNklGUm9aU0JoWTNSMVlXd2dTbE1nWlhabGJuUWdJRnh1SUNBZ0lDb3ZYRzRnSUNBZ1oyVjBRV04wZFdGc1JYWmxiblFnUFNCbWRXNWpkR2x2YmlBb1pYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWMlpXNTBMbTl5YVdkcGJtRnNSWFpsYm5RZ2ZId2daWFpsYm5RN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUZ4dUlDQWdJQzhxWEc0Z0lDQWdJQ0FnSUZCdmFXNTBaWElnWTI5dWMzUnlkV04wYjNKY2JpQWdJQ0FxTDF4dUlDQWdJRkJ2YVc1MFpYSWdQU0JtZFc1amRHbHZiaUFvWlNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWlhabGJuUWdQU0JuWlhSQlkzUjFZV3hGZG1WdWRDaGxLU3dnTHk4Z1NXNGdZMkZ6WlNCdlppQnFVWFZsY25rZ1pYWmxiblJjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpWRzkxWTJnZ1BTQW9aWFpsYm5RdWRHOTFZMmhsY3lrZ1B5QjBjblZsSURvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkR0Z5ZEZCdmFXNTBJRDBnWlhabGJuUlViMUJ2YVc1MEtHVjJaVzUwTENCcGMxUnZkV05vS1R0Y2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxLSE4wWVhKMFVHOXBiblFwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx6Vkc5MVkyZ2dQU0JwYzFSdmRXTm9PMXh1SUNBZ0lDQWdJQ0IwYUdsekxtSnBibVJGZG1WdWRITW9LVHRjYmlBZ0lDQjlMRnh1SUNBZ0lGeHVJQ0FnSUhCeWIzUnZJRDBnVUc5cGJuUmxjaTV3Y205MGIzUjVjR1VnUFNCdVpYY2dTVzV3ZFhRb0tUdGNibHh1THlwY2JpQWdJQ0JDYVc1a0lHMXZkbVVnWlhabGJuUmNiaW92WEc1d2NtOTBieTVpYVc1a1JYWmxiblJ6SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIUm9hWE11Ylc5MlpVVjJaVzUwSUQwZ2RHaHBjeTVwYzFSdmRXTm9JRDhnVkU5VlEwaE5UMVpGSURvZ1RVOVZVMFZOVDFaRk8xeHVJQ0FnSUhSb2FYTXVZWFYwYjFOMGIzQWdQU0IwY25WbE8xeHVJQ0FnSUZ4dUlDQWdJR04xY25KbGJuUlFiMmx1ZEdWeUlEMGdkR2hwY3p0Y2JpQWdJQ0JjYmlBZ0lDQmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loMGFHbHpMbTF2ZG1WRmRtVnVkQ3dnZEdocGN5NXZiazF2ZG1VcE8xeHVmVHRjYmx4dUx5cGNiaUFnSUNCVmJtSnBibVFnYlc5MlpTQmxkbVZ1ZEZ4dUtpOWNibkJ5YjNSdkxuVnVZbWx1WkVWMlpXNTBjeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2loMGFHbHpMbTF2ZG1WRmRtVnVkQ3dnZEdocGN5NXZiazF2ZG1VcE8xeHVmVHRjYmx4dUx5cGNiaUFnSUNCUWIybHVkR1Z5SUc5dVRXOTJaU0JsZG1WdWRDQm9ZVzVrYkdWeVhHNGdJQ0FnWEc0Z0lDQWdRSEJoY21GdElGdGxkbVZ1ZEYwNklGQnZhVzUwWlhJZ2JXOTJaU0JsZG1WdWRGeHVLaTljYm5CeWIzUnZMbTl1VFc5MlpTQTlJR1oxYm1OMGFXOXVJQ2hsS1NCN1hHNGdJQ0FnZG1GeUlHNWxkMUJ2YVc1MElEMGdaWFpsYm5SVWIxQnZhVzUwS0dVc0lHTjFjbkpsYm5SUWIybHVkR1Z5TG1selZHOTFZMmdwTzF4dUlDQWdJR1VnUFNCblpYUkJZM1IxWVd4RmRtVnVkQ2hsS1R0Y2JpQWdJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdZM1Z5Y21WdWRGQnZhVzUwWlhJdWRYQmtZWFJsS0c1bGQxQnZhVzUwS1R0Y2JuMDdYRzVjYm5CeWIzUnZMbk4wYjNBZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkR2hwY3k1MWJtSnBibVJGZG1WdWRITW9LVHRjYm4wN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdVRzlwYm5SbGNqc2lYWDA9XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9pbnB1dC9Qb2ludGVyLmpzXG4gKiogbW9kdWxlIGlkID0gNTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzU3RyaW5nID0gcmVxdWlyZSgnLi4vLi4vaW5jL3V0aWxzJykuaXNTdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS5zcGxpdCgvLFxccyovKSA6IFt2YWx1ZV07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTndiR2wwTFdOdmJXMWhMV1JsYkdsdGFYUmxaQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRWxCUVUwc1VVRkJVU3hIUVVGSExFOUJRVThzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF6czdRVUZGY2tRc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eFZRVUZCTEV0QlFVczdVMEZCU1N4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF6dERRVUZCTEVOQlFVTWlMQ0ptYVd4bElqb2ljM0JzYVhRdFkyOXRiV0V0WkdWc2FXMXBkR1ZrTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lZMjl1YzNRZ2FYTlRkSEpwYm1jZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5cGJtTXZkWFJwYkhNbktTNXBjMU4wY21sdVp6dGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0IyWVd4MVpTQTlQaUJwYzFOMGNtbHVaeWgyWVd4MVpTa2dQeUIyWVd4MVpTNXpjR3hwZENndkxGeGNjeW92S1NBNklGdDJZV3gxWlYwN0lsMTlcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3ZhbHVlLXR5cGVzL21hbmlwdWxhdG9ycy9zcGxpdC1jb21tYS1kZWxpbWl0ZWQuanNcbiAqKiBtb2R1bGUgaWQgPSA1N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKHZhbHVlLmluZGV4T2YoJygnKSArIDEsIHZhbHVlLmxhc3RJbmRleE9mKCcpJykpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVoxYm1OMGFXOXVMV0p5WldGckxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eFZRVUZCTEV0QlFVczdVMEZCU1N4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFdEJRVXNzUTBGQlF5eFhRVUZYTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1EwRkJRU3hEUVVGRElpd2labWxzWlNJNkltWjFibU4wYVc5dUxXSnlaV0ZyTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjJZV3gxWlNBOVBpQjJZV3gxWlM1emRXSnpkSEpwYm1jb2RtRnNkV1V1YVc1a1pYaFBaaWduS0NjcElDc2dNU3dnZG1Gc2RXVXViR0Z6ZEVsdVpHVjRUMllvSnlrbktTazdJbDE5XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy92YWx1ZS10eXBlcy9tYW5pcHVsYXRvcnMvZnVuY3Rpb24tYnJlYWsuanNcbiAqKiBtb2R1bGUgaWQgPSA1OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBwb3NpdGlvblRlcm1zID0gcmVxdWlyZSgnLi4vLi4vdmFsdWUtdHlwZXMvc2V0dGluZ3MvZGljdGlvbmFyeScpLnBvc2l0aW9ucyxcbiAgICBudW1Qb3NpdGlvblRlcm1zID0gcG9zaXRpb25UZXJtcy5sZW5ndGgsXG4gICAgVFJBTlNGT1JNX1BFUlNQRUNUSVZFID0gJ3RyYW5zZm9ybVBlcnNwZWN0aXZlJyxcbiAgICBTQ0FMRSA9ICdzY2FsZScsXG4gICAgUk9UQVRFID0gJ3JvdGF0ZScsXG4gICAgdGVybXMgPSB7XG4gICAgZnVuY3M6IFsndHJhbnNsYXRlJywgU0NBTEUsIFJPVEFURSwgJ3NrZXcnLCBUUkFOU0ZPUk1fUEVSU1BFQ1RJVkVdLFxuICAgIHByb3BzOiB7fSAvLyBvYmplY3RzIGFyZSBmYXN0ZXIgYXQgZGlyZWN0IGxvb2t1cHNcbn07XG5cbi8vIENyZWF0ZSB0cmFuc2Zvcm0gdGVybXNcbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZ1bmNzID0gdGVybXMuZnVuY3MsXG4gICAgICAgIHByb3BzID0gdGVybXMucHJvcHMsXG4gICAgICAgIG51bUZ1bmNzID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgY3JlYXRlUHJvcHMgPSBmdW5jdGlvbiAoZnVuY05hbWUpIHtcbiAgICAgICAgdmFyIGogPSAwO1xuXG4gICAgICAgIGZvciAoOyBqIDwgbnVtUG9zaXRpb25UZXJtczsgaisrKSB7XG4gICAgICAgICAgICBwcm9wc1tmdW5jTmFtZSArIHBvc2l0aW9uVGVybXNbal1dID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBNYW51YWxseSBhZGQgc2tldyBhbmQgdHJhbnNmb3JtIHBlcnNwZWN0aXZlIFxuICAgIHByb3BzW1JPVEFURV0gPSBwcm9wc1tTQ0FMRV0gPSBwcm9wc1tUUkFOU0ZPUk1fUEVSU1BFQ1RJVkVdID0gdHJ1ZTtcblxuICAgIC8vIExvb3Agb3ZlciBlYWNoIGZ1bmN0aW9uIG5hbWUgYW5kIGNyZWF0ZSBmdW5jdGlvbi9wcm9wZXJ0eSB0ZXJtc1xuICAgIGZvciAoOyBpIDwgbnVtRnVuY3M7IGkrKykge1xuICAgICAgICBjcmVhdGVQcm9wcyhmdW5jc1tpXSk7XG4gICAgfVxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSB0ZXJtcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblJ5WVc1elptOXliUzFrYVdOMGFXOXVZWEo1TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRmxCUVZrc1EwRkJRenM3UVVGRllpeEpRVUZKTEdGQlFXRXNSMEZCUnl4UFFVRlBMRU5CUVVNc2RVTkJRWFZETEVOQlFVTXNRMEZCUXl4VFFVRlRPMGxCUXpGRkxHZENRVUZuUWl4SFFVRkhMR0ZCUVdFc1EwRkJReXhOUVVGTk8wbEJSWFpETEhGQ1FVRnhRaXhIUVVGSExITkNRVUZ6UWp0SlFVTTVReXhMUVVGTExFZEJRVWNzVDBGQlR6dEpRVU5tTEUxQlFVMHNSMEZCUnl4UlFVRlJPMGxCUTJwQ0xFdEJRVXNzUjBGQlJ6dEJRVU5LTEZOQlFVc3NSVUZCUlN4RFFVRkRMRmRCUVZjc1JVRkJSU3hMUVVGTExFVkJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlN4eFFrRkJjVUlzUTBGQlF6dEJRVU5zUlN4VFFVRkxMRVZCUVVVc1JVRkJSVHRCUVVGQkxFTkJRMW83T3p0QlFVRkRMRUZCUjA0c1EwRkJReXhaUVVGWk8wRkJRMVFzVVVGQlNTeExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRXRCUVVzN1VVRkRia0lzUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxPMUZCUTI1Q0xGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFR0UlFVTjJRaXhEUVVGRExFZEJRVWNzUTBGQlF6dFJRVVZNTEZkQlFWY3NSMEZCUnl4VlFVRlZMRkZCUVZFc1JVRkJSVHRCUVVNNVFpeFpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN08wRkJSVllzWlVGQlR5eERRVUZETEVkQlFVY3NaMEpCUVdkQ0xFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdRVUZET1VJc2FVSkJRVXNzUTBGQlF5eFJRVUZSTEVkQlFVY3NZVUZCWVN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETzFOQlF6ZERPMHRCUTBvN096dEJRVUZETEVGQlIwNHNVMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNSMEZCUnl4SlFVRkpPenM3UVVGQlF5eEJRVWR1UlN4WFFVRlBMRU5CUVVNc1IwRkJSeXhSUVVGUkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdRVUZEZEVJc2JVSkJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRMUVVONlFqdERRVU5LTEVOQlFVRXNSVUZCUnl4RFFVRkRPenRCUVVWTUxFMUJRVTBzUTBGQlF5eFBRVUZQTEVkQlFVY3NTMEZCU3l4RFFVRkRJaXdpWm1sc1pTSTZJblJ5WVc1elptOXliUzFrYVdOMGFXOXVZWEo1TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWNiblpoY2lCd2IzTnBkR2x2YmxSbGNtMXpJRDBnY21WeGRXbHlaU2duTGk0dkxpNHZkbUZzZFdVdGRIbHdaWE12YzJWMGRHbHVaM012WkdsamRHbHZibUZ5ZVNjcExuQnZjMmwwYVc5dWN5eGNiaUFnSUNCdWRXMVFiM05wZEdsdmJsUmxjbTF6SUQwZ2NHOXphWFJwYjI1VVpYSnRjeTVzWlc1bmRHZ3NYRzVjYmlBZ0lDQlVVa0ZPVTBaUFVrMWZVRVZTVTFCRlExUkpWa1VnUFNBbmRISmhibk5tYjNKdFVHVnljM0JsWTNScGRtVW5MRnh1SUNBZ0lGTkRRVXhGSUQwZ0ozTmpZV3hsSnl4Y2JpQWdJQ0JTVDFSQlZFVWdQU0FuY205MFlYUmxKeXhjYmlBZ0lDQjBaWEp0Y3lBOUlIdGNiaUFnSUNBZ0lDQWdablZ1WTNNNklGc25kSEpoYm5Oc1lYUmxKeXdnVTBOQlRFVXNJRkpQVkVGVVJTd2dKM05yWlhjbkxDQlVVa0ZPVTBaUFVrMWZVRVZTVTFCRlExUkpWa1ZkTEZ4dUlDQWdJQ0FnSUNCd2NtOXdjem9nZTMwZ0x5OGdiMkpxWldOMGN5QmhjbVVnWm1GemRHVnlJR0YwSUdScGNtVmpkQ0JzYjI5cmRYQnpYRzRnSUNBZ2ZUdGNibHh1THk4Z1EzSmxZWFJsSUhSeVlXNXpabTl5YlNCMFpYSnRjMXh1S0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCMllYSWdablZ1WTNNZ1BTQjBaWEp0Y3k1bWRXNWpjeXhjYmlBZ0lDQWdJQ0FnY0hKdmNITWdQU0IwWlhKdGN5NXdjbTl3Y3l4Y2JpQWdJQ0FnSUNBZ2JuVnRSblZ1WTNNZ1BTQm1kVzVqY3k1c1pXNW5kR2dzWEc0Z0lDQWdJQ0FnSUdrZ1BTQXdMRnh1WEc0Z0lDQWdJQ0FnSUdOeVpXRjBaVkJ5YjNCeklEMGdablZ1WTNScGIyNGdLR1oxYm1OT1lXMWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYWlBOUlEQTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvT3lCcUlEd2diblZ0VUc5emFYUnBiMjVVWlhKdGN6c2dhaXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjSE5iWm5WdVkwNWhiV1VnS3lCd2IzTnBkR2x2YmxSbGNtMXpXMnBkWFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdYRzRnSUNBZ0x5OGdUV0Z1ZFdGc2JIa2dZV1JrSUhOclpYY2dZVzVrSUhSeVlXNXpabTl5YlNCd1pYSnpjR1ZqZEdsMlpTQWdYRzRnSUNBZ2NISnZjSE5iVWs5VVFWUkZYU0E5SUhCeWIzQnpXMU5EUVV4RlhTQTlJSEJ5YjNCelcxUlNRVTVUUms5U1RWOVFSVkpUVUVWRFZFbFdSVjBnUFNCMGNuVmxPMXh1SUNBZ0lGeHVJQ0FnSUM4dklFeHZiM0FnYjNabGNpQmxZV05vSUdaMWJtTjBhVzl1SUc1aGJXVWdZVzVrSUdOeVpXRjBaU0JtZFc1amRHbHZiaTl3Y205d1pYSjBlU0IwWlhKdGMxeHVJQ0FnSUdadmNpQW9PeUJwSUR3Z2JuVnRSblZ1WTNNN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCamNtVmhkR1ZRY205d2N5aG1kVzVqYzF0cFhTazdYRzRnSUNBZ2ZWeHVmU2tvS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjBaWEp0Y3pzaVhYMD1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3JvbGVzL2Nzcy90cmFuc2Zvcm0tZGljdGlvbmFyeS5qc1xuICoqIG1vZHVsZSBpZCA9IDU5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEFjdGlvbiA9IHJlcXVpcmUoJy4vQWN0aW9uJyksXG4gICAgY2FsYyA9IHJlcXVpcmUoJy4uL2luYy9jYWxjJyksXG4gICAgaXNTdHJpbmcgPSByZXF1aXJlKCcuLi9pbmMvdXRpbHMnKS5pc1N0cmluZyxcblxuLypcbiAgICBUcmFuc2xhdGUgb3VyIG1hcExpbmsgdmFsdWUgaW50byBtYXBUb1xuICAgIFxuICAgIEBwYXJhbSBbbnVtYmVyXTogQ2FsY3VsYXRlZCB2YWx1ZSBmcm9tIGxpbmtlZCB2YWx1ZVxuICAgIEBwYXJhbSBbVmFsdWUgfHwgb2JqZWN0XTogTGlua2VkIHZhbHVlIG9yIGVtcHR5IG9iamVjdCBpZiB3ZSdyZSBsaW5raW5nIHRvIGlucHV0XG4gICAgQHBhcmFtIFthcnJheV06IExpc3Qgb2YgbnVtYmVycyByZWxhdGluZyB0byBsaW5rZWQgdmFsdWVcbiAgICBAcGFyYW0gW2FycmF5XTogTGlzdCBvZiBudW1iZXJzIHJlbGF0aW5nIHRvIHRoaXMgdmFsdWVcbiovXG5maW5kTWFwcGVkVmFsdWUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGxpbmtlZFZhbHVlLCB0b1ZhbHVlLCBtYXBMaW5rLCBtYXBUbykge1xuICAgIHZhciBtYXBMZW5ndGggPSBtYXBMaW5rLmxlbmd0aCxcbiAgICAgICAgaSA9IDEsXG4gICAgICAgIGxhc3RMaW5rVmFsdWUsXG4gICAgICAgIHRoaXNMaW5rVmFsdWUsXG4gICAgICAgIGxhc3RUb1ZhbHVlLFxuICAgICAgICB0aGlzVG9WYWx1ZTtcblxuICAgIGZvciAoOyBpIDwgbWFwTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gQXNzaWduIHZhbHVlcyBmcm9tIGFycmF5LCBvciBpZiB0aGV5J3JlIHN0cmluZ3MsIGxvb2sgZm9yIHRoZW0gaW4gbGlua2VkVmFsdWVcbiAgICAgICAgbGFzdExpbmtWYWx1ZSA9IGlzU3RyaW5nKG1hcExpbmtbaSAtIDFdKSA/IGxpbmtlZFZhbHVlW21hcExpbmtbaSAtIDFdXSA6IG1hcExpbmtbaSAtIDFdO1xuICAgICAgICB0aGlzTGlua1ZhbHVlID0gaXNTdHJpbmcobWFwTGlua1tpXSkgPyBsaW5rZWRWYWx1ZVttYXBMaW5rW2ldXSA6IG1hcExpbmtbaV07XG4gICAgICAgIGxhc3RUb1ZhbHVlID0gaXNTdHJpbmcobWFwVG9baSAtIDFdKSA/IHRvVmFsdWVbbWFwVG9baSAtIDFdXSA6IG1hcFRvW2kgLSAxXTtcbiAgICAgICAgdGhpc1RvVmFsdWUgPSBpc1N0cmluZyhtYXBUb1tpXSkgPyB0b1ZhbHVlW21hcFRvW2ldXSA6IG1hcFRvW2ldO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHdlJ3ZlIGdvbmUgcGFzdCBvdXIgY2FsY3VsYXRlZCB2YWx1ZSwgb3IgaWYgd2UncmUgYXQgdGhlIGVuZCBvZiB0aGUgYXJyYXlcbiAgICAgICAgaWYgKG5ld1ZhbHVlIDwgdGhpc0xpbmtWYWx1ZSB8fCBpID09PSBtYXBMZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNhbGMudmFsdWUoY2FsYy5yZXN0cmljdGVkKGNhbGMucHJvZ3Jlc3MobmV3VmFsdWUsIGxhc3RMaW5rVmFsdWUsIHRoaXNMaW5rVmFsdWUpLCAwLCAxKSwgbGFzdFRvVmFsdWUsIHRoaXNUb1ZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xufTtcblxudmFyIFdhdGNoID0gKGZ1bmN0aW9uIChfQWN0aW9uKSB7XG4gICAgX2luaGVyaXRzKFdhdGNoLCBfQWN0aW9uKTtcblxuICAgIGZ1bmN0aW9uIFdhdGNoKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2F0Y2gpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0FjdGlvbi5jYWxsLmFwcGx5KF9BY3Rpb24sIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgICAgICBfdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvKlxuICAgICAgICBQcm9jZXNzIHRoaXMgdmFsdWVcbiAgICAgICAgXG4gICAgICAgIEZpcnN0IGNoZWNrIGlmIHRoaXMgdmFsdWUgZXhpc3RzIGFzIGEgVmFsdWUsIGlmIG5vdFxuICAgICAgICBjaGVjayB3aXRoaW4gSW5wdXQgKGlmIHdlIGhhdmUgb25lKVxuICAgICAgICAgICAgXG4gICAgICAgIEBwYXJhbSBbQWN0b3JdXG4gICAgICAgIEBwYXJhbSBbVmFsdWVdOiBDdXJyZW50IHZhbHVlXG4gICAgICAgIEBwYXJhbSBbc3RyaW5nXTogS2V5IG9mIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgQHJldHVybiBbbnVtYmVyXTogQ2FsY3VsYXRlZCB2YWx1ZVxuICAgICovXG5cbiAgICBXYXRjaC5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uIHByb2Nlc3MoYWN0b3IsIHZhbHVlLCBrZXkpIHtcbiAgICAgICAgdmFyIHdhdGNoZWRLZXkgPSB2YWx1ZS53YXRjaDtcbiAgICAgICAgdmFyIHdhdGNoZWRWYWx1ZSA9IDA7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBhY3Rvci52YWx1ZXM7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlLmN1cnJlbnQ7XG4gICAgICAgIHZhciBpbnB1dE9mZnNldCA9IHZhbHVlLmFjdGlvbiA/IHZhbHVlLmFjdGlvbi5pbnB1dE9mZnNldCA6IGZhbHNlO1xuXG4gICAgICAgIGlmIChpc1N0cmluZyh3YXRjaGVkS2V5KSkge1xuICAgICAgICAgICAgd2F0Y2hlZFZhbHVlID0gdmFsdWVzW3dhdGNoZWRLZXldID8gdmFsdWVzW3dhdGNoZWRLZXldIDoge307XG5cbiAgICAgICAgICAgIC8vIEZpcnN0IGxvb2sgYXQgQWN0aW9uIGFuZCBjaGVjayB2YWx1ZSBpc24ndCBsaW5raW5nIGl0c2VsZlxuICAgICAgICAgICAgaWYgKHdhdGNoZWRWYWx1ZS5jdXJyZW50ICE9PSB1bmRlZmluZWQgJiYga2V5ICE9PSB3YXRjaGVkS2V5KSB7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSB3YXRjaGVkVmFsdWUuY3VycmVudDtcblxuICAgICAgICAgICAgICAgIC8vIFRoZW4gY2hlY2sgdmFsdWVzIGluIElucHV0XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0T2Zmc2V0ICYmIGlucHV0T2Zmc2V0Lmhhc093blByb3BlcnR5KHdhdGNoZWRLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWUuYWN0aW9uLnByb2Nlc3MoYWN0b3IsIHZhbHVlLCB3YXRjaGVkS2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHdhdGNoZWRLZXkoYWN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBtYXBGcm9tIGFuZCBtYXBUbyBwcm9wZXJ0aWVzLCB0cmFuc2xhdGUgdGhlIG5ldyB2YWx1ZVxuICAgICAgICBpZiAodmFsdWUubWFwRnJvbSAmJiB2YWx1ZS5tYXBUbykge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBmaW5kTWFwcGVkVmFsdWUobmV3VmFsdWUsIHdhdGNoZWRWYWx1ZSwgdmFsdWUsIHZhbHVlLm1hcEZyb20sIHZhbHVlLm1hcFRvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFdhdGNoO1xufSkoQWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXYXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbGRoZEdOb0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN08wRkJRVUVzU1VGQlNTeE5RVUZOTEVkQlFVY3NUMEZCVHl4RFFVRkRMRlZCUVZVc1EwRkJRenRKUVVNMVFpeEpRVUZKTEVkQlFVY3NUMEZCVHl4RFFVRkRMR0ZCUVdFc1EwRkJRenRKUVVNM1FpeFJRVUZSTEVkQlFVY3NUMEZCVHl4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRExGRkJRVkU3T3pzN096czdPenM3UVVGVk0wTXNaVUZCWlN4SFFVRkhMRlZCUVZVc1VVRkJVU3hGUVVGRkxGZEJRVmNzUlVGQlJTeFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVONFJTeFJRVUZKTEZOQlFWTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1RVRkJUVHRSUVVNeFFpeERRVUZETEVkQlFVY3NRMEZCUXp0UlFVTk1MR0ZCUVdFN1VVRkRZaXhoUVVGaE8xRkJRMklzVjBGQlZ6dFJRVU5ZTEZkQlFWY3NRMEZCUXpzN1FVRkZhRUlzVjBGQlR5eERRVUZETEVkQlFVY3NVMEZCVXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk96dEJRVVYyUWl4eFFrRkJZU3hIUVVGSExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVjBGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM2hHTEhGQ1FVRmhMRWRCUVVjc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRmRCUVZjc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE5VVXNiVUpCUVZjc1IwRkJSeXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNMVJTeHRRa0ZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenM3TzBGQlFVTXNRVUZIYUVVc1dVRkJTU3hSUVVGUkxFZEJRVWNzWVVGQllTeEpRVUZKTEVOQlFVTXNTMEZCU3l4VFFVRlRMRWRCUVVjc1EwRkJReXhGUVVGRk8wRkJRMnBFTEc5Q1FVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeEZRVUZGTEdGQlFXRXNSVUZCUlN4aFFVRmhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNWMEZCVnl4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRE8wRkJRemxJTEd0Q1FVRk5PMU5CUTFRN1MwRkRTanM3UVVGRlJDeFhRVUZQTEZGQlFWRXNRMEZCUXp0RFFVTnVRaXhEUVVGRE96dEpRVVZCTEV0QlFVczdZMEZCVEN4TFFVRkxPenRCUVVOUUxHRkJSRVVzUzBGQlN5eEhRVU5qT3poQ1FVUnVRaXhMUVVGTE96c3dRMEZEVVN4SlFVRkpPMEZCUVVvc1owSkJRVWs3T3p0eFJFRkRaaXd3UTBGQlV5eEpRVUZKTEVWQlFVTTdPMEZCUTJRc1kwRkJTeXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZET3p0TFFVTjRRanM3T3pzN096czdPenM3T3p0QlFVRkJPMEZCU2tNc1UwRkJTeXhYUVdsQ1VDeFBRVUZQTEc5Q1FVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUjBGQlJ5eEZRVUZGTzBGQlEzWkNMRmxCUVUwc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTTdRVUZETDBJc1dVRkJTU3haUVVGWkxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEzSkNMRmxCUVVrc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZETVVJc1dVRkJTU3hSUVVGUkxFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXp0QlFVTTNRaXhaUVVGSkxGZEJRVmNzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zVjBGQlZ5eEhRVUZITEV0QlFVc3NRMEZCUXpzN1FVRkZiRVVzV1VGQlNTeFJRVUZSTEVOQlFVTXNWVUZCVlN4RFFVRkRMRVZCUVVVN1FVRkRkRUlzZDBKQlFWa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4SFFVRkhMRVZCUVVVN096dEJRVUZETEVGQlJ6VkVMR2RDUVVGSkxGbEJRVmtzUTBGQlF5eFBRVUZQTEV0QlFVc3NVMEZCVXl4SlFVRkpMRWRCUVVjc1MwRkJTeXhWUVVGVkxFVkJRVVU3UVVGRE1VUXNkMEpCUVZFc1IwRkJSeXhaUVVGWkxFTkJRVU1zVDBGQlR6czdPMEZCUVVNc1lVRkhia01zVFVGQlRTeEpRVUZKTEZkQlFWY3NTVUZCU1N4WFFVRlhMRU5CUVVNc1kwRkJZeXhEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTzBGQlF6bEVMRFJDUVVGUkxFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeFZRVUZWTEVOQlFVTXNRMEZCUXp0cFFrRkROMFE3VTBGRlNpeE5RVUZOTzBGQlEwZ3NiMEpCUVZFc1IwRkJSeXhWUVVGVkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVMEZEYUVNN096dEJRVUZCTEVGQlIwUXNXVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhKUVVGSkxFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZET1VJc2IwSkJRVkVzUjBGQlJ5eGxRVUZsTEVOQlFVTXNVVUZCVVN4RlFVRkZMRmxCUVZrc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGRGVrWTdPMEZCUlVRc1pVRkJUeXhSUVVGUkxFTkJRVU03UzBGRGJrSTdPMWRCT1VORExFdEJRVXM3UjBGQlV5eE5RVUZOT3p0QlFXbEVNVUlzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVNaUxDSm1hV3hsSWpvaVYyRjBZMmd1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnNaWFFnUVdOMGFXOXVJRDBnY21WeGRXbHlaU2duTGk5QlkzUnBiMjRuS1N4Y2JpQWdJQ0JqWVd4aklEMGdjbVZ4ZFdseVpTZ25MaTR2YVc1akwyTmhiR01uS1N4Y2JpQWdJQ0JwYzFOMGNtbHVaeUE5SUhKbGNYVnBjbVVvSnk0dUwybHVZeTkxZEdsc2N5Y3BMbWx6VTNSeWFXNW5MRnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdJQ0FnVkhKaGJuTnNZWFJsSUc5MWNpQnRZWEJNYVc1cklIWmhiSFZsSUdsdWRHOGdiV0Z3Vkc5Y2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lFQndZWEpoYlNCYmJuVnRZbVZ5WFRvZ1EyRnNZM1ZzWVhSbFpDQjJZV3gxWlNCbWNtOXRJR3hwYm10bFpDQjJZV3gxWlZ4dUlDQWdJQ0FnSUNCQWNHRnlZVzBnVzFaaGJIVmxJSHg4SUc5aWFtVmpkRjA2SUV4cGJtdGxaQ0IyWVd4MVpTQnZjaUJsYlhCMGVTQnZZbXBsWTNRZ2FXWWdkMlVuY21VZ2JHbHVhMmx1WnlCMGJ5QnBibkIxZEZ4dUlDQWdJQ0FnSUNCQWNHRnlZVzBnVzJGeWNtRjVYVG9nVEdsemRDQnZaaUJ1ZFcxaVpYSnpJSEpsYkdGMGFXNW5JSFJ2SUd4cGJtdGxaQ0IyWVd4MVpWeHVJQ0FnSUNBZ0lDQkFjR0Z5WVcwZ1cyRnljbUY1WFRvZ1RHbHpkQ0J2WmlCdWRXMWlaWEp6SUhKbGJHRjBhVzVuSUhSdklIUm9hWE1nZG1Gc2RXVmNiaUFnSUNBcUwxeHVJQ0FnSUdacGJtUk5ZWEJ3WldSV1lXeDFaU0E5SUdaMWJtTjBhVzl1SUNodVpYZFdZV3gxWlN3Z2JHbHVhMlZrVm1Gc2RXVXNJSFJ2Vm1Gc2RXVXNJRzFoY0V4cGJtc3NJRzFoY0ZSdktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdFlYQk1aVzVuZEdnZ1BTQnRZWEJNYVc1ckxteGxibWQwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2tnUFNBeExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdGemRFeHBibXRXWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTk1hVzVyVm1Gc2RXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYTjBWRzlXWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTlViMVpoYkhWbE8xeHVYRzRnSUNBZ0lDQWdJR1p2Y2lBb095QnBJRHdnYldGd1RHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRUZ6YzJsbmJpQjJZV3gxWlhNZ1puSnZiU0JoY25KaGVTd2diM0lnYVdZZ2RHaGxlU2R5WlNCemRISnBibWR6TENCc2IyOXJJR1p2Y2lCMGFHVnRJR2x1SUd4cGJtdGxaRlpoYkhWbFhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWVhOMFRHbHVhMVpoYkhWbElEMGdhWE5UZEhKcGJtY29iV0Z3VEdsdWExdHBJQzBnTVYwcElEOGdiR2x1YTJWa1ZtRnNkV1ZiYldGd1RHbHVhMXRwSUMwZ01WMWRJRG9nYldGd1RHbHVhMXRwSUMwZ01WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpUR2x1YTFaaGJIVmxJRDBnYVhOVGRISnBibWNvYldGd1RHbHVhMXRwWFNrZ1B5QnNhVzVyWldSV1lXeDFaVnR0WVhCTWFXNXJXMmxkWFNBNklHMWhjRXhwYm10YmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYTjBWRzlXWVd4MVpTQTlJR2x6VTNSeWFXNW5LRzFoY0ZSdlcya2dMU0F4WFNrZ1B5QjBiMVpoYkhWbFcyMWhjRlJ2VzJrZ0xTQXhYVjBnT2lCdFlYQlViMXRwSUMwZ01WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpWRzlXWVd4MVpTQTlJR2x6VTNSeWFXNW5LRzFoY0ZSdlcybGRLU0EvSUhSdlZtRnNkV1ZiYldGd1ZHOWJhVjFkSURvZ2JXRndWRzliYVYwN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFTm9aV05ySUdsbUlIZGxKM1psSUdkdmJtVWdjR0Z6ZENCdmRYSWdZMkZzWTNWc1lYUmxaQ0IyWVd4MVpTd2diM0lnYVdZZ2QyVW5jbVVnWVhRZ2RHaGxJR1Z1WkNCdlppQjBhR1VnWVhKeVlYbGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVaWGRXWVd4MVpTQThJSFJvYVhOTWFXNXJWbUZzZFdVZ2ZId2dhU0E5UFQwZ2JXRndUR1Z1WjNSb0lDMGdNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGQxWmhiSFZsSUQwZ1kyRnNZeTUyWVd4MVpTaGpZV3hqTG5KbGMzUnlhV04wWldRb1kyRnNZeTV3Y205bmNtVnpjeWh1WlhkV1lXeDFaU3dnYkdGemRFeHBibXRXWVd4MVpTd2dkR2hwYzB4cGJtdFdZV3gxWlNrc0lEQXNJREVwTENCc1lYTjBWRzlXWVd4MVpTd2dkR2hwYzFSdlZtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzVm1Gc2RXVTdYRzRnSUNBZ2ZUdGNibHh1WTJ4aGMzTWdWMkYwWTJnZ1pYaDBaVzVrY3lCQlkzUnBiMjRnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0M0dUxtRnlaM01wSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvTGk0dVlYSm5jeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWE5CWTNScGRtVWdQU0IwY25WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cVhHNGdJQ0FnSUNBZ0lGQnliMk5sYzNNZ2RHaHBjeUIyWVd4MVpWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdSbWx5YzNRZ1kyaGxZMnNnYVdZZ2RHaHBjeUIyWVd4MVpTQmxlR2x6ZEhNZ1lYTWdZU0JXWVd4MVpTd2dhV1lnYm05MFhHNGdJQ0FnSUNBZ0lHTm9aV05ySUhkcGRHaHBiaUJKYm5CMWRDQW9hV1lnZDJVZ2FHRjJaU0J2Ym1VcFhHNGdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnUUhCaGNtRnRJRnRCWTNSdmNsMWNiaUFnSUNBZ0lDQWdRSEJoY21GdElGdFdZV3gxWlYwNklFTjFjbkpsYm5RZ2RtRnNkV1ZjYmlBZ0lDQWdJQ0FnUUhCaGNtRnRJRnR6ZEhKcGJtZGRPaUJMWlhrZ2IyWWdZM1Z5Y21WdWRDQjJZV3gxWlZ4dUlDQWdJQ0FnSUNCQWNtVjBkWEp1SUZ0dWRXMWlaWEpkT2lCRFlXeGpkV3hoZEdWa0lIWmhiSFZsWEc0Z0lDQWdLaTljYmlBZ0lDQndjbTlqWlhOektHRmpkRzl5TENCMllXeDFaU3dnYTJWNUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIZGhkR05vWldSTFpYa2dQU0IyWVd4MVpTNTNZWFJqYUR0Y2JpQWdJQ0FnSUNBZ2JHVjBJSGRoZEdOb1pXUldZV3gxWlNBOUlEQTdYRzRnSUNBZ0lDQWdJR3hsZENCMllXeDFaWE1nUFNCaFkzUnZjaTUyWVd4MVpYTTdYRzRnSUNBZ0lDQWdJR3hsZENCdVpYZFdZV3gxWlNBOUlIWmhiSFZsTG1OMWNuSmxiblE3WEc0Z0lDQWdJQ0FnSUd4bGRDQnBibkIxZEU5bVpuTmxkQ0E5SUhaaGJIVmxMbUZqZEdsdmJpQS9JSFpoYkhWbExtRmpkR2x2Ymk1cGJuQjFkRTltWm5ObGRDQTZJR1poYkhObE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNocGMxTjBjbWx1WnloM1lYUmphR1ZrUzJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QyRjBZMmhsWkZaaGJIVmxJRDBnZG1Gc2RXVnpXM2RoZEdOb1pXUkxaWGxkSUQ4Z2RtRnNkV1Z6VzNkaGRHTm9aV1JMWlhsZElEb2dlMzA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVacGNuTjBJR3h2YjJzZ1lYUWdRV04wYVc5dUlHRnVaQ0JqYUdWamF5QjJZV3gxWlNCcGMyNG5kQ0JzYVc1cmFXNW5JR2wwYzJWc1pseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGhkR05vWldSV1lXeDFaUzVqZFhKeVpXNTBJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdhMlY1SUNFOVBTQjNZWFJqYUdWa1MyVjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM1ZtRnNkV1VnUFNCM1lYUmphR1ZrVm1Gc2RXVXVZM1Z5Y21WdWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVkdobGJpQmphR1ZqYXlCMllXeDFaWE1nYVc0Z1NXNXdkWFJjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9hVzV3ZFhSUFptWnpaWFFnSmlZZ2FXNXdkWFJQWm1aelpYUXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2QyRjBZMmhsWkV0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhkV1lXeDFaU0E5SUhaaGJIVmxMbUZqZEdsdmJpNXdjbTlqWlhOektHRmpkRzl5TENCMllXeDFaU3dnZDJGMFkyaGxaRXRsZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZDFaaGJIVmxJRDBnZDJGMFkyaGxaRXRsZVNoaFkzUnZjaWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJKWmlCM1pTQm9ZWFpsSUcxaGNFWnliMjBnWVc1a0lHMWhjRlJ2SUhCeWIzQmxjblJwWlhNc0lIUnlZVzV6YkdGMFpTQjBhR1VnYm1WM0lIWmhiSFZsWEc0Z0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlM1dFlYQkdjbTl0SUNZbUlIWmhiSFZsTG0xaGNGUnZLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGRXWVd4MVpTQTlJR1pwYm1STllYQndaV1JXWVd4MVpTaHVaWGRXWVd4MVpTd2dkMkYwWTJobFpGWmhiSFZsTENCMllXeDFaU3dnZG1Gc2RXVXViV0Z3Um5KdmJTd2dkbUZzZFdVdWJXRndWRzhwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkMVpoYkhWbE8xeHVJQ0FnSUgxY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JYWVhSamFEc2lYWDA9XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9hY3Rpb25zL1dhdGNoLmpzXG4gKiogbW9kdWxlIGlkID0gNjBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIiwiZmlsZSI6InBvcG1vdGlvbi5nbG9iYWwuanMifQ==