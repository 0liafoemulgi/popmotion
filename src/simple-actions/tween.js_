class Tween extends Action {
  static defaultProps = {
  dilate: 1,
  duration: 300,
  ease: easing.easeOut,
  elapsed: 0,
  isScrubbing: false,
  playDirection: 1
  }

  constructor(props) {

  }

  start() {
  this.elapsed = 0;
  this.flipCount = this.yoyoCount = this.loopCount = 0;
  this.isScrubbing = false;

  return this;
  }

  onUpdate(framestamp, elapsed) {
  this.progress = restrict(getProgressFromValue(this.elapsed - this.delay, 0, this.duration));

  if (this.steps) {
    this.progress = stepProgress(this.progress, this.steps);
  }

  this.current = ease(this.progress, this.origin, this.target, this.ease);
  }

  onFrameEnd() {
  this.ended = (this.progress === 1);
  }

  seek(progress) {
  this.seekTime(this.duration * progress);
  return this;
  }

  seekTime(elapsed) {

  }
}

/**
 * [tween description]
 * @param  {[type]} from [description]
 * @param  {[type]} to   [description]
 * @param  {[type]} opts [description]
 * @return {[type]}    [description]
 */
function tween(origin, target, opts = {}) {
  opts.from = origin;
  opts.to = target;

  return new Tween(opts);
}