"use strict";

var Role = require('../Role');
var build = require('./build');

var prefixes = ['Webkit', 'Moz', 'O', 'ms', ''];
var numPrefixes = prefixes.length;
var propertyNameCache = {};
var testElement;

/*
    Test style property for prefixed version
    
    @param [string]: Style property
    @return [string]: Cached property name
*/
var testPrefix = function (key) {
    testElement = testElement || document.createElement('div');

    if (propertyNameCache[key] === false) {
        return false;
    } else {
        propertyNameCache[key] = false;
    }

    for (var i = 0; i < numPrefixes; i++) {
        var prefix = prefixes[i],
            prefixed = prefix === '' ? key : prefix + key.charAt(0).toUpperCase() + key.slice(1);

        if (prefixed in testElement.style) {
            propertyNameCache[key] = prefixed;
        }
    }

    return propertyNameCache[key];
};

var cssRole = new Role({
    _map: require('./map'),
    _typeMap: require('./type-map'),

    init: function (actor) {
        actor._cssCache = {};
    },

    update: function (state, actor) {
        cssRole(actor.element, build(state, actor._cssCache));
    },

    get: function (element, key) {
        key = propertyNameCache[key] || testPrefix(key);

        if (key) {
            return window.getComputedStyle(element, null)[key];
        }
    },

    set: function (element, key, value) {
        key = propertyNameCache[key] || testPrefix(key);

        if (key) {
            element.style[key] = value;
        }
    }

});

module.exports = cssRole;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb2xlcy9jc3MvY3NzUm9sZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJLE9BQU8sUUFBUSxTQUFSLENBQVA7QUFDSixJQUFJLFFBQVEsUUFBUSxTQUFSLENBQVI7O0FBRUosSUFBSSxXQUFXLENBQUMsUUFBRCxFQUFVLEtBQVYsRUFBZ0IsR0FBaEIsRUFBb0IsSUFBcEIsRUFBMEIsRUFBMUIsQ0FBWDtBQUNKLElBQUksY0FBYyxTQUFTLE1BQVQ7QUFDbEIsSUFBSSxvQkFBb0IsRUFBcEI7QUFDSixJQUFJLFdBQUo7Ozs7Ozs7O0FBUUEsSUFBSSxhQUFhLFVBQVUsR0FBVixFQUFlO0FBQzVCLGtCQUFjLGVBQWUsU0FBUyxhQUFULENBQXVCLEtBQXZCLENBQWYsQ0FEYzs7QUFHNUIsUUFBSSxrQkFBa0IsR0FBbEIsTUFBMkIsS0FBM0IsRUFBa0M7QUFDbEMsZUFBTyxLQUFQLENBRGtDO0tBQXRDLE1BRU87QUFDSCwwQkFBa0IsR0FBbEIsSUFBeUIsS0FBekIsQ0FERztLQUZQOztBQU1BLFNBQUssSUFBSSxJQUFJLENBQUosRUFBTyxJQUFJLFdBQUosRUFBaUIsR0FBakMsRUFBc0M7QUFDbEMsWUFBSSxTQUFTLFNBQVMsQ0FBVCxDQUFUO1lBQ0EsV0FBVyxNQUFDLEtBQVcsRUFBWCxHQUFpQixHQUFsQixHQUF3QixTQUFTLElBQUksTUFBSixDQUFXLENBQVgsRUFBYyxXQUFkLEVBQVQsR0FBdUMsSUFBSSxLQUFKLENBQVUsQ0FBVixDQUF2QyxDQUZMOztBQUlsQyxZQUFJLFlBQVksWUFBWSxLQUFaLEVBQW1CO0FBQy9CLDhCQUFrQixHQUFsQixJQUF5QixRQUF6QixDQUQrQjtTQUFuQztLQUpKOztBQVNBLFdBQU8sa0JBQWtCLEdBQWxCLENBQVAsQ0FsQjRCO0NBQWY7O0FBcUJqQixJQUFJLFVBQVUsSUFBSSxJQUFKLENBQVM7QUFDbkIsVUFBTSxRQUFRLE9BQVIsQ0FBTjtBQUNBLGNBQVUsUUFBUSxZQUFSLENBQVY7O0FBRUEsVUFBTSxVQUFVLEtBQVYsRUFBaUI7QUFDbkIsY0FBTSxTQUFOLEdBQWtCLEVBQWxCLENBRG1CO0tBQWpCOztBQUlOLFlBQVEsVUFBVSxLQUFWLEVBQWlCLEtBQWpCLEVBQXdCO0FBQzVCLGdCQUFRLE1BQU0sT0FBTixFQUFlLE1BQU0sS0FBTixFQUFhLE1BQU0sU0FBTixDQUFwQyxFQUQ0QjtLQUF4Qjs7QUFJUixTQUFLLFVBQVUsT0FBVixFQUFtQixHQUFuQixFQUF3QjtBQUN6QixjQUFNLGtCQUFrQixHQUFsQixLQUEwQixXQUFXLEdBQVgsQ0FBMUIsQ0FEbUI7O0FBR3pCLFlBQUksR0FBSixFQUFTO0FBQ0wsbUJBQU8sT0FBTyxnQkFBUCxDQUF3QixPQUF4QixFQUFpQyxJQUFqQyxFQUF1QyxHQUF2QyxDQUFQLENBREs7U0FBVDtLQUhDOztBQVFMLFNBQUssVUFBVSxPQUFWLEVBQW1CLEdBQW5CLEVBQXdCLEtBQXhCLEVBQStCO0FBQ2hDLGNBQU0sa0JBQWtCLEdBQWxCLEtBQTBCLFdBQVcsR0FBWCxDQUExQixDQUQwQjs7QUFHaEMsWUFBSSxHQUFKLEVBQVM7QUFDTCxvQkFBUSxLQUFSLENBQWMsR0FBZCxJQUFxQixLQUFyQixDQURLO1NBQVQ7S0FIQzs7Q0FwQkssQ0FBVjs7QUE4QkosT0FBTyxPQUFQLEdBQWlCLE9BQWpCIiwiZmlsZSI6ImNzc1JvbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIFJvbGUgPSByZXF1aXJlKCcuLi9Sb2xlJyk7XG52YXIgYnVpbGQgPSByZXF1aXJlKCcuL2J1aWxkJyk7XG5cbnZhciBwcmVmaXhlcyA9IFsnV2Via2l0JywnTW96JywnTycsJ21zJywgJyddO1xudmFyIG51bVByZWZpeGVzID0gcHJlZml4ZXMubGVuZ3RoO1xudmFyIHByb3BlcnR5TmFtZUNhY2hlID0ge307XG52YXIgdGVzdEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIFxuLypcbiAgICBUZXN0IHN0eWxlIHByb3BlcnR5IGZvciBwcmVmaXhlZCB2ZXJzaW9uXG4gICAgXG4gICAgQHBhcmFtIFtzdHJpbmddOiBTdHlsZSBwcm9wZXJ0eVxuICAgIEByZXR1cm4gW3N0cmluZ106IENhY2hlZCBwcm9wZXJ0eSBuYW1lXG4qL1xudmFyIHRlc3RQcmVmaXggPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdGVzdEVsZW1lbnQgPSB0ZXN0RWxlbWVudCB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGlmIChwcm9wZXJ0eU5hbWVDYWNoZVtrZXldID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcHJvcGVydHlOYW1lQ2FjaGVba2V5XSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtUHJlZml4ZXM7IGkrKykge1xuICAgICAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV0sXG4gICAgICAgICAgICBwcmVmaXhlZCA9IChwcmVmaXggPT09ICcnKSA/IGtleSA6IHByZWZpeCArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKTtcblxuICAgICAgICBpZiAocHJlZml4ZWQgaW4gdGVzdEVsZW1lbnQuc3R5bGUpIHtcbiAgICAgICAgICAgIHByb3BlcnR5TmFtZUNhY2hlW2tleV0gPSBwcmVmaXhlZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcHJvcGVydHlOYW1lQ2FjaGVba2V5XTtcbn07XG5cbnZhciBjc3NSb2xlID0gbmV3IFJvbGUoe1xuICAgIF9tYXA6IHJlcXVpcmUoJy4vbWFwJyksXG4gICAgX3R5cGVNYXA6IHJlcXVpcmUoJy4vdHlwZS1tYXAnKSxcblxuICAgIGluaXQ6IGZ1bmN0aW9uIChhY3Rvcikge1xuICAgICAgICBhY3Rvci5fY3NzQ2FjaGUgPSB7fTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiAoc3RhdGUsIGFjdG9yKSB7XG4gICAgICAgIGNzc1JvbGUoYWN0b3IuZWxlbWVudCwgYnVpbGQoc3RhdGUsIGFjdG9yLl9jc3NDYWNoZSkpO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uIChlbGVtZW50LCBrZXkpIHtcbiAgICAgICAga2V5ID0gcHJvcGVydHlOYW1lQ2FjaGVba2V5XSB8fCB0ZXN0UHJlZml4KGtleSk7XG5cbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpW2tleV07XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0OiBmdW5jdGlvbiAoZWxlbWVudCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBrZXkgPSBwcm9wZXJ0eU5hbWVDYWNoZVtrZXldIHx8IHRlc3RQcmVmaXgoa2V5KTtcblxuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY3NzUm9sZTsiXX0=