'use strict';

exports.__esModule = true;

var _dictionary = require('./dictionary');

var _dictionary2 = _interopRequireDefault(_dictionary);

var _typeKeys = require('./type-keys');

var _popmotion = require('popmotion');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var camelToDash = _popmotion.utils.camelToDash;
var isString = _popmotion.utils.isString;

var XYZ_TEMPLATE = '$0 $1 $2';
var TYPES = [_typeKeys.POSITION, _typeKeys.SCALE, _typeKeys.ROTATION];
var NUM_TYPES = TYPES.length;

var defaults = {};
defaults[_typeKeys.POSITION] = defaults[_typeKeys.ROTATION] = 0;
defaults[_typeKeys.SCALE] = 1;

var createTemplateProp = function (existing, position, value) {
    return (existing || XYZ_TEMPLATE).replace('$' + position, value);
};

var applyDefaults = function (type, existing) {
    return existing.replace('$0', defaults[type]).replace('$1', defaults[type]).replace('$2', defaults[type]);
};

exports.default = function (state) {
    var props = {};

    for (var key in state) {
        if (state.hasOwnProperty(key)) {
            var value = state[key];
            if (_dictionary2.default[key]) {
                props[_dictionary2.default[key].prop] = createTemplateProp(props[_dictionary2.default[key].prop], _dictionary2.default[key].position, value);
            } else {
                props[camelToDash(key)] = value;
            }
        }
    }

    for (var i = 0; i < NUM_TYPES; i++) {
        var type = TYPES[i];
        if (isString(props[type])) {
            props[type] = applyDefaults(type, props[type]);
        }
    }

    return props;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmMvYnVpbGQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFJQSxJQUFNLFdBQVcsR0FBRyxpQkFBTSxXQUFXLENBQUM7QUFDdEMsSUFBTSxRQUFRLEdBQUcsaUJBQU0sUUFBUSxDQUFDOztBQUVoQyxJQUFNLFlBQVksR0FBRyxVQUFVLENBQUM7QUFDaEMsSUFBTSxLQUFLLEdBQUcseURBQTJCLENBQUM7QUFDMUMsSUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQzs7QUFFL0IsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLFFBQVEsb0JBQVUsR0FBRyxRQUFRLG9CQUFVLEdBQUcsQ0FBQyxDQUFDO0FBQzVDLFFBQVEsaUJBQU8sR0FBRyxDQUFDLENBQUM7O0FBRXBCLElBQU0sa0JBQWtCLEdBQUcsVUFBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBSztBQUN0RCxXQUFPLENBQUMsUUFBUSxJQUFJLFlBQVksQ0FBQSxDQUFFLE9BQU8sQ0FBQyxHQUFHLEdBQUcsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3BFLENBQUE7O0FBRUQsSUFBTSxhQUFhLEdBQUcsVUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFLO0FBQ3RDLFdBQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQzdHLENBQUE7O2tCQUVjLFVBQUMsS0FBSyxFQUFLO0FBQ3RCLFFBQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQzs7QUFFakIsU0FBSyxJQUFJLEdBQUcsSUFBSSxLQUFLLEVBQUU7QUFDbkIsWUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQzNCLGdCQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekIsZ0JBQUkscUJBQVcsR0FBRyxDQUFDLEVBQUU7QUFDakIscUJBQUssQ0FBQyxxQkFBVyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMscUJBQVcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUscUJBQVcsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBRWxILE1BQU07QUFDSCxxQkFBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQzthQUNuQztTQUNKO0tBQ0o7O0FBRUQsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNoQyxZQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsWUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7QUFDdkIsaUJBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxhQUFhLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ2xEO0tBQ0o7O0FBRUQsV0FBTyxLQUFLLENBQUM7Q0FDaEIiLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGljdGlvbmFyeSBmcm9tICcuL2RpY3Rpb25hcnknO1xuaW1wb3J0IHsgUE9TSVRJT04sIFNDQUxFLCBST1RBVElPTiB9IGZyb20gJy4vdHlwZS1rZXlzJztcbmltcG9ydCB7IHV0aWxzIH0gZnJvbSAncG9wbW90aW9uJztcblxuY29uc3QgY2FtZWxUb0Rhc2ggPSB1dGlscy5jYW1lbFRvRGFzaDtcbmNvbnN0IGlzU3RyaW5nID0gdXRpbHMuaXNTdHJpbmc7XG5cbmNvbnN0IFhZWl9URU1QTEFURSA9ICckMCAkMSAkMic7XG5jb25zdCBUWVBFUyA9IFtQT1NJVElPTiwgU0NBTEUsIFJPVEFUSU9OXTtcbmNvbnN0IE5VTV9UWVBFUyA9IFRZUEVTLmxlbmd0aDtcblxubGV0IGRlZmF1bHRzID0ge307XG5kZWZhdWx0c1tQT1NJVElPTl0gPSBkZWZhdWx0c1tST1RBVElPTl0gPSAwO1xuZGVmYXVsdHNbU0NBTEVdID0gMTtcblxuY29uc3QgY3JlYXRlVGVtcGxhdGVQcm9wID0gKGV4aXN0aW5nLCBwb3NpdGlvbiwgdmFsdWUpID0+IHtcbiAgICByZXR1cm4gKGV4aXN0aW5nIHx8IFhZWl9URU1QTEFURSkucmVwbGFjZSgnJCcgKyBwb3NpdGlvbiwgdmFsdWUpO1xufVxuXG5jb25zdCBhcHBseURlZmF1bHRzID0gKHR5cGUsIGV4aXN0aW5nKSA9PiB7XG4gICAgcmV0dXJuIGV4aXN0aW5nLnJlcGxhY2UoJyQwJywgZGVmYXVsdHNbdHlwZV0pLnJlcGxhY2UoJyQxJywgZGVmYXVsdHNbdHlwZV0pLnJlcGxhY2UoJyQyJywgZGVmYXVsdHNbdHlwZV0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUpID0+IHtcbiAgICBjb25zdCBwcm9wcyA9IHt9O1xuXG4gICAgZm9yIChsZXQga2V5IGluIHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHN0YXRlW2tleV07XG4gICAgICAgICAgICBpZiAoZGljdGlvbmFyeVtrZXldKSB7XG4gICAgICAgICAgICAgICAgcHJvcHNbZGljdGlvbmFyeVtrZXldLnByb3BdID0gY3JlYXRlVGVtcGxhdGVQcm9wKHByb3BzW2RpY3Rpb25hcnlba2V5XS5wcm9wXSwgZGljdGlvbmFyeVtrZXldLnBvc2l0aW9uLCB2YWx1ZSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJvcHNbY2FtZWxUb0Rhc2goa2V5KV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTlVNX1RZUEVTOyBpKyspIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IFRZUEVTW2ldO1xuICAgICAgICBpZiAoaXNTdHJpbmcocHJvcHNbdHlwZV0pKSB7XG4gICAgICAgICAgICBwcm9wc1t0eXBlXSA9IGFwcGx5RGVmYXVsdHModHlwZSwgcHJvcHNbdHlwZV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BzO1xufVxuIl19