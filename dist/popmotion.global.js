/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _popmotion = __webpack_require__(1);
	
	var Popmotion = _interopRequireWildcard(_popmotion);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var UIref = window.Motion;
	
	Popmotion.noConflict = function () {
	  window.Motion = UIref;
	};
	
	window.Motion = window.Popmotion = Popmotion;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9nbG9iYWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7SUFBWTs7OztBQUVaLElBQU0sUUFBUSxPQUFPLE1BQVA7O0FBRWQsVUFBVSxVQUFWLEdBQXVCLFlBQVk7QUFDakMsU0FBTyxNQUFQLEdBQWdCLEtBQWhCLENBRGlDO0NBQVo7O0FBSXZCLE9BQU8sTUFBUCxHQUFnQixPQUFPLFNBQVAsR0FBbUIsU0FBbkIiLCJmaWxlIjoiZ2xvYmFsLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9NYXR0L1NpdGVzL3BvcG1vdGlvbiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFBvcG1vdGlvbiBmcm9tICcuL3BvcG1vdGlvbic7XG5cbmNvbnN0IFVJcmVmID0gd2luZG93Lk1vdGlvbjtcblxuUG9wbW90aW9uLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHdpbmRvdy5Nb3Rpb24gPSBVSXJlZjtcbn07XG5cbndpbmRvdy5Nb3Rpb24gPSB3aW5kb3cuUG9wbW90aW9uID0gUG9wbW90aW9uO1xuIl19

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Action = undefined;
	
	var _Action2 = __webpack_require__(2);
	
	var _Action3 = _interopRequireDefault(_Action2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.Action = _Action3.default;
	
	// // Import classes - long term goal to move towards composition
	// import Action from './actions/Action';
	// import Flow from './actions/Flow';
	// import Tween from './actions/Tween';
	// import Physics from './actions/Physics';
	// import Track from './actions/Track';
	// import Task from './task/Task';
	// import Input from './input/Input';
	
	// // Export factory functions
	// export const flow = (...args) => new Flow(...args);
	// export const tween = (props) => new Tween(props);
	// export const physics = (props) => new Physics(props);
	// export const track = (...args) => new Track(...args);
	// export const input = (...args) => new Input(...args);
	// export const task = (...args) => new Task(...args);
	// export stagger from './inc/stagger';
	// export timeline from './inc/timeline';
	
	// // Adapters
	// export createAdapter from './adapter/adapter';
	// export attr from './adapter/attr-adapter';
	// export css from './adapter/css-adapter';
	// export object from './adapter/object-adapter';
	// export svg from './adapter/svg-adapter';
	// export svgPath from './adapter/svg-path-adapter';
	
	// // Easing
	// export easing from './actions/easing/preset-easing';
	// import getFlow from './actions/flow/get-flow';
	// export const detectFlow = getFlow;
	
	// // Utils
	// export * as calc from './inc/calc';
	// export * as utils from './inc/utils';
	// export { setGlobalDilation } from './task/timer';
	
	// // Value types
	// import alpha from './value-types/alpha';
	// import angle from './value-types/angle';
	// import color from './value-types/color';
	// import complex from './value-types/complex';
	// import hex from './value-types/hex';
	// import hsl from './value-types/hsl';
	// import px from './value-types/px';
	// import rgb from './value-types/rgb';
	// import scale from './value-types/scale';
	// import shadow from './value-types/shadow';
	// import unit from './value-types/unit';
	// export const valueType = { alpha, angle, color, complex, hex, hsl, px, rgb, scale, shadow, unit };
	
	// // Transformers
	// export * as transformers from './inc/transformers';
	
	// /*
	//   Returns a version of the Action bound to a Flow
	
	//   We're adding `on` here because Flow extends Action,
	//   otherwise creating a circular modular dependency. Future
	//   refactoring, ie moving to a compositional model will
	//   remove the need for us to do this here.
	// */
	// Action.prototype.on = function (element) {
	//   if (!element.connect) {
	//     element = getFlow(element);
	//   }
	
	//   return element.connect(this);
	// };
	
	// export { Action };
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wb3Btb3Rpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7UUFBTyIsImZpbGUiOiJwb3Btb3Rpb24uanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL01hdHQvU2l0ZXMvcG9wbW90aW9uIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IEFjdGlvbiBmcm9tICcuL3NpbXBsZS1hY3Rpb25zL0FjdGlvbic7XG5cblxuXG5cbi8vIC8vIEltcG9ydCBjbGFzc2VzIC0gbG9uZyB0ZXJtIGdvYWwgdG8gbW92ZSB0b3dhcmRzIGNvbXBvc2l0aW9uXG4vLyBpbXBvcnQgQWN0aW9uIGZyb20gJy4vYWN0aW9ucy9BY3Rpb24nO1xuLy8gaW1wb3J0IEZsb3cgZnJvbSAnLi9hY3Rpb25zL0Zsb3cnO1xuLy8gaW1wb3J0IFR3ZWVuIGZyb20gJy4vYWN0aW9ucy9Ud2Vlbic7XG4vLyBpbXBvcnQgUGh5c2ljcyBmcm9tICcuL2FjdGlvbnMvUGh5c2ljcyc7XG4vLyBpbXBvcnQgVHJhY2sgZnJvbSAnLi9hY3Rpb25zL1RyYWNrJztcbi8vIGltcG9ydCBUYXNrIGZyb20gJy4vdGFzay9UYXNrJztcbi8vIGltcG9ydCBJbnB1dCBmcm9tICcuL2lucHV0L0lucHV0JztcblxuLy8gLy8gRXhwb3J0IGZhY3RvcnkgZnVuY3Rpb25zXG4vLyBleHBvcnQgY29uc3QgZmxvdyA9ICguLi5hcmdzKSA9PiBuZXcgRmxvdyguLi5hcmdzKTtcbi8vIGV4cG9ydCBjb25zdCB0d2VlbiA9IChwcm9wcykgPT4gbmV3IFR3ZWVuKHByb3BzKTtcbi8vIGV4cG9ydCBjb25zdCBwaHlzaWNzID0gKHByb3BzKSA9PiBuZXcgUGh5c2ljcyhwcm9wcyk7XG4vLyBleHBvcnQgY29uc3QgdHJhY2sgPSAoLi4uYXJncykgPT4gbmV3IFRyYWNrKC4uLmFyZ3MpO1xuLy8gZXhwb3J0IGNvbnN0IGlucHV0ID0gKC4uLmFyZ3MpID0+IG5ldyBJbnB1dCguLi5hcmdzKTtcbi8vIGV4cG9ydCBjb25zdCB0YXNrID0gKC4uLmFyZ3MpID0+IG5ldyBUYXNrKC4uLmFyZ3MpO1xuLy8gZXhwb3J0IHN0YWdnZXIgZnJvbSAnLi9pbmMvc3RhZ2dlcic7XG4vLyBleHBvcnQgdGltZWxpbmUgZnJvbSAnLi9pbmMvdGltZWxpbmUnO1xuXG4vLyAvLyBBZGFwdGVyc1xuLy8gZXhwb3J0IGNyZWF0ZUFkYXB0ZXIgZnJvbSAnLi9hZGFwdGVyL2FkYXB0ZXInO1xuLy8gZXhwb3J0IGF0dHIgZnJvbSAnLi9hZGFwdGVyL2F0dHItYWRhcHRlcic7XG4vLyBleHBvcnQgY3NzIGZyb20gJy4vYWRhcHRlci9jc3MtYWRhcHRlcic7XG4vLyBleHBvcnQgb2JqZWN0IGZyb20gJy4vYWRhcHRlci9vYmplY3QtYWRhcHRlcic7XG4vLyBleHBvcnQgc3ZnIGZyb20gJy4vYWRhcHRlci9zdmctYWRhcHRlcic7XG4vLyBleHBvcnQgc3ZnUGF0aCBmcm9tICcuL2FkYXB0ZXIvc3ZnLXBhdGgtYWRhcHRlcic7XG5cbi8vIC8vIEVhc2luZ1xuLy8gZXhwb3J0IGVhc2luZyBmcm9tICcuL2FjdGlvbnMvZWFzaW5nL3ByZXNldC1lYXNpbmcnO1xuLy8gaW1wb3J0IGdldEZsb3cgZnJvbSAnLi9hY3Rpb25zL2Zsb3cvZ2V0LWZsb3cnO1xuLy8gZXhwb3J0IGNvbnN0IGRldGVjdEZsb3cgPSBnZXRGbG93O1xuXG4vLyAvLyBVdGlsc1xuLy8gZXhwb3J0ICogYXMgY2FsYyBmcm9tICcuL2luYy9jYWxjJztcbi8vIGV4cG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vaW5jL3V0aWxzJztcbi8vIGV4cG9ydCB7IHNldEdsb2JhbERpbGF0aW9uIH0gZnJvbSAnLi90YXNrL3RpbWVyJztcblxuLy8gLy8gVmFsdWUgdHlwZXNcbi8vIGltcG9ydCBhbHBoYSBmcm9tICcuL3ZhbHVlLXR5cGVzL2FscGhhJztcbi8vIGltcG9ydCBhbmdsZSBmcm9tICcuL3ZhbHVlLXR5cGVzL2FuZ2xlJztcbi8vIGltcG9ydCBjb2xvciBmcm9tICcuL3ZhbHVlLXR5cGVzL2NvbG9yJztcbi8vIGltcG9ydCBjb21wbGV4IGZyb20gJy4vdmFsdWUtdHlwZXMvY29tcGxleCc7XG4vLyBpbXBvcnQgaGV4IGZyb20gJy4vdmFsdWUtdHlwZXMvaGV4Jztcbi8vIGltcG9ydCBoc2wgZnJvbSAnLi92YWx1ZS10eXBlcy9oc2wnO1xuLy8gaW1wb3J0IHB4IGZyb20gJy4vdmFsdWUtdHlwZXMvcHgnO1xuLy8gaW1wb3J0IHJnYiBmcm9tICcuL3ZhbHVlLXR5cGVzL3JnYic7XG4vLyBpbXBvcnQgc2NhbGUgZnJvbSAnLi92YWx1ZS10eXBlcy9zY2FsZSc7XG4vLyBpbXBvcnQgc2hhZG93IGZyb20gJy4vdmFsdWUtdHlwZXMvc2hhZG93Jztcbi8vIGltcG9ydCB1bml0IGZyb20gJy4vdmFsdWUtdHlwZXMvdW5pdCc7XG4vLyBleHBvcnQgY29uc3QgdmFsdWVUeXBlID0geyBhbHBoYSwgYW5nbGUsIGNvbG9yLCBjb21wbGV4LCBoZXgsIGhzbCwgcHgsIHJnYiwgc2NhbGUsIHNoYWRvdywgdW5pdCB9O1xuXG4vLyAvLyBUcmFuc2Zvcm1lcnNcbi8vIGV4cG9ydCAqIGFzIHRyYW5zZm9ybWVycyBmcm9tICcuL2luYy90cmFuc2Zvcm1lcnMnO1xuXG4vLyAvKlxuLy8gICBSZXR1cm5zIGEgdmVyc2lvbiBvZiB0aGUgQWN0aW9uIGJvdW5kIHRvIGEgRmxvd1xuXG4vLyAgIFdlJ3JlIGFkZGluZyBgb25gIGhlcmUgYmVjYXVzZSBGbG93IGV4dGVuZHMgQWN0aW9uLFxuLy8gICBvdGhlcndpc2UgY3JlYXRpbmcgYSBjaXJjdWxhciBtb2R1bGFyIGRlcGVuZGVuY3kuIEZ1dHVyZVxuLy8gICByZWZhY3RvcmluZywgaWUgbW92aW5nIHRvIGEgY29tcG9zaXRpb25hbCBtb2RlbCB3aWxsXG4vLyAgIHJlbW92ZSB0aGUgbmVlZCBmb3IgdXMgdG8gZG8gdGhpcyBoZXJlLlxuLy8gKi9cbi8vIEFjdGlvbi5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuLy8gICBpZiAoIWVsZW1lbnQuY29ubmVjdCkge1xuLy8gICAgIGVsZW1lbnQgPSBnZXRGbG93KGVsZW1lbnQpO1xuLy8gICB9XG5cbi8vICAgcmV0dXJuIGVsZW1lbnQuY29ubmVjdCh0aGlzKTtcbi8vIH07XG5cbi8vIGV4cG9ydCB7IEFjdGlvbiB9OyJdfQ==

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _framesync = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../framesync/framesync\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Action = function () {
	  function Action(props) {
	    _classCallCheck(this, Action);
	
	    if (this.defaultProps) {
	      for (var key in this.defaultProps) {
	        this[key] = this.defaultProps[key];
	      }
	    }
	
	    this.update = this.update.bind(this);
	  }
	
	  Action.prototype.start = function start() {
	    this.isActive = true;
	
	    (0, _framesync.onNextUpdate)(this.update);
	
	    if (this.onStart) {
	      this.onStart();
	    }
	
	    return this;
	  };
	
	  Action.prototype.stop = function stop() {
	    this.isActive = false;
	
	    if (this.onStop) {
	      this.onStop();
	    }
	
	    return this;
	  };
	
	  Action.prototype.update = function update() {
	    var current = this.current;
	
	    if (this.onUpdate) {
	      this.onUpdate(this.input);
	    }
	
	    (0, _framesync.onNextUpdate)(this.update);
	  };
	
	  Action.prototype.getCurrent = function getCurrent() {
	    return this.current;
	  };
	
	  Action.prototype.getVelocity = function getVelocity() {
	    return this.velocity;
	  };
	
	  return Action;
	}();
	
	exports.default = Action;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zaW1wbGUtYWN0aW9ucy9BY3Rpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0lBRU07QUFDSixXQURJLE1BQ0osQ0FBWSxLQUFaLEVBQW1COzBCQURmLFFBQ2U7O0FBQ2pCLFFBQUksS0FBSyxZQUFMLEVBQW1CO0FBQ3JCLFdBQUssSUFBSSxHQUFKLElBQVcsS0FBSyxZQUFMLEVBQW1CO0FBQ2pDLGFBQUssR0FBTCxJQUFZLEtBQUssWUFBTCxDQUFrQixHQUFsQixDQUFaLENBRGlDO09BQW5DO0tBREY7O0FBTUEsU0FBSyxNQUFMLEdBQWMsS0FBSyxNQUFMLENBQVksSUFBWixDQUFpQixJQUFqQixDQUFkLENBUGlCO0dBQW5COztBQURJLG1CQVdKLHlCQUFRO0FBQ04sU0FBSyxRQUFMLEdBQWdCLElBQWhCLENBRE07O0FBR04saUNBQWEsS0FBSyxNQUFMLENBQWIsQ0FITTs7QUFLTixRQUFJLEtBQUssT0FBTCxFQUFjO0FBQ2hCLFdBQUssT0FBTCxHQURnQjtLQUFsQjs7QUFJQSxXQUFPLElBQVAsQ0FUTTs7O0FBWEosbUJBdUJKLHVCQUFPO0FBQ0wsU0FBSyxRQUFMLEdBQWdCLEtBQWhCLENBREs7O0FBR0wsUUFBSSxLQUFLLE1BQUwsRUFBYTtBQUNmLFdBQUssTUFBTCxHQURlO0tBQWpCOztBQUlBLFdBQU8sSUFBUCxDQVBLOzs7QUF2QkgsbUJBaUNKLDJCQUFTO0FBQ1AsUUFBTSxVQUFVLEtBQUssT0FBTCxDQURUOztBQUdQLFFBQUksS0FBSyxRQUFMLEVBQWU7QUFDakIsV0FBSyxRQUFMLENBQWMsS0FBSyxLQUFMLENBQWQsQ0FEaUI7S0FBbkI7O0FBSUEsaUNBQWEsS0FBSyxNQUFMLENBQWIsQ0FQTzs7O0FBakNMLG1CQTJDSixtQ0FBYTtBQUNYLFdBQU8sS0FBSyxPQUFMLENBREk7OztBQTNDVCxtQkErQ0oscUNBQWM7QUFDWixXQUFPLEtBQUssUUFBTCxDQURLOzs7U0EvQ1Y7OztrQkFvRFMiLCJmaWxlIjoiQWN0aW9uLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9NYXR0L1NpdGVzL3BvcG1vdGlvbiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9uTmV4dFVwZGF0ZSB9IGZyb20gJy4uL2ZyYW1lc3luYy9mcmFtZXN5bmMnO1xuXG5jbGFzcyBBY3Rpb24ge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIGlmICh0aGlzLmRlZmF1bHRQcm9wcykge1xuICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuZGVmYXVsdFByb3BzKSB7XG4gICAgICAgIHRoaXNba2V5XSA9IHRoaXMuZGVmYXVsdFByb3BzW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGUgPSB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG5cbiAgICBvbk5leHRVcGRhdGUodGhpcy51cGRhdGUpO1xuXG4gICAgaWYgKHRoaXMub25TdGFydCkge1xuICAgICAgdGhpcy5vblN0YXJ0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzdG9wKCkge1xuICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLm9uU3RvcCkge1xuICAgICAgdGhpcy5vblN0b3AoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuXG4gICAgaWYgKHRoaXMub25VcGRhdGUpIHtcbiAgICAgIHRoaXMub25VcGRhdGUodGhpcy5pbnB1dCk7XG4gICAgfVxuXG4gICAgb25OZXh0VXBkYXRlKHRoaXMudXBkYXRlKTtcbiAgfVxuXG4gIGdldEN1cnJlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudDtcbiAgfVxuXG4gIGdldFZlbG9jaXR5KCkge1xuICAgIHJldHVybiB0aGlzLnZlbG9jaXR5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFjdGlvbjtcbiJdfQ==

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,