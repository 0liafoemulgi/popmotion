/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 26);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var transformers_1 = __webpack_require__(2);
var observer_1 = __webpack_require__(13);
var action = function (init, props) {
    if (props === void 0) { props = {}; }
    return ({
        start: function (observerCandidate) {
            var observer = observer_1.default(observerCandidate, props);
            var observerApi = __assign({ stop: function () { return undefined; } }, init(observer));
            return observerApi;
        },
        applyMiddleware: function (middleware) {
            return action(init, __assign({}, props, { middleware: props.middleware ? [middleware].concat(props.middleware) : [middleware] }));
        },
        pipe: function () {
            var funcs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                funcs[_i] = arguments[_i];
            }
            var pipedUpdate = funcs.length === 1 ? funcs[0] : transformers_1.pipe.apply(void 0, funcs);
            var middleware = function (update) { return function (v) {
                update(pipedUpdate(v));
            }; };
            return this.applyMiddleware(middleware);
        },
        while: function (predicate) {
            var middleware = function (update, complete) { return function (v) {
                return predicate(v) ? update(v) : complete();
            }; };
            return this.applyMiddleware(middleware);
        }
    });
};
exports.default = action;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var on_next_frame_1 = __webpack_require__(11);
var create_render_step_1 = __webpack_require__(12);
var HAS_PERFORMANCE_NOW = (typeof performance !== 'undefined' && performance.now);
exports.currentTime = HAS_PERFORMANCE_NOW ? function () { return performance.now(); } : function () { return new Date().getTime(); };
var willRenderNextFrame = false;
var MAX_ELAPSED = 20;
var currentFramestamp = exports.currentTime();
var elapsed = 0;
var dilation = 1;
function startRenderLoop() {
    if (!willRenderNextFrame) {
        willRenderNextFrame = true;
        on_next_frame_1.default(processFrame);
    }
}
var frameStart = create_render_step_1.default(startRenderLoop);
var frameUpdate = create_render_step_1.default(startRenderLoop);
var frameRender = create_render_step_1.default(startRenderLoop);
var frameEnd = create_render_step_1.default(startRenderLoop);
function processFrame(framestamp) {
    willRenderNextFrame = false;
    elapsed = Math.max(Math.min(framestamp - currentFramestamp, MAX_ELAPSED), 1) * dilation;
    currentFramestamp = framestamp;
    frameStart.process();
    frameUpdate.process();
    frameRender.process();
    frameEnd.process();
}
exports.onFrameStart = frameStart.schedule;
exports.onFrameUpdate = frameUpdate.schedule;
exports.onFrameRender = frameRender.schedule;
exports.onFrameEnd = frameEnd.schedule;
exports.cancelOnFrameStart = frameStart.cancel;
exports.cancelOnFrameUpdate = frameUpdate.cancel;
exports.cancelOnFrameRender = frameRender.cancel;
exports.cancelOnFrameEnd = frameEnd.cancel;
exports.timeSinceLastFrame = function () { return elapsed; };
exports.currentFrameTime = function () { return currentFramestamp; };
//# sourceMappingURL=index.js.map

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var calc_1 = __webpack_require__(3);
var noop = function (v) { return v; };
exports.appendUnit = function (unit) { return function (v) { return "" + v + unit; }; };
exports.applyOffset = function (from, to) {
    var hasReceivedFrom = true;
    if (to === undefined) {
        to = from;
        hasReceivedFrom = false;
    }
    var getOffset = function (v) { return v - from; };
    var applyOffsetTo = function (v) { return v + to; };
    return function (v) {
        if (hasReceivedFrom) {
            return applyOffsetTo(getOffset(v));
        }
        else {
            from = v;
            hasReceivedFrom = true;
            return 0;
        }
    };
};
exports.clampMax = function (max) { return function (v) { return Math.min(v, max); }; };
exports.clampMin = function (min) { return function (v) { return Math.max(v, min); }; };
exports.clamp = function (min, max) {
    var _min = exports.clampMin(min);
    var _max = exports.clampMax(max);
    return function (v) { return _min(_max(v)); };
};
exports.pipe = function () {
    var transformers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        transformers[_i] = arguments[_i];
    }
    var numTransformers = transformers.length;
    var i = 0;
    return function (acc) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var v = acc;
        for (i = 0; i < numTransformers; i++) {
            v = transformers[i].apply(transformers, [v].concat(args));
        }
        return v;
    };
};
exports.interpolate = function (input, output, rangeEasing) {
    var rangeLength = input.length;
    var finalIndex = rangeLength - 1;
    return function (v) {
        if (v <= input[0]) {
            return output[0];
        }
        if (v >= input[finalIndex]) {
            return output[finalIndex];
        }
        var i = 1;
        for (; i < rangeLength; i++) {
            if (input[i] > v || i === finalIndex) {
                break;
            }
        }
        var progressInRange = calc_1.getProgressFromValue(input[i - 1], input[i], v);
        var easedProgress = (rangeEasing) ? rangeEasing[i - 1](progressInRange) : progressInRange;
        return calc_1.getValueFromProgress(output[i - 1], output[i], easedProgress);
    };
};
exports.generateNonIntegratedSpring = function (alterDisplacement) {
    if (alterDisplacement === void 0) { alterDisplacement = noop; }
    return function (constant, origin) { return function (v) {
        var displacement = origin - v;
        var springModifiedDisplacement = -constant * (0 - alterDisplacement(Math.abs(displacement)));
        return (displacement <= 0) ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;
    }; };
};
exports.linearSpring = exports.generateNonIntegratedSpring();
exports.nonlinearSpring = exports.generateNonIntegratedSpring(Math.sqrt);
exports.wrap = function (min, max) { return function (v) {
    var rangeSize = max - min;
    return ((v - min) % rangeSize + rangeSize) % rangeSize + min;
}; };
exports.smooth = function (strength) {
    if (strength === void 0) { strength = 50; }
    var previousValue = 0;
    var lastUpdated = 0;
    return function (v) {
        var currentFramestamp = framesync_1.currentFrameTime();
        var timeDelta = (currentFramestamp !== lastUpdated) ? currentFramestamp - lastUpdated : 0;
        var newValue = timeDelta ? calc_1.smooth(v, previousValue, timeDelta, strength) : previousValue;
        lastUpdated = currentFramestamp;
        previousValue = newValue;
        return newValue;
    };
};
exports.snap = function (points) {
    if (typeof points === 'number') {
        return function (v) { return Math.round(v / points) * points; };
    }
    else {
        var i_1 = 0;
        var numPoints_1 = points.length;
        return function (v) {
            var lastDistance = Math.abs(points[0] - v);
            for (i_1 = 1; i_1 < numPoints_1; i_1++) {
                var point = points[i_1];
                var distance = Math.abs(point - v);
                if (distance === 0)
                    return point;
                if (distance > lastDistance)
                    return points[i_1 - 1];
                if (i_1 === numPoints_1 - 1)
                    return point;
                lastDistance = distance;
            }
        };
    }
};
exports.steps = function (steps, min, max) {
    if (min === void 0) { min = 0; }
    if (max === void 0) { max = 1; }
    return function (v) {
        var progress = calc_1.getProgressFromValue(min, max, v);
        return calc_1.getValueFromProgress(min, max, calc_1.stepProgress(steps, progress));
    };
};
exports.transformChildValues = function (childTransformers) {
    var mutableState = {};
    return function (v) {
        for (var key in v) {
            var childTransformer = childTransformers[key];
            if (childTransformer) {
                mutableState[key] = childTransformer(v[key]);
            }
        }
        return mutableState;
    };
};
var resolve3 = function (points) { return function (t) {
    var ut = 1 - t;
    return (points[0] * ut + points[1] * t) * ut + (points[1] * ut + points[2] * t) * t;
}; };
var resolve4 = function (points) { return function (t) {
    var ut = 1 - t;
    var a1 = points[1] * ut + points[2] * t;
    return ((points[0] * ut + points[1] * t) * ut + a1 * t) * ut + (a1 * ut + (points[2] * ut + points[3] * t) * t) * t;
}; };
exports.bezier = function () {
    var points = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        points[_i] = arguments[_i];
    }
    return (points.length === 3) ? resolve3(points) : resolve4(points);
};


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var isNum = function (v) { return typeof v === 'number'; };
exports.isPoint = function (point) {
    return point.x !== undefined && point.y !== undefined;
};
exports.isPoint3D = function (point) {
    return point.z !== undefined;
};
var toDecimal = function (num, precision) {
    if (precision === void 0) { precision = 2; }
    precision = Math.pow(10, precision);
    return Math.round(num * precision) / precision;
};
var ZERO_POINT = {
    x: 0,
    y: 0,
    z: 0
};
var distance1D = function (a, b) { return Math.abs(a - b); };
exports.angle = function (a, b) {
    if (b === void 0) { b = ZERO_POINT; }
    return exports.radiansToDegrees(Math.atan2(b.y - a.y, b.x - a.x));
};
exports.degreesToRadians = function (degrees) { return degrees * Math.PI / 180; };
exports.dilate = function (a, b, dilation) { return a + ((b - a) * dilation); };
exports.distance = function (a, b) {
    if (b === void 0) { b = ZERO_POINT; }
    if (isNum(a) && isNum(b)) {
        return distance1D(a, b);
    }
    else if (exports.isPoint(a) && exports.isPoint(b)) {
        var xDelta = distance1D(a.x, b.x);
        var yDelta = distance1D(a.y, b.y);
        var zDelta = (exports.isPoint3D(a) && exports.isPoint3D(b)) ? distance1D(a.z, b.z) : 0;
        return Math.sqrt((Math.pow(xDelta, 2)) + (Math.pow(yDelta, 2)) + (Math.pow(zDelta, 2)));
    }
    return 0;
};
exports.getProgressFromValue = function (from, to, value) {
    return (value - from) / (to - from);
};
exports.getValueFromProgress = function (from, to, progress) {
    return (-progress * from) + (progress * to) + from;
};
exports.pointFromAngleAndDistance = function (origin, angle, distance) {
    angle = exports.degreesToRadians(angle);
    return {
        x: distance * Math.cos(angle) + origin.x,
        y: distance * Math.sin(angle) + origin.y
    };
};
exports.radiansToDegrees = function (radians) { return radians * 180 / Math.PI; };
exports.smooth = function (newValue, oldValue, duration, smoothing) {
    if (smoothing === void 0) { smoothing = 0; }
    return toDecimal(oldValue + (duration * (newValue - oldValue) / Math.max(smoothing, duration)));
};
exports.speedPerFrame = function (xps, frameDuration) {
    return (isNum(xps)) ? xps / (1000 / frameDuration) : 0;
};
exports.speedPerSecond = function (velocity, frameDuration) {
    return frameDuration ? velocity * (1000 / frameDuration) : 0;
};
exports.stepProgress = function (steps, progress) {
    var segment = 1 / (steps - 1);
    var target = 1 - (1 / steps);
    var progressOfTarget = Math.min(progress / target, 1);
    return Math.floor(progressOfTarget / segment) * segment;
};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var everyFrame = function () { return action_1.default(function (_a) {
    var update = _a.update;
    var nextFrame = function () {
        update();
        framesync_1.onFrameUpdate(nextFrame);
    };
    framesync_1.onFrameUpdate(nextFrame);
    return {
        stop: function () { return framesync_1.cancelOnFrameUpdate(nextFrame); }
    };
}); };
exports.default = everyFrame;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var action_1 = __webpack_require__(0);
exports.action = action_1.default;
var keyframes_1 = __webpack_require__(14);
exports.keyframes = keyframes_1.default;
var decay_1 = __webpack_require__(15);
exports.decay = decay_1.default;
var physics_1 = __webpack_require__(16);
exports.physics = physics_1.default;
var spring_1 = __webpack_require__(17);
exports.spring = spring_1.default;
var tween_1 = __webpack_require__(7);
exports.tween = tween_1.default;
var mouse_1 = __webpack_require__(8);
exports.mouse = mouse_1.default;
var touch_1 = __webpack_require__(9);
exports.touch = touch_1.default;
var pointer_1 = __webpack_require__(19);
exports.pointer = pointer_1.default;
var _calc = __webpack_require__(3);
exports.calc = _calc;
var _easing = __webpack_require__(6);
exports.easing = _easing;
var _transform = __webpack_require__(2);
exports.transform = _transform;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var transformers_1 = __webpack_require__(2);
var DEFAULT_OVERSHOOT_STRENGTH = 1.525;
exports.createReversedEasing = function (easing) {
    return function (p) { return 1 - easing(1 - p); };
};
exports.createMirroredEasing = function (easing) {
    return function (p) { return (p <= 0.5) ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2; };
};
exports.linear = function (p) { return p; };
exports.createExpoIn = function (power) { return function (p) { return Math.pow(p, power); }; };
exports.easeIn = exports.createExpoIn(2);
exports.easeOut = exports.createReversedEasing(exports.easeIn);
exports.easeInOut = exports.createMirroredEasing(exports.easeIn);
exports.circIn = function (p) { return 1 - Math.sin(Math.acos(p)); };
exports.circOut = exports.createReversedEasing(exports.circIn);
exports.circInOut = exports.createMirroredEasing(exports.circOut);
exports.createBackIn = function (power) { return function (p) { return (p * p) * ((power + 1) * p - power); }; };
exports.backIn = exports.createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
exports.backOut = exports.createReversedEasing(exports.backIn);
exports.backInOut = exports.createMirroredEasing(exports.backIn);
exports.createAnticipateEasing = function (power) {
    var backEasing = exports.createBackIn(power);
    return function (p) { return ((p *= 2) < 1) ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1))); };
};
exports.anticipate = exports.createAnticipateEasing(DEFAULT_OVERSHOOT_STRENGTH);
exports.cubicBezier = function (x1, y1, x2, y2) {
    var xBezier = transformers_1.bezier(0, x1, x2, 1);
    var yBezier = transformers_1.bezier(0, y1, y2, 1);
    return function (t) { return yBezier(xBezier(t)); };
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var calc_1 = __webpack_require__(3);
var easing_1 = __webpack_require__(6);
var transformers_1 = __webpack_require__(2);
var every_frame_1 = __webpack_require__(4);
var clampProgress = transformers_1.clamp(0, 1);
var tween = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.from, from = _c === void 0 ? 0 : _c, _d = _b.to, to = _d === void 0 ? 1 : _d, _e = _b.duration, duration = _e === void 0 ? 300 : _e, _f = _b.elapsed, elapsed = _f === void 0 ? 0 : _f, _g = _b.ease, ease = _g === void 0 ? easing_1.easeOut : _g, _h = _b.playDirection, playDirection = _h === void 0 ? 1 : _h, _j = _b.flip, flip = _j === void 0 ? 0 : _j, _k = _b.flipCount, flipCount = _k === void 0 ? 0 : _k, _l = _b.loop, loop = _l === void 0 ? 0 : _l, _m = _b.loopCount, loopCount = _m === void 0 ? 0 : _m, _o = _b.yoyo, yoyo = _o === void 0 ? 0 : _o, _p = _b.yoyoCount, yoyoCount = _p === void 0 ? 0 : _p;
    return action_1.default(function (_a) {
        var update = _a.update, complete = _a.complete;
        var progress = 0;
        var current = from;
        var tweenTimer;
        var isActive = false;
        var reverseTween = function () { return playDirection *= -1; };
        var isTweenComplete = function () {
            var isComplete = (playDirection === 1)
                ? elapsed >= duration
                : elapsed <= 0;
            if (!isComplete)
                return false;
            if (isComplete && !loop && !flip && !yoyo)
                return true;
            var isStepTaken = false;
            if (loop && loopCount < loop) {
                elapsed = 0;
                loopCount++;
                isStepTaken = true;
            }
            else if (flip && flipCount < flip) {
                elapsed = duration - elapsed;
                _a = [to, from], from = _a[0], to = _a[1];
                flipCount++;
                isStepTaken = true;
            }
            else if (yoyo && yoyoCount < yoyo) {
                reverseTween();
                yoyoCount++;
                isStepTaken = true;
            }
            return !isStepTaken;
            var _a;
        };
        var updateTween = function () {
            progress = clampProgress(calc_1.getProgressFromValue(0, duration, elapsed));
            current = calc_1.getValueFromProgress(from, to, ease(progress));
            update(current);
        };
        var startTimer = function () {
            isActive = true;
            tweenTimer = every_frame_1.default().start(function () {
                elapsed += framesync_1.timeSinceLastFrame() * playDirection;
                updateTween();
                if (isTweenComplete() && complete)
                    complete();
            });
        };
        var stopTimer = function () {
            isActive = false;
            if (tweenTimer)
                tweenTimer.stop();
        };
        startTimer();
        return {
            isActive: function () { return isActive; },
            getElapsed: function () { return transformers_1.clamp(0, duration)(elapsed); },
            getProgress: function () { return progress; },
            stop: function () {
                stopTimer();
            },
            pause: function () {
                stopTimer();
                return this;
            },
            resume: function () {
                startTimer();
                return this;
            },
            seek: function (newProgress) {
                elapsed = calc_1.getValueFromProgress(0, duration, newProgress);
                framesync_1.onFrameUpdate(updateTween);
                return this;
            },
            reverse: function () {
                reverseTween();
                return this;
            }
        };
    });
};
exports.default = tween;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var mouse = function (_a) {
    var _b = (_a === void 0 ? {} : _a).preventDefault, preventDefault = _b === void 0 ? true : _b;
    return action_1.default(function (_a) {
        var update = _a.update;
        var point = { x: 0, y: 0 };
        var updatePoint = function () { return update(point); };
        var onMove = function (e) {
            point.x = e.clientX;
            point.y = e.clientY;
            framesync_1.onFrameUpdate(updatePoint);
        };
        document.documentElement.addEventListener('mousemove', onMove);
        return {
            stop: function () {
                framesync_1.cancelOnFrameUpdate(updatePoint);
                document.removeEventListener('mousemove', onMove);
            }
        };
    });
};
exports.default = mouse;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var touchToPoint = function (_a) {
    var clientX = _a.clientX, clientY = _a.clientY;
    return ({
        x: clientX,
        y: clientY
    });
};
var touch = function (_a) {
    var _b = (_a === void 0 ? {} : _a).preventDefault, preventDefault = _b === void 0 ? true : _b;
    return action_1.default(function (_a) {
        var update = _a.update;
        var points = [{ x: 0, y: 0 }];
        var updatePoint = function () { return update(points); };
        var onMove = function (_a) {
            var touches = _a.touches;
            var numTouches = touches.length;
            var newPoints = [];
            for (var i = 0; i < numTouches; i++) {
                var thisTouch = touches[i];
                newPoints.push(touchToPoint(thisTouch));
            }
            points = newPoints;
            framesync_1.onFrameUpdate(updatePoint);
        };
        document.addEventListener('touchmove', onMove, { passive: !preventDefault });
        return {
            stop: function () {
                framesync_1.cancelOnFrameUpdate(updatePoint);
                document.removeEventListener('touchmove', onMove);
            }
        };
    });
};
exports.default = touch;


/***/ }),
/* 10 */,
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var hasRAF = (typeof window !== 'undefined' && window.requestAnimationFrame) ? true : false;
var onNextFrame;
if (hasRAF) {
    onNextFrame = function (callback) { return window.requestAnimationFrame(callback); };
}
else {
    var lastTime_1 = 0;
    onNextFrame = function (callback) {
        var currentTime = new Date().getTime();
        var timeToCall = Math.max(0, 16.7 - (currentTime - lastTime_1));
        lastTime_1 = currentTime + timeToCall;
        setTimeout(function () { return callback(lastTime_1); }, timeToCall);
    };
}
exports.default = onNextFrame;
//# sourceMappingURL=on-next-frame.js.map

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function createRenderStep(startRenderLoop) {
    var functionsToRun = [];
    var functionsToRunNextFrame = [];
    return {
        schedule: function (callback) {
            startRenderLoop();
            if (functionsToRunNextFrame.indexOf(callback) === -1) {
                functionsToRunNextFrame.push(callback);
            }
        },
        cancel: function (callback) {
            var indexOfCallback = functionsToRunNextFrame.indexOf(callback);
            if (indexOfCallback !== -1) {
                functionsToRunNextFrame.splice(indexOfCallback, 1);
            }
        },
        process: function () {
            _a = [functionsToRunNextFrame, functionsToRun], functionsToRun = _a[0], functionsToRunNextFrame = _a[1];
            functionsToRunNextFrame.length = 0;
            var numThisFrame = functionsToRun.length;
            for (var i = 0; i < numThisFrame; i++) {
                functionsToRun[i]();
            }
            var _a;
        }
    };
}
exports.default = createRenderStep;
//# sourceMappingURL=create-render-step.js.map

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var noop = function () { return undefined; };
var defaultObserver = function (observer) { return (__assign({ complete: noop, error: noop, update: noop }, observer)); };
var createObserver = function (observerCandidate, _a) {
    var middleware = (_a === void 0 ? {} : _a).middleware;
    var isActive = true;
    var providedObserver = (typeof observerCandidate === 'function')
        ? defaultObserver({ update: observerCandidate })
        : defaultObserver(observerCandidate);
    var update = providedObserver.update;
    var observer = {
        complete: function () {
            isActive = false;
            providedObserver.complete();
        },
        error: function (err) {
            isActive = false;
            providedObserver.error(err);
        },
        update: function (v) {
            if (!isActive)
                return;
            update(v);
        }
    };
    var numMiddleware = middleware ? middleware.length : 0;
    if (numMiddleware) {
        middleware.forEach(function (m) {
            update = m(update, observer.complete);
        });
    }
    return observer;
};
exports.default = createObserver;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var easing_1 = __webpack_require__(6);
var transformers_1 = __webpack_require__(2);
var tween_1 = __webpack_require__(7);
var defaultEasings = function (values) {
    return values.map(function () { return easing_1.easeOut; }).splice(0, values.length - 1);
};
var defaultTimings = function (values) {
    var numValues = values.length;
    return values.map(function (value, i) { return (i !== 0) ? i / (numValues - 1) : 0; });
};
var keyframes = function (_a) {
    var values = _a.values, loop = _a.loop, yoyo = _a.yoyo, flip = _a.flip, props = __rest(_a, ["values", "loop", "yoyo", "flip"]);
    var duration = props.duration || 300;
    var ease = props.ease || defaultEasings(values);
    var times = props.times || defaultTimings(values);
    return tween_1.default({ duration: duration, ease: easing_1.linear, loop: loop, yoyo: yoyo, flip: flip })
        .pipe(transformers_1.interpolate(times, values, ease));
};
exports.default = keyframes;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var every_frame_1 = __webpack_require__(4);
var decay = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.velocity, velocity = _c === void 0 ? 0 : _c, _d = _b.from, from = _d === void 0 ? 0 : _d, _e = _b.power, power = _e === void 0 ? 0.8 : _e, _f = _b.timeConstant, timeConstant = _f === void 0 ? 350 : _f, _g = _b.restDelta, restDelta = _g === void 0 ? 0.5 : _g, modifyTarget = _b.modifyTarget;
    return action_1.default(function (_a) {
        var complete = _a.complete, update = _a.update;
        var elapsed = 0;
        var amplitude = power * velocity;
        var idealTarget = Math.round(from + amplitude);
        var target = (typeof modifyTarget === 'undefined')
            ? idealTarget
            : modifyTarget(idealTarget);
        var timer = every_frame_1.default().start(function () {
            elapsed += framesync_1.timeSinceLastFrame();
            var delta = -amplitude * Math.exp(-elapsed / timeConstant);
            var isMoving = (delta > restDelta || delta < -restDelta);
            var current = isMoving ? target + delta : target;
            update(current);
            if (!isMoving)
                complete();
        });
        return {
            stop: function () { return timer.stop(); }
        };
    });
};
exports.default = decay;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var calc_1 = __webpack_require__(3);
var every_frame_1 = __webpack_require__(4);
var physics = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.acceleration, acceleration = _c === void 0 ? 0 : _c, _d = _b.friction, friction = _d === void 0 ? 0 : _d, _e = _b.velocity, velocity = _e === void 0 ? 0 : _e, _f = _b.restSpeed, restSpeed = _f === void 0 ? 0.001 : _f, _g = _b.from, from = _g === void 0 ? 0 : _g, springStrength = _b.springStrength, springTarget = _b.springTarget;
    return action_1.default(function (_a) {
        var complete = _a.complete, update = _a.update;
        var current = from;
        var timer = every_frame_1.default().start(function () {
            var elapsed = framesync_1.timeSinceLastFrame();
            if (acceleration)
                velocity += calc_1.speedPerFrame(acceleration, elapsed);
            if (friction)
                velocity *= Math.pow((1 - friction), (elapsed / 100));
            if (springStrength !== undefined && springTarget !== undefined) {
                var distanceToTarget = springTarget - current;
                velocity += distanceToTarget * calc_1.speedPerFrame(springStrength, elapsed);
            }
            current += calc_1.speedPerFrame(velocity, elapsed);
            update(current);
            var isComplete = (restSpeed !== false && (!velocity || Math.abs(velocity) <= restSpeed));
            if (isComplete)
                complete();
        });
        return {
            setAcceleration: function (v) {
                acceleration = v;
                return this;
            },
            setFriction: function (v) {
                friction = v;
                return this;
            },
            setSpringStrength: function (v) {
                springStrength = v;
                return this;
            },
            setSpringTarget: function (v) {
                springTarget = v;
                return this;
            },
            setVelocity: function (v) {
                velocity = v;
                return this;
            },
            stop: function () { return timer.stop(); }
        };
    });
};
exports.default = physics;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var every_frame_1 = __webpack_require__(4);
var math_utils_1 = __webpack_require__(18);
var spring = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.from, from = _c === void 0 ? 0.0 : _c, _d = _b.to, to = _d === void 0 ? 0.0 : _d, _e = _b.stiffness, stiffness = _e === void 0 ? 100 : _e, _f = _b.damping, damping = _f === void 0 ? 10 : _f, _g = _b.mass, mass = _g === void 0 ? 1.0 : _g, _h = _b.velocity, velocity = _h === void 0 ? 0.0 : _h, _j = _b.restSpeed, restSpeed = _j === void 0 ? 0.01 : _j, _k = _b.restDelta, restDelta = _k === void 0 ? 0.01 : _k;
    return action_1.default(function (_a) {
        var update = _a.update, complete = _a.complete;
        var initialVelocity = velocity ? -(velocity / 1000) : 0.0;
        var t = 0;
        var delta = to - from;
        var springTimer = every_frame_1.default().start(function () {
            var timeDelta = framesync_1.timeSinceLastFrame() / 1000;
            t += timeDelta;
            var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
            var angularFreq = Math.sqrt(stiffness / mass);
            var x0 = 1;
            var oscillation = 0.0;
            if (dampingRatio < 1) {
                var envelope = Math.exp(-dampingRatio * angularFreq * t);
                var expoDecay = angularFreq * Math.sqrt(1.0 - (dampingRatio * dampingRatio));
                oscillation = envelope * (((initialVelocity + dampingRatio * angularFreq * x0) / expoDecay) * Math.sin(expoDecay * t) + (x0 * Math.cos(expoDecay * t)));
            }
            else if (dampingRatio === 1) {
                var envelope = Math.exp(-angularFreq * t);
                oscillation = envelope * (x0 + (initialVelocity + (angularFreq * x0)) * t);
            }
            else {
                var envelope = Math.exp(-dampingRatio * angularFreq * t);
                var oscillationFreq = angularFreq * Math.sqrt(dampingRatio * dampingRatio - 1.0);
                oscillation = to - envelope * ((initialVelocity + dampingRatio * angularFreq * x0) * math_utils_1.sinh(oscillationFreq * t) +
                    oscillationFreq * x0 * math_utils_1.cosh(oscillationFreq * t)) / oscillationFreq;
            }
            var fraction = 1 - oscillation;
            var position = from + fraction * delta;
            var isBelowVelocityThreshold = Math.abs(velocity) <= restSpeed;
            var isBelowDisplacementThreshold = Math.abs(to - position) <= restDelta;
            if (isBelowVelocityThreshold && isBelowDisplacementThreshold) {
                position = to;
                update(position);
                complete();
            }
            else {
                update(position);
            }
        });
        return {
            stop: function () { return springTimer.stop(); }
        };
    });
};
exports.default = spring;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.cosh = function (x) {
    var y = Math.exp(x);
    return (y + 1 / y) / 2;
};
exports.sinh = function (x) {
    var y = Math.exp(x);
    return (y - 1 / y) / 2;
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var merge_1 = __webpack_require__(20);
var touch_1 = __webpack_require__(9);
var mouse_1 = __webpack_require__(8);
var getFirstTouch = function (_a) {
    var firstTouch = _a[0];
    return firstTouch;
};
var pointer = function (props) { return merge_1.default(mouse_1.default(props), touch_1.default(props).pipe(getFirstTouch)); };
exports.default = pointer;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var action_1 = __webpack_require__(0);
var merge = function () {
    var actions = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        actions[_i] = arguments[_i];
    }
    return action_1.default(function (observer) {
        var subs = actions.map(function (thisAction) { return thisAction.start({
            update: function (v) { return observer.update(v); },
            complete: function () { return observer.complete(); }
        }); });
        return {
            stop: function () { return subs.forEach(function (sub) { return sub.stop(); }); }
        };
    });
};
exports.default = merge;


/***/ }),
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var popmotion = __webpack_require__(5);
window.popmotion = popmotion;


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,