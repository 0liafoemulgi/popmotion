/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 27);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var transformers_1 = __webpack_require__(2);
var observer_1 = __webpack_require__(13);
var action = function (init, props) {
    if (props === void 0) { props = {}; }
    return ({
        start: function (observerCandidate) {
            var observer = observer_1.default(observerCandidate, props);
            var observerApi = __assign({ stop: function () { return undefined; } }, init(observer));
            return observerApi;
        },
        applyMiddleware: function (middleware) {
            return action(init, __assign({}, props, { middleware: props.middleware ? [middleware].concat(props.middleware) : [middleware] }));
        },
        pipe: function () {
            var funcs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                funcs[_i] = arguments[_i];
            }
            var pipedUpdate = funcs.length === 1 ? funcs[0] : transformers_1.pipe.apply(void 0, funcs);
            var middleware = function (update) { return function (v) {
                update(pipedUpdate(v));
            }; };
            return this.applyMiddleware(middleware);
        },
        while: function (predicate) {
            var middleware = function (update, complete) { return function (v) {
                return predicate(v) ? update(v) : complete();
            }; };
            return this.applyMiddleware(middleware);
        }
    });
};
exports.default = action;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var on_next_frame_1 = __webpack_require__(11);
var create_render_step_1 = __webpack_require__(12);
var HAS_PERFORMANCE_NOW = (typeof performance !== 'undefined' && performance.now);
exports.currentTime = HAS_PERFORMANCE_NOW ? function () { return performance.now(); } : function () { return new Date().getTime(); };
var willRenderNextFrame = false;
var MAX_ELAPSED = 20;
var currentFramestamp = exports.currentTime();
var elapsed = 0;
var dilation = 1;
function startRenderLoop() {
    if (!willRenderNextFrame) {
        willRenderNextFrame = true;
        on_next_frame_1.default(processFrame);
    }
}
var frameStart = create_render_step_1.default(startRenderLoop);
var frameUpdate = create_render_step_1.default(startRenderLoop);
var frameRender = create_render_step_1.default(startRenderLoop);
var frameEnd = create_render_step_1.default(startRenderLoop);
function processFrame(framestamp) {
    willRenderNextFrame = false;
    elapsed = Math.max(Math.min(framestamp - currentFramestamp, MAX_ELAPSED), 1) * dilation;
    currentFramestamp = framestamp;
    frameStart.process();
    frameUpdate.process();
    frameRender.process();
    frameEnd.process();
}
exports.onFrameStart = frameStart.schedule;
exports.onFrameUpdate = frameUpdate.schedule;
exports.onFrameRender = frameRender.schedule;
exports.onFrameEnd = frameEnd.schedule;
exports.cancelOnFrameStart = frameStart.cancel;
exports.cancelOnFrameUpdate = frameUpdate.cancel;
exports.cancelOnFrameRender = frameRender.cancel;
exports.cancelOnFrameEnd = frameEnd.cancel;
exports.timeSinceLastFrame = function () { return elapsed; };
exports.currentFrameTime = function () { return currentFramestamp; };
//# sourceMappingURL=index.js.map

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var calc_1 = __webpack_require__(3);
var noop = function (v) { return v; };
exports.appendUnit = function (unit) { return function (v) { return "" + v + unit; }; };
exports.applyOffset = function (from, to) {
    var hasReceivedFrom = true;
    if (to === undefined) {
        to = from;
        hasReceivedFrom = false;
    }
    var getOffset = function (v) { return v - from; };
    var applyOffsetTo = function (v) { return v + to; };
    return function (v) {
        if (hasReceivedFrom) {
            return applyOffsetTo(getOffset(v));
        }
        else {
            from = v;
            hasReceivedFrom = true;
            return 0;
        }
    };
};
exports.clampMax = function (max) { return function (v) { return Math.min(v, max); }; };
exports.clampMin = function (min) { return function (v) { return Math.max(v, min); }; };
exports.clamp = function (min, max) {
    var _min = exports.clampMin(min);
    var _max = exports.clampMax(max);
    return function (v) { return _min(_max(v)); };
};
exports.pipe = function () {
    var transformers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        transformers[_i] = arguments[_i];
    }
    var numTransformers = transformers.length;
    var i = 0;
    return function (acc) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var v = acc;
        for (i = 0; i < numTransformers; i++) {
            v = transformers[i].apply(transformers, [v].concat(args));
        }
        return v;
    };
};
exports.interpolate = function (input, output, rangeEasing) {
    var rangeLength = input.length;
    var finalIndex = rangeLength - 1;
    return function (v) {
        if (v <= input[0]) {
            return output[0];
        }
        if (v >= input[finalIndex]) {
            return output[finalIndex];
        }
        var i = 1;
        for (; i < rangeLength; i++) {
            if (input[i] > v || i === finalIndex) {
                break;
            }
        }
        var progressInRange = calc_1.getProgressFromValue(input[i - 1], input[i], v);
        var easedProgress = (rangeEasing) ? rangeEasing[i - 1](progressInRange) : progressInRange;
        return calc_1.getValueFromProgress(output[i - 1], output[i], easedProgress);
    };
};
exports.generateNonIntegratedSpring = function (alterDisplacement) {
    if (alterDisplacement === void 0) { alterDisplacement = noop; }
    return function (constant, origin) { return function (v) {
        var displacement = origin - v;
        var springModifiedDisplacement = -constant * (0 - alterDisplacement(Math.abs(displacement)));
        return (displacement <= 0) ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;
    }; };
};
exports.linearSpring = exports.generateNonIntegratedSpring();
exports.nonlinearSpring = exports.generateNonIntegratedSpring(Math.sqrt);
exports.wrap = function (min, max) { return function (v) {
    var rangeSize = max - min;
    return ((v - min) % rangeSize + rangeSize) % rangeSize + min;
}; };
exports.smooth = function (strength) {
    if (strength === void 0) { strength = 50; }
    var previousValue = 0;
    var lastUpdated = 0;
    return function (v) {
        var currentFramestamp = framesync_1.currentFrameTime();
        var timeDelta = (currentFramestamp !== lastUpdated) ? currentFramestamp - lastUpdated : 0;
        var newValue = timeDelta ? calc_1.smooth(v, previousValue, timeDelta, strength) : previousValue;
        lastUpdated = currentFramestamp;
        previousValue = newValue;
        return newValue;
    };
};
exports.snap = function (points) {
    if (typeof points === 'number') {
        return function (v) { return Math.round(v / points) * points; };
    }
    else {
        var i_1 = 0;
        var numPoints_1 = points.length;
        return function (v) {
            var lastDistance = Math.abs(points[0] - v);
            for (i_1 = 1; i_1 < numPoints_1; i_1++) {
                var point = points[i_1];
                var distance = Math.abs(point - v);
                if (distance === 0)
                    return point;
                if (distance > lastDistance)
                    return points[i_1 - 1];
                if (i_1 === numPoints_1 - 1)
                    return point;
                lastDistance = distance;
            }
        };
    }
};
exports.steps = function (steps, min, max) {
    if (min === void 0) { min = 0; }
    if (max === void 0) { max = 1; }
    return function (v) {
        var progress = calc_1.getProgressFromValue(min, max, v);
        return calc_1.getValueFromProgress(min, max, calc_1.stepProgress(steps, progress));
    };
};
exports.transformChildValues = function (childTransformers) {
    var mutableState = {};
    return function (v) {
        for (var key in v) {
            var childTransformer = childTransformers[key];
            if (childTransformer) {
                mutableState[key] = childTransformer(v[key]);
            }
        }
        return mutableState;
    };
};
var resolve3 = function (points) { return function (t) {
    var ut = 1 - t;
    return (points[0] * ut + points[1] * t) * ut + (points[1] * ut + points[2] * t) * t;
}; };
var resolve4 = function (points) { return function (t) {
    var ut = 1 - t;
    var a1 = points[1] * ut + points[2] * t;
    return ((points[0] * ut + points[1] * t) * ut + a1 * t) * ut + (a1 * ut + (points[2] * ut + points[3] * t) * t) * t;
}; };
exports.bezier = function () {
    var points = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        points[_i] = arguments[_i];
    }
    return (points.length === 3) ? resolve3(points) : resolve4(points);
};


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var isNum = function (v) { return typeof v === 'number'; };
exports.isPoint = function (point) {
    return point.x !== undefined && point.y !== undefined;
};
exports.isPoint3D = function (point) {
    return point.z !== undefined;
};
var toDecimal = function (num, precision) {
    if (precision === void 0) { precision = 2; }
    precision = Math.pow(10, precision);
    return Math.round(num * precision) / precision;
};
var ZERO_POINT = {
    x: 0,
    y: 0,
    z: 0
};
var distance1D = function (a, b) { return Math.abs(a - b); };
exports.angle = function (a, b) {
    if (b === void 0) { b = ZERO_POINT; }
    return exports.radiansToDegrees(Math.atan2(b.y - a.y, b.x - a.x));
};
exports.degreesToRadians = function (degrees) { return degrees * Math.PI / 180; };
exports.dilate = function (a, b, dilation) { return a + ((b - a) * dilation); };
exports.distance = function (a, b) {
    if (b === void 0) { b = ZERO_POINT; }
    if (isNum(a) && isNum(b)) {
        return distance1D(a, b);
    }
    else if (exports.isPoint(a) && exports.isPoint(b)) {
        var xDelta = distance1D(a.x, b.x);
        var yDelta = distance1D(a.y, b.y);
        var zDelta = (exports.isPoint3D(a) && exports.isPoint3D(b)) ? distance1D(a.z, b.z) : 0;
        return Math.sqrt((Math.pow(xDelta, 2)) + (Math.pow(yDelta, 2)) + (Math.pow(zDelta, 2)));
    }
    return 0;
};
exports.getProgressFromValue = function (from, to, value) {
    return (value - from) / (to - from);
};
exports.getValueFromProgress = function (from, to, progress) {
    return (-progress * from) + (progress * to) + from;
};
exports.pointFromAngleAndDistance = function (origin, angle, distance) {
    angle = exports.degreesToRadians(angle);
    return {
        x: distance * Math.cos(angle) + origin.x,
        y: distance * Math.sin(angle) + origin.y
    };
};
exports.radiansToDegrees = function (radians) { return radians * 180 / Math.PI; };
exports.smooth = function (newValue, oldValue, duration, smoothing) {
    if (smoothing === void 0) { smoothing = 0; }
    return toDecimal(oldValue + (duration * (newValue - oldValue) / Math.max(smoothing, duration)));
};
exports.speedPerFrame = function (xps, frameDuration) {
    return (isNum(xps)) ? xps / (1000 / frameDuration) : 0;
};
exports.speedPerSecond = function (velocity, frameDuration) {
    return frameDuration ? velocity * (1000 / frameDuration) : 0;
};
exports.stepProgress = function (steps, progress) {
    var segment = 1 / (steps - 1);
    var target = 1 - (1 / steps);
    var progressOfTarget = Math.min(progress / target, 1);
    return Math.floor(progressOfTarget / segment) * segment;
};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var everyFrame = function () { return action_1.default(function (_a) {
    var update = _a.update;
    var nextFrame = function () {
        update();
        framesync_1.onFrameUpdate(nextFrame);
    };
    framesync_1.onFrameUpdate(nextFrame);
    return {
        stop: function () { return framesync_1.cancelOnFrameUpdate(nextFrame); }
    };
}); };
exports.default = everyFrame;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var action_1 = __webpack_require__(0);
exports.action = action_1.default;
var keyframes_1 = __webpack_require__(14);
exports.keyframes = keyframes_1.default;
var decay_1 = __webpack_require__(15);
exports.decay = decay_1.default;
var physics_1 = __webpack_require__(16);
exports.physics = physics_1.default;
var spring_1 = __webpack_require__(17);
exports.spring = spring_1.default;
var tween_1 = __webpack_require__(7);
exports.tween = tween_1.default;
var mouse_1 = __webpack_require__(8);
exports.mouse = mouse_1.default;
var touch_1 = __webpack_require__(9);
exports.touch = touch_1.default;
var pointer_1 = __webpack_require__(19);
exports.pointer = pointer_1.default;
var _calc = __webpack_require__(3);
exports.calc = _calc;
var _easing = __webpack_require__(6);
exports.easing = _easing;
var _transform = __webpack_require__(2);
exports.transform = _transform;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var transformers_1 = __webpack_require__(2);
var DEFAULT_OVERSHOOT_STRENGTH = 1.525;
exports.createReversedEasing = function (easing) {
    return function (p) { return 1 - easing(1 - p); };
};
exports.createMirroredEasing = function (easing) {
    return function (p) { return (p <= 0.5) ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2; };
};
exports.linear = function (p) { return p; };
exports.createExpoIn = function (power) { return function (p) { return Math.pow(p, power); }; };
exports.easeIn = exports.createExpoIn(2);
exports.easeOut = exports.createReversedEasing(exports.easeIn);
exports.easeInOut = exports.createMirroredEasing(exports.easeIn);
exports.circIn = function (p) { return 1 - Math.sin(Math.acos(p)); };
exports.circOut = exports.createReversedEasing(exports.circIn);
exports.circInOut = exports.createMirroredEasing(exports.circOut);
exports.createBackIn = function (power) { return function (p) { return (p * p) * ((power + 1) * p - power); }; };
exports.backIn = exports.createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
exports.backOut = exports.createReversedEasing(exports.backIn);
exports.backInOut = exports.createMirroredEasing(exports.backIn);
exports.createAnticipateEasing = function (power) {
    var backEasing = exports.createBackIn(power);
    return function (p) { return ((p *= 2) < 1) ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1))); };
};
exports.anticipate = exports.createAnticipateEasing(DEFAULT_OVERSHOOT_STRENGTH);
exports.cubicBezier = function (x1, y1, x2, y2) {
    var xBezier = transformers_1.bezier(0, x1, x2, 1);
    var yBezier = transformers_1.bezier(0, y1, y2, 1);
    return function (t) { return yBezier(xBezier(t)); };
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var calc_1 = __webpack_require__(3);
var easing_1 = __webpack_require__(6);
var transformers_1 = __webpack_require__(2);
var every_frame_1 = __webpack_require__(4);
var clampProgress = transformers_1.clamp(0, 1);
var tween = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.from, from = _c === void 0 ? 0 : _c, _d = _b.to, to = _d === void 0 ? 1 : _d, _e = _b.duration, duration = _e === void 0 ? 300 : _e, _f = _b.elapsed, elapsed = _f === void 0 ? 0 : _f, _g = _b.ease, ease = _g === void 0 ? easing_1.easeOut : _g, _h = _b.playDirection, playDirection = _h === void 0 ? 1 : _h, _j = _b.flip, flip = _j === void 0 ? 0 : _j, _k = _b.flipCount, flipCount = _k === void 0 ? 0 : _k, _l = _b.loop, loop = _l === void 0 ? 0 : _l, _m = _b.loopCount, loopCount = _m === void 0 ? 0 : _m, _o = _b.yoyo, yoyo = _o === void 0 ? 0 : _o, _p = _b.yoyoCount, yoyoCount = _p === void 0 ? 0 : _p;
    return action_1.default(function (_a) {
        var update = _a.update, complete = _a.complete;
        var progress = 0;
        var current = from;
        var tweenTimer;
        var isActive = false;
        var reverseTween = function () { return playDirection *= -1; };
        var isTweenComplete = function () {
            var isComplete = (playDirection === 1)
                ? elapsed >= duration
                : elapsed <= 0;
            if (!isComplete)
                return false;
            if (isComplete && !loop && !flip && !yoyo)
                return true;
            var isStepTaken = false;
            if (loop && loopCount < loop) {
                elapsed = 0;
                loopCount++;
                isStepTaken = true;
            }
            else if (flip && flipCount < flip) {
                elapsed = duration - elapsed;
                _a = [to, from], from = _a[0], to = _a[1];
                flipCount++;
                isStepTaken = true;
            }
            else if (yoyo && yoyoCount < yoyo) {
                reverseTween();
                yoyoCount++;
                isStepTaken = true;
            }
            return !isStepTaken;
            var _a;
        };
        var updateTween = function () {
            progress = clampProgress(calc_1.getProgressFromValue(0, duration, elapsed));
            current = calc_1.getValueFromProgress(from, to, ease(progress));
            update(current);
        };
        var startTimer = function () {
            isActive = true;
            tweenTimer = every_frame_1.default().start(function () {
                elapsed += framesync_1.timeSinceLastFrame() * playDirection;
                updateTween();
                if (isTweenComplete() && complete)
                    complete();
            });
        };
        var stopTimer = function () {
            isActive = false;
            if (tweenTimer)
                tweenTimer.stop();
        };
        startTimer();
        return {
            isActive: function () { return isActive; },
            getElapsed: function () { return transformers_1.clamp(0, duration)(elapsed); },
            getProgress: function () { return progress; },
            stop: function () {
                stopTimer();
            },
            pause: function () {
                stopTimer();
                return this;
            },
            resume: function () {
                startTimer();
                return this;
            },
            seek: function (newProgress) {
                elapsed = calc_1.getValueFromProgress(0, duration, newProgress);
                framesync_1.onFrameUpdate(updateTween);
                return this;
            },
            reverse: function () {
                reverseTween();
                return this;
            }
        };
    });
};
exports.default = tween;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var mouse = function (_a) {
    var _b = (_a === void 0 ? {} : _a).preventDefault, preventDefault = _b === void 0 ? true : _b;
    return action_1.default(function (_a) {
        var update = _a.update;
        var point = { x: 0, y: 0 };
        var updatePoint = function () { return update(point); };
        var onMove = function (e) {
            point.x = e.clientX;
            point.y = e.clientY;
            framesync_1.onFrameUpdate(updatePoint);
        };
        document.documentElement.addEventListener('mousemove', onMove);
        return {
            stop: function () {
                framesync_1.cancelOnFrameUpdate(updatePoint);
                document.removeEventListener('mousemove', onMove);
            }
        };
    });
};
exports.default = mouse;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var touchToPoint = function (_a) {
    var clientX = _a.clientX, clientY = _a.clientY;
    return ({
        x: clientX,
        y: clientY
    });
};
var touch = function (_a) {
    var _b = (_a === void 0 ? {} : _a).preventDefault, preventDefault = _b === void 0 ? true : _b;
    return action_1.default(function (_a) {
        var update = _a.update;
        var points = [{ x: 0, y: 0 }];
        var updatePoint = function () { return update(points); };
        var onMove = function (_a) {
            var touches = _a.touches;
            var numTouches = touches.length;
            var newPoints = [];
            for (var i = 0; i < numTouches; i++) {
                var thisTouch = touches[i];
                newPoints.push(touchToPoint(thisTouch));
            }
            points = newPoints;
            framesync_1.onFrameUpdate(updatePoint);
        };
        document.addEventListener('touchmove', onMove, { passive: !preventDefault });
        return {
            stop: function () {
                framesync_1.cancelOnFrameUpdate(updatePoint);
                document.removeEventListener('touchmove', onMove);
            }
        };
    });
};
exports.default = touch;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var axes = ['', 'X', 'Y', 'Z'];
var order = ['translate', 'scale', 'rotate', 'skew', 'transformPerspective'];
var transformProps = order.reduce(function (acc, key) {
    return axes.reduce(function (axesAcc, axesKey) {
        axesAcc.push(key + axesKey);
        return axesAcc;
    }, acc);
}, ['x', 'y', 'z']);
var transformPropDictionary = transformProps.reduce(function (dict, key) {
    dict[key] = true;
    return dict;
}, {});
exports.isTransformProp = function (key) { return transformPropDictionary[key] === true; };
exports.sortTransformProps = function (a, b) { return transformProps.indexOf(a) - transformProps.indexOf(b); };
//# sourceMappingURL=transform-props.js.map

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var hasRAF = (typeof window !== 'undefined' && window.requestAnimationFrame) ? true : false;
var onNextFrame;
if (hasRAF) {
    onNextFrame = function (callback) { return window.requestAnimationFrame(callback); };
}
else {
    var lastTime_1 = 0;
    onNextFrame = function (callback) {
        var currentTime = new Date().getTime();
        var timeToCall = Math.max(0, 16.7 - (currentTime - lastTime_1));
        lastTime_1 = currentTime + timeToCall;
        setTimeout(function () { return callback(lastTime_1); }, timeToCall);
    };
}
exports.default = onNextFrame;
//# sourceMappingURL=on-next-frame.js.map

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function createRenderStep(startRenderLoop) {
    var functionsToRun = [];
    var functionsToRunNextFrame = [];
    return {
        schedule: function (callback) {
            startRenderLoop();
            if (functionsToRunNextFrame.indexOf(callback) === -1) {
                functionsToRunNextFrame.push(callback);
            }
        },
        cancel: function (callback) {
            var indexOfCallback = functionsToRunNextFrame.indexOf(callback);
            if (indexOfCallback !== -1) {
                functionsToRunNextFrame.splice(indexOfCallback, 1);
            }
        },
        process: function () {
            _a = [functionsToRunNextFrame, functionsToRun], functionsToRun = _a[0], functionsToRunNextFrame = _a[1];
            functionsToRunNextFrame.length = 0;
            var numThisFrame = functionsToRun.length;
            for (var i = 0; i < numThisFrame; i++) {
                functionsToRun[i]();
            }
            var _a;
        }
    };
}
exports.default = createRenderStep;
//# sourceMappingURL=create-render-step.js.map

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var noop = function () { return undefined; };
var defaultObserver = function (observer) { return (__assign({ complete: noop, error: noop, update: noop }, observer)); };
var createObserver = function (observerCandidate, _a) {
    var middleware = (_a === void 0 ? {} : _a).middleware;
    var isActive = true;
    var providedObserver = (typeof observerCandidate === 'function')
        ? defaultObserver({ update: observerCandidate })
        : defaultObserver(observerCandidate);
    var update = providedObserver.update;
    var observer = {
        complete: function () {
            isActive = false;
            providedObserver.complete();
        },
        error: function (err) {
            isActive = false;
            providedObserver.error(err);
        },
        update: function (v) {
            if (!isActive)
                return;
            update(v);
        }
    };
    var numMiddleware = middleware ? middleware.length : 0;
    if (numMiddleware) {
        middleware.forEach(function (m) {
            update = m(update, observer.complete);
        });
    }
    return observer;
};
exports.default = createObserver;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var easing_1 = __webpack_require__(6);
var transformers_1 = __webpack_require__(2);
var tween_1 = __webpack_require__(7);
var defaultEasings = function (values) {
    return values.map(function () { return easing_1.easeOut; }).splice(0, values.length - 1);
};
var defaultTimings = function (values) {
    var numValues = values.length;
    return values.map(function (value, i) { return (i !== 0) ? i / (numValues - 1) : 0; });
};
var keyframes = function (_a) {
    var values = _a.values, loop = _a.loop, yoyo = _a.yoyo, flip = _a.flip, props = __rest(_a, ["values", "loop", "yoyo", "flip"]);
    var duration = props.duration || 300;
    var ease = props.ease || defaultEasings(values);
    var times = props.times || defaultTimings(values);
    return tween_1.default({ duration: duration, ease: easing_1.linear, loop: loop, yoyo: yoyo, flip: flip })
        .pipe(transformers_1.interpolate(times, values, ease));
};
exports.default = keyframes;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var every_frame_1 = __webpack_require__(4);
var decay = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.velocity, velocity = _c === void 0 ? 0 : _c, _d = _b.from, from = _d === void 0 ? 0 : _d, _e = _b.power, power = _e === void 0 ? 0.8 : _e, _f = _b.timeConstant, timeConstant = _f === void 0 ? 350 : _f, _g = _b.restDelta, restDelta = _g === void 0 ? 0.5 : _g, modifyTarget = _b.modifyTarget;
    return action_1.default(function (_a) {
        var complete = _a.complete, update = _a.update;
        var elapsed = 0;
        var amplitude = power * velocity;
        var idealTarget = Math.round(from + amplitude);
        var target = (typeof modifyTarget === 'undefined')
            ? idealTarget
            : modifyTarget(idealTarget);
        var timer = every_frame_1.default().start(function () {
            elapsed += framesync_1.timeSinceLastFrame();
            var delta = -amplitude * Math.exp(-elapsed / timeConstant);
            var isMoving = (delta > restDelta || delta < -restDelta);
            var current = isMoving ? target + delta : target;
            update(current);
            if (!isMoving)
                complete();
        });
        return {
            stop: function () { return timer.stop(); }
        };
    });
};
exports.default = decay;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var calc_1 = __webpack_require__(3);
var every_frame_1 = __webpack_require__(4);
var physics = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.acceleration, acceleration = _c === void 0 ? 0 : _c, _d = _b.friction, friction = _d === void 0 ? 0 : _d, _e = _b.velocity, velocity = _e === void 0 ? 0 : _e, _f = _b.restSpeed, restSpeed = _f === void 0 ? 0.001 : _f, _g = _b.from, from = _g === void 0 ? 0 : _g, springStrength = _b.springStrength, springTarget = _b.springTarget;
    return action_1.default(function (_a) {
        var complete = _a.complete, update = _a.update;
        var current = from;
        var timer = every_frame_1.default().start(function () {
            var elapsed = framesync_1.timeSinceLastFrame();
            if (acceleration)
                velocity += calc_1.speedPerFrame(acceleration, elapsed);
            if (friction)
                velocity *= Math.pow((1 - friction), (elapsed / 100));
            if (springStrength !== undefined && springTarget !== undefined) {
                var distanceToTarget = springTarget - current;
                velocity += distanceToTarget * calc_1.speedPerFrame(springStrength, elapsed);
            }
            current += calc_1.speedPerFrame(velocity, elapsed);
            update(current);
            var isComplete = (restSpeed !== false && (!velocity || Math.abs(velocity) <= restSpeed));
            if (isComplete)
                complete();
        });
        return {
            setAcceleration: function (v) {
                acceleration = v;
                return this;
            },
            setFriction: function (v) {
                friction = v;
                return this;
            },
            setSpringStrength: function (v) {
                springStrength = v;
                return this;
            },
            setSpringTarget: function (v) {
                springTarget = v;
                return this;
            },
            setVelocity: function (v) {
                velocity = v;
                return this;
            },
            stop: function () { return timer.stop(); }
        };
    });
};
exports.default = physics;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var action_1 = __webpack_require__(0);
var every_frame_1 = __webpack_require__(4);
var math_utils_1 = __webpack_require__(18);
var spring = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.from, from = _c === void 0 ? 0.0 : _c, _d = _b.to, to = _d === void 0 ? 0.0 : _d, _e = _b.stiffness, stiffness = _e === void 0 ? 100 : _e, _f = _b.damping, damping = _f === void 0 ? 10 : _f, _g = _b.mass, mass = _g === void 0 ? 1.0 : _g, _h = _b.velocity, velocity = _h === void 0 ? 0.0 : _h, _j = _b.restSpeed, restSpeed = _j === void 0 ? 0.01 : _j, _k = _b.restDelta, restDelta = _k === void 0 ? 0.01 : _k;
    return action_1.default(function (_a) {
        var update = _a.update, complete = _a.complete;
        var initialVelocity = velocity ? -(velocity / 1000) : 0.0;
        var t = 0;
        var delta = to - from;
        var springTimer = every_frame_1.default().start(function () {
            var timeDelta = framesync_1.timeSinceLastFrame() / 1000;
            t += timeDelta;
            var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
            var angularFreq = Math.sqrt(stiffness / mass);
            var x0 = 1;
            var oscillation = 0.0;
            if (dampingRatio < 1) {
                var envelope = Math.exp(-dampingRatio * angularFreq * t);
                var expoDecay = angularFreq * Math.sqrt(1.0 - (dampingRatio * dampingRatio));
                oscillation = envelope * (((initialVelocity + dampingRatio * angularFreq * x0) / expoDecay) * Math.sin(expoDecay * t) + (x0 * Math.cos(expoDecay * t)));
            }
            else if (dampingRatio === 1) {
                var envelope = Math.exp(-angularFreq * t);
                oscillation = envelope * (x0 + (initialVelocity + (angularFreq * x0)) * t);
            }
            else {
                var envelope = Math.exp(-dampingRatio * angularFreq * t);
                var oscillationFreq = angularFreq * Math.sqrt(dampingRatio * dampingRatio - 1.0);
                oscillation = to - envelope * ((initialVelocity + dampingRatio * angularFreq * x0) * math_utils_1.sinh(oscillationFreq * t) +
                    oscillationFreq * x0 * math_utils_1.cosh(oscillationFreq * t)) / oscillationFreq;
            }
            var fraction = 1 - oscillation;
            var position = from + fraction * delta;
            var isBelowVelocityThreshold = Math.abs(velocity) <= restSpeed;
            var isBelowDisplacementThreshold = Math.abs(to - position) <= restDelta;
            if (isBelowVelocityThreshold && isBelowDisplacementThreshold) {
                position = to;
                update(position);
                complete();
            }
            else {
                update(position);
            }
        });
        return {
            stop: function () { return springTimer.stop(); }
        };
    });
};
exports.default = spring;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.cosh = function (x) {
    var y = Math.exp(x);
    return (y + 1 / y) / 2;
};
exports.sinh = function (x) {
    var y = Math.exp(x);
    return (y - 1 / y) / 2;
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var merge_1 = __webpack_require__(20);
var touch_1 = __webpack_require__(9);
var mouse_1 = __webpack_require__(8);
var getFirstTouch = function (_a) {
    var firstTouch = _a[0];
    return firstTouch;
};
var pointer = function (props) { return merge_1.default(mouse_1.default(props), touch_1.default(props).pipe(getFirstTouch)); };
exports.default = pointer;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var action_1 = __webpack_require__(0);
var merge = function () {
    var actions = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        actions[_i] = arguments[_i];
    }
    return action_1.default(function (observer) {
        var subs = actions.map(function (thisAction) { return thisAction.start({
            update: function (v) { return observer.update(v); },
            complete: function () { return observer.complete(); }
        }); });
        return {
            stop: function () { return subs.forEach(function (sub) { return sub.stop(); }); }
        };
    });
};
exports.default = merge;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
var REPLACE_TEMPLATE = '$1-$2';
exports.camelToDash = function (string) { return string.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase(); };
exports.setDomAttrs = function (element, attrs) {
    for (var key in attrs) {
        if (attrs.hasOwnProperty(key)) {
            element.setAttribute(key, attrs[key]);
        }
    }
};
//# sourceMappingURL=utils.js.map

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var framesync_1 = __webpack_require__(1);
var createStyler = function (_a) {
    var onRead = _a.onRead, onRender = _a.onRender, _b = _a.aliasMap, aliasMap = _b === void 0 ? {} : _b, _c = _a.useCache, useCache = _c === void 0 ? true : _c;
    return function (props) {
        var state = {};
        var changedValues = [];
        var hasChanged = false;
        var setValue = function (unmappedKey, value) {
            var key = aliasMap[unmappedKey] || unmappedKey;
            var currentValue = state[key];
            state[key] = value;
            if (state[key] !== currentValue) {
                hasChanged = true;
                changedValues.push(key);
            }
        };
        var render = function () {
            onRender(state, props, changedValues);
            hasChanged = false;
            changedValues.length = 0;
        };
        return {
            get: function (unmappedKey) {
                var key = aliasMap[unmappedKey] || unmappedKey;
                return (key)
                    ? (useCache && state[key] !== undefined)
                        ? state[key]
                        : onRead(key, props)
                    : state;
            },
            set: function (values, value) {
                if (typeof values === 'string') {
                    setValue(values, value);
                }
                else {
                    for (var key in values) {
                        setValue(key, values[key]);
                    }
                }
                if (hasChanged)
                    framesync_1.onFrameRender(render);
                return this;
            },
            render: function (forceRender) {
                if (forceRender === void 0) { forceRender = false; }
                if (forceRender || hasChanged)
                    render();
                return this;
            }
        };
    };
};
exports.default = createStyler;
//# sourceMappingURL=index.js.map

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(21);
var camelCache = {};
var dashCache = {};
var prefixes = ['Webkit', 'Moz', 'O', 'ms', ''];
var numPrefixes = prefixes.length;
var testElement;
var testPrefix = function (key) {
    testElement = testElement || document.createElement('div');
    for (var i = 0; i < numPrefixes; i++) {
        var prefix = prefixes[i];
        var noPrefix = (prefix === '');
        var prefixedPropertyName = noPrefix ? key : prefix + key.charAt(0).toUpperCase() + key.slice(1);
        if (prefixedPropertyName in testElement.style) {
            camelCache[key] = prefixedPropertyName;
            dashCache[key] = "" + (noPrefix ? '' : '-') + utils_1.camelToDash(prefixedPropertyName);
        }
    }
};
exports.default = function (key, asDashCase) {
    if (asDashCase === void 0) { asDashCase = false; }
    var cache = asDashCase ? dashCache : camelCache;
    if (!cache[key])
        testPrefix(key);
    return cache[key];
};
//# sourceMappingURL=prefixer.js.map

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var style_value_types_1 = __webpack_require__(25);
var valueTypes = {
    color: style_value_types_1.color,
    backgroundColor: style_value_types_1.color,
    outlineColor: style_value_types_1.color,
    fill: style_value_types_1.color,
    stroke: style_value_types_1.color,
    borderColor: style_value_types_1.color,
    borderTopColor: style_value_types_1.color,
    borderRightColor: style_value_types_1.color,
    borderBottomColor: style_value_types_1.color,
    borderLeftColor: style_value_types_1.color,
    borderRadius: style_value_types_1.px,
    width: style_value_types_1.px,
    height: style_value_types_1.px,
    top: style_value_types_1.px,
    left: style_value_types_1.px,
    bottom: style_value_types_1.px,
    right: style_value_types_1.px,
    rotate: style_value_types_1.degrees,
    rotateX: style_value_types_1.degrees,
    rotateY: style_value_types_1.degrees,
    rotateZ: style_value_types_1.degrees,
    scale: style_value_types_1.scale,
    scaleX: style_value_types_1.scale,
    scaleY: style_value_types_1.scale,
    scaleZ: style_value_types_1.scale,
    skewX: style_value_types_1.degrees,
    skewY: style_value_types_1.degrees,
    distance: style_value_types_1.px,
    translateX: style_value_types_1.px,
    translateY: style_value_types_1.px,
    translateZ: style_value_types_1.px,
    perspective: style_value_types_1.px,
    opacity: style_value_types_1.alpha
};
exports.default = function (key) { return valueTypes[key]; };
//# sourceMappingURL=value-types.js.map

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clamp = function (min, max) { return function (v) { return Math.max(Math.min(v, max), min); }; };
var contains = function (term) { return function (v) { return (typeof term === 'string' && v.indexOf(term) !== -1); }; };
var createUnitType = function (unit) { return ({
    test: contains(unit),
    parse: parseFloat,
    transform: function (v) { return "" + v + unit; }
}); };
var isFirstChars = function (term) { return function (v) { return (typeof term === 'string' && v.indexOf(term) === 0); }; };
exports.getValueFromFunctionString = function (value) { return value.substring(value.indexOf('(') + 1, value.lastIndexOf(')')); };
exports.splitCommaDelimited = function (value) { return typeof value === 'string' ? value.split(/,\s*/) : [value]; };
function splitColorValues(terms) {
    var numTerms = terms.length;
    return function (v) {
        var values = {};
        var valuesArray = exports.splitCommaDelimited(exports.getValueFromFunctionString(v));
        for (var i = 0; i < numTerms; i++) {
            values[terms[i]] = (valuesArray[i] !== undefined) ? parseFloat(valuesArray[i]) : 1;
        }
        return values;
    };
}
exports.splitColorValues = splitColorValues;
exports.number = {
    test: function (v) { return typeof v === 'number'; },
    parse: parseFloat,
    transform: function (v) { return v; }
};
exports.alpha = __assign({}, exports.number, { transform: clamp(0, 1) });
exports.degrees = createUnitType('deg');
exports.percent = createUnitType('%');
exports.px = createUnitType('px');
exports.scale = __assign({}, exports.number, { default: 1 });
var FLOAT_REGEX = /(-)?(\d[\d\.]*)/g;
var generateToken = function (token) { return '${' + token + '}'; };
exports.complex = {
    test: function (v) {
        var matches = v.match && v.match(FLOAT_REGEX);
        return (matches !== undefined && matches.constructor === Array && matches.length > 1);
    },
    parse: function (v) {
        var parsedValue = {};
        v.match(FLOAT_REGEX).forEach(function (value, i) { return parsedValue[i] = parseFloat(value); });
        return parsedValue;
    },
    createTransformer: function (prop) {
        var counter = 0;
        var template = prop.replace(FLOAT_REGEX, function () { return generateToken("" + counter++); });
        return function (v) {
            var output = template;
            for (var key in v) {
                if (v.hasOwnProperty(key)) {
                    output = output.replace(generateToken(key), v[key].toString());
                }
            }
            return output;
        };
    }
};
var clampRgbUnit = clamp(0, 255);
exports.rgbUnit = __assign({}, exports.number, { transform: function (v) { return Math.round(clampRgbUnit(v)); } });
var rgbaTemplate = function (_a) {
    var red = _a.red, green = _a.green, blue = _a.blue, _b = _a.alpha, alpha = _b === void 0 ? 1 : _b;
    return "rgba(" + red + ", " + green + ", " + blue + ", " + alpha + ")";
};
exports.rgba = {
    test: isFirstChars('rgb'),
    parse: splitColorValues(['red', 'green', 'blue', 'alpha']),
    transform: function (_a) {
        var red = _a.red, green = _a.green, blue = _a.blue, alpha = _a.alpha;
        return rgbaTemplate({
            red: exports.rgbUnit.transform(red),
            green: exports.rgbUnit.transform(green),
            blue: exports.rgbUnit.transform(blue),
            alpha: alpha
        });
    }
};
var hslaTemplate = function (_a) {
    var hue = _a.hue, saturation = _a.saturation, lightness = _a.lightness, _b = _a.alpha, alpha = _b === void 0 ? 1 : _b;
    return "hsla(" + hue + ", " + saturation + ", " + lightness + ", " + alpha + ")";
};
exports.hsla = {
    test: isFirstChars('hsl'),
    parse: splitColorValues(['hue', 'saturation', 'lightness', 'alpha']),
    transform: function (_a) {
        var hue = _a.hue, saturation = _a.saturation, lightness = _a.lightness, alpha = _a.alpha;
        return hslaTemplate({
            hue: Math.round(hue),
            saturation: exports.percent.transform(saturation),
            lightness: exports.percent.transform(lightness),
            alpha: alpha
        });
    }
};
exports.hex = __assign({}, exports.rgba, { test: isFirstChars('#'), parse: function (v) {
        var r, g, b;
        if (v.length > 4) {
            r = v.substr(1, 2);
            g = v.substr(3, 2);
            b = v.substr(5, 2);
        }
        else {
            r = v.substr(1, 1);
            g = v.substr(2, 1);
            b = v.substr(3, 1);
            r += r;
            g += g;
            b += b;
        }
        return {
            red: parseInt(r, 16),
            green: parseInt(g, 16),
            blue: parseInt(b, 16),
            alpha: 1
        };
    } });
var isRgba = function (v) { return v.red !== undefined; };
var isHsla = function (v) { return v.hue !== undefined; };
exports.color = {
    test: function (v) { return exports.rgba.test(v) || exports.hsla.test(v) || exports.hex.test(v); },
    parse: function (v) {
        if (exports.rgba.test(v)) {
            return exports.rgba.parse(v);
        }
        else if (exports.hsla.test(v)) {
            return exports.hsla.parse(v);
        }
        else if (exports.hex.test(v)) {
            return exports.hex.parse(v);
        }
        return v;
    },
    transform: function (v) {
        if (isRgba(v)) {
            return exports.rgba.transform(v);
        }
        else if (isHsla(v)) {
            return exports.hsla.transform(v);
        }
        return v;
    }
};
//# sourceMappingURL=index.js.map

/***/ }),
/* 26 */,
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var css_1 = __webpack_require__(28);
var svg_1 = __webpack_require__(30);
var src_1 = __webpack_require__(33);
var src_2 = __webpack_require__(34);
var src_3 = __webpack_require__(35);
var src_4 = __webpack_require__(36);
var src_5 = __webpack_require__(37);
var popmotion = __webpack_require__(5);
window.popmotionXL = __assign({}, popmotion, { css: css_1.default,
    draggable: src_1.default,
    inertia: src_2.default,
    scroll: src_3.default,
    spinnable: src_4.default,
    svg: svg_1.default,
    timeline: src_5.default });


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var styler_1 = __webpack_require__(22);
var render_1 = __webpack_require__(29);
var value_types_1 = __webpack_require__(24);
var transform_props_1 = __webpack_require__(10);
var prefixer_1 = __webpack_require__(23);
var cssStyler = styler_1.default({
    onRead: function (key, _a) {
        var element = _a.element;
        var valueType = value_types_1.default(key);
        if (transform_props_1.isTransformProp(key)) {
            return (valueType)
                ? valueType.default || 0
                : 0;
        }
        else {
            var domValue = window.getComputedStyle(element, null).getPropertyValue(prefixer_1.default(key)) || 0;
            return (valueType && valueType.parse) ? valueType.parse(domValue) : domValue;
        }
    },
    onRender: function (state, _a, changedValues) {
        var element = _a.element, enableHardwareAcceleration = _a.enableHardwareAcceleration;
        render_1.default(element, state, changedValues, enableHardwareAcceleration);
    },
    aliasMap: {
        x: 'translateX',
        y: 'translateY',
        z: 'translateZ',
        originX: 'transform-origin-x',
        originY: 'transform-origin-y'
    }
});
exports.default = function (element, props) {
    return cssStyler(__assign({ element: element, enableHardwareAcceleration: true }, props));
};
//# sourceMappingURL=index.js.map

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var transform_props_1 = __webpack_require__(10);
var prefixer_1 = __webpack_require__(23);
var value_types_1 = __webpack_require__(24);
function buildStylePropertyString(element, state, changedValues, enableHardwareAcceleration) {
    var propertyString = '';
    var transformString = '';
    var hasTransform = false;
    var transformHasZ = false;
    var numChangedValues = changedValues.length;
    for (var i = 0; i < numChangedValues; i++) {
        var key = changedValues[i];
        if (transform_props_1.isTransformProp(key)) {
            hasTransform = true;
            for (var stateKey in state) {
                if (transform_props_1.isTransformProp(stateKey) && changedValues.indexOf(stateKey) === -1) {
                    changedValues.push(stateKey);
                }
            }
            break;
        }
    }
    changedValues.sort(transform_props_1.sortTransformProps);
    var totalNumChangedValues = changedValues.length;
    for (var i = 0; i < totalNumChangedValues; i++) {
        var key = changedValues[i];
        var value = state[key];
        var valueType = value_types_1.default(key);
        if (valueType && (typeof value === 'number' || typeof value === 'object') && valueType.transform) {
            value = valueType.transform(value);
        }
        if (transform_props_1.isTransformProp(key)) {
            transformString += key + '(' + value + ') ';
            transformHasZ = (key === 'translateZ') ? true : transformHasZ;
        }
        else {
            propertyString += ';' + prefixer_1.default(key, true) + ':' + value;
        }
    }
    if (hasTransform) {
        if (!transformHasZ && enableHardwareAcceleration) {
            transformString += 'translateZ(0)';
        }
        propertyString += ';' + prefixer_1.default('transform', true) + ':' + transformString;
    }
    element.style.cssText += propertyString;
}
exports.default = buildStylePropertyString;
//# sourceMappingURL=render.js.map

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var styler_1 = __webpack_require__(22);
var utils_1 = __webpack_require__(21);
var transform_props_1 = __webpack_require__(10);
var value_types_1 = __webpack_require__(31);
var build_1 = __webpack_require__(32);
var svgStyler = styler_1.default({
    onRead: function (key, _a) {
        var element = _a.element;
        if (!transform_props_1.isTransformProp(key)) {
            return element.getAttribute(key);
        }
        else {
            var valueType = value_types_1.default(key);
            return valueType ? valueType.default : 0;
        }
    },
    onRender: function (state, _a, changedValues) {
        var dimensions = _a.dimensions, element = _a.element, isPath = _a.isPath, pathLength = _a.pathLength;
        utils_1.setDomAttrs(element, build_1.default(state, dimensions, isPath, pathLength));
    },
    aliasMap: {
        x: 'translateX',
        y: 'translateY',
        background: 'fill'
    }
});
exports.default = function (element) {
    var _a = element.getBBox(), x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    var props = {
        element: element,
        dimensions: { x: x, y: y, width: width, height: height },
        isPath: false
    };
    if (element.tagName === 'path') {
        props.isPath = true;
        props.pathLength = element.getTotalLength();
    }
    return svgStyler(props);
};
//# sourceMappingURL=index.js.map

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var style_value_types_1 = __webpack_require__(25);
var valueTypes = {
    fill: style_value_types_1.color,
    stroke: style_value_types_1.color,
    scale: style_value_types_1.scale,
    scaleX: style_value_types_1.scale,
    scaleY: style_value_types_1.scale,
    opacity: style_value_types_1.alpha,
    fillOpacity: style_value_types_1.alpha,
    strokeOpacity: style_value_types_1.alpha
};
exports.default = function (key) { return valueTypes[key]; };
//# sourceMappingURL=value-types.js.map

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(21);
var transform_props_1 = __webpack_require__(10);
var ZERO_NOT_ZERO = 0.0000001;
var percentToPixels = function (percent, length) {
    return (percent / 100) * length + 'px';
};
var build = function (state, dimensions, isPath, pathLength) {
    var hasTransform = false;
    var hasDashArray = false;
    var props = {};
    var dashArrayStyles = isPath ? {
        pathLength: '0',
        pathSpacing: "" + pathLength
    } : undefined;
    var scale = state.scale !== undefined ? state.scale || ZERO_NOT_ZERO : state.scaleX || 1;
    var scaleY = state.scaleY !== undefined ? state.scaleY || ZERO_NOT_ZERO : scale || 1;
    var transformOriginX = dimensions.width * ((state.originX || 50) / 100) + dimensions.x;
    var transformOriginY = dimensions.height * ((state.originY || 50) / 100) + dimensions.y;
    var scaleTransformX = -transformOriginX * (scale * 1);
    var scaleTransformY = -transformOriginY * (scaleY * 1);
    var scaleReplaceX = transformOriginX / scale;
    var scaleReplaceY = transformOriginY / scaleY;
    var transform = {
        translate: "translate(" + state.translateX + ", " + state.translateY + ") ",
        scale: "translate(" + scaleTransformX + ", " + scaleTransformY + ") scale(" + scale + ", " + scaleY + ") translate(" + scaleReplaceX + ", " + scaleReplaceY + ") ",
        rotate: "rotate(" + state.rotate + ", " + transformOriginX + ", " + transformOriginY + ") ",
        skewX: "skewX(" + state.skewX + ") ",
        skewY: "skewY(" + state.skewY + ") "
    };
    for (var key in state) {
        if (state.hasOwnProperty(key)) {
            var value = state[key];
            if (transform_props_1.isTransformProp(key)) {
                hasTransform = true;
            }
            else if (isPath && (key === 'pathLength' || key === 'pathSpacing') && typeof value === 'number') {
                hasDashArray = true;
                dashArrayStyles[key] = percentToPixels(value, pathLength);
            }
            else if (isPath && key === 'pathOffset') {
                props['stroke-dashoffset'] = percentToPixels(-value, pathLength);
            }
            else {
                props[utils_1.camelToDash(key)] = value;
            }
        }
    }
    if (hasDashArray) {
        props['stroke-dasharray'] = dashArrayStyles.pathLength + ' ' + dashArrayStyles.pathSpacing;
    }
    if (hasTransform) {
        props.transform = '';
        for (var key in transform) {
            if (transform.hasOwnProperty(key)) {
                var defaultValue = (key === 'scale') ? '1' : '0';
                props.transform += transform[key].replace(/undefined/g, defaultValue);
            }
        }
    }
    return props;
};
exports.default = build;
//# sourceMappingURL=build.js.map

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = draggable;

var _popmotion = __webpack_require__(5);

function draggable(node) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$x = _ref.x,
      x = _ref$x === undefined ? true : _ref$x,
      _ref$y = _ref.y,
      y = _ref$y === undefined ? true : _ref$y,
      _ref$initialX = _ref.initialX,
      initialX = _ref$initialX === undefined ? 0 : _ref$initialX,
      _ref$initialY = _ref.initialY,
      initialY = _ref$initialY === undefined ? 0 : _ref$initialY,
      onDrag = _ref.onDrag,
      onDragStart = _ref.onDragStart,
      onDragStop = _ref.onDragStop;

  var nodeRenderer = (0, _popmotion.css)(node);
  var values = {};
  if (x) values.x = (0, _popmotion.value)(initialX, function (v) {
    return nodeRenderer.set('x', v);
  });
  if (y) values.y = (0, _popmotion.value)(initialY, function (v) {
    return nodeRenderer.set('y', v);
  });

  var nodeXY = (0, _popmotion.composite)(values, {
    onUpdate: onDrag
  });

  function startTracking(e) {
    var pointerTracker = (0, _popmotion.pointer)(e).start();

    if (x) {
      (0, _popmotion.trackOffset)(pointerTracker.x, {
        from: nodeXY.x.get(),
        onUpdate: nodeXY.x
      }).start();
    }

    if (y) {
      (0, _popmotion.trackOffset)(pointerTracker.y, {
        from: nodeXY.y.get(),
        onUpdate: nodeXY.y,
        onStop: function onStop() {
          return pointerTracker.stop();
        }
      }).start();
    }

    if (onDragStart) onDragStart(nodeXY);
  }

  function stopTracking() {
    nodeXY.stop();

    if (onDragStop) onDragStop(nodeXY);
  }

  node.addEventListener('mousedown', startTracking);
  node.addEventListener('touchstart', startTracking, { passive: false });
  document.addEventListener('mouseup', stopTracking);
  document.addEventListener('touchend', stopTracking);

  return nodeXY;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL3BvcG1vdGlvbi1kcmFnZ2FibGUvc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImRyYWdnYWJsZSIsIm5vZGUiLCJ4IiwieSIsImluaXRpYWxYIiwiaW5pdGlhbFkiLCJvbkRyYWciLCJvbkRyYWdTdGFydCIsIm9uRHJhZ1N0b3AiLCJub2RlUmVuZGVyZXIiLCJ2YWx1ZXMiLCJ2Iiwic2V0Iiwibm9kZVhZIiwib25VcGRhdGUiLCJzdGFydFRyYWNraW5nIiwiZSIsInBvaW50ZXJUcmFja2VyIiwic3RhcnQiLCJmcm9tIiwiZ2V0Iiwib25TdG9wIiwic3RvcCIsInN0b3BUcmFja2luZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXNzaXZlIiwiZG9jdW1lbnQiXSwibWFwcGluZ3MiOiI7OztrQkFFd0JBLFM7O0FBRnhCOztBQUVlLFNBQVNBLFNBQVQsQ0FBbUJDLElBQW5CLEVBUVA7QUFBQSxpRkFBSixFQUFJO0FBQUEsb0JBUE5DLENBT007QUFBQSxNQVBOQSxDQU9NLDBCQVBGLElBT0U7QUFBQSxvQkFOTkMsQ0FNTTtBQUFBLE1BTk5BLENBTU0sMEJBTkYsSUFNRTtBQUFBLDJCQUxOQyxRQUtNO0FBQUEsTUFMTkEsUUFLTSxpQ0FMSyxDQUtMO0FBQUEsMkJBSk5DLFFBSU07QUFBQSxNQUpOQSxRQUlNLGlDQUpLLENBSUw7QUFBQSxNQUhOQyxNQUdNLFFBSE5BLE1BR007QUFBQSxNQUZOQyxXQUVNLFFBRk5BLFdBRU07QUFBQSxNQUROQyxVQUNNLFFBRE5BLFVBQ007O0FBQ04sTUFBTUMsZUFBZSxvQkFBSVIsSUFBSixDQUFyQjtBQUNBLE1BQU1TLFNBQVMsRUFBZjtBQUNBLE1BQUlSLENBQUosRUFBT1EsT0FBT1IsQ0FBUCxHQUFXLHNCQUFNRSxRQUFOLEVBQWdCLFVBQUNPLENBQUQ7QUFBQSxXQUFPRixhQUFhRyxHQUFiLENBQWlCLEdBQWpCLEVBQXNCRCxDQUF0QixDQUFQO0FBQUEsR0FBaEIsQ0FBWDtBQUNQLE1BQUlSLENBQUosRUFBT08sT0FBT1AsQ0FBUCxHQUFXLHNCQUFNRSxRQUFOLEVBQWdCLFVBQUNNLENBQUQ7QUFBQSxXQUFPRixhQUFhRyxHQUFiLENBQWlCLEdBQWpCLEVBQXNCRCxDQUF0QixDQUFQO0FBQUEsR0FBaEIsQ0FBWDs7QUFFUCxNQUFNRSxTQUFTLDBCQUFVSCxNQUFWLEVBQWtCO0FBQy9CSSxjQUFVUjtBQURxQixHQUFsQixDQUFmOztBQUlBLFdBQVNTLGFBQVQsQ0FBdUJDLENBQXZCLEVBQTBCO0FBQ3hCLFFBQU1DLGlCQUFpQix3QkFBUUQsQ0FBUixFQUFXRSxLQUFYLEVBQXZCOztBQUVBLFFBQUloQixDQUFKLEVBQU87QUFDTCxrQ0FBWWUsZUFBZWYsQ0FBM0IsRUFBOEI7QUFDNUJpQixjQUFNTixPQUFPWCxDQUFQLENBQVNrQixHQUFULEVBRHNCO0FBRTVCTixrQkFBVUQsT0FBT1g7QUFGVyxPQUE5QixFQUdHZ0IsS0FISDtBQUlEOztBQUVELFFBQUlmLENBQUosRUFBTztBQUNMLGtDQUFZYyxlQUFlZCxDQUEzQixFQUE4QjtBQUM1QmdCLGNBQU1OLE9BQU9WLENBQVAsQ0FBU2lCLEdBQVQsRUFEc0I7QUFFNUJOLGtCQUFVRCxPQUFPVixDQUZXO0FBRzVCa0IsZ0JBQVE7QUFBQSxpQkFBTUosZUFBZUssSUFBZixFQUFOO0FBQUE7QUFIb0IsT0FBOUIsRUFJR0osS0FKSDtBQUtEOztBQUVELFFBQUlYLFdBQUosRUFBaUJBLFlBQVlNLE1BQVo7QUFDbEI7O0FBRUQsV0FBU1UsWUFBVCxHQUF3QjtBQUN0QlYsV0FBT1MsSUFBUDs7QUFFQSxRQUFJZCxVQUFKLEVBQWdCQSxXQUFXSyxNQUFYO0FBQ2pCOztBQUVEWixPQUFLdUIsZ0JBQUwsQ0FBc0IsV0FBdEIsRUFBbUNULGFBQW5DO0FBQ0FkLE9BQUt1QixnQkFBTCxDQUFzQixZQUF0QixFQUFvQ1QsYUFBcEMsRUFBbUQsRUFBRVUsU0FBUyxLQUFYLEVBQW5EO0FBQ0FDLFdBQVNGLGdCQUFULENBQTBCLFNBQTFCLEVBQXFDRCxZQUFyQztBQUNBRyxXQUFTRixnQkFBVCxDQUEwQixVQUExQixFQUFzQ0QsWUFBdEM7O0FBRUEsU0FBT1YsTUFBUDtBQUNEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9tYXR0cGVycnkvU2l0ZXMvcG9wbW90aW9uIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcG9zaXRlLCB2YWx1ZSwgY3NzLCBwb2ludGVyLCB0cmFja09mZnNldCB9IGZyb20gJ3BvcG1vdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRyYWdnYWJsZShub2RlLCB7XG4gIHggPSB0cnVlLFxuICB5ID0gdHJ1ZSxcbiAgaW5pdGlhbFggPSAwLFxuICBpbml0aWFsWSA9IDAsXG4gIG9uRHJhZyxcbiAgb25EcmFnU3RhcnQsXG4gIG9uRHJhZ1N0b3Bcbn0gPSB7fSkge1xuICBjb25zdCBub2RlUmVuZGVyZXIgPSBjc3Mobm9kZSk7XG4gIGNvbnN0IHZhbHVlcyA9IHt9O1xuICBpZiAoeCkgdmFsdWVzLnggPSB2YWx1ZShpbml0aWFsWCwgKHYpID0+IG5vZGVSZW5kZXJlci5zZXQoJ3gnLCB2KSk7XG4gIGlmICh5KSB2YWx1ZXMueSA9IHZhbHVlKGluaXRpYWxZLCAodikgPT4gbm9kZVJlbmRlcmVyLnNldCgneScsIHYpKTtcblxuICBjb25zdCBub2RlWFkgPSBjb21wb3NpdGUodmFsdWVzLCB7XG4gICAgb25VcGRhdGU6IG9uRHJhZ1xuICB9KTtcblxuICBmdW5jdGlvbiBzdGFydFRyYWNraW5nKGUpIHtcbiAgICBjb25zdCBwb2ludGVyVHJhY2tlciA9IHBvaW50ZXIoZSkuc3RhcnQoKTtcblxuICAgIGlmICh4KSB7XG4gICAgICB0cmFja09mZnNldChwb2ludGVyVHJhY2tlci54LCB7XG4gICAgICAgIGZyb206IG5vZGVYWS54LmdldCgpLFxuICAgICAgICBvblVwZGF0ZTogbm9kZVhZLnhcbiAgICAgIH0pLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgaWYgKHkpIHtcbiAgICAgIHRyYWNrT2Zmc2V0KHBvaW50ZXJUcmFja2VyLnksIHtcbiAgICAgICAgZnJvbTogbm9kZVhZLnkuZ2V0KCksXG4gICAgICAgIG9uVXBkYXRlOiBub2RlWFkueSxcbiAgICAgICAgb25TdG9wOiAoKSA9PiBwb2ludGVyVHJhY2tlci5zdG9wKClcbiAgICAgIH0pLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uRHJhZ1N0YXJ0KSBvbkRyYWdTdGFydChub2RlWFkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RvcFRyYWNraW5nKCkge1xuICAgIG5vZGVYWS5zdG9wKCk7XG5cbiAgICBpZiAob25EcmFnU3RvcCkgb25EcmFnU3RvcChub2RlWFkpO1xuICB9XG5cbiAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzdGFydFRyYWNraW5nKTtcbiAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgc3RhcnRUcmFja2luZywgeyBwYXNzaXZlOiBmYWxzZSB9KTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN0b3BUcmFja2luZyk7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgc3RvcFRyYWNraW5nKTtcblxuICByZXR1cm4gbm9kZVhZO1xufVxuIl19

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _popmotion = __webpack_require__(5);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Implementation of https://ariya.io/2013/11/javascript-kinetic-scrolling-part-2


var Inertia = function (_Action) {
  _inherits(Inertia, _Action);

  function Inertia() {
    _classCallCheck(this, Inertia);

    return _possibleConstructorReturn(this, _Action.apply(this, arguments));
  }

  Inertia.prototype.onStart = function onStart() {
    var _props = this.props,
        velocity = _props.velocity,
        power = _props.power,
        modifyTarget = _props.modifyTarget;


    this.amplitude = power * velocity;
    this.target = Math.round(this.current + this.amplitude);
    this.elapsed = 0;

    if (modifyTarget) {
      this.target = modifyTarget(this.target);
    }
  };

  Inertia.prototype.update = function update() {
    var _props2 = this.props,
        autoStopDelta = _props2.autoStopDelta,
        timeConstant = _props2.timeConstant;


    this.elapsed += (0, _popmotion.timeSinceLastFrame)();
    var delta = -this.amplitude * Math.exp(-this.elapsed / timeConstant);
    var isMoving = delta > autoStopDelta || delta < -autoStopDelta;
    if (!isMoving) this.isComplete = true;
    return isMoving ? this.target + delta : this.target;
  };

  Inertia.prototype.isActionComplete = function isActionComplete() {
    return this.isComplete;
  };

  return Inertia;
}(_popmotion.Action);

Inertia.defaultProps = {
  velocity: 0,
  from: 0,
  power: 0.8,
  timeConstant: 350,
  autoStopDelta: 0.5
};

exports.default = function (props) {
  return new Inertia(props);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL3BvcG1vdGlvbi1pbmVydGlhL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJJbmVydGlhIiwib25TdGFydCIsInByb3BzIiwidmVsb2NpdHkiLCJwb3dlciIsIm1vZGlmeVRhcmdldCIsImFtcGxpdHVkZSIsInRhcmdldCIsIk1hdGgiLCJyb3VuZCIsImN1cnJlbnQiLCJlbGFwc2VkIiwidXBkYXRlIiwiYXV0b1N0b3BEZWx0YSIsInRpbWVDb25zdGFudCIsImRlbHRhIiwiZXhwIiwiaXNNb3ZpbmciLCJpc0NvbXBsZXRlIiwiaXNBY3Rpb25Db21wbGV0ZSIsImRlZmF1bHRQcm9wcyIsImZyb20iXSwibWFwcGluZ3MiOiI7Ozs7QUFDQTs7Ozs7OytlQURBOzs7SUFHTUEsTzs7Ozs7Ozs7O29CQVNKQyxPLHNCQUFVO0FBQUEsaUJBQ2tDLEtBQUtDLEtBRHZDO0FBQUEsUUFDQUMsUUFEQSxVQUNBQSxRQURBO0FBQUEsUUFDVUMsS0FEVixVQUNVQSxLQURWO0FBQUEsUUFDaUJDLFlBRGpCLFVBQ2lCQSxZQURqQjs7O0FBR1IsU0FBS0MsU0FBTCxHQUFpQkYsUUFBUUQsUUFBekI7QUFDQSxTQUFLSSxNQUFMLEdBQWNDLEtBQUtDLEtBQUwsQ0FBVyxLQUFLQyxPQUFMLEdBQWUsS0FBS0osU0FBL0IsQ0FBZDtBQUNBLFNBQUtLLE9BQUwsR0FBZSxDQUFmOztBQUVBLFFBQUlOLFlBQUosRUFBa0I7QUFDaEIsV0FBS0UsTUFBTCxHQUFjRixhQUFhLEtBQUtFLE1BQWxCLENBQWQ7QUFDRDtBQUNGLEc7O29CQUVESyxNLHFCQUFTO0FBQUEsa0JBQ2lDLEtBQUtWLEtBRHRDO0FBQUEsUUFDQ1csYUFERCxXQUNDQSxhQUREO0FBQUEsUUFDZ0JDLFlBRGhCLFdBQ2dCQSxZQURoQjs7O0FBR1AsU0FBS0gsT0FBTCxJQUFnQixvQ0FBaEI7QUFDQSxRQUFNSSxRQUFRLENBQUMsS0FBS1QsU0FBTixHQUFrQkUsS0FBS1EsR0FBTCxDQUFTLENBQUMsS0FBS0wsT0FBTixHQUFnQkcsWUFBekIsQ0FBaEM7QUFDQSxRQUFNRyxXQUFZRixRQUFRRixhQUFSLElBQXlCRSxRQUFRLENBQUNGLGFBQXBEO0FBQ0EsUUFBSSxDQUFDSSxRQUFMLEVBQWUsS0FBS0MsVUFBTCxHQUFrQixJQUFsQjtBQUNmLFdBQU9ELFdBQVcsS0FBS1YsTUFBTCxHQUFjUSxLQUF6QixHQUFpQyxLQUFLUixNQUE3QztBQUNELEc7O29CQUVEWSxnQiwrQkFBbUI7QUFDakIsV0FBTyxLQUFLRCxVQUFaO0FBQ0QsRzs7Ozs7QUFqQ0dsQixPLENBQ0dvQixZLEdBQWU7QUFDcEJqQixZQUFVLENBRFU7QUFFcEJrQixRQUFNLENBRmM7QUFHcEJqQixTQUFPLEdBSGE7QUFJcEJVLGdCQUFjLEdBSk07QUFLcEJELGlCQUFlO0FBTEssQzs7a0JBbUNULFVBQUNYLEtBQUQ7QUFBQSxTQUFXLElBQUlGLE9BQUosQ0FBWUUsS0FBWixDQUFYO0FBQUEsQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbWF0dHBlcnJ5L1NpdGVzL3BvcG1vdGlvbiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEltcGxlbWVudGF0aW9uIG9mIGh0dHBzOi8vYXJpeWEuaW8vMjAxMy8xMS9qYXZhc2NyaXB0LWtpbmV0aWMtc2Nyb2xsaW5nLXBhcnQtMlxuaW1wb3J0IHsgQWN0aW9uLCB0aW1lU2luY2VMYXN0RnJhbWUgfSBmcm9tICdwb3Btb3Rpb24nO1xuXG5jbGFzcyBJbmVydGlhIGV4dGVuZHMgQWN0aW9uIHtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICB2ZWxvY2l0eTogMCxcbiAgICBmcm9tOiAwLFxuICAgIHBvd2VyOiAwLjgsXG4gICAgdGltZUNvbnN0YW50OiAzNTAsXG4gICAgYXV0b1N0b3BEZWx0YTogMC41XG4gIH07XG5cbiAgb25TdGFydCgpIHtcbiAgICBjb25zdCB7IHZlbG9jaXR5LCBwb3dlciwgbW9kaWZ5VGFyZ2V0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgdGhpcy5hbXBsaXR1ZGUgPSBwb3dlciAqIHZlbG9jaXR5O1xuICAgIHRoaXMudGFyZ2V0ID0gTWF0aC5yb3VuZCh0aGlzLmN1cnJlbnQgKyB0aGlzLmFtcGxpdHVkZSk7XG4gICAgdGhpcy5lbGFwc2VkID0gMDtcblxuICAgIGlmIChtb2RpZnlUYXJnZXQpIHtcbiAgICAgIHRoaXMudGFyZ2V0ID0gbW9kaWZ5VGFyZ2V0KHRoaXMudGFyZ2V0KTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3QgeyBhdXRvU3RvcERlbHRhLCB0aW1lQ29uc3RhbnQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICB0aGlzLmVsYXBzZWQgKz0gdGltZVNpbmNlTGFzdEZyYW1lKCk7XG4gICAgY29uc3QgZGVsdGEgPSAtdGhpcy5hbXBsaXR1ZGUgKiBNYXRoLmV4cCgtdGhpcy5lbGFwc2VkIC8gdGltZUNvbnN0YW50KTtcbiAgICBjb25zdCBpc01vdmluZyA9IChkZWx0YSA+IGF1dG9TdG9wRGVsdGEgfHwgZGVsdGEgPCAtYXV0b1N0b3BEZWx0YSk7XG4gICAgaWYgKCFpc01vdmluZykgdGhpcy5pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICByZXR1cm4gaXNNb3ZpbmcgPyB0aGlzLnRhcmdldCArIGRlbHRhIDogdGhpcy50YXJnZXQ7XG4gIH1cblxuICBpc0FjdGlvbkNvbXBsZXRlKCkge1xuICAgIHJldHVybiB0aGlzLmlzQ29tcGxldGU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgKHByb3BzKSA9PiBuZXcgSW5lcnRpYShwcm9wcyk7XG4iXX0=

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _popmotion = __webpack_require__(5);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ScrollRenderer = function (_Renderer) {
  _inherits(ScrollRenderer, _Renderer);

  function ScrollRenderer() {
    _classCallCheck(this, ScrollRenderer);

    return _possibleConstructorReturn(this, _Renderer.apply(this, arguments));
  }

  ScrollRenderer.prototype.get = function get(key) {
    // Break the cache as scroll can be updated by the user
    this.state[key] = undefined;
    return _Renderer.prototype.get.call(this, key);
  };

  return ScrollRenderer;
}(_popmotion.Renderer);

var ElementScroll = function (_ScrollRenderer) {
  _inherits(ElementScroll, _ScrollRenderer);

  function ElementScroll() {
    _classCallCheck(this, ElementScroll);

    return _possibleConstructorReturn(this, _ScrollRenderer.apply(this, arguments));
  }

  ElementScroll.prototype.onRender = function onRender() {
    var element = this.props.element;
    var _state = this.state,
        top = _state.top,
        left = _state.left;

    element.scrollLeft = left;
    element.scrollTop = top;
  };

  ElementScroll.prototype.onRead = function onRead() {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'top';
    var element = this.props.element;

    return key === 'top' ? element.scrollTop : element.scrollLeft;
  };

  return ElementScroll;
}(ScrollRenderer);

var ViewportScroll = function (_ScrollRenderer2) {
  _inherits(ViewportScroll, _ScrollRenderer2);

  function ViewportScroll() {
    _classCallCheck(this, ViewportScroll);

    return _possibleConstructorReturn(this, _ScrollRenderer2.apply(this, arguments));
  }

  ViewportScroll.prototype.onRender = function onRender() {
    var _state2 = this.state,
        top = _state2.top,
        left = _state2.left;

    if (typeof window !== undefined) window.scrollTo(left, top);
  };

  ViewportScroll.prototype.onRead = function onRead(key) {
    if (typeof window === undefined) return 0;
    return key === 'top' ? window.pageYOffset : window.pageXOffset;
  };

  return ViewportScroll;
}(ScrollRenderer);

exports.default = function (element) {
  return element ? new ElementScroll({ element: element }) : new ViewportScroll();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL3BvcG1vdGlvbi1zY3JvbGwvc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbIlNjcm9sbFJlbmRlcmVyIiwiZ2V0Iiwia2V5Iiwic3RhdGUiLCJ1bmRlZmluZWQiLCJFbGVtZW50U2Nyb2xsIiwib25SZW5kZXIiLCJlbGVtZW50IiwicHJvcHMiLCJ0b3AiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsIm9uUmVhZCIsIlZpZXdwb3J0U2Nyb2xsIiwid2luZG93Iiwic2Nyb2xsVG8iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7O0lBRU1BLGM7Ozs7Ozs7OzsyQkFDSkMsRyxnQkFBSUMsRyxFQUFLO0FBQ1A7QUFDQSxTQUFLQyxLQUFMLENBQVdELEdBQVgsSUFBa0JFLFNBQWxCO0FBQ0EsV0FBTyxvQkFBTUgsR0FBTixZQUFVQyxHQUFWLENBQVA7QUFDRCxHOzs7OztJQUdHRyxhOzs7Ozs7Ozs7MEJBQ0pDLFEsdUJBQVc7QUFBQSxRQUNEQyxPQURDLEdBQ1csS0FBS0MsS0FEaEIsQ0FDREQsT0FEQztBQUFBLGlCQUVhLEtBQUtKLEtBRmxCO0FBQUEsUUFFRE0sR0FGQyxVQUVEQSxHQUZDO0FBQUEsUUFFSUMsSUFGSixVQUVJQSxJQUZKOztBQUdUSCxZQUFRSSxVQUFSLEdBQXFCRCxJQUFyQjtBQUNBSCxZQUFRSyxTQUFSLEdBQW9CSCxHQUFwQjtBQUNELEc7OzBCQUVESSxNLHFCQUFvQjtBQUFBLFFBQWJYLEdBQWEsdUVBQVAsS0FBTztBQUFBLFFBQ1ZLLE9BRFUsR0FDRSxLQUFLQyxLQURQLENBQ1ZELE9BRFU7O0FBRWxCLFdBQVFMLFFBQVEsS0FBVCxHQUFrQkssUUFBUUssU0FBMUIsR0FBc0NMLFFBQVFJLFVBQXJEO0FBQ0QsRzs7O0VBWHlCWCxjOztJQWN0QmMsYzs7Ozs7Ozs7OzJCQUNKUixRLHVCQUFXO0FBQUEsa0JBQ2EsS0FBS0gsS0FEbEI7QUFBQSxRQUNETSxHQURDLFdBQ0RBLEdBREM7QUFBQSxRQUNJQyxJQURKLFdBQ0lBLElBREo7O0FBRVQsUUFBSSxPQUFPSyxNQUFQLEtBQWtCWCxTQUF0QixFQUFpQ1csT0FBT0MsUUFBUCxDQUFnQk4sSUFBaEIsRUFBc0JELEdBQXRCO0FBQ2xDLEc7OzJCQUVESSxNLG1CQUFPWCxHLEVBQUs7QUFDVixRQUFJLE9BQU9hLE1BQVAsS0FBa0JYLFNBQXRCLEVBQWlDLE9BQU8sQ0FBUDtBQUNqQyxXQUFRRixRQUFRLEtBQVQsR0FBa0JhLE9BQU9FLFdBQXpCLEdBQXVDRixPQUFPRyxXQUFyRDtBQUNELEc7OztFQVQwQmxCLGM7O2tCQVlkLFVBQUNPLE9BQUQ7QUFBQSxTQUFhQSxVQUFVLElBQUlGLGFBQUosQ0FBa0IsRUFBRUUsZ0JBQUYsRUFBbEIsQ0FBVixHQUEyQyxJQUFJTyxjQUFKLEVBQXhEO0FBQUEsQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbWF0dHBlcnJ5L1NpdGVzL3BvcG1vdGlvbiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAncG9wbW90aW9uJztcblxuY2xhc3MgU2Nyb2xsUmVuZGVyZXIgZXh0ZW5kcyBSZW5kZXJlciB7XG4gIGdldChrZXkpIHtcbiAgICAvLyBCcmVhayB0aGUgY2FjaGUgYXMgc2Nyb2xsIGNhbiBiZSB1cGRhdGVkIGJ5IHRoZSB1c2VyXG4gICAgdGhpcy5zdGF0ZVtrZXldID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdXBlci5nZXQoa2V5KTtcbiAgfVxufVxuXG5jbGFzcyBFbGVtZW50U2Nyb2xsIGV4dGVuZHMgU2Nyb2xsUmVuZGVyZXIge1xuICBvblJlbmRlcigpIHtcbiAgICBjb25zdCB7IGVsZW1lbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB0b3AsIGxlZnQgfSA9IHRoaXMuc3RhdGU7XG4gICAgZWxlbWVudC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICBlbGVtZW50LnNjcm9sbFRvcCA9IHRvcDtcbiAgfVxuXG4gIG9uUmVhZChrZXkgPSAndG9wJykge1xuICAgIGNvbnN0IHsgZWxlbWVudCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKGtleSA9PT0gJ3RvcCcpID8gZWxlbWVudC5zY3JvbGxUb3AgOiBlbGVtZW50LnNjcm9sbExlZnQ7XG4gIH1cbn1cblxuY2xhc3MgVmlld3BvcnRTY3JvbGwgZXh0ZW5kcyBTY3JvbGxSZW5kZXJlciB7XG4gIG9uUmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdG9wLCBsZWZ0IH0gPSB0aGlzLnN0YXRlO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSB1bmRlZmluZWQpIHdpbmRvdy5zY3JvbGxUbyhsZWZ0LCB0b3ApO1xuICB9XG5cbiAgb25SZWFkKGtleSkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICAgIHJldHVybiAoa2V5ID09PSAndG9wJykgPyB3aW5kb3cucGFnZVlPZmZzZXQgOiB3aW5kb3cucGFnZVhPZmZzZXQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgKGVsZW1lbnQpID0+IGVsZW1lbnQgPyBuZXcgRWxlbWVudFNjcm9sbCh7IGVsZW1lbnQgfSkgOiBuZXcgVmlld3BvcnRTY3JvbGwoKTtcbiJdfQ==

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = spinnable;

var _popmotion = __webpack_require__(5);

var angle = _popmotion.calc.angle;
function spinnable(node, _ref) {
  var _ref$initialRotation = _ref.initialRotation,
      initialRotation = _ref$initialRotation === undefined ? 0 : _ref$initialRotation,
      _ref$friction = _ref.friction,
      friction = _ref$friction === undefined ? 0.4 : _ref$friction,
      transformSpin = _ref.transformSpin,
      onSpin = _ref.onSpin;

  var renderer = (0, _popmotion.css)(node);
  var nodeRotation = (0, _popmotion.value)(initialRotation, function (v) {
    var current = transformSpin ? transformSpin(v) : v;
    if (onSpin) onSpin(current);
    renderer.set('rotate', current);
  });

  function startTracking(e) {
    e.preventDefault();
    var pointerAngle = (0, _popmotion.pointer)(e, {
      transform: function transform(v) {
        var nodePos = node.getBoundingClientRect();
        var nodeCenter = {
          x: nodePos.left + nodePos.width / 2,
          y: nodePos.top + nodePos.height / 2
        };
        var angleFromCenter = angle(nodeCenter, v);

        return angleFromCenter;
      }
    }).start();

    (0, _popmotion.trackOffset)(pointerAngle, {
      from: nodeRotation.get(),
      onUpdate: nodeRotation,
      onStop: function onStop() {
        return pointerAngle.stop();
      }
    }).start();
  }

  function stopTracking() {
    (0, _popmotion.physics)({
      from: nodeRotation.get(),
      velocity: nodeRotation.getVelocity(),
      friction: friction,
      onUpdate: nodeRotation
    }).start();
  }

  node.addEventListener('mousedown', startTracking);
  node.addEventListener('touchstart', startTracking, { passive: false });
  document.addEventListener('mouseup', stopTracking);
  document.addEventListener('touchend', stopTracking);

  return nodeRotation;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhY2thZ2VzL3BvcG1vdGlvbi1zcGlubmFibGUvc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbInNwaW5uYWJsZSIsImFuZ2xlIiwibm9kZSIsImluaXRpYWxSb3RhdGlvbiIsImZyaWN0aW9uIiwidHJhbnNmb3JtU3BpbiIsIm9uU3BpbiIsInJlbmRlcmVyIiwibm9kZVJvdGF0aW9uIiwidiIsImN1cnJlbnQiLCJzZXQiLCJzdGFydFRyYWNraW5nIiwiZSIsInByZXZlbnREZWZhdWx0IiwicG9pbnRlckFuZ2xlIiwidHJhbnNmb3JtIiwibm9kZVBvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm5vZGVDZW50ZXIiLCJ4IiwibGVmdCIsIndpZHRoIiwieSIsInRvcCIsImhlaWdodCIsImFuZ2xlRnJvbUNlbnRlciIsInN0YXJ0IiwiZnJvbSIsImdldCIsIm9uVXBkYXRlIiwib25TdG9wIiwic3RvcCIsInN0b3BUcmFja2luZyIsInZlbG9jaXR5IiwiZ2V0VmVsb2NpdHkiLCJhZGRFdmVudExpc3RlbmVyIiwicGFzc2l2ZSIsImRvY3VtZW50Il0sIm1hcHBpbmdzIjoiOzs7a0JBVXdCQSxTOztBQVZ4Qjs7SUFRUUMsSyxtQkFBQUEsSztBQUVPLFNBQVNELFNBQVQsQ0FBbUJFLElBQW5CLFFBS1o7QUFBQSxrQ0FKREMsZUFJQztBQUFBLE1BSkRBLGVBSUMsd0NBSmlCLENBSWpCO0FBQUEsMkJBSERDLFFBR0M7QUFBQSxNQUhEQSxRQUdDLGlDQUhVLEdBR1Y7QUFBQSxNQUZEQyxhQUVDLFFBRkRBLGFBRUM7QUFBQSxNQUREQyxNQUNDLFFBRERBLE1BQ0M7O0FBQ0QsTUFBTUMsV0FBVyxvQkFBSUwsSUFBSixDQUFqQjtBQUNBLE1BQU1NLGVBQWUsc0JBQU1MLGVBQU4sRUFBdUIsVUFBQ00sQ0FBRCxFQUFPO0FBQ2pELFFBQU1DLFVBQVVMLGdCQUFnQkEsY0FBY0ksQ0FBZCxDQUFoQixHQUFtQ0EsQ0FBbkQ7QUFDQSxRQUFJSCxNQUFKLEVBQVlBLE9BQU9JLE9BQVA7QUFDWkgsYUFBU0ksR0FBVCxDQUFhLFFBQWIsRUFBdUJELE9BQXZCO0FBQ0QsR0FKb0IsQ0FBckI7O0FBTUEsV0FBU0UsYUFBVCxDQUF1QkMsQ0FBdkIsRUFBMEI7QUFDeEJBLE1BQUVDLGNBQUY7QUFDQSxRQUFNQyxlQUFlLHdCQUFRRixDQUFSLEVBQVc7QUFDOUJHLGlCQUFXLG1CQUFDUCxDQUFELEVBQU87QUFDaEIsWUFBTVEsVUFBVWYsS0FBS2dCLHFCQUFMLEVBQWhCO0FBQ0EsWUFBTUMsYUFBYTtBQUNqQkMsYUFBR0gsUUFBUUksSUFBUixHQUFnQkosUUFBUUssS0FBUixHQUFnQixDQURsQjtBQUVqQkMsYUFBR04sUUFBUU8sR0FBUixHQUFlUCxRQUFRUSxNQUFSLEdBQWlCO0FBRmxCLFNBQW5CO0FBSUEsWUFBTUMsa0JBQWtCekIsTUFBTWtCLFVBQU4sRUFBa0JWLENBQWxCLENBQXhCOztBQUVBLGVBQU9pQixlQUFQO0FBQ0Q7QUFWNkIsS0FBWCxFQVdsQkMsS0FYa0IsRUFBckI7O0FBYUEsZ0NBQVlaLFlBQVosRUFBMEI7QUFDeEJhLFlBQU1wQixhQUFhcUIsR0FBYixFQURrQjtBQUV4QkMsZ0JBQVV0QixZQUZjO0FBR3hCdUIsY0FBUTtBQUFBLGVBQU1oQixhQUFhaUIsSUFBYixFQUFOO0FBQUE7QUFIZ0IsS0FBMUIsRUFJR0wsS0FKSDtBQUtEOztBQUVELFdBQVNNLFlBQVQsR0FBd0I7QUFDdEIsNEJBQVE7QUFDTkwsWUFBTXBCLGFBQWFxQixHQUFiLEVBREE7QUFFTkssZ0JBQVUxQixhQUFhMkIsV0FBYixFQUZKO0FBR04vQix3QkFITTtBQUlOMEIsZ0JBQVV0QjtBQUpKLEtBQVIsRUFLR21CLEtBTEg7QUFNRDs7QUFFRHpCLE9BQUtrQyxnQkFBTCxDQUFzQixXQUF0QixFQUFtQ3hCLGFBQW5DO0FBQ0FWLE9BQUtrQyxnQkFBTCxDQUFzQixZQUF0QixFQUFvQ3hCLGFBQXBDLEVBQW1ELEVBQUV5QixTQUFTLEtBQVgsRUFBbkQ7QUFDQUMsV0FBU0YsZ0JBQVQsQ0FBMEIsU0FBMUIsRUFBcUNILFlBQXJDO0FBQ0FLLFdBQVNGLGdCQUFULENBQTBCLFVBQTFCLEVBQXNDSCxZQUF0Qzs7QUFFQSxTQUFPekIsWUFBUDtBQUNEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9tYXR0cGVycnkvU2l0ZXMvcG9wbW90aW9uIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgcG9pbnRlcixcbiAgY2FsYyxcbiAgdmFsdWUsXG4gIGNzcyxcbiAgcGh5c2ljcyxcbiAgdHJhY2tPZmZzZXRcbn0gZnJvbSAncG9wbW90aW9uJztcbmNvbnN0IHsgYW5nbGUgfSA9IGNhbGM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNwaW5uYWJsZShub2RlLCB7XG4gIGluaXRpYWxSb3RhdGlvbiA9IDAsXG4gIGZyaWN0aW9uID0gMC40LFxuICB0cmFuc2Zvcm1TcGluLFxuICBvblNwaW5cbn0pIHtcbiAgY29uc3QgcmVuZGVyZXIgPSBjc3Mobm9kZSk7XG4gIGNvbnN0IG5vZGVSb3RhdGlvbiA9IHZhbHVlKGluaXRpYWxSb3RhdGlvbiwgKHYpID0+IHtcbiAgICBjb25zdCBjdXJyZW50ID0gdHJhbnNmb3JtU3BpbiA/IHRyYW5zZm9ybVNwaW4odikgOiB2O1xuICAgIGlmIChvblNwaW4pIG9uU3BpbihjdXJyZW50KTtcbiAgICByZW5kZXJlci5zZXQoJ3JvdGF0ZScsIGN1cnJlbnQpO1xuICB9KTtcblxuICBmdW5jdGlvbiBzdGFydFRyYWNraW5nKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgcG9pbnRlckFuZ2xlID0gcG9pbnRlcihlLCB7XG4gICAgICB0cmFuc2Zvcm06ICh2KSA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGVQb3MgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBub2RlQ2VudGVyID0ge1xuICAgICAgICAgIHg6IG5vZGVQb3MubGVmdCArIChub2RlUG9zLndpZHRoIC8gMiksXG4gICAgICAgICAgeTogbm9kZVBvcy50b3AgKyAobm9kZVBvcy5oZWlnaHQgLyAyKVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhbmdsZUZyb21DZW50ZXIgPSBhbmdsZShub2RlQ2VudGVyLCB2KTtcblxuICAgICAgICByZXR1cm4gYW5nbGVGcm9tQ2VudGVyO1xuICAgICAgfVxuICAgIH0pLnN0YXJ0KCk7XG5cbiAgICB0cmFja09mZnNldChwb2ludGVyQW5nbGUsIHtcbiAgICAgIGZyb206IG5vZGVSb3RhdGlvbi5nZXQoKSxcbiAgICAgIG9uVXBkYXRlOiBub2RlUm90YXRpb24sXG4gICAgICBvblN0b3A6ICgpID0+IHBvaW50ZXJBbmdsZS5zdG9wKClcbiAgICB9KS5zdGFydCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RvcFRyYWNraW5nKCkge1xuICAgIHBoeXNpY3Moe1xuICAgICAgZnJvbTogbm9kZVJvdGF0aW9uLmdldCgpLFxuICAgICAgdmVsb2NpdHk6IG5vZGVSb3RhdGlvbi5nZXRWZWxvY2l0eSgpLFxuICAgICAgZnJpY3Rpb24sXG4gICAgICBvblVwZGF0ZTogbm9kZVJvdGF0aW9uXG4gICAgfSkuc3RhcnQoKTtcbiAgfVxuXG4gIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3RhcnRUcmFja2luZyk7XG4gIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHN0YXJ0VHJhY2tpbmcsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzdG9wVHJhY2tpbmcpO1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHN0b3BUcmFja2luZyk7XG5cbiAgcmV0dXJuIG5vZGVSb3RhdGlvbjtcbn1cbiJdfQ==

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = timeline;

var _popmotion = __webpack_require__(5);

var getProgressFromValue = _popmotion.calc.getProgressFromValue;
var clamp = _popmotion.transform.clamp;

var clampProgress = clamp(0, 1);

/*
  Flatten arrays, which denote parallel or staggered tweens,
  into a flat set of instructions which reset the playhead
  after each tween.
 */
function flattenArraysToSequence(sequence, segment) {
  if (segment.constructor === Array) {
    var lastArg = segment[segment.length - 1];
    var isStaggered = typeof lastArg === 'number';
    var tweens = isStaggered ? segment.slice(0, -1) : segment;
    var numTweens = tweens.length;
    var offset = 0;

    tweens.forEach(function (item, i) {
      sequence.push(item);

      if (i !== numTweens - 1) {
        var duration = item.getProp('duration');
        offset += isStaggered ? lastArg : 0;
        sequence.push('-' + (duration - offset));
      }
    });
  } else {
    sequence.push(segment);
  }

  return sequence;
}

function timeline(sequence, props) {
  var playhead = 0;
  var duration = 0;

  var markers = sequence.reduce(flattenArraysToSequence, []
  // Convert sequence to relative timings
  ).reduce(function (acc, segment) {
    var typeOfSegment = typeof segment === 'undefined' ? 'undefined' : _typeof(segment);

    // If relative timestamp
    if (typeOfSegment === 'string') {
      playhead += parseFloat(segment);

      // If absolute timestamp
    } else if (typeOfSegment === 'number') {
      playhead = segment;

      // Or if tween, add marker
    } else {
      var to = playhead + segment.getProp('duration');

      acc.push({
        tween: segment,
        from: playhead,
        to: to
      });

      playhead = to;
      duration = Math.max(duration, to);
    }

    return acc;
  }, []
  // Split tweens by target, and convert absolute markers to progress markers
  ).reduce(function (acc, marker) {
    var output = marker.tween.getProp('onUpdate');
    var targetIndex = acc.targets.indexOf(output);

    if (targetIndex === -1) {
      acc.targets.push(output);
      acc.fragments.push([]);
      targetIndex = acc.fragments.length - 1;
    }

    var fragmentList = acc.fragments[targetIndex];

    fragmentList.push({
      tween: marker.tween,
      from: getProgressFromValue(0, duration, marker.from),
      to: getProgressFromValue(0, duration, marker.to)
    });

    if (output.get) {
      acc.initialValues[targetIndex] = output.get();
    }

    return acc;
  }, { initialValues: [], targets: [], fragments: [] });

  var numMarkers = markers.fragments.length;

  return (0, _popmotion.tween)(_extends({
    duration: duration,
    ease: _popmotion.easing.linear
  }, props, {
    onUpdate: function onUpdate(v) {
      // First iterate over output targets, and try to find an active tween
      for (var i = 0; i < numMarkers; i++) {
        var fragments = markers.fragments[i];
        var numFragments = fragments.length;
        var foundActiveFragment = false;
        var prevProgressDistance = Infinity;
        var closestIndex = 0;
        var closestProgress = 0;
        var tweenHasStarted = false;
        var j = 0;

        while (!foundActiveFragment && j < numFragments) {
          var fragment = fragments[j];
          var progress = getProgressFromValue(fragment.from, fragment.to, v);

          // Found an active fragment, execute
          if (progress >= 0 && progress <= 1) {
            foundActiveFragment = true;
            fragment.tween.seek(progress);
          } else {
            if (progress > 1) {
              tweenHasStarted = true;

              var distance = progress < 0 ? Math.abs(progress) : progress - 1;

              if (distance < prevProgressDistance) {
                prevProgressDistance = distance;
                closestProgress = clampProgress(progress);
                closestIndex = j;
              }
            }
          }

          j++;
        }

        if (!foundActiveFragment) {
          var target = markers.targets[i];

          if (tweenHasStarted || !target.set) {
            if (fragments[closestIndex].tween.progress !== closestProgress) fragments[closestIndex].tween.seek(closestProgress);
          } else if (!tweenHasStarted && target.set) {
            if (target.get() !== markers.initialValues[i]) target.set(markers.initialValues[i]);
          }
        }
      }
    }
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,